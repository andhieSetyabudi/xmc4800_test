
xmc4800-CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000089e8  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  080089e8  0c0089e8  000109e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  3 .data         00000100  1ffe8800  0c0089e8  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000798  1ffe8900  0c008ae8  00018900  2**2
                  ALLOC
  5 USB_RAM       00000e00  20000000  20000000  00020000  2**2
                  ALLOC
  6 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  7 .debug_aranges 00000b90  00000000  00000000  00018900  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001b730  00000000  00000000  00019490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000038a8  00000000  00000000  00034bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006eed  00000000  00000000  00038468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00003c8c  00000000  00000000  0003f358  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00007bb2  00000000  00000000  00042fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c8  00000000  00000000  0004ab96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000d93  00000000  00000000  0004b55e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	25 41 00 08 99 02 00 08 99 02 00 08 99 02 00 08     %A..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0089e8 	.word	0x0c0089e8
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000100 	.word	0x00000100
 8000254:	0c0089e8 	.word	0x0c0089e8
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8900 	.word	0x1ffe8900
 8000264:	00000798 	.word	0x00000798
 8000268:	20000000 	.word	0x20000000
 800026c:	00000e00 	.word	0x00000e00
 8000270:	20000e00 	.word	0x20000e00
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08005191 	.word	0x08005191
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800508d 	.word	0x0800508d

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f004 fd1f 	bl	8004cf0 <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f004 fdd1 	bl	8004e58 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f004 fd9c 	bl	8004e1c <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_GetMirrorStatus+0x14>)
 80004e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	50004000 	.word	0x50004000

080004f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004fc:	f7ff fede 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <XMC_SCU_lDelay+0x3c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <XMC_SCU_lDelay+0x40>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	0c9a      	lsrs	r2, r3, #18
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e003      	b.n	8000522 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800051a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3f7      	bcc.n	800051a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2003ffc0 	.word	0x2003ffc0
 8000534:	431bde83 	.word	0x431bde83

08000538 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800053e:	685b      	ldr	r3, [r3, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	50004074 	.word	0x50004074

08000550 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60d3      	str	r3, [r2, #12]
}
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	50004074 	.word	0x50004074

0800056c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f8ad 	bl	80006d4 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800057a:	f000 fad3 	bl	8000b24 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000586:	f000 fb0b 	bl	8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800058a:	bf00      	nop
 800058c:	f000 faf6 	bl	8000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f7      	bne.n	800058c <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a5b      	ldrb	r3, [r3, #9]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f911 	bl	80007c8 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005a6:	bf00      	nop
 80005a8:	f7ff ff98 	bl	80004dc <XMC_SCU_GetMirrorStatus>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1fa      	bne.n	80005a8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa76 	bl	8000aa8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7c1b      	ldrb	r3, [r3, #16]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f91f 	bl	8000804 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7c5b      	ldrb	r3, [r3, #17]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f942 	bl	8000854 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7c9b      	ldrb	r3, [r3, #18]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f929 	bl	800082c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7cdb      	ldrb	r3, [r3, #19]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f94c 	bl	800087c <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00a      	beq.n	8000602 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005ec:	f000 fb10 	bl	8000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005f0:	bf00      	nop
 80005f2:	f000 fb35 	bl	8000c60 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f7      	bne.n	80005f2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d017      	beq.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000618:	f000 fb46 	bl	8000ca8 <XMC_SCU_CLOCK_DisableSystemPll>
 800061c:	e014      	b.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800061e:	f000 fb33 	bl	8000c88 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8899      	ldrh	r1, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062e:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000634:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	462a      	mov	r2, r5
 8000642:	4623      	mov	r3, r4
 8000644:	f000 fb40 	bl	8000cc8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d103      	bne.n	800065a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000652:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000656:	f000 f83d 	bl	80006d4 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800065a:	f7ff fe2f 	bl	80002bc <SystemCoreClockUpdate>
}
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bdb0      	pop	{r4, r5, r7, pc}

08000664 <XMC_SCU_RESET_AssertPeripheralReset>:
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	0f1b      	lsrs	r3, r3, #28
 8000670:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000678:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	461a      	mov	r2, r3
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <XMC_SCU_RESET_AssertPeripheralReset+0x34>)
 8000688:	4413      	add	r3, r2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	50004410 	.word	0x50004410

0800069c <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0f1b      	lsrs	r3, r3, #28
 80006a8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006b0:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	461a      	mov	r2, r3
 80006be:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006c0:	4413      	add	r3, r2
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	50004414 	.word	0x50004414

080006d4 <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	50004600 	.word	0x50004600

080006fc <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4313      	orrs	r3, r2
 8000712:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	50004600 	.word	0x50004600

08000724 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800072c:	4906      	ldr	r1, [pc, #24]	; (8000748 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4313      	orrs	r3, r2
 800073a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	50004600 	.word	0x50004600

0800074c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d108      	bne.n	800076e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	60d3      	str	r3, [r2, #12]
 800076c:	e007      	b.n	800077e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800076e:	4a06      	ldr	r2, [pc, #24]	; (8000788 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	60d3      	str	r3, [r2, #12]
  }
}
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	50004710 	.word	0x50004710

0800078c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000796:	bf00      	nop
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800079a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f8      	bne.n	8000798 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007a6:	4907      	ldr	r1, [pc, #28]	; (80007c4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007b0:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007b2:	4313      	orrs	r3, r2
 80007b4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	50004000 	.word	0x50004000
 80007c4:	50004300 	.word	0x50004300

080007c8 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007d2:	bf00      	nop
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f8      	bne.n	80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007e2:	4907      	ldr	r1, [pc, #28]	; (8000800 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004000 	.word	0x50004000
 8000800:	50004300 	.word	0x50004300

08000804 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800080c:	4906      	ldr	r1, [pc, #24]	; (8000828 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800081a:	4313      	orrs	r3, r2
 800081c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	50004600 	.word	0x50004600

0800082c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000834:	4906      	ldr	r1, [pc, #24]	; (8000850 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000838:	6a1b      	ldr	r3, [r3, #32]
 800083a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000842:	4313      	orrs	r3, r2
 8000844:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	50004600 	.word	0x50004600

08000854 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800085c:	4906      	ldr	r1, [pc, #24]	; (8000878 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800086a:	4313      	orrs	r3, r2
 800086c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	50004600 	.word	0x50004600

0800087c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000884:	4906      	ldr	r1, [pc, #24]	; (80008a0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000892:	4313      	orrs	r3, r2
 8000894:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	50004600 	.word	0x50004600

080008a4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ac:	4906      	ldr	r1, [pc, #24]	; (80008c8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ba:	4313      	orrs	r3, r2
 80008bc:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	50004600 	.word	0x50004600

080008cc <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008d4:	4906      	ldr	r1, [pc, #24]	; (80008f0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	50004600 	.word	0x50004600

080008f4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008fc:	4906      	ldr	r1, [pc, #24]	; (8000918 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800090a:	4313      	orrs	r3, r2
 800090c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	50004600 	.word	0x50004600

0800091c <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8000924:	4906      	ldr	r1, [pc, #24]	; (8000940 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800092a:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8000932:	4313      	orrs	r3, r2
 8000934:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	50004600 	.word	0x50004600

08000944 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	6053      	str	r3, [r2, #4]
}
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_GatePeripheralClock>:
}

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0f1b      	lsrs	r3, r3, #28
 8000970:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000978:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	461a      	mov	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <XMC_SCU_CLOCK_GatePeripheralClock+0x34>)
 8000988:	4413      	add	r3, r2
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	50004644 	.word	0x50004644

0800099c <XMC_SCU_CLOCK_UngatePeripheralClock>:

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	0f1b      	lsrs	r3, r3, #28
 80009a8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009b0:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	461a      	mov	r2, r3
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009c0:	4413      	add	r3, r2
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	601a      	str	r2, [r3, #0]
}
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	50004648 	.word	0x50004648

080009d4 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80009d8:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009e2:	f023 0302 	bic.w	r3, r3, #2
 80009e6:	6153      	str	r3, [r2, #20]
}
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	50004710 	.word	0x50004710

080009f4 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a0a:	bf00      	nop
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f9      	beq.n	8000a0c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a24:	491e      	ldr	r1, [pc, #120]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a32:	4313      	orrs	r3, r2
 8000a34:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	f023 0310 	bic.w	r3, r3, #16
 8000a4c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a5a:	bf00      	nop
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0f9      	beq.n	8000a5c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f023 0301 	bic.w	r3, r3, #1
 8000a72:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000a74:	bf00      	nop
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f9      	bne.n	8000a76 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a8c:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	60da      	str	r2, [r3, #12]
}
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	50004710 	.word	0x50004710
 8000aa4:	50004160 	.word	0x50004160

08000aa8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000abc:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10e      	bne.n	8000ae2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ace:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000ad0:	2064      	movs	r0, #100	; 0x64
 8000ad2:	f7ff fd0f 	bl	80004f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000ae2:	2064      	movs	r0, #100	; 0x64
 8000ae4:	f7ff fd06 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	50004710 	.word	0x50004710

08000af4 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <XMC_SCU_POWER_EnableUsb+0x14>)
 8000afa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000afe:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	50004200 	.word	0x50004200

08000b0c <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <XMC_SCU_POWER_DisableUsb+0x14>)
 8000b12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b16:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif
}
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	50004200 	.word	0x50004200

08000b24 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d109      	bne.n	8000b48 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b3a:	bf00      	nop
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f9      	beq.n	8000b3c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00a      	beq.n	8000b6a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b5c:	bf00      	nop
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f9      	bne.n	8000b5e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	50004200 	.word	0x50004200
 8000b78:	50004400 	.word	0x50004400

08000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf0c      	ite	eq
 8000b8c:	2301      	moveq	r3, #1
 8000b8e:	2300      	movne	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	50004300 	.word	0x50004300

08000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ba4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ba8:	f7ff fcd2 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bb6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000bb8:	bf00      	nop
 8000bba:	f7ff fcbd 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f8      	beq.n	8000bba <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bcc:	f7ff fcc0 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bd6:	bf00      	nop
 8000bd8:	f7ff fcae 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f8      	beq.n	8000bd8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000be6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bea:	f7ff fcb1 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bfa:	bf00      	nop
 8000bfc:	f7ff fc9c 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f8      	beq.n	8000bfc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	50004300 	.word	0x50004300

08000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c20:	4d0d      	ldr	r5, [pc, #52]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c2a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c2e:	f004 f8f5 	bl	8004e1c <OSCHP_GetFrequency>
 8000c32:	4602      	mov	r2, r0
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c36:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3a:	0d1b      	lsrs	r3, r3, #20
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c40:	4323      	orrs	r3, r4
 8000c42:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c46:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c4e:	6053      	str	r3, [r2, #4]
}
 8000c50:	bdb0      	pop	{r4, r5, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	50004710 	.word	0x50004710
 8000c58:	50004700 	.word	0x50004700
 8000c5c:	6b5fca6b 	.word	0x6b5fca6b

08000c60 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c6c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c70:	bf0c      	ite	eq
 8000c72:	2301      	moveq	r3, #1
 8000c74:	2300      	movne	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	50004710 	.word	0x50004710

08000c88 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	6053      	str	r3, [r2, #4]
}
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	50004710 	.word	0x50004710

08000ca8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6053      	str	r3, [r2, #4]
}
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	50004710 	.word	0x50004710

08000cc8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	81fb      	strh	r3, [r7, #14]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd35 	bl	800074c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	f040 808b 	bne.w	8000e00 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cf0:	f004 f894 	bl	8004e1c <OSCHP_GetFrequency>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cfc:	0c9b      	lsrs	r3, r3, #18
 8000cfe:	059b      	lsls	r3, r3, #22
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e002      	b.n	8000d0a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d04:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d08:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	fb02 f203 	mul.w	r2, r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	4a4b      	ldr	r2, [pc, #300]	; (8000e4c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	0d9b      	lsrs	r3, r3, #22
 8000d26:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d28:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2a:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d34:	bf00      	nop
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f9      	beq.n	8000d36 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d42:	4a43      	ldr	r2, [pc, #268]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d4e:	4940      	ldr	r1, [pc, #256]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d56:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	3a01      	subs	r2, #1
 8000d5c:	0212      	lsls	r2, r2, #8
 8000d5e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d66:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d72:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d7e:	4a34      	ldr	r2, [pc, #208]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f023 0310 	bic.w	r3, r3, #16
 8000d88:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d8a:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d96:	bf00      	nop
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f9      	beq.n	8000d98 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da4:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000db0:	bf00      	nop
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	0d9b      	lsrs	r3, r3, #22
 8000dca:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dcc:	6a3a      	ldr	r2, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d202      	bcs.n	8000dda <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dd4:	6938      	ldr	r0, [r7, #16]
 8000dd6:	f000 f845 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	085b      	lsrs	r3, r3, #1
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	0d9b      	lsrs	r3, r3, #22
 8000de8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dea:	6a3a      	ldr	r2, [r7, #32]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d202      	bcs.n	8000df8 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000df2:	6938      	ldr	r0, [r7, #16]
 8000df4:	f000 f836 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000df8:	6a38      	ldr	r0, [r7, #32]
 8000dfa:	f000 f833 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000dfe:	e01c      	b.n	8000e3a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e12:	bf00      	nop
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f9      	beq.n	8000e14 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e2c:	bf00      	nop
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	60da      	str	r2, [r3, #12]
}
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	aaaaaaab 	.word	0xaaaaaaab
 8000e50:	50004710 	.word	0x50004710
 8000e54:	f08080ff 	.word	0xf08080ff
 8000e58:	88888889 	.word	0x88888889
 8000e5c:	b60b60b7 	.word	0xb60b60b7
 8000e60:	50004160 	.word	0x50004160

08000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e6c:	490b      	ldr	r1, [pc, #44]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e80:	bf00      	nop
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e8e:	2032      	movs	r0, #50	; 0x32
 8000e90:	f7ff fb30 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	50004710 	.word	0x50004710

08000ea0 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
 8000eac:	4613      	mov	r3, r2
 8000eae:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2303      	movs	r3, #3
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000eca:	78bb      	ldrb	r3, [r7, #2]
 8000ecc:	78f9      	ldrb	r1, [r7, #3]
 8000ece:	0049      	lsls	r1, r1, #1
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01e      	b.n	8000f34 <XMC_USBD_lDeviceActive+0x50>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <XMC_USBD_lDeviceActive+0x68>)
 8000efa:	2134      	movs	r1, #52	; 0x34
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10c      	bne.n	8000f2a <XMC_USBD_lDeviceActive+0x46>
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <XMC_USBD_lDeviceActive+0x68>)
 8000f14:	2134      	movs	r1, #52	; 0x34
 8000f16:	fb01 f303 	mul.w	r3, r1, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <XMC_USBD_lDeviceActive+0x4a>
    {
      result = 1U;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73bb      	strb	r3, [r7, #14]
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj)
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7b1b      	ldrb	r3, [r3, #12]
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d3db      	bcc.n	8000ef6 <XMC_USBD_lDeviceActive+0x12>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
    }
  }
  return result;
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	1ffe8a58 	.word	0x1ffe8a58

08000f50 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num, const uint32_t byte_count)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b08b      	sub	sp, #44	; 0x2c
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2234      	movs	r2, #52	; 0x34
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	4a34      	ldr	r2, [pc, #208]	; (8001034 <XMC_USBD_lReadFifo+0xe4>)
 8000f64:	4413      	add	r3, r2
 8000f66:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8000f68:	4b32      	ldr	r3, [pc, #200]	; (8001034 <XMC_USBD_lReadFifo+0xe4>)
 8000f6a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8000f70:	4a30      	ldr	r2, [pc, #192]	; (8001034 <XMC_USBD_lReadFifo+0xe4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3370      	adds	r3, #112	; 0x70
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8000f8c:	7b7b      	ldrb	r3, [r7, #13]
 8000f8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d048      	beq.n	800102a <XMC_USBD_lReadFifo+0xda>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d044      	beq.n	800102a <XMC_USBD_lReadFifo+0xda>
    /*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U; i < word_count; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa4:	e00a      	b.n	8000fbc <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t *)ep->xferBuffer) + i) = *fifo;
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	601a      	str	r2, [r3, #0]
    /*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U; i < word_count; i++)
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	3301      	adds	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3f0      	bcc.n	8000fa6 <XMC_USBD_lReadFifo+0x56>
    {
      *(((uint32_t *)ep->xferBuffer) + i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count != temp_word_count)
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d022      	beq.n	8001012 <XMC_USBD_lReadFifo+0xc2>
    {
      temp_data = *fifo;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	613b      	str	r3, [r7, #16]
      for (i = 0U; (temp_word_count + i) < byte_count; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd6:	e016      	b.n	8001006 <XMC_USBD_lReadFifo+0xb6>
      {
        ep->xferBuffer[(word_count << 2) + i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	0099      	lsls	r1, r3, #2
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	440b      	add	r3, r1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe8:	00d2      	lsls	r2, r2, #3
 8000fea:	4611      	mov	r1, r2
 8000fec:	22ff      	movs	r2, #255	; 0xff
 8000fee:	fa02 f101 	lsl.w	r1, r2, r1
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ff8:	00c9      	lsls	r1, r1, #3
 8000ffa:	40ca      	lsrs	r2, r1
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	701a      	strb	r2, [r3, #0]
    }
    /* space is not devidable by 4 */
    if (byte_count != temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U; (temp_word_count + i) < byte_count; i++)
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	3301      	adds	r3, #1
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	441a      	add	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d3e2      	bcc.n	8000fd8 <XMC_USBD_lReadFifo+0x88>
        ep->xferBuffer[(word_count << 2) + i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	441a      	add	r2, r3
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	441a      	add	r2, r3
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800102a:	372c      	adds	r7, #44	; 0x2c
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	1ffe8a58 	.word	0x1ffe8a58

08001038 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <XMC_USBD_lWriteFifo+0xa0>)
 800104c:	3378      	adds	r3, #120	; 0x78
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <XMC_USBD_lWriteFifo+0xa0>)
 8001060:	336a      	adds	r3, #106	; 0x6a
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e023      	b.n	80010ca <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3303      	adds	r3, #3
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 800108a:	893b      	ldrh	r3, [r7, #8]
 800108c:	461a      	mov	r2, r3
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	429a      	cmp	r2, r3
 8001092:	d204      	bcs.n	800109e <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count; ep->xferBuffer += 4U)
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	e00c      	b.n	80010be <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t *)ep->xferBuffer;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	601a      	str	r2, [r3, #0]
      i++;
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3301      	adds	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count; ep->xferBuffer += 4U)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	1d1a      	adds	r2, r3, #4
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3ee      	bcc.n	80010a4 <XMC_USBD_lWriteFifo+0x6c>
    {
      *fifo = *(uint32_t *)ep->xferBuffer;
      i++;
    }
    result = byte_count;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	617b      	str	r3, [r7, #20]
  }
  return result;
 80010ca:	697b      	ldr	r3, [r7, #20]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3724      	adds	r7, #36	; 0x24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	1ffe8a58 	.word	0x1ffe8a58

080010dc <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;
  uint32_t count;
  data.d32 = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f043 0320 	orr.w	r3, r3, #32
 80010f0:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	019b      	lsls	r3, r3, #6
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8001106:	4313      	orrs	r3, r2
 8001108:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <XMC_USBD_lFlushTXFifo+0x80>)
 800110c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	611a      	str	r2, [r3, #16]
  for (count = 0U; count < 1000U; count++) {}
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e002      	b.n	8001120 <XMC_USBD_lFlushTXFifo+0x44>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001126:	d3f8      	bcc.n	800111a <XMC_USBD_lFlushTXFifo+0x3e>
  do
  {
    data.d32 = xmc_device.global_register->grstctl;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <XMC_USBD_lFlushTXFifo+0x80>)
 800112a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	60bb      	str	r3, [r7, #8]
  }
  while (data.b.txfflsh);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f3      	bne.n	8001128 <XMC_USBD_lFlushTXFifo+0x4c>
  count = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8001144:	bf00      	nop
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	60fa      	str	r2, [r7, #12]
 800114c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001150:	d3f9      	bcc.n	8001146 <XMC_USBD_lFlushTXFifo+0x6a>
  {
    /* wait 3 phy clocks */
  }
}
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	1ffe8a58 	.word	0x1ffe8a58

08001160 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  volatile grstctl_t data;
  uint32_t count;

  data.d32 = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <XMC_USBD_lFlushRXFifo+0x64>)
 8001174:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++) {}
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	e002      	b.n	8001188 <XMC_USBD_lFlushRXFifo+0x28>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800118e:	d3f8      	bcc.n	8001182 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <XMC_USBD_lFlushRXFifo+0x64>)
 8001192:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	603b      	str	r3, [r7, #0]
  }
  while (data.b.rxfflsh);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e9      	bne.n	800117c <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 80011ac:	bf00      	nop
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b8:	d3f9      	bcc.n	80011ae <XMC_USBD_lFlushRXFifo+0x4e>
  {
    /* wait 3 phy clocks */
  }
}
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	1ffe8a58 	.word	0x1ffe8a58

080011c8 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 80011ce:	2301      	movs	r3, #1
 80011d0:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	713b      	strb	r3, [r7, #4]
  while ( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS) && ((xmc_device.txfifomsk & mask) != 0U))
 80011da:	e005      	b.n	80011e8 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	80fb      	strh	r3, [r7, #6]
    i++;
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	3301      	adds	r3, #1
 80011e6:	717b      	strb	r3, [r7, #5]
static uint8_t XMC_USBD_lAssignTXFifo(void)
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while ( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS) && ((xmc_device.txfifomsk & mask) != 0U))
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d807      	bhi.n	80011fe <XMC_USBD_lAssignTXFifo+0x36>
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <XMC_USBD_lAssignTXFifo+0x6c>)
 80011f0:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4013      	ands	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ee      	bne.n	80011dc <XMC_USBD_lAssignTXFifo+0x14>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001200:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	4013      	ands	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10a      	bne.n	8001224 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001210:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	4313      	orrs	r3, r2
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <XMC_USBD_lAssignTXFifo+0x6c>)
 800121c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result = i;
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8001224:	793b      	ldrb	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	1ffe8a58 	.word	0x1ffe8a58

08001238 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <XMC_USBD_lUnassignFifo+0x34>)
 8001244:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2101      	movs	r1, #1
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	b29b      	uxth	r3, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	b29b      	uxth	r3, r3
 8001256:	4013      	ands	r3, r2
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <XMC_USBD_lUnassignFifo+0x34>)
 800125c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	1ffe8a58 	.word	0x1ffe8a58

08001270 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;

  data.d32 =  0U;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6892      	ldr	r2, [r2, #8]
 800128a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800128e:	4293      	cmp	r3, r2
 8001290:	d909      	bls.n	80012a6 <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6892      	ldr	r2, [r2, #8]
 800129a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800129e:	441a      	add	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
 80012a4:	e003      	b.n	80012ae <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d119      	bne.n	80012f0 <XMC_USBD_lStartReadXfer+0x80>
  {
    /* Setup the endpoint to receive 3 setup packages and one normal package.*/
    /* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t *)&data;
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	7893      	ldrb	r3, [r2, #2]
 80012c6:	2101      	movs	r1, #1
 80012c8:	f361 03c4 	bfi	r3, r1, #3, #2
 80012cc:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	78d3      	ldrb	r3, [r2, #3]
 80012d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012d6:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012e2:	b2d9      	uxtb	r1, r3
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	7813      	ldrb	r3, [r2, #0]
 80012e8:	f361 0306 	bfi	r3, r1, #0, #7
 80012ec:	7013      	strb	r3, [r2, #0]
 80012ee:	e033      	b.n	8001358 <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f36f 0312 	bfc	r3, #0, #19
 80012fe:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8001300:	8a7b      	ldrh	r3, [r7, #18]
 8001302:	2201      	movs	r2, #1
 8001304:	f362 03cc 	bfi	r3, r2, #3, #10
 8001308:	827b      	strh	r3, [r7, #18]
 800130a:	e025      	b.n	8001358 <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize - (uint32_t)1U)) / ep->maxPacketSize);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6852      	ldr	r2, [r2, #4]
 800131a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	4413      	add	r3, r2
 8001322:	3b01      	subs	r3, #1
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6852      	ldr	r2, [r2, #4]
 8001328:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001338:	b29a      	uxth	r2, r3
 800133a:	8a7b      	ldrh	r3, [r7, #18]
 800133c:	f362 03cc 	bfi	r3, r2, #3, #10
 8001340:	827b      	strh	r3, [r7, #18]
      data.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f362 0312 	bfi	r3, r2, #0, #19
 8001356:	613b      	str	r3, [r7, #16]
    }
  }
  if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <XMC_USBD_lStartReadXfer+0x170>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	7b5b      	ldrb	r3, [r3, #13]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <XMC_USBD_lStartReadXfer+0x174>)
 800136e:	3370      	adds	r3, #112	; 0x70
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800137a:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <XMC_USBD_lStartReadXfer+0x174>)
 8001388:	3370      	adds	r3, #112	; 0x70
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	611a      	str	r2, [r3, #16]

  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <XMC_USBD_lStartReadXfer+0x174>)
 80013a0:	3370      	adds	r3, #112	; 0x70
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ba:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <XMC_USBD_lStartReadXfer+0x174>)
 80013c8:	3370      	adds	r3, #112	; 0x70
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	1ffe8938 	.word	0x1ffe8938
 80013e4:	1ffe8a58 	.word	0x1ffe8a58

080013e8 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;

  size.d32 = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4a5d      	ldr	r2, [pc, #372]	; (8001574 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001400:	336a      	adds	r3, #106	; 0x6a
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6892      	ldr	r2, [r2, #8]
 8001418:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800141c:	4293      	cmp	r3, r2
 800141e:	d204      	bcs.n	800142a <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
 8001428:	e008      	b.n	800143c <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6892      	ldr	r2, [r2, #8]
 8001432:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001436:	441a      	add	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	d109      	bne.n	8001458 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f36f 0312 	bfc	r3, #0, #19
 800144a:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 800144c:	89fb      	ldrh	r3, [r7, #14]
 800144e:	2201      	movs	r2, #1
 8001450:	f362 03cc 	bfi	r3, r2, #3, #10
 8001454:	81fb      	strh	r3, [r7, #14]
 8001456:	e06a      	b.n	800152e <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d110      	bne.n	8001488 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 8001466:	89fb      	ldrh	r3, [r7, #14]
 8001468:	2201      	movs	r2, #1
 800146a:	f362 03cc 	bfi	r3, r2, #3, #10
 800146e:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f362 0312 	bfi	r3, r2, #0, #19
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e02b      	b.n	80014e0 <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f362 0312 	bfi	r3, r2, #0, #19
 800149c:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U)) /
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4413      	add	r3, r2
                                 ep->maxPacketSize);
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6852      	ldr	r2, [r2, #4]
 80014c6:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 80014ca:	b2d2      	uxtb	r2, r2
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U)) /
 80014cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	f362 03cc 	bfi	r3, r2, #3, #10
 80014de:	81fb      	strh	r3, [r7, #14]
                                 ep->maxPacketSize);
    }
    if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <XMC_USBD_lStartWriteXfer+0x190>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	7b5b      	ldrb	r3, [r3, #13]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10b      	bne.n	8001502 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <XMC_USBD_lStartWriteXfer+0x18c>)
 80014f6:	336a      	adds	r3, #106	; 0x6a
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001500:	615a      	str	r2, [r3, #20]
    }
    if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <XMC_USBD_lStartWriteXfer+0x190>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	7b5b      	ldrb	r3, [r3, #13]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d110      	bne.n	800152e <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
      xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <XMC_USBD_lStartWriteXfer+0x18c>)
 800150e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001514:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001518:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	4610      	mov	r0, r2
 8001526:	2201      	movs	r2, #1
 8001528:	4082      	lsls	r2, r0
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <XMC_USBD_lStartWriteXfer+0x18c>)
 800153a:	336a      	adds	r3, #106	; 0x6a
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154a:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001560:	336a      	adds	r3, #106	; 0x6a
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	601a      	str	r2, [r3, #0]
}
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	1ffe8a58 	.word	0x1ffe8a58
 8001578:	1ffe8938 	.word	0x1ffe8938

0800157c <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;

  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 8001586:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 800158e:	7d3b      	ldrb	r3, [r7, #20]
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 8001598:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U; i < (uint8_t)XMC_USBD_NUM_EPS; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	e01a      	b.n	80015dc <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 80015a6:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	3370      	adds	r3, #112	; 0x70
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
    epctl.b.snak = 1U;
 80015b6:	7efb      	ldrb	r3, [r7, #27]
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	76fb      	strb	r3, [r7, #27]
    epctl.b.stall = 0U;
 80015be:	7ebb      	ldrb	r3, [r7, #26]
 80015c0:	f36f 1345 	bfc	r3, #5, #1
 80015c4:	76bb      	strb	r3, [r7, #26]
    xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 80015c6:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3370      	adds	r3, #112	; 0x70
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	601a      	str	r2, [r3, #0]
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U; i < (uint8_t)XMC_USBD_NUM_EPS; i++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d9e1      	bls.n	80015a6 <XMC_USBD_lHandleUSBReset+0x2a>
    xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 80015e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80015e8:	2240      	movs	r2, #64	; 0x40
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */
  gnptxfsiz.d32 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 80015f0:	2310      	movs	r3, #16
 80015f2:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 80015fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U; i < (uint8_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001602:	2301      	movs	r3, #1
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e011      	b.n	800162c <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i - 1U] = (uint32_t)(((256U + (i * (64U))) / 4U) | ((uint32_t)16U << 16U));
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 800160a:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b01      	subs	r3, #1
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	3204      	adds	r2, #4
 8001616:	0192      	lsls	r2, r2, #6
 8001618:	0892      	lsrs	r2, r2, #2
 800161a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800161e:	3340      	adds	r3, #64	; 0x40
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	605a      	str	r2, [r3, #4]
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U; i < (uint8_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b06      	cmp	r3, #6
 8001630:	d9ea      	bls.n	8001608 <XMC_USBD_lHandleUSBReset+0x8c>
  {
    xmc_device.global_register->dtxfsiz[i - 1U] = (uint32_t)(((256U + (i * (64U))) / 4U) | ((uint32_t)16U << 16U));
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8001632:	2010      	movs	r0, #16
 8001634:	f7ff fd52 	bl	80010dc <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fd4f 	bl	80010dc <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 800163e:	f7ff fd8f 	bl	8001160 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */
  daint.d32 = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 8001646:	7b3b      	ldrb	r3, [r7, #12]
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 8001658:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001660:	200f      	movs	r0, #15
 8001662:	f000 fbf1 	bl	8001e48 <XMC_USBD_EnableEventOUTEP>
                             (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8001666:	200f      	movs	r0, #15
 8001668:	f000 fc06 	bl	8001e78 <XMC_USBD_EnableEventINEP>
                            (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */
  dcfg.d32 = xmc_device.device_register->dcfg;
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 800166e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 8001676:	893b      	ldrh	r3, [r7, #8]
 8001678:	f36f 130a 	bfc	r3, #4, #7
 800167c:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 8001680:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	601a      	str	r2, [r3, #0]

  if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7b5b      	ldrb	r3, [r3, #13]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d104      	bne.n	800169a <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 8001692:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001696:	2200      	movs	r2, #0
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	f022 0210 	bic.w	r2, r2, #16
 80016a2:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	f022 0208 	bic.w	r2, r2, #8
 80016ac:	605a      	str	r2, [r3, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <XMC_USBD_lHandleUSBReset+0x148>)
 80016b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016b4:	2004      	movs	r0, #4
 80016b6:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 80016b8:	2004      	movs	r0, #4
 80016ba:	f000 fb1f 	bl	8001cfc <XMC_USBD_ClearEvent>
}
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	1ffe8a58 	.word	0x1ffe8a58

080016c8 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <XMC_USBD_lHandleOTGInt+0x44>)
 80016d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 80016d8:	793b      	ldrb	r3, [r7, #4]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00b      	beq.n	80016fc <XMC_USBD_lHandleOTGInt+0x34>
  {
    xmc_device.IsPowered = 0U;
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <XMC_USBD_lHandleOTGInt+0x44>)
 80016e6:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80016ea:	f36f 0382 	bfc	r3, #2, #1
 80016ee:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <XMC_USBD_lHandleOTGInt+0x44>)
 80016f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016f8:	2001      	movs	r0, #1
 80016fa:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fb60 	bl	8001dc4 <XMC_USBD_lClearEventOTG>

}
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	1ffe8a58 	.word	0x1ffe8a58

08001710 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;

  epctl.d32 = xmc_device.endpoint_in_register[0U]->diepctl;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <XMC_USBD_lHandleEnumDone+0x74>)
 8001718:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	f36f 030a 	bfc	r3, #0, #11
 8001726:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <XMC_USBD_lHandleEnumDone+0x74>)
 800172a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <XMC_USBD_lHandleEnumDone+0x74>)
 8001734:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8001740:	4a10      	ldr	r2, [pc, #64]	; (8001784 <XMC_USBD_lHandleEnumDone+0x74>)
 8001742:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <XMC_USBD_lHandleEnumDone+0x74>)
 8001750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001754:	2002      	movs	r0, #2
 8001756:	4798      	blx	r3

  /* Set Trim */
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <XMC_USBD_lHandleEnumDone+0x74>)
 800175a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001762:	787b      	ldrb	r3, [r7, #1]
 8001764:	2209      	movs	r2, #9
 8001766:	f362 0385 	bfi	r3, r2, #2, #4
 800176a:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <XMC_USBD_lHandleEnumDone+0x74>)
 800176e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8001776:	200b      	movs	r0, #11
 8001778:	f000 fac0 	bl	8001cfc <XMC_USBD_ClearEvent>
}
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	1ffe8a58 	.word	0x1ffe8a58

08001788 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;

  daint.d32 = xmc_device.device_register->daint;
 8001790:	4b6a      	ldr	r3, [pc, #424]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001792:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	61fb      	str	r3, [r7, #28]

  daintmsk.d32 = xmc_device.device_register->daintmsk;
 800179a:	4b68      	ldr	r3, [pc, #416]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 800179c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	61bb      	str	r3, [r7, #24]

  doepmsk.d32 = xmc_device.device_register->doepmsk;
 80017a4:	4b65      	ldr	r3, [pc, #404]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 80017a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	617b      	str	r3, [r7, #20]

  mask = daint.ep.out & daintmsk.ep.out;
 80017ae:	8bfa      	ldrh	r2, [r7, #30]
 80017b0:	8b7b      	ldrh	r3, [r7, #26]
 80017b2:	4013      	ands	r3, r2
 80017b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]

  while ((uint16_t)mask >> ep_num)
 80017c0:	e0ae      	b.n	8001920 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 80017c2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80017c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017c8:	fa42 f303 	asr.w	r3, r2, r3
 80017cc:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 80017ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 80017d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 809c 	beq.w	8001916 <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 80017de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017e2:	2234      	movs	r2, #52	; 0x34
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 80017ea:	4413      	add	r3, r2
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80017ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017f2:	4a52      	ldr	r2, [pc, #328]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 80017f4:	3370      	adds	r3, #112	; 0x70
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7b5b      	ldrb	r3, [r3, #13]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d108      	bne.n	800181e <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 800180c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001810:	4a4a      	ldr	r2, [pc, #296]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001812:	3370      	adds	r3, #112	; 0x70
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	60fb      	str	r3, [r7, #12]
      }
      /* Setup Phase Complete */
      if (doepint.b.setup)
 800181e:	7c3b      	ldrb	r3, [r7, #16]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d033      	beq.n	8001892 <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	7913      	ldrb	r3, [r2, #4]
 800182e:	f36f 1345 	bfc	r3, #5, #1
 8001832:	7113      	strb	r3, [r2, #4]
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7b5b      	ldrb	r3, [r3, #13]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10e      	bne.n	800185a <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
          ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
                                              (uint32_t)((deptsiz0_data_t *)&doeptsiz)->b.supcnt) * (uint32_t)XMC_USBD_SETUP_SIZE);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
          ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800184a:	4613      	mov	r3, r2
 800184c:	075b      	lsls	r3, r3, #29
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	f103 0218 	add.w	r2, r3, #24
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	611a      	str	r2, [r3, #16]
                                              (uint32_t)((deptsiz0_data_t *)&doeptsiz)->b.supcnt) * (uint32_t)XMC_USBD_SETUP_SIZE);
        }
        if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7b5b      	ldrb	r3, [r3, #13]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d106      	bne.n	8001870 <XMC_USBD_lHandleOEPInt+0xe8>
        {
          ep->outBytesAvailable += ep->xferCount;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	441a      	add	r2, r3
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	611a      	str	r2, [r3, #16]
        }
        ep->outInUse = 0U;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	f022 0210 	bic.w	r2, r2, #16
 8001878:	605a      	str	r2, [r3, #4]
        xmc_device.EndpointEvent_cb(0U, XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 800187c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001880:	2000      	movs	r0, #0
 8001882:	2100      	movs	r1, #0
 8001884:	4798      	blx	r3
        /* clear the interrupt */
        XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP, ep_num);
 8001886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800188a:	2008      	movs	r0, #8
 800188c:	4619      	mov	r1, r3
 800188e:	f000 fac3 	bl	8001e18 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8001892:	7c3b      	ldrb	r3, [r7, #16]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d034      	beq.n	8001908 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7b5b      	ldrb	r3, [r3, #13]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d115      	bne.n	80018d2 <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	441a      	add	r2, r3
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	441a      	add	r2, r3
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
        if (ep->xferTotal == ep->xferLength)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	429a      	cmp	r2, r3
 80018dc:	d111      	bne.n	8001902 <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	f022 0210 	bic.w	r2, r2, #16
 80018ee:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num, XMC_USBD_EP_EVENT_OUT);
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <XMC_USBD_lHandleOEPInt+0x1b4>)
 80018f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80018f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018fa:	4610      	mov	r0, r2
 80018fc:	2101      	movs	r1, #1
 80018fe:	4798      	blx	r3
 8001900:	e002      	b.n	8001908 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 8001902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001904:	f7ff fcb4 	bl	8001270 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32, ep_num);
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f000 fa81 	bl	8001e18 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 8001916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800191a:	3301      	adds	r3, #1
 800191c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;

  while ((uint16_t)mask >> ep_num)
 8001920:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001926:	fa42 f303 	asr.w	r3, r2, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	f47f af49 	bne.w	80017c2 <XMC_USBD_lHandleOEPInt+0x3a>
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8001930:	200d      	movs	r0, #13
 8001932:	f000 f9e3 	bl	8001cfc <XMC_USBD_ClearEvent>
}
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	1ffe8a58 	.word	0x1ffe8a58

08001940 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;

  daint.d32 = xmc_device.device_register->daint;
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 800194a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	617b      	str	r3, [r7, #20]

  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8001952:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001954:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	613b      	str	r3, [r7, #16]

  dieptsiz.d32 = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8001960:	8abb      	ldrh	r3, [r7, #20]
 8001962:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  while ((uint16_t)mask >> ep_num)
 800196a:	e0b5      	b.n	8001ad8 <XMC_USBD_lHandleIEPInt+0x198>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 800196c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800196e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001972:	fa42 f303 	asr.w	r3, r2, r3
 8001976:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 8001978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8001980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a3 	beq.w	8001ace <XMC_USBD_lHandleIEPInt+0x18e>
    {
      ep = &xmc_device.ep[ep_num];
 8001988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800198c:	2234      	movs	r2, #52	; 0x34
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001994:	4413      	add	r3, r2
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
      inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800199c:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 800199e:	336a      	adds	r3, #106	; 0x6a
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
                    ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 80019aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	40d3      	lsrs	r3, r2
                       0x1U) << 7U) | (uint32_t)diepmsk.d32);
 80019bc:	01db      	lsls	r3, r3, #7
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	431a      	orrs	r2, r3
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
      inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
                    ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                       0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7b5b      	ldrb	r3, [r3, #13]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <XMC_USBD_lHandleIEPInt+0xa2>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80019d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019d6:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 80019d8:	336a      	adds	r3, #106	; 0x6a
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	60bb      	str	r3, [r7, #8]
      }
      if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b5b      	ldrb	r3, [r3, #13]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d115      	bne.n	8001a16 <XMC_USBD_lHandleIEPInt+0xd6>
      {
        if (diepint.b.emptyintr)
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00f      	beq.n	8001a16 <XMC_USBD_lHandleIEPInt+0xd6>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 80019f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019f8:	f7ff fb1e 	bl	8001038 <XMC_USBD_lWriteFifo>
 80019fc:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	441a      	add	r2, r3
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	441a      	add	r2, r3
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8001a16:	7b3b      	ldrb	r3, [r7, #12]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04e      	beq.n	8001ac0 <XMC_USBD_lHandleIEPInt+0x180>
      {
        if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7b5b      	ldrb	r3, [r3, #13]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11d      	bne.n	8001a66 <XMC_USBD_lHandleIEPInt+0x126>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8001a2a:	897a      	ldrh	r2, [r7, #10]
 8001a2c:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8001a30:	4013      	ands	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d116      	bne.n	8001a66 <XMC_USBD_lHandleIEPInt+0x126>
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d111      	bne.n	8001a66 <XMC_USBD_lHandleIEPInt+0x126>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	441a      	add	r2, r3
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	441a      	add	r2, r3
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal == ep->xferLength)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d123      	bne.n	8001aba <XMC_USBD_lHandleIEPInt+0x17a>
        {
          ep->inInUse = 0U;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	f022 0208 	bic.w	r2, r2, #8
 8001a7a:	605a      	str	r2, [r3, #4]
          if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7b5b      	ldrb	r3, [r3, #13]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10e      	bne.n	8001aa2 <XMC_USBD_lHandleIEPInt+0x162>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001a86:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
              (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8001a8a:	4a1a      	ldr	r2, [pc, #104]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001a8c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001a90:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001a92:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001a96:	2001      	movs	r0, #1
 8001a98:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9c:	43d2      	mvns	r2, r2
 8001a9e:	400a      	ands	r2, r1
        {
          ep->inInUse = 0U;
          if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
              (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num, XMC_USBD_EP_EVENT_IN);
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8001aa4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001aa8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4798      	blx	r3
 8001ab8:	e002      	b.n	8001ac0 <XMC_USBD_lHandleIEPInt+0x180>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8001aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001abc:	f7ff fc94 	bl	80013e8 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32, ep_num);
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f000 f98f 	bl	8001dec <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8001ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;

  while ((uint16_t)mask >> ep_num)
 8001ad8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ade:	fa42 f303 	asr.w	r3, r2, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f af42 	bne.w	800196c <XMC_USBD_lHandleIEPInt+0x2c>

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32, ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8001ae8:	200e      	movs	r0, #14
 8001aea:	f000 f907 	bl	8001cfc <XMC_USBD_ClearEvent>
}
 8001aee:	3730      	adds	r7, #48	; 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	1ffe8a58 	.word	0x1ffe8a58

08001af8 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;
  data.d32 = xmc_device.global_register->grxstsp;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <XMC_USBD_lHandleRxFLvl+0x7c>)
 8001b00:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d82a      	bhi.n	8001b6c <XMC_USBD_lHandleRxFLvl+0x74>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <XMC_USBD_lHandleRxFLvl+0x24>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b6d 	.word	0x08001b6d
 8001b20:	08001b35 	.word	0x08001b35
 8001b24:	08001b6d 	.word	0x08001b6d
 8001b28:	08001b6d 	.word	0x08001b6d
 8001b2c:	08001b6d 	.word	0x08001b6d
 8001b30:	08001b51 	.word	0x08001b51
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum, (uint32_t)data.b.bcnt);
 8001b34:	793b      	ldrb	r3, [r7, #4]
 8001b36:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff fa01 	bl	8000f50 <XMC_USBD_lReadFifo>
      break;
 8001b4e:	e00e      	b.n	8001b6e <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum, (uint32_t)data.b.bcnt);
 8001b50:	793b      	ldrb	r3, [r7, #4]
 8001b52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff f9f3 	bl	8000f50 <XMC_USBD_lReadFifo>
      break;
 8001b6a:	e000      	b.n	8001b6e <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8001b6c:	bf00      	nop
  }
  /* no need to clear */
}
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	1ffe8a58 	.word	0x1ffe8a58

08001b78 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;

  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8001b80:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001b82:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001b8a:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001b8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]

  if (data.b.sofintr)
 8001b98:	7a3b      	ldrb	r3, [r7, #8]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001ba4:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001baa:	2009      	movs	r0, #9
 8001bac:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8001bae:	2009      	movs	r0, #9
 8001bb0:	f000 f8a4 	bl	8001cfc <XMC_USBD_ClearEvent>
  }
  if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7b5b      	ldrb	r3, [r3, #13]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d119      	bne.n	8001bf0 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8001bbc:	7a3b      	ldrb	r3, [r7, #8]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8001bc8:	7b3b      	ldrb	r3, [r7, #12]
 8001bca:	f36f 1304 	bfc	r3, #4, #1
 8001bce:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001bd2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8001bda:	f7ff ff8d 	bl	8001af8 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8001bde:	7b3b      	ldrb	r3, [r7, #12]
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001be6:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001be8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8001bf0:	7a7b      	ldrb	r3, [r7, #9]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f000 f87d 	bl	8001cfc <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 8001c02:	7a7b      	ldrb	r3, [r7, #9]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c14:	2006      	movs	r0, #6
 8001c16:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8001c18:	2006      	movs	r0, #6
 8001c1a:	f000 f86f 	bl	8001cfc <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c30:	2008      	movs	r0, #8
 8001c32:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001c34:	2008      	movs	r0, #8
 8001c36:	f000 f861 	bl	8001cfc <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00e      	beq.n	8001c64 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001c48:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <XMC_USBD_IRQHandler+0x148>)
 8001c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 f84c 	bl	8001cfc <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8001c64:	7a7b      	ldrb	r3, [r7, #9]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fc83 	bl	800157c <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8001c76:	7a7b      	ldrb	r3, [r7, #9]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8001c82:	f7ff fd45 	bl	8001710 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8001c86:	7abb      	ldrb	r3, [r7, #10]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fe54 	bl	8001940 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8001c98:	7abb      	ldrb	r3, [r7, #10]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <XMC_USBD_IRQHandler+0x132>
  {
    XMC_USBD_lHandleOEPInt(obj);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fd6f 	bl	8001788 <XMC_USBD_lHandleOEPInt>
  }
  if (data.b.otgintr)
 8001caa:	7a3b      	ldrb	r3, [r7, #8]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <XMC_USBD_IRQHandler+0x142>
  {
    XMC_USBD_lHandleOTGInt();
 8001cb6:	f7ff fd07 	bl	80016c8 <XMC_USBD_lHandleOTGInt>
  }

}
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	1ffe8a58 	.word	0x1ffe8a58

08001cc4 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <XMC_USBD_Enable+0x18>)
 8001cca:	f7fe fe67 	bl	800099c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <XMC_USBD_Enable+0x18>)
 8001cd0:	f7fe fce4 	bl	800069c <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8001cd4:	f7fe ff0e 	bl	8000af4 <XMC_SCU_POWER_EnableUsb>
}
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000080 	.word	0x20000080

08001ce0 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <XMC_USBD_Disable+0x18>)
 8001ce6:	f7fe fcbd 	bl	8000664 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 8001cea:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <XMC_USBD_Disable+0x18>)
 8001cec:	f7fe fe3a 	bl	8000964 <XMC_SCU_CLOCK_GatePeripheralClock>
#endif
  XMC_SCU_POWER_DisableUsb();
 8001cf0:	f7fe ff0c 	bl	8000b0c <XMC_SCU_POWER_DisableUsb>
}
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000080 	.word	0x20000080

08001cfc <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  switch (event)
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b0d      	cmp	r3, #13
 8001d0e:	d84c      	bhi.n	8001daa <XMC_USBD_ClearEvent+0xae>
 8001d10:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <XMC_USBD_ClearEvent+0x1c>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001d51 	.word	0x08001d51
 8001d1c:	08001dab 	.word	0x08001dab
 8001d20:	08001dab 	.word	0x08001dab
 8001d24:	08001dab 	.word	0x08001dab
 8001d28:	08001d5b 	.word	0x08001d5b
 8001d2c:	08001dab 	.word	0x08001dab
 8001d30:	08001d65 	.word	0x08001d65
 8001d34:	08001d6f 	.word	0x08001d6f
 8001d38:	08001d79 	.word	0x08001d79
 8001d3c:	08001d83 	.word	0x08001d83
 8001d40:	08001d8d 	.word	0x08001d8d
 8001d44:	08001d97 	.word	0x08001d97
 8001d48:	08001dab 	.word	0x08001dab
 8001d4c:	08001da1 	.word	0x08001da1
  {
    case (XMC_USBD_EVENT_POWER_ON):
      clear.b.sessreqintr = 1U;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d56:	73fb      	strb	r3, [r7, #15]
      break;
 8001d58:	e028      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
      clear.b.usbreset = 1U;
 8001d5a:	7b7b      	ldrb	r3, [r7, #13]
 8001d5c:	f043 0310 	orr.w	r3, r3, #16
 8001d60:	737b      	strb	r3, [r7, #13]
      break;
 8001d62:	e023      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
      clear.b.usbsuspend = 1U;
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	737b      	strb	r3, [r7, #13]
      break;
 8001d6c:	e01e      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
      clear.b.wkupintr = 1U;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	73fb      	strb	r3, [r7, #15]
      break;
 8001d76:	e019      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
      clear.b.wkupintr = 1U;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d80:	e014      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
      clear.b.sofintr = 1U;
 8001d82:	7b3b      	ldrb	r3, [r7, #12]
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	733b      	strb	r3, [r7, #12]
      break;
 8001d8a:	e00f      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
      clear.b.erlysuspend = 1U;
 8001d8c:	7b7b      	ldrb	r3, [r7, #13]
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	737b      	strb	r3, [r7, #13]
      break;
 8001d94:	e00a      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
      clear.b.enumdone = 1U;
 8001d96:	7b7b      	ldrb	r3, [r7, #13]
 8001d98:	f043 0320 	orr.w	r3, r3, #32
 8001d9c:	737b      	strb	r3, [r7, #13]
      break;
 8001d9e:	e005      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
      clear.b.outepintr = 1U;
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	73bb      	strb	r3, [r7, #14]
      break;
 8001da8:	e000      	b.n	8001dac <XMC_USBD_ClearEvent+0xb0>
    default:
      break;
 8001daa:	bf00      	nop
  }
  xmc_device.global_register->gintsts = clear.d32;
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <XMC_USBD_ClearEvent+0xc4>)
 8001dae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	615a      	str	r2, [r3, #20]
}
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	1ffe8a58 	.word	0x1ffe8a58

08001dc4 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <XMC_USBD_lClearEventOTG+0x24>)
 8001dd6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	605a      	str	r2, [r3, #4]
}
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	1ffe8a58 	.word	0x1ffe8a58

08001dec <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event, const uint8_t ep_num)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <XMC_USBD_ClearEventINEP+0x28>)
 8001e00:	336a      	adds	r3, #106	; 0x6a
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	609a      	str	r2, [r3, #8]
}
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	1ffe8a58 	.word	0x1ffe8a58

08001e18 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event, const uint8_t ep_num)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <XMC_USBD_ClearEventOUTEP+0x2c>)
 8001e2c:	3370      	adds	r3, #112	; 0x70
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	609a      	str	r2, [r3, #8]
}
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	1ffe8a58 	.word	0x1ffe8a58

08001e48 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  doepint_data_t doepint;
  doepint.d32 = event;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	60fb      	str	r3, [r7, #12]
  xmc_device.device_register->doepmsk |= doepint.d32;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8001e56:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8001e5c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001e60:	6951      	ldr	r1, [r2, #20]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	615a      	str	r2, [r3, #20]
}
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	1ffe8a58 	.word	0x1ffe8a58

08001e78 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  diepint_data_t diepint;
  diepint.d32 = event;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	60fb      	str	r3, [r7, #12]
  xmc_device.device_register->diepmsk |= diepint.d32;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <XMC_USBD_EnableEventINEP+0x2c>)
 8001e86:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001e8a:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <XMC_USBD_EnableEventINEP+0x2c>)
 8001e8c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001e90:	6911      	ldr	r1, [r2, #16]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	611a      	str	r2, [r3, #16]
}
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	1ffe8a58 	.word	0x1ffe8a58

08001ea8 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap = {0U};
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8001eb2:	793b      	ldrb	r3, [r7, #4]
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 8001eba:	793b      	ldrb	r3, [r7, #4]
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
  cap.event_power_on = 1U;
#else
  cap.event_power_off = 0U;
 8001ec2:	793b      	ldrb	r3, [r7, #4]
 8001ec4:	f36f 0341 	bfc	r3, #1, #1
 8001ec8:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 0U;
 8001eca:	793b      	ldrb	r3, [r7, #4]
 8001ecc:	f36f 0300 	bfc	r3, #0, #1
 8001ed0:	713b      	strb	r3, [r7, #4]
#endif
  cap.event_high_speed = 0U;
 8001ed2:	793b      	ldrb	r3, [r7, #4]
 8001ed4:	f36f 1345 	bfc	r3, #5, #1
 8001ed8:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 8001eda:	797b      	ldrb	r3, [r7, #5]
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8001ee2:	793b      	ldrb	r3, [r7, #4]
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 8001eea:	793b      	ldrb	r3, [r7, #4]
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8001ef2:	793b      	ldrb	r3, [r7, #4]
 8001ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef8:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f36f 235f 	bfc	r3, #9, #23
 8001f00:	607b      	str	r3, [r7, #4]
  return cap;
 8001f02:	687b      	ldr	r3, [r7, #4]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
             XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))

  XMC_USBD_Enable();
 8001f18:	f7ff fed4 	bl	8001cc4 <XMC_USBD_Enable>

  usbd_init = obj;
 8001f1c:	4a87      	ldr	r2, [pc, #540]	; (800213c <XMC_USBD_Init+0x22c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
 8001f26:	e00c      	b.n	8001f42 <XMC_USBD_Init+0x32>
  {
    XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8001f28:	4a85      	ldr	r2, [pc, #532]	; (8002140 <XMC_USBD_Init+0x230>)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	2140      	movs	r1, #64	; 0x40
 8001f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8001f32:	4a84      	ldr	r2, [pc, #528]	; (8002144 <XMC_USBD_Init+0x234>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  XMC_USBD_Enable();

  usbd_init = obj;

  /* Filling out buffer size */
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3301      	adds	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d9ef      	bls.n	8001f28 <XMC_USBD_Init+0x18>
    XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
    XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void *)&xmc_device, 0x0U, sizeof(XMC_USBD_DEVICE_t));
 8001f48:	487f      	ldr	r0, [pc, #508]	; (8002148 <XMC_USBD_Init+0x238>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001f50:	f003 f94f 	bl	80051f2 <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a7b      	ldr	r2, [pc, #492]	; (8002148 <XMC_USBD_Init+0x238>)
 8001f5a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4a79      	ldr	r2, [pc, #484]	; (8002148 <XMC_USBD_Init+0x238>)
 8001f64:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t *)(obj->usbd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	; (8002148 <XMC_USBD_Init+0x238>)
 8001f74:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7e:	4a72      	ldr	r2, [pc, #456]	; (8002148 <XMC_USBD_Init+0x238>)
 8001f80:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	e00c      	b.n	8001fa4 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	3348      	adds	r3, #72	; 0x48
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	441a      	add	r2, r3
 8001f94:	496c      	ldr	r1, [pc, #432]	; (8002148 <XMC_USBD_Init+0x238>)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	336a      	adds	r3, #106	; 0x6a
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t *)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d9ef      	bls.n	8001f8a <XMC_USBD_Init+0x7a>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
                                         ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	e00d      	b.n	8001fcc <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
                                          DWC_DEV_OUT_EP_REG_OFFSET +
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3358      	adds	r3, #88	; 0x58
 8001fb4:	015b      	lsls	r3, r3, #5
 8001fb6:	6a3a      	ldr	r2, [r7, #32]
 8001fb8:	441a      	add	r2, r3
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
                                         ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
 8001fba:	4963      	ldr	r1, [pc, #396]	; (8002148 <XMC_USBD_Init+0x238>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3370      	adds	r3, #112	; 0x70
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t *)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
                                         ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_EPS; i++)
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	3301      	adds	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d9ee      	bls.n	8001fb0 <XMC_USBD_Init+0xa0>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
                                          DWC_DEV_OUT_EP_REG_OFFSET +
                                          ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	e00c      	b.n	8001ff2 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t *)(XMC_USBD_BASE_ADDRESS +
                                      XMC_USBD_TX_FIFO_REG_OFFSET +
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	3301      	adds	r3, #1
 8001fdc:	031b      	lsls	r3, r3, #12
 8001fde:	6a3a      	ldr	r2, [r7, #32]
 8001fe0:	441a      	add	r2, r3
                                          DWC_DEV_OUT_EP_REG_OFFSET +
                                          ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_TX_FIFOS; i++)
  {
    xmc_device.fifo[i] = (uint32_t *)(XMC_USBD_BASE_ADDRESS +
 8001fe2:	4959      	ldr	r1, [pc, #356]	; (8002148 <XMC_USBD_Init+0x238>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	3378      	adds	r3, #120	; 0x78
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t *)(XMC_USBD_BASE_ADDRESS +
                                          DWC_DEV_OUT_EP_REG_OFFSET +
                                          ((uint32_t)DWC_EP_REG_OFFSET * i));
  }
  for (i = 0U; i < (uint32_t)XMC_USBD_NUM_TX_FIFOS; i++)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	3301      	adds	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	2b06      	cmp	r3, #6
 8001ff6:	d9ef      	bls.n	8001fd8 <XMC_USBD_Init+0xc8>
                                      (i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <XMC_USBD_Init+0x238>)
 8001ffa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8002002:	7f3b      	ldrb	r3, [r7, #28]
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 800200a:	7f3b      	ldrb	r3, [r7, #28]
 800200c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002010:	773b      	strb	r3, [r7, #28]
  if (obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7b5b      	ldrb	r3, [r3, #13]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d104      	bne.n	8002024 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 800201a:	7f3b      	ldrb	r3, [r7, #28]
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	773b      	strb	r3, [r7, #28]
 8002022:	e003      	b.n	800202c <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8002024:	7f3b      	ldrb	r3, [r7, #28]
 8002026:	f36f 1345 	bfc	r3, #5, #1
 800202a:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <XMC_USBD_Init+0x238>)
 800202e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	609a      	str	r2, [r3, #8]
  /* configure usb details */
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8002036:	4b44      	ldr	r3, [pc, #272]	; (8002148 <XMC_USBD_Init+0x238>)
 8002038:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8002040:	7efb      	ldrb	r3, [r7, #27]
 8002042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002046:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8002048:	7e7b      	ldrb	r3, [r7, #25]
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <XMC_USBD_Init+0x238>)
 8002052:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */
  dcfg.d32 = xmc_device.device_register->dcfg;
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <XMC_USBD_Init+0x238>)
 800205c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8002064:	7d3b      	ldrb	r3, [r7, #20]
 8002066:	f043 0303 	orr.w	r3, r3, #3
 800206a:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 800206c:	7dbb      	ldrb	r3, [r7, #22]
 800206e:	f36f 13c7 	bfc	r3, #7, #1
 8002072:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <XMC_USBD_Init+0x238>)
 8002076:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	601a      	str	r2, [r3, #0]
  /* configure device functions */
  dctl.d32 = xmc_device.device_register->dctl;
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <XMC_USBD_Init+0x238>)
 8002080:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8002088:	7c3b      	ldrb	r3, [r7, #16]
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <XMC_USBD_Init+0x238>)
 8002092:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 800209a:	2010      	movs	r0, #16
 800209c:	f7ff f81e 	bl	80010dc <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 80020a0:	f7ff f85e 	bl	8001160 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <XMC_USBD_Init+0x238>)
 80020a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <XMC_USBD_Init+0x238>)
 80020b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	615a      	str	r2, [r3, #20]

  gintmsk.d32 = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 80020be:	7b3b      	ldrb	r3, [r7, #12]
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d4:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 80020d6:	7b7b      	ldrb	r3, [r7, #13]
 80020d8:	f043 0310 	orr.w	r3, r3, #16
 80020dc:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 80020de:	7b7b      	ldrb	r3, [r7, #13]
 80020e0:	f043 0320 	orr.w	r3, r3, #32
 80020e4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 80020e6:	7b7b      	ldrb	r3, [r7, #13]
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 80020fe:	7b3b      	ldrb	r3, [r7, #12]
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	733b      	strb	r3, [r7, #12]
  if (obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7b5b      	ldrb	r3, [r3, #13]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d103      	bne.n	8002116 <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 800210e:	7b3b      	ldrb	r3, [r7, #12]
 8002110:	f043 0310 	orr.w	r3, r3, #16
 8002114:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8002116:	7bbb      	ldrb	r3, [r7, #14]
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 800211e:	7bbb      	ldrb	r3, [r7, #14]
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <XMC_USBD_Init+0x238>)
 8002128:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	1ffe8938 	.word	0x1ffe8938
 8002140:	1ffe8900 	.word	0x1ffe8900
 8002144:	1ffe891c 	.word	0x1ffe891c
 8002148:	1ffe8a58 	.word	0x1ffe8a58

0800214c <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
  dctl.d32 = xmc_device.device_register->dctl;
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <XMC_USBD_Uninitialize+0x38>)
 8002154:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 800215c:	793b      	ldrb	r3, [r7, #4]
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <XMC_USBD_Uninitialize+0x38>)
 8002166:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void *)&xmc_device, 0U, sizeof(xmc_device));
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <XMC_USBD_Uninitialize+0x38>)
 8002170:	2100      	movs	r1, #0
 8002172:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002176:	f003 f83c 	bl	80051f2 <memset>
  return XMC_USBD_STATUS_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	1ffe8a58 	.word	0x1ffe8a58

08002188 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect()
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
  dctl.d32 = xmc_device.device_register->dctl;
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <XMC_USBD_DeviceConnect+0x30>)
 8002190:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8002198:	793b      	ldrb	r3, [r7, #4]
 800219a:	f36f 0341 	bfc	r3, #1, #1
 800219e:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <XMC_USBD_DeviceConnect+0x30>)
 80021a2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	1ffe8a58 	.word	0x1ffe8a58

080021bc <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect()
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
  dctl.d32 = xmc_device.device_register->dctl;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <XMC_USBD_DeviceDisconnect+0x30>)
 80021c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80021cc:	793b      	ldrb	r3, [r7, #4]
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <XMC_USBD_DeviceDisconnect+0x30>)
 80021d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	1ffe8a58 	.word	0x1ffe8a58

080021f0 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state = {0U};
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 80021fc:	7b3b      	ldrb	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	f362 03c4 	bfi	r3, r2, #3, #2
 8002204:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <XMC_USBD_DeviceGetState+0x60>)
 8002208:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800220c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	7b3b      	ldrb	r3, [r7, #12]
 8002214:	f362 0341 	bfi	r3, r2, #1, #1
 8002218:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe fe62 	bl	8000ee4 <XMC_USBD_lDeviceActive>
 8002220:	4603      	mov	r3, r0
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	7b3b      	ldrb	r3, [r7, #12]
 800222a:	f362 0382 	bfi	r3, r2, #2, #1
 800222e:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <XMC_USBD_DeviceGetState+0x60>)
 8002232:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002236:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	7b3b      	ldrb	r3, [r7, #12]
 800223e:	f362 0300 	bfi	r3, r2, #0, #1
 8002242:	733b      	strb	r3, [r7, #12]
  return state;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	1ffe8a58 	.word	0x1ffe8a58

08002254 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	2234      	movs	r2, #52	; 0x34
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <XMC_USBD_EndpointReadStart+0x88>)
 800226e:	4413      	add	r3, r2
 8002270:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;

  if (ep->outInUse || !ep->isConfigured)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <XMC_USBD_EndpointReadStart+0x3c>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	791b      	ldrb	r3, [r3, #4]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <XMC_USBD_EndpointReadStart+0x42>
  {
    result = XMC_USBD_STATUS_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e01c      	b.n	80022d0 <XMC_USBD_EndpointReadStart+0x7c>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d202      	bcs.n	80022a6 <XMC_USBD_EndpointReadStart+0x52>
    {
      size = ep->outBufferSize;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2200      	movs	r2, #0
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2200      	movs	r2, #0
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80022c6:	68b8      	ldr	r0, [r7, #8]
 80022c8:	f7fe ffd2 	bl	8001270 <XMC_USBD_lStartReadXfer>
    result = XMC_USBD_STATUS_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	1ffe8a58 	.word	0x1ffe8a58

080022e0 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num, uint8_t *buffer, uint32_t length)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2234      	movs	r2, #52	; 0x34
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <XMC_USBD_EndpointRead+0x74>)
 80022f8:	4413      	add	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d202      	bcs.n	800230c <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer, &ep->outBuffer[ep->outOffset], length);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4413      	add	r3, r2
 8002316:	68b8      	ldr	r0, [r7, #8]
 8002318:	4619      	mov	r1, r3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	f002 ff5e 	bl	80051dc <memcpy>
  ep->outBytesAvailable -= length;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	441a      	add	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	e002      	b.n	8002348 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8002348:	687b      	ldr	r3, [r7, #4]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	1ffe8a58 	.word	0x1ffe8a58

08002358 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num, const uint8_t *buffer, uint32_t length)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	2234      	movs	r2, #52	; 0x34
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <XMC_USBD_EndpointWrite+0xa4>)
 8002374:	4413      	add	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	791b      	ldrb	r3, [r3, #4]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e031      	b.n	80023f0 <XMC_USBD_EndpointWrite+0x98>
  }
  else if (ep->inInUse == 1U)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d102      	bne.n	80023a2 <XMC_USBD_EndpointWrite+0x4a>
  {
    result = (int32_t)0;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e026      	b.n	80023f0 <XMC_USBD_EndpointWrite+0x98>
  }
  else
  {
    if (length > ep->inBufferSize)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d202      	bcs.n	80023b2 <XMC_USBD_EndpointWrite+0x5a>
    {
      length = ep->inBufferSize;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
    memcpy(ep->inBuffer, (const void *)buffer, length);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4618      	mov	r0, r3
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	f002 ff0e 	bl	80051dc <memcpy>
    ep->xferBuffer = ep->inBuffer;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2200      	movs	r2, #0
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	f042 0208 	orr.w	r2, r2, #8
 80023e2:	605a      	str	r2, [r3, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 80023e4:	6938      	ldr	r0, [r7, #16]
 80023e6:	f7fe ffff 	bl	80013e8 <XMC_USBD_lStartWriteXfer>
    result = (int32_t)ep->xferTotal;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	617b      	str	r3, [r7, #20]
  }
  return result;
 80023f0:	697b      	ldr	r3, [r7, #20]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	1ffe8a58 	.word	0x1ffe8a58

08002400 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address, const XMC_USBD_SET_ADDRESS_STAGE_t stage)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	460a      	mov	r2, r1
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	4613      	mov	r3, r2
 800240e:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <XMC_USBD_DeviceSetAddress+0x48>)
 8002412:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10c      	bne.n	800243a <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002426:	b2da      	uxtb	r2, r3
 8002428:	89bb      	ldrh	r3, [r7, #12]
 800242a:	f362 130a 	bfi	r3, r2, #4, #7
 800242e:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <XMC_USBD_DeviceSetAddress+0x48>)
 8002432:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	601a      	str	r2, [r3, #0]
  }
  return XMC_USBD_STATUS_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	1ffe8a58 	.word	0x1ffe8a58

0800244c <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	460a      	mov	r2, r1
 8002456:	71fb      	strb	r3, [r7, #7]
 8002458:	4613      	mov	r3, r2
 800245a:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	2234      	movs	r2, #52	; 0x34
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	4a4a      	ldr	r2, [pc, #296]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  if (stall)
 800246e:	79bb      	ldrb	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d040      	beq.n	80024f6 <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	b25b      	sxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	da1a      	bge.n	80024b2 <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4a43      	ldr	r2, [pc, #268]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 8002488:	336a      	adds	r3, #106	; 0x6a
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002492:	7abb      	ldrb	r3, [r7, #10]
 8002494:	f043 0320 	orr.w	r3, r3, #32
 8002498:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4a3b      	ldr	r2, [pc, #236]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 80024a6:	336a      	adds	r3, #106	; 0x6a
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e01b      	b.n	80024ea <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4a35      	ldr	r2, [pc, #212]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 80024be:	3370      	adds	r3, #112	; 0x70
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80024ca:	7abb      	ldrb	r3, [r7, #10]
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 80024de:	3370      	adds	r3, #112	; 0x70
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	7913      	ldrb	r3, [r2, #4]
 80024ee:	f043 0320 	orr.w	r3, r3, #32
 80024f2:	7113      	strb	r3, [r2, #4]
 80024f4:	e047      	b.n	8002586 <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da1e      	bge.n	800253c <XMC_USBD_EndpointStall+0xf0>
    {
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4a22      	ldr	r2, [pc, #136]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 800250a:	336a      	adds	r3, #106	; 0x6a
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60bb      	str	r3, [r7, #8]
      data.b.stall = 0U;
 8002514:	7abb      	ldrb	r3, [r7, #10]
 8002516:	f36f 1345 	bfc	r3, #5, #1
 800251a:	72bb      	strb	r3, [r7, #10]
      data.b.setd0pid = 1U; /* reset pid to 0 */
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	72fb      	strb	r3, [r7, #11]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 8002530:	336a      	adds	r3, #106	; 0x6a
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e01f      	b.n	800257c <XMC_USBD_EndpointStall+0x130>
    }
    else
    {
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4a13      	ldr	r2, [pc, #76]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 8002548:	3370      	adds	r3, #112	; 0x70
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60bb      	str	r3, [r7, #8]
      data.b.stall = 0U;
 8002554:	7abb      	ldrb	r3, [r7, #10]
 8002556:	f36f 1345 	bfc	r3, #5, #1
 800255a:	72bb      	strb	r3, [r7, #10]
      data.b.setd0pid = 1U; /* reset pid to 0 */
 800255c:	7afb      	ldrb	r3, [r7, #11]
 800255e:	f043 0310 	orr.w	r3, r3, #16
 8002562:	72fb      	strb	r3, [r7, #11]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <XMC_USBD_EndpointStall+0x148>)
 8002570:	3370      	adds	r3, #112	; 0x70
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 0U;
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	7913      	ldrb	r3, [r2, #4]
 8002580:	f36f 1345 	bfc	r3, #5, #1
 8002584:	7113      	strb	r3, [r2, #4]
  }
  return XMC_USBD_STATUS_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	1ffe8a58 	.word	0x1ffe8a58

08002598 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	2234      	movs	r2, #52	; 0x34
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	4a1b      	ldr	r2, [pc, #108]	; (800261c <XMC_USBD_EndpointAbort+0x84>)
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	f022 0208 	bic.w	r2, r2, #8
 80025ca:	605a      	str	r2, [r3, #4]
  }
  if (!ep->address_u.address_st.direction)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d104      	bne.n	80025e4 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	f022 0210 	bic.w	r2, r2, #16
 80025e2:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	7913      	ldrb	r3, [r2, #4]
 80025e8:	f36f 1345 	bfc	r3, #5, #1
 80025ec:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	1ffe8a58 	.word	0x1ffe8a58

08002620 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
    const XMC_USBD_ENDPOINT_TYPE_t ep_type,
    const uint16_t ep_max_packet_size)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	460b      	mov	r3, r1
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	4613      	mov	r3, r2
 8002630:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8002632:	4b98      	ldr	r3, [pc, #608]	; (8002894 <XMC_USBD_EndpointConfigure+0x274>)
 8002634:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	613b      	str	r3, [r7, #16]
  ep = &xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	2234      	movs	r2, #52	; 0x34
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	4a92      	ldr	r2, [pc, #584]	; (8002894 <XMC_USBD_EndpointConfigure+0x274>)
 800264a:	4413      	add	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  memset((void *)ep, 0x0U, sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	2100      	movs	r1, #0
 8002652:	2234      	movs	r2, #52	; 0x34
 8002654:	f002 fdcd 	bl	80051f2 <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	79fa      	ldrb	r2, [r7, #7]
 800265c:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	7913      	ldrb	r3, [r2, #4]
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8002668:	88bb      	ldrh	r3, [r7, #4]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002670:	b2d9      	uxtb	r1, r3
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	6853      	ldr	r3, [r2, #4]
 8002676:	f361 23d1 	bfi	r3, r1, #11, #7
 800267a:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	6893      	ldr	r3, [r2, #8]
 8002688:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800268c:	f361 0312 	bfi	r3, r1, #0, #19
 8002690:	6093      	str	r3, [r2, #8]
 8002692:	e005      	b.n	80026a0 <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6893      	ldr	r3, [r2, #8]
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	f361 0312 	bfi	r3, r1, #0, #19
 800269e:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	4a7a      	ldr	r2, [pc, #488]	; (8002898 <XMC_USBD_EndpointConfigure+0x278>)
 80026ae:	441a      	add	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	4a76      	ldr	r2, [pc, #472]	; (800289c <XMC_USBD_EndpointConfigure+0x27c>)
 80026c2:	441a      	add	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <XMC_USBD_EndpointConfigure+0x280>)
 80026d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <XMC_USBD_EndpointConfigure+0x284>)
 80026ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <XMC_USBD_EndpointConfigure+0xe8>
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d17a      	bne.n	80027fe <XMC_USBD_EndpointConfigure+0x1de>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002710:	b2db      	uxtb	r3, r3
 8002712:	4a60      	ldr	r2, [pc, #384]	; (8002894 <XMC_USBD_EndpointConfigure+0x274>)
 8002714:	336a      	adds	r3, #106	; 0x6a
 8002716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
    /*enable endpoint */
    data.b.usbactep = 1U;
 800271e:	7b7b      	ldrb	r3, [r7, #13]
 8002720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002724:	737b      	strb	r3, [r7, #13]
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	f362 0383 	bfi	r3, r2, #2, #2
 8002734:	73bb      	strb	r3, [r7, #14]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d124      	bne.n	8002786 <XMC_USBD_EndpointConfigure+0x166>
    {
      switch (ep_max_packet_size)
 800273c:	88bb      	ldrh	r3, [r7, #4]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d014      	beq.n	800276c <XMC_USBD_EndpointConfigure+0x14c>
 8002742:	2b10      	cmp	r3, #16
 8002744:	dc02      	bgt.n	800274c <XMC_USBD_EndpointConfigure+0x12c>
 8002746:	2b08      	cmp	r3, #8
 8002748:	d016      	beq.n	8002778 <XMC_USBD_EndpointConfigure+0x158>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 800274a:	e01b      	b.n	8002784 <XMC_USBD_EndpointConfigure+0x164>
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
 800274c:	2b20      	cmp	r3, #32
 800274e:	d007      	beq.n	8002760 <XMC_USBD_EndpointConfigure+0x140>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d000      	beq.n	8002756 <XMC_USBD_EndpointConfigure+0x136>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 8002754:	e016      	b.n	8002784 <XMC_USBD_EndpointConfigure+0x164>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
      {
        case (64U):
          data.b.mps = 0x0U;
 8002756:	89bb      	ldrh	r3, [r7, #12]
 8002758:	f36f 030a 	bfc	r3, #0, #11
 800275c:	81bb      	strh	r3, [r7, #12]
          break;
 800275e:	e011      	b.n	8002784 <XMC_USBD_EndpointConfigure+0x164>
        case (32U):
          data.b.mps = 0x1U;
 8002760:	89bb      	ldrh	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f362 030a 	bfi	r3, r2, #0, #11
 8002768:	81bb      	strh	r3, [r7, #12]
          break;
 800276a:	e00b      	b.n	8002784 <XMC_USBD_EndpointConfigure+0x164>
        case (16U):
          data.b.mps = 0x2U;
 800276c:	89bb      	ldrh	r3, [r7, #12]
 800276e:	2202      	movs	r2, #2
 8002770:	f362 030a 	bfi	r3, r2, #0, #11
 8002774:	81bb      	strh	r3, [r7, #12]
          break;
 8002776:	e005      	b.n	8002784 <XMC_USBD_EndpointConfigure+0x164>
        case (8U):
          data.b.mps = 0x3U;
 8002778:	89bb      	ldrh	r3, [r7, #12]
 800277a:	2203      	movs	r2, #3
 800277c:	f362 030a 	bfi	r3, r2, #0, #11
 8002780:	81bb      	strh	r3, [r7, #12]
          break;
 8002782:	bf00      	nop
 8002784:	e007      	b.n	8002796 <XMC_USBD_EndpointConfigure+0x176>
          break;
      }
    }
    else
    {
      data.b.mps = ep_max_packet_size;
 8002786:	88bb      	ldrh	r3, [r7, #4]
 8002788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278c:	b29a      	uxth	r2, r3
 800278e:	89bb      	ldrh	r3, [r7, #12]
 8002790:	f362 030a 	bfi	r3, r2, #0, #11
 8002794:	81bb      	strh	r3, [r7, #12]
    }
    /* set first data0 pid */
    data.b.setd0pid = 1U;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	f043 0310 	orr.w	r3, r3, #16
 800279c:	73fb      	strb	r3, [r7, #15]
    /* clear stall */
    data.b.stall = 0U;
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	f36f 1345 	bfc	r3, #5, #1
 80027a4:	73bb      	strb	r3, [r7, #14]
    /* set tx fifo */
    ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80027a6:	f7fe fd0f 	bl	80011c8 <XMC_USBD_lAssignTXFifo>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	b2d9      	uxtb	r1, r3
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	8893      	ldrh	r3, [r2, #4]
 80027b6:	f361 1389 	bfi	r3, r1, #6, #4
 80027ba:	8093      	strh	r3, [r2, #4]
    data.b.txfnum = ep->txFifoNum;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	889b      	ldrh	r3, [r3, #4]
 80027c0:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	89fb      	ldrh	r3, [r7, #14]
 80027c8:	f362 1389 	bfi	r3, r2, #6, #4
 80027cc:	81fb      	strh	r3, [r7, #14]
    xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <XMC_USBD_EndpointConfigure+0x274>)
 80027da:	336a      	adds	r3, #106	; 0x6a
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]
    daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 80027e4:	8a3a      	ldrh	r2, [r7, #16]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	2301      	movs	r3, #1
 80027f4:	408b      	lsls	r3, r1
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <XMC_USBD_EndpointConfigure+0x1f2>
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d173      	bne.n	80028fa <XMC_USBD_EndpointConfigure+0x2da>
  {
    /* is out */
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <XMC_USBD_EndpointConfigure+0x274>)
 800281e:	3370      	adds	r3, #112	; 0x70
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60bb      	str	r3, [r7, #8]
    /*enable endpoint */
    data.b.usbactep = 1U;
 800282a:	7a7b      	ldrb	r3, [r7, #9]
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	727b      	strb	r3, [r7, #9]
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	7abb      	ldrb	r3, [r7, #10]
 800283c:	f362 0383 	bfi	r3, r2, #2, #2
 8002840:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002842:	79bb      	ldrb	r3, [r7, #6]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d12f      	bne.n	80028a8 <XMC_USBD_EndpointConfigure+0x288>
    {
      switch (ep_max_packet_size)
 8002848:	88bb      	ldrh	r3, [r7, #4]
 800284a:	2b10      	cmp	r3, #16
 800284c:	d014      	beq.n	8002878 <XMC_USBD_EndpointConfigure+0x258>
 800284e:	2b10      	cmp	r3, #16
 8002850:	dc02      	bgt.n	8002858 <XMC_USBD_EndpointConfigure+0x238>
 8002852:	2b08      	cmp	r3, #8
 8002854:	d016      	beq.n	8002884 <XMC_USBD_EndpointConfigure+0x264>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 8002856:	e01b      	b.n	8002890 <XMC_USBD_EndpointConfigure+0x270>
    /* set ep type */
    data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
 8002858:	2b20      	cmp	r3, #32
 800285a:	d007      	beq.n	800286c <XMC_USBD_EndpointConfigure+0x24c>
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d000      	beq.n	8002862 <XMC_USBD_EndpointConfigure+0x242>
          break;
        case (8U):
          data.b.mps = 0x3U;
          break;
        default:
          break;
 8002860:	e016      	b.n	8002890 <XMC_USBD_EndpointConfigure+0x270>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
      switch (ep_max_packet_size)
      {
        case (64U):
          data.b.mps = 0x0U;
 8002862:	893b      	ldrh	r3, [r7, #8]
 8002864:	f36f 030a 	bfc	r3, #0, #11
 8002868:	813b      	strh	r3, [r7, #8]
          break;
 800286a:	e011      	b.n	8002890 <XMC_USBD_EndpointConfigure+0x270>
        case (32U):
          data.b.mps = 0x1U;
 800286c:	893b      	ldrh	r3, [r7, #8]
 800286e:	2201      	movs	r2, #1
 8002870:	f362 030a 	bfi	r3, r2, #0, #11
 8002874:	813b      	strh	r3, [r7, #8]
          break;
 8002876:	e00b      	b.n	8002890 <XMC_USBD_EndpointConfigure+0x270>
        case (16U):
          data.b.mps = 0x2U;
 8002878:	893b      	ldrh	r3, [r7, #8]
 800287a:	2202      	movs	r2, #2
 800287c:	f362 030a 	bfi	r3, r2, #0, #11
 8002880:	813b      	strh	r3, [r7, #8]
          break;
 8002882:	e005      	b.n	8002890 <XMC_USBD_EndpointConfigure+0x270>
        case (8U):
          data.b.mps = 0x3U;
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	2203      	movs	r2, #3
 8002888:	f362 030a 	bfi	r3, r2, #0, #11
 800288c:	813b      	strh	r3, [r7, #8]
          break;
 800288e:	bf00      	nop
 8002890:	e012      	b.n	80028b8 <XMC_USBD_EndpointConfigure+0x298>
 8002892:	bf00      	nop
 8002894:	1ffe8a58 	.word	0x1ffe8a58
 8002898:	20000700 	.word	0x20000700
 800289c:	20000000 	.word	0x20000000
 80028a0:	1ffe891c 	.word	0x1ffe891c
 80028a4:	1ffe8900 	.word	0x1ffe8900
          break;
      }
    }
    else
    {
      data.b.mps = ep_max_packet_size;
 80028a8:	88bb      	ldrh	r3, [r7, #4]
 80028aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	893b      	ldrh	r3, [r7, #8]
 80028b2:	f362 030a 	bfi	r3, r2, #0, #11
 80028b6:	813b      	strh	r3, [r7, #8]
    }
    /* set first data0 pid */
    data.b.setd0pid = 1U;
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	f043 0310 	orr.w	r3, r3, #16
 80028be:	72fb      	strb	r3, [r7, #11]
    /* clear stall */
    data.b.stall = (uint8_t) 0U;
 80028c0:	7abb      	ldrb	r3, [r7, #10]
 80028c2:	f36f 1345 	bfc	r3, #5, #1
 80028c6:	72bb      	strb	r3, [r7, #10]
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <XMC_USBD_EndpointConfigure+0x2f0>)
 80028d4:	3370      	adds	r3, #112	; 0x70
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	601a      	str	r2, [r3, #0]
    daintmsk.ep.out |= (uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80028e0:	8a7a      	ldrh	r2, [r7, #18]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	2301      	movs	r3, #1
 80028f0:	408b      	lsls	r3, r1
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <XMC_USBD_EndpointConfigure+0x2f0>)
 80028fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	1ffe8a58 	.word	0x1ffe8a58

08002914 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	2234      	movs	r2, #52	; 0x34
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <XMC_USBD_EndpointUnconfigure+0x168>)
 800292c:	4413      	add	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
  daint_data_t daintmsk;
  XMC_USBD_STATUS_t result;
  uint32_t number_temp;
  data.d32 = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <XMC_USBD_EndpointUnconfigure+0x168>)
 8002936:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	2301      	movs	r3, #1
 800294c:	4093      	lsls	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	791b      	ldrb	r3, [r3, #4]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <XMC_USBD_EndpointUnconfigure+0x50>
  {
    result = XMC_USBD_STATUS_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e085      	b.n	8002a70 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8002964:	7c7b      	ldrb	r3, [r7, #17]
 8002966:	f36f 13c7 	bfc	r3, #7, #1
 800296a:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002972:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	f043 0308 	orr.w	r3, r3, #8
 800297a:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 800297c:	7cbb      	ldrb	r3, [r7, #18]
 800297e:	f36f 1345 	bfc	r3, #5, #1
 8002982:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	7913      	ldrb	r3, [r2, #4]
 8002988:	f36f 0382 	bfc	r3, #2, #1
 800298c:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	7913      	ldrb	r3, [r2, #4]
 8002992:	f36f 1345 	bfc	r3, #5, #1
 8002996:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	f022 0210 	bic.w	r2, r2, #16
 80029a0:	605a      	str	r2, [r3, #4]
    ep->inInUse =  0U;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	f022 0208 	bic.w	r2, r2, #8
 80029aa:	605a      	str	r2, [r3, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <XMC_USBD_EndpointUnconfigure+0xb4>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	791b      	ldrb	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d112      	bne.n	80029ee <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <XMC_USBD_EndpointUnconfigure+0x168>)
 80029d4:	336a      	adds	r3, #106	; 0x6a
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80029de:	89ba      	ldrh	r2, [r7, #12]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4013      	ands	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <XMC_USBD_EndpointUnconfigure+0xf6>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	791b      	ldrb	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d123      	bne.n	8002a52 <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <XMC_USBD_EndpointUnconfigure+0x168>)
 8002a16:	3370      	adds	r3, #112	; 0x70
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8002a22:	89fa      	ldrh	r2, [r7, #14]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	81fb      	strh	r3, [r7, #14]
      if (usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <XMC_USBD_EndpointUnconfigure+0x16c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	7b5b      	ldrb	r3, [r3, #13]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d10a      	bne.n	8002a52 <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <XMC_USBD_EndpointUnconfigure+0x168>)
 8002a3e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <XMC_USBD_EndpointUnconfigure+0x168>)
 8002a44:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002a48:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	43d2      	mvns	r2, r2
 8002a4e:	400a      	ands	r2, r1
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <XMC_USBD_EndpointUnconfigure+0x168>)
 8002a54:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	889b      	ldrh	r3, [r3, #4]
 8002a60:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fbe6 	bl	8001238 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8002a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	1ffe8a58 	.word	0x1ffe8a58
 8002a80:	1ffe8938 	.word	0x1ffe8938

08002a84 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <XMC_USBD_GetFrameNumber+0x28>)
 8002a8c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	80fb      	strh	r3, [r7, #6]
  return result;
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	1ffe8a58 	.word	0x1ffe8a58

08002ab0 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <XMC_USBD_IsEnumDone+0x34>)
 8002ab6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <XMC_USBD_IsEnumDone+0x28>
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <XMC_USBD_IsEnumDone+0x34>)
 8002ac6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <XMC_USBD_IsEnumDone+0x28>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <XMC_USBD_IsEnumDone+0x2a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	1ffe8a58 	.word	0x1ffe8a58

08002ae8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <_sbrk+0x5c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <_sbrk+0x5c>)
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <_sbrk+0x60>)
 8002afc:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <_sbrk+0x5c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3303      	adds	r3, #3
 8002b08:	f023 0303 	bic.w	r3, r3, #3
 8002b0c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <_sbrk+0x5c>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <_sbrk+0x64>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d207      	bcs.n	8002b2c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <_sbrk+0x5c>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <_sbrk+0x5c>)
 8002b26:	6013      	str	r3, [r2, #0]
    return (base);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	e006      	b.n	8002b3a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002b2c:	f002 fb2a 	bl	8005184 <__errno>
 8002b30:	4602      	mov	r2, r0
 8002b32:	230c      	movs	r3, #12
 8002b34:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	1ffe893c 	.word	0x1ffe893c
 8002b48:	20000e00 	.word	0x20000e00
 8002b4c:	2003ffc0 	.word	0x2003ffc0

08002b50 <_init>:

/* Init */
void _init(void)
{}
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <USBD_VCOM_Event_GetDescriptor>:
 *   host.
 */
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	603a      	str	r2, [r7, #0]
 8002b66:	80fb      	strh	r3, [r7, #6]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	80bb      	strh	r3, [r7, #4]
	const uint8_t  descriptor_type   = (w_value >> 8);
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	727b      	strb	r3, [r7, #9]
	const uint8_t  descriptor_number = (w_value & 0xFF);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	723b      	strb	r3, [r7, #8]
	const void* address = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
	uint16_t    size    = NO_DESCRIPTOR;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	817b      	strh	r3, [r7, #10]

	switch (descriptor_type)
 8002b80:	7a7b      	ldrb	r3, [r7, #9]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d008      	beq.n	8002b98 <USBD_VCOM_Event_GetDescriptor+0x3c>
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d00b      	beq.n	8002ba2 <USBD_VCOM_Event_GetDescriptor+0x46>
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d121      	bne.n	8002bd2 <USBD_VCOM_Event_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			address = &device_descriptor;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <USBD_VCOM_Event_GetDescriptor+0x8c>)
 8002b90:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Device_t);
 8002b92:	2312      	movs	r3, #18
 8002b94:	817b      	strh	r3, [r7, #10]
			break;
 8002b96:	e01c      	b.n	8002bd2 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <USBD_VCOM_Event_GetDescriptor+0x90>)
 8002b9a:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Configuration_t);
 8002b9c:	233e      	movs	r3, #62	; 0x3e
 8002b9e:	817b      	strh	r3, [r7, #10]
			break;
 8002ba0:	e017      	b.n	8002bd2 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_String:
			switch (descriptor_number)
 8002ba2:	7a3b      	ldrb	r3, [r7, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d009      	beq.n	8002bbc <USBD_VCOM_Event_GetDescriptor+0x60>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d00c      	beq.n	8002bc6 <USBD_VCOM_Event_GetDescriptor+0x6a>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d000      	beq.n	8002bb2 <USBD_VCOM_Event_GetDescriptor+0x56>
				case 0x02:
					address = &product_string;
					size    = product_string.Header.Size;
					break;
			}
			break;
 8002bb0:	e00e      	b.n	8002bd0 <USBD_VCOM_Event_GetDescriptor+0x74>
			break;
		case DTYPE_String:
			switch (descriptor_number)
			{
				case 0x00:
					address = &language_string;
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <USBD_VCOM_Event_GetDescriptor+0x94>)
 8002bb4:	60fb      	str	r3, [r7, #12]
					size    = language_string.Header.Size;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	817b      	strh	r3, [r7, #10]
					break;
 8002bba:	e009      	b.n	8002bd0 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x01:
					address = &manufacturer_string;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <USBD_VCOM_Event_GetDescriptor+0x98>)
 8002bbe:	60fb      	str	r3, [r7, #12]
					size    = manufacturer_string.Header.Size;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	817b      	strh	r3, [r7, #10]
					break;
 8002bc4:	e004      	b.n	8002bd0 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x02:
					address = &product_string;
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <USBD_VCOM_Event_GetDescriptor+0x9c>)
 8002bc8:	60fb      	str	r3, [r7, #12]
					size    = product_string.Header.Size;
 8002bca:	2310      	movs	r3, #16
 8002bcc:	817b      	strh	r3, [r7, #10]
					break;
 8002bce:	bf00      	nop
			}
			break;
 8002bd0:	bf00      	nop
	}

	(void)w_index;
	*descriptor_address = address;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]
	return size;
 8002bd8:	897b      	ldrh	r3, [r7, #10]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	080085cc 	.word	0x080085cc
 8002bec:	080085e0 	.word	0x080085e0
 8002bf0:	08008620 	.word	0x08008620
 8002bf4:	08008688 	.word	0x08008688
 8002bf8:	080086f0 	.word	0x080086f0

08002bfc <Endpoint_SelectEndpoint>:
	 *
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <Endpoint_SelectEndpoint+0x30>)
 8002c10:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <Endpoint_SelectEndpoint+0x30>)
 8002c1e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	1ffe8f50 	.word	0x1ffe8f50

08002c30 <Endpoint_IsSETUPReceived>:
	 *  \return Boolean \c true if the selected endpoint has received a SETUP
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
		return device.IsSetupRecieved;
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <Endpoint_IsSETUPReceived+0x28>)
 8002c36:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
	}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	1ffe8f50 	.word	0x1ffe8f50

08002c5c <Endpoint_ClearSETUP>:
	 *
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
		device.IsSetupRecieved = 0;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <Endpoint_ClearSETUP+0x1c>)
 8002c62:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8002c66:	f022 0202 	bic.w	r2, r2, #2
 8002c6a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	}
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	1ffe8f50 	.word	0x1ffe8f50

08002c7c <Endpoint_ClearStatusStage>:
	/** Nothing done in this function
	 *
	 */
	static inline void Endpoint_ClearStatusStage(void);
	static inline void Endpoint_ClearStatusStage(void)
	{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

	}
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <Endpoint_IsINReady+0x54>)
 8002c90:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c94:	461a      	mov	r2, r3
 8002c96:	232c      	movs	r3, #44	; 0x2c
 8002c98:	fb03 f302 	mul.w	r3, r3, r2
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <Endpoint_IsINReady+0x54>)
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <Endpoint_IsINReady+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <Endpoint_IsINReady+0x40>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <Endpoint_IsINReady+0x42>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
	}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	1ffe8f50 	.word	0x1ffe8f50

08002ce0 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <Endpoint_IsOUTReceived+0x40>)
 8002ce8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002cec:	461a      	mov	r2, r3
 8002cee:	232c      	movs	r3, #44	; 0x2c
 8002cf0:	fb03 f302 	mul.w	r3, r3, r2
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <Endpoint_IsOUTReceived+0x40>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
	}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	1ffe8f50 	.word	0x1ffe8f50

08002d24 <Endpoint_BytesInEndpoint>:
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO
	 *  buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <Endpoint_BytesInEndpoint+0x44>)
 8002d2c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002d30:	461a      	mov	r2, r3
 8002d32:	232c      	movs	r3, #44	; 0x2c
 8002d34:	fb03 f302 	mul.w	r3, r3, r2
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <Endpoint_BytesInEndpoint+0x44>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	607b      	str	r3, [r7, #4]
		if (ep->Direction)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <Endpoint_BytesInEndpoint+0x32>
			return (uint16_t)(ep->InBytesAvailable);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	e002      	b.n	8002d5c <Endpoint_BytesInEndpoint+0x38>
		else
			return (uint16_t)(ep->OutBytesAvailable);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	b29b      	uxth	r3, r3
	}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	1ffe8f50 	.word	0x1ffe8f50

08002d6c <CDC_Device_ProcessControlRequest>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8002d74:	f7ff ff5c 	bl	8002c30 <Endpoint_IsSETUPReceived>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80ae 	beq.w	8002edc <CDC_Device_ProcessControlRequest+0x170>
 8002d80:	4b58      	ldr	r3, [pc, #352]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002d82:	889b      	ldrh	r3, [r3, #4]
 8002d84:	b29a      	uxth	r2, r3
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7c9b      	ldrb	r3, [r3, #18]
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f040 80a5 	bne.w	8002edc <CDC_Device_ProcessControlRequest+0x170>
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 8002d92:	4b54      	ldr	r3, [pc, #336]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3b20      	subs	r3, #32
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	f200 809e 	bhi.w	8002edc <CDC_Device_ProcessControlRequest+0x170>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <CDC_Device_ProcessControlRequest+0x3c>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002e0d 	.word	0x08002e0d
 8002dac:	08002db9 	.word	0x08002db9
 8002db0:	08002e7f 	.word	0x08002e7f
 8002db4:	08002eaf 	.word	0x08002eaf
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2ba1      	cmp	r3, #161	; 0xa1
 8002dc0:	d123      	bne.n	8002e0a <CDC_Device_ProcessControlRequest+0x9e>
				{
					Endpoint_ClearSETUP();
 8002dc2:	f7ff ff4b 	bl	8002c5c <Endpoint_ClearSETUP>

					while (!(Endpoint_IsINReady()));
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ff5e 	bl	8002c88 <Endpoint_IsINReady>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f083 0301 	eor.w	r3, r3, #1
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f7      	bne.n	8002dc8 <CDC_Device_ProcessControlRequest+0x5c>

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 feed 	bl	8003bbc <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7f1b      	ldrb	r3, [r3, #28]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fe7c 	bl	8003ae4 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7f5b      	ldrb	r3, [r3, #29]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fe77 	bl	8003ae4 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7f9b      	ldrb	r3, [r3, #30]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fe72 	bl	8003ae4 <Endpoint_Write_8>

					Endpoint_ClearIN();
 8002e00:	f000 fdec 	bl	80039dc <Endpoint_ClearIN>
					Endpoint_ClearStatusStage();
 8002e04:	f7ff ff3a 	bl	8002c7c <Endpoint_ClearStatusStage>
				}

				break;
 8002e08:	e068      	b.n	8002edc <CDC_Device_ProcessControlRequest+0x170>
 8002e0a:	e067      	b.n	8002edc <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b21      	cmp	r3, #33	; 0x21
 8002e14:	d132      	bne.n	8002e7c <CDC_Device_ProcessControlRequest+0x110>
				{
					Endpoint_ClearSETUP();
 8002e16:	f7ff ff21 	bl	8002c5c <Endpoint_ClearSETUP>

					while (!(Endpoint_IsOUTReceived()))
 8002e1a:	e005      	b.n	8002e28 <CDC_Device_ProcessControlRequest+0xbc>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 8002e1c:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <CDC_Device_ProcessControlRequest+0x17c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d100      	bne.n	8002e28 <CDC_Device_ProcessControlRequest+0xbc>
						  return;
 8002e26:	e059      	b.n	8002edc <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 8002e28:	f7ff ff5a 	bl	8002ce0 <Endpoint_IsOUTReceived>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f1      	bne.n	8002e1c <CDC_Device_ProcessControlRequest+0xb0>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8002e38:	f000 fef4 	bl	8003c24 <Endpoint_Read_32_LE>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8002e42:	f000 fe83 	bl	8003b4c <Endpoint_Read_8>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	771a      	strb	r2, [r3, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8002e4e:	f000 fe7d 	bl	8003b4c <Endpoint_Read_8>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	775a      	strb	r2, [r3, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8002e5a:	f000 fe77 	bl	8003b4c <Endpoint_Read_8>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	779a      	strb	r2, [r3, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();
 8002e66:	f7ff ff09 	bl	8002c7c <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.LineEncodingChanged)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <CDC_Device_ProcessControlRequest+0x180>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <CDC_Device_ProcessControlRequest+0x110>
					{
						cdc_class_events.LineEncodingChanged(CDCInterfaceInfo);
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <CDC_Device_ProcessControlRequest+0x180>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
					}

				}

				break;
 8002e7a:	e02f      	b.n	8002edc <CDC_Device_ProcessControlRequest+0x170>
 8002e7c:	e02e      	b.n	8002edc <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b21      	cmp	r3, #33	; 0x21
 8002e86:	d111      	bne.n	8002eac <CDC_Device_ProcessControlRequest+0x140>
				{
					Endpoint_ClearSETUP();
 8002e88:	f7ff fee8 	bl	8002c5c <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8002e8c:	f7ff fef6 	bl	8002c7c <Endpoint_ClearStatusStage>

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002e92:	885b      	ldrh	r3, [r3, #2]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	829a      	strh	r2, [r3, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <CDC_Device_ProcessControlRequest+0x180>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <CDC_Device_ProcessControlRequest+0x140>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <CDC_Device_ProcessControlRequest+0x180>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
					}

				}

				break;
 8002eaa:	e017      	b.n	8002edc <CDC_Device_ProcessControlRequest+0x170>
 8002eac:	e016      	b.n	8002edc <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b21      	cmp	r3, #33	; 0x21
 8002eb6:	d110      	bne.n	8002eda <CDC_Device_ProcessControlRequest+0x16e>
				{
					Endpoint_ClearSETUP();
 8002eb8:	f7ff fed0 	bl	8002c5c <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8002ebc:	f7ff fede 	bl	8002c7c <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.Device_BreakSent)
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <CDC_Device_ProcessControlRequest+0x180>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <CDC_Device_ProcessControlRequest+0x16e>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <CDC_Device_ProcessControlRequest+0x180>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <CDC_Device_ProcessControlRequest+0x178>)
 8002ece:	8852      	ldrh	r2, [r2, #2]
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4798      	blx	r3
					}

				}

				break;
 8002eda:	bf00      	nop
		}
	}
}
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	1ffe8d48 	.word	0x1ffe8d48
 8002ee8:	1ffe8d45 	.word	0x1ffe8d45
 8002eec:	1ffe8828 	.word	0x1ffe8828

08002ef0 <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	bool status = true;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3314      	adds	r3, #20
 8002f00:	4618      	mov	r0, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	220c      	movs	r2, #12
 8002f06:	f002 f974 	bl	80051f2 <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	711a      	strb	r2, [r3, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	729a      	strb	r2, [r3, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	741a      	strb	r2, [r3, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	2101      	movs	r1, #1
 8002f22:	f000 feb7 	bl	8003c94 <Endpoint_ConfigureEndpointTable>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f083 0301 	eor.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <CDC_Device_ConfigureEndpoints+0x46>
	{
		status = false;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3306      	adds	r3, #6
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	f000 fea9 	bl	8003c94 <Endpoint_ConfigureEndpointTable>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f083 0301 	eor.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <CDC_Device_ConfigureEndpoints+0x62>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	330c      	adds	r3, #12
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002f56:	4618      	mov	r0, r3
 8002f58:	2101      	movs	r1, #1
 8002f5a:	f000 fe9b 	bl	8003c94 <Endpoint_ConfigureEndpointTable>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <CDC_Device_ConfigureEndpoints+0x7e>
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	{
		status = false;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <CDC_Device_USBTask+0x3c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d110      	bne.n	8002fac <CDC_Device_USBTask+0x34>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <CDC_Device_USBTask+0x34>
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe30 	bl	8002bfc <Endpoint_SelectEndpoint>

		if (Endpoint_IsINReady())
 8002f9c:	f7ff fe74 	bl	8002c88 <Endpoint_IsINReady>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <CDC_Device_USBTask+0x34>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f88e 	bl	80030c8 <CDC_Device_Flush>
		}
		#endif
	}
}
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	1ffe8d45 	.word	0x1ffe8d45

08002fb8 <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const char* const String)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <CDC_Device_SendString+0x54>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d115      	bne.n	8002ffc <CDC_Device_SendString+0x44>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d011      	beq.n	8002ffc <CDC_Device_SendString+0x44>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fe0d 	bl	8002bfc <Endpoint_SelectEndpoint>
		status = Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8002fe2:	6838      	ldr	r0, [r7, #0]
 8002fe4:	f002 fe02 	bl	8005bec <strlen>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	6838      	ldr	r0, [r7, #0]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f000 fb03 	bl	80035fc <Endpoint_Write_Stream_LE>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	e001      	b.n	8003000 <CDC_Device_SendString+0x48>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	1ffe8d45 	.word	0x1ffe8d45

08003010 <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
	uint8_t status = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <CDC_Device_SendData+0x50>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b04      	cmp	r3, #4
 800302a:	d111      	bne.n	8003050 <CDC_Device_SendData+0x40>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <CDC_Device_SendData+0x40>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fddf 	bl	8002bfc <Endpoint_SelectEndpoint>
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	68b8      	ldr	r0, [r7, #8]
 8003042:	4619      	mov	r1, r3
 8003044:	2200      	movs	r2, #0
 8003046:	f000 fad9 	bl	80035fc <Endpoint_Write_Stream_LE>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
 800304e:	e001      	b.n	8003054 <CDC_Device_SendData+0x44>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003050:	2302      	movs	r3, #2
 8003052:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	1ffe8d45 	.word	0x1ffe8d45

08003064 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <CDC_Device_SendByte+0x60>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b04      	cmp	r3, #4
 800307c:	d11b      	bne.n	80030b6 <CDC_Device_SendByte+0x52>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d017      	beq.n	80030b6 <CDC_Device_SendByte+0x52>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fdb6 	bl	8002bfc <Endpoint_SelectEndpoint>

		if (Endpoint_IsReadWriteAllowed())
 8003090:	f000 fcf6 	bl	8003a80 <Endpoint_IsReadWriteAllowed>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <CDC_Device_SendByte+0x44>
		{
			Endpoint_Write_8(Data);
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd21 	bl	8003ae4 <Endpoint_Write_8>
			status = ENDPOINT_READYWAIT_NoError;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

		if (Endpoint_IsReadWriteAllowed())
 80030a6:	e008      	b.n	80030ba <CDC_Device_SendByte+0x56>
			Endpoint_Write_8(Data);
			status = ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			Endpoint_ClearIN();
 80030a8:	f000 fc98 	bl	80039dc <Endpoint_ClearIN>
			status = Endpoint_WaitUntilReady();
 80030ac:	f000 fc00 	bl	80038b0 <Endpoint_WaitUntilReady>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

		if (Endpoint_IsReadWriteAllowed())
 80030b4:	e001      	b.n	80030ba <CDC_Device_SendByte+0x56>
			status = Endpoint_WaitUntilReady();
		}
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 80030b6:	2302      	movs	r3, #2
 80030b8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	1ffe8d45 	.word	0x1ffe8d45

080030c8 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <CDC_Device_Flush+0x4c>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d112      	bne.n	8003104 <CDC_Device_Flush+0x3c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <CDC_Device_Flush+0x3c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fd86 	bl	8002bfc <Endpoint_SelectEndpoint>

		if (Endpoint_BytesInEndpoint())
 80030f0:	f7ff fe18 	bl	8002d24 <Endpoint_BytesInEndpoint>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <CDC_Device_Flush+0x36>
		{
			Endpoint_ClearIN();
 80030fa:	f000 fc6f 	bl	80039dc <Endpoint_ClearIN>
		}

		status = ENDPOINT_READYWAIT_NoError;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e001      	b.n	8003108 <CDC_Device_Flush+0x40>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003104:	2302      	movs	r3, #2
 8003106:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	1ffe8d45 	.word	0x1ffe8d45

08003118 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	uint16_t bytes = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	81fb      	strh	r3, [r7, #14]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <CDC_Device_BytesReceived+0x60>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b04      	cmp	r3, #4
 800312c:	d11e      	bne.n	800316c <CDC_Device_BytesReceived+0x54>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01a      	beq.n	800316c <CDC_Device_BytesReceived+0x54>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	799b      	ldrb	r3, [r3, #6]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fd5e 	bl	8002bfc <Endpoint_SelectEndpoint>

		if (Endpoint_IsOUTReceived())
 8003140:	f7ff fdce 	bl	8002ce0 <Endpoint_IsOUTReceived>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00e      	beq.n	8003168 <CDC_Device_BytesReceived+0x50>
		{
			if (!(Endpoint_BytesInEndpoint()))
 800314a:	f7ff fdeb 	bl	8002d24 <Endpoint_BytesInEndpoint>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <CDC_Device_BytesReceived+0x46>
			{
				Endpoint_ClearOUT();
 8003154:	f000 fbf4 	bl	8003940 <Endpoint_ClearOUT>
				bytes = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	81fb      	strh	r3, [r7, #14]
 800315c:	e006      	b.n	800316c <CDC_Device_BytesReceived+0x54>
			}
			else
			{
				bytes = Endpoint_BytesInEndpoint();
 800315e:	f7ff fde1 	bl	8002d24 <Endpoint_BytesInEndpoint>
 8003162:	4603      	mov	r3, r0
 8003164:	81fb      	strh	r3, [r7, #14]
 8003166:	e001      	b.n	800316c <CDC_Device_BytesReceived+0x54>
			}
		}
		else
		{
			bytes = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return bytes;
 800316c:	89fb      	ldrh	r3, [r7, #14]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	1ffe8d45 	.word	0x1ffe8d45

0800317c <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(
						USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	int16_t Rx_bytes = -1;
 8003184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003188:	81fb      	strh	r3, [r7, #14]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <CDC_Device_ReceiveByte+0x58>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b04      	cmp	r3, #4
 8003192:	d119      	bne.n	80031c8 <CDC_Device_ReceiveByte+0x4c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <CDC_Device_ReceiveByte+0x4c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	799b      	ldrb	r3, [r3, #6]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fd2b 	bl	8002bfc <Endpoint_SelectEndpoint>

		if (Endpoint_IsOUTReceived())
 80031a6:	f7ff fd9b 	bl	8002ce0 <Endpoint_IsOUTReceived>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <CDC_Device_ReceiveByte+0x4c>
		{
			if (Endpoint_BytesInEndpoint())
 80031b0:	f7ff fdb8 	bl	8002d24 <Endpoint_BytesInEndpoint>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <CDC_Device_ReceiveByte+0x48>
			{
				Rx_bytes = Endpoint_Read_8();
 80031ba:	f000 fcc7 	bl	8003b4c <Endpoint_Read_8>
 80031be:	4603      	mov	r3, r0
 80031c0:	81fb      	strh	r3, [r7, #14]
 80031c2:	e001      	b.n	80031c8 <CDC_Device_ReceiveByte+0x4c>
			}
			else
			{
				Endpoint_ClearOUT();
 80031c4:	f000 fbbc 	bl	8003940 <Endpoint_ClearOUT>
			}

		}

	}
	return Rx_bytes;
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	b21b      	sxth	r3, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	1ffe8d45 	.word	0x1ffe8d45

080031d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	db0b      	blt.n	8003202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <__NVIC_EnableIRQ+0x34>)
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	79fa      	ldrb	r2, [r7, #7]
 80031f4:	f002 021f 	and.w	r2, r2, #31
 80031f8:	2001      	movs	r0, #1
 80031fa:	fa00 f202 	lsl.w	r2, r0, r2
 80031fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000e100 	.word	0xe000e100

08003210 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db10      	blt.n	8003244 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	490b      	ldr	r1, [pc, #44]	; (8003250 <__NVIC_DisableIRQ+0x40>)
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	79fa      	ldrb	r2, [r7, #7]
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	3320      	adds	r3, #32
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800323c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003240:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e100 	.word	0xe000e100

08003254 <USBD_VCOM_Init>:
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 8003262:	2200      	movs	r2, #0
 8003264:	749a      	strb	r2, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 8003268:	2282      	movs	r2, #130	; 0x82
 800326a:	701a      	strb	r2, [r3, #0]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	805a      	strh	r2, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 8003274:	2202      	movs	r2, #2
 8003276:	711a      	strb	r2, [r3, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 800327a:	2200      	movs	r2, #0
 800327c:	715a      	strb	r2, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 8003280:	2203      	movs	r2, #3
 8003282:	719a      	strb	r2, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	811a      	strh	r2, [r3, #8]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 800328c:	2202      	movs	r2, #2
 800328e:	729a      	strb	r2, [r3, #10]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 8003292:	2200      	movs	r2, #0
 8003294:	72da      	strb	r2, [r3, #11]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 8003298:	2281      	movs	r2, #129	; 0x81
 800329a:	731a      	strb	r2, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 800329e:	2208      	movs	r2, #8
 80032a0:	81da      	strh	r2, [r3, #14]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 80032a4:	2203      	movs	r2, #3
 80032a6:	741a      	strb	r2, [r3, #16]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <USBD_VCOM_Init+0x8c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	745a      	strb	r2, [r3, #17]

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 80032ae:	480d      	ldr	r0, [pc, #52]	; (80032e4 <USBD_VCOM_Init+0x90>)
 80032b0:	f000 f8c8 	bl	8003444 <USBD_VCOM_Register_USBEvent_CB>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <USBD_VCOM_Init+0x7c>
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <USBD_VCOM_Init+0x94>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fe56 	bl	8003f70 <USBD_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <USBD_VCOM_Init+0x80>
    {
      status = USBD_VCOM_STATUS_FAILURE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e001      	b.n	80032d4 <USBD_VCOM_Init+0x80>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	1ffe8d24 	.word	0x1ffe8d24
 80032e4:	1ffe8800 	.word	0x1ffe8800
 80032e8:	1ffe884c 	.word	0x1ffe884c

080032ec <USBD_VCOM_SendByte>:
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
}

/* This function sends a byte to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendByte(const uint8_t data_byte)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]

  /* Send a byte to the host. */
  if ((uint8_t)ENDPOINT_RWSTREAM_NoError != CDC_Device_SendByte(&USBD_VCOM_cdc_interface, data_byte))
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	480a      	ldr	r0, [pc, #40]	; (8003328 <USBD_VCOM_SendByte+0x3c>)
 80032fe:	4619      	mov	r1, r3
 8003300:	f7ff feb0 	bl	8003064 <CDC_Device_SendByte>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <USBD_VCOM_SendByte+0x22>
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 800330a:	2306      	movs	r3, #6
 800330c:	73fb      	strb	r3, [r7, #15]
  }
  if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 800330e:	4806      	ldr	r0, [pc, #24]	; (8003328 <USBD_VCOM_SendByte+0x3c>)
 8003310:	f7ff feda 	bl	80030c8 <CDC_Device_Flush>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <USBD_VCOM_SendByte+0x32>
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 800331a:	2306      	movs	r3, #6
 800331c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	1ffe8d24 	.word	0x1ffe8d24

0800332c <USBD_VCOM_SendData>:

/* This function sends multiple bytes to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendData(const int8_t* const data_buffer, const uint16_t length)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]

  if ((length == 0U) || (data_buffer == NULL))
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <USBD_VCOM_SendData+0x1c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <USBD_VCOM_SendData+0x22>
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
 8003348:	2306      	movs	r3, #6
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e012      	b.n	8003374 <USBD_VCOM_SendData+0x48>
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	480b      	ldr	r0, [pc, #44]	; (8003380 <USBD_VCOM_SendData+0x54>)
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	461a      	mov	r2, r3
 8003356:	f7ff fe5b 	bl	8003010 <CDC_Device_SendData>
 800335a:	4603      	mov	r3, r0
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <USBD_VCOM_SendData+0x38>
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8003360:	2306      	movs	r3, #6
 8003362:	73fb      	strb	r3, [r7, #15]
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 8003364:	4806      	ldr	r0, [pc, #24]	; (8003380 <USBD_VCOM_SendData+0x54>)
 8003366:	f7ff feaf 	bl	80030c8 <CDC_Device_Flush>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <USBD_VCOM_SendData+0x48>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8003370:	2306      	movs	r3, #6
 8003372:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	1ffe8d24 	.word	0x1ffe8d24

08003384 <USBD_VCOM_SendString>:

/* This function sends string data to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendString(const int8_t* const data_string)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]

  if (data_string != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d011      	beq.n	80033ba <USBD_VCOM_SendString+0x36>
  {
    /* Send string to the host */
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError != CDC_Device_SendString(&USBD_VCOM_cdc_interface, (const char*)data_string))
 8003396:	480c      	ldr	r0, [pc, #48]	; (80033c8 <USBD_VCOM_SendString+0x44>)
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	f7ff fe0d 	bl	8002fb8 <CDC_Device_SendString>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <USBD_VCOM_SendString+0x24>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80033a4:	2306      	movs	r3, #6
 80033a6:	73fb      	strb	r3, [r7, #15]
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 80033a8:	4807      	ldr	r0, [pc, #28]	; (80033c8 <USBD_VCOM_SendString+0x44>)
 80033aa:	f7ff fe8d 	bl	80030c8 <CDC_Device_Flush>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <USBD_VCOM_SendString+0x3a>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80033b4:	2306      	movs	r3, #6
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	e001      	b.n	80033be <USBD_VCOM_SendString+0x3a>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 80033ba:	2306      	movs	r3, #6
 80033bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	1ffe8d24 	.word	0x1ffe8d24

080033cc <USBD_VCOM_ReceiveByte>:

/* This function receives a byte from the USB host.*/
USBD_VCOM_STATUS_t USBD_VCOM_ReceiveByte(int8_t* data_byte)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
  int16_t rx_byte;

  if (data_byte != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d011      	beq.n	8003402 <USBD_VCOM_ReceiveByte+0x36>
  {
    /* Receive one byte of data */
    rx_byte = CDC_Device_ReceiveByte(&USBD_VCOM_cdc_interface);
 80033de:	480c      	ldr	r0, [pc, #48]	; (8003410 <USBD_VCOM_ReceiveByte+0x44>)
 80033e0:	f7ff fecc 	bl	800317c <CDC_Device_ReceiveByte>
 80033e4:	4603      	mov	r3, r0
 80033e6:	81bb      	strh	r3, [r7, #12]

    if (rx_byte != -1)
 80033e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d004      	beq.n	80033fc <USBD_VCOM_ReceiveByte+0x30>
    {
      *data_byte = (int8_t)rx_byte;
 80033f2:	89bb      	ldrh	r3, [r7, #12]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e004      	b.n	8003406 <USBD_VCOM_ReceiveByte+0x3a>
    }
    else
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80033fc:	2306      	movs	r3, #6
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e001      	b.n	8003406 <USBD_VCOM_ReceiveByte+0x3a>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 8003402:	2306      	movs	r3, #6
 8003404:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	1ffe8d24 	.word	0x1ffe8d24

08003414 <USBD_VCOM_BytesReceived>:
  return status;
}

/* This function checks number of bytes received from the USB host. */
uint16_t USBD_VCOM_BytesReceived(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
  uint16_t bytes = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	80fb      	strh	r3, [r7, #6]

  /* Check if bytes are received from host */
  NVIC_DisableIRQ(USB0_0_IRQn);
 800341e:	206b      	movs	r0, #107	; 0x6b
 8003420:	f7ff fef6 	bl	8003210 <__NVIC_DisableIRQ>
  bytes = CDC_Device_BytesReceived(&USBD_VCOM_cdc_interface);
 8003424:	4806      	ldr	r0, [pc, #24]	; (8003440 <USBD_VCOM_BytesReceived+0x2c>)
 8003426:	f7ff fe77 	bl	8003118 <CDC_Device_BytesReceived>
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]
  NVIC_EnableIRQ(USB0_0_IRQn);	
 800342e:	206b      	movs	r0, #107	; 0x6b
 8003430:	f7ff fed2 	bl	80031d8 <__NVIC_EnableIRQ>
    
  return bytes;
 8003434:	88fb      	ldrh	r3, [r7, #6]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	1ffe8d24 	.word	0x1ffe8d24

08003444 <USBD_VCOM_Register_USBEvent_CB>:
/**
 * Register the USB event call backs.
 * Call this API before calling USBD_Init
 **/
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]

  /*Register USB event call backs*/
  if (event_callback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03c      	beq.n	80034d0 <USBD_VCOM_Register_USBEvent_CB+0x8c>
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6912      	ldr	r2, [r2, #16]
 8003460:	611a      	str	r2, [r3, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6892      	ldr	r2, [r2, #8]
 800346c:	609a      	str	r2, [r3, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	601a      	str	r2, [r3, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
 800347a:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68d2      	ldr	r2, [r2, #12]
 8003484:	60da      	str	r2, [r3, #12]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6852      	ldr	r2, [r2, #4]
 8003490:	605a      	str	r2, [r3, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6952      	ldr	r2, [r2, #20]
 800349c:	615a      	str	r2, [r3, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	69d2      	ldr	r2, [r2, #28]
 80034a8:	61da      	str	r2, [r3, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6992      	ldr	r2, [r2, #24]
 80034b4:	619a      	str	r2, [r3, #24]
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6a12      	ldr	r2, [r2, #32]
 80034c0:	621a      	str	r2, [r3, #32]
    USBD_handle->event_cb->reset = event_callback->reset;
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24
 80034ce:	e001      	b.n	80034d4 <USBD_VCOM_Register_USBEvent_CB+0x90>
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]

}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	1ffe884c 	.word	0x1ffe884c

080034e8 <USBD_VCOM_Event_ConfigurationChanged>:

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 80034ec:	2081      	movs	r0, #129	; 0x81
 80034ee:	490f      	ldr	r1, [pc, #60]	; (800352c <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	f000 fddb 	bl	80040ac <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 80034f6:	2082      	movs	r0, #130	; 0x82
 80034f8:	490d      	ldr	r1, [pc, #52]	; (8003530 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	f000 fdd6 	bl	80040ac <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8003500:	2003      	movs	r0, #3
 8003502:	490c      	ldr	r1, [pc, #48]	; (8003534 <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 8003504:	2240      	movs	r2, #64	; 0x40
 8003506:	f000 fdd1 	bl	80040ac <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 800350a:	480b      	ldr	r0, [pc, #44]	; (8003538 <USBD_VCOM_Event_ConfigurationChanged+0x50>)
 800350c:	f7ff fcf0 	bl	8002ef0 <CDC_Device_ConfigureEndpoints>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <USBD_VCOM_Event_ConfigurationChanged+0x42>
  {
    device.IsConfigured = 1U;
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <USBD_VCOM_Event_ConfigurationChanged+0x54>)
 8003518:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <USBD_VCOM_Event_ConfigurationChanged+0x58>)
 8003526:	2204      	movs	r2, #4
 8003528:	701a      	strb	r2, [r3, #0]
  }
}
 800352a:	bd80      	pop	{r7, pc}
 800352c:	1ffe8ca4 	.word	0x1ffe8ca4
 8003530:	1ffe8c60 	.word	0x1ffe8c60
 8003534:	1ffe8ce4 	.word	0x1ffe8ce4
 8003538:	1ffe8d24 	.word	0x1ffe8d24
 800353c:	1ffe8f50 	.word	0x1ffe8f50
 8003540:	1ffe8d45 	.word	0x1ffe8d45

08003544 <USBD_VCOM_Event_ControlRequest>:

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <USBD_VCOM_Event_ControlRequest+0xc>)
 800354a:	f7ff fc0f 	bl	8002d6c <CDC_Device_ProcessControlRequest>
}
 800354e:	bd80      	pop	{r7, pc}
 8003550:	1ffe8d24 	.word	0x1ffe8d24

08003554 <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <USBD_VCOM_Event_Reset+0x38>)
 800355a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <USBD_VCOM_Event_Reset+0x36>
  {
    device.IsConfigured = 0U;
 8003568:	4a08      	ldr	r2, [pc, #32]	; (800358c <USBD_VCOM_Event_Reset+0x38>)
 800356a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800356e:	f36f 0300 	bfc	r3, #0, #1
 8003572:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Init(USBD_VCOM_handle))
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <USBD_VCOM_Event_Reset+0x3c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fe6a 	bl	8003254 <USBD_VCOM_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <USBD_VCOM_Event_Reset+0x36>
    {
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 8003586:	f000 f831 	bl	80035ec <USBD_VCOM_Connect>
      {
      }
    }
  }
}
 800358a:	bd80      	pop	{r7, pc}
 800358c:	1ffe8f50 	.word	0x1ffe8f50
 8003590:	1ffe8834 	.word	0x1ffe8834

08003594 <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
/*CDC class driver event for a line encoding change on a CDC interface. This event fires each time the host
 * requests a line encoding change (containing the serial parity, baud and other configuration information). The new
 * line encoding settings are available in the LineEncoding structure inside the CDC interface structure passed
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x18>)
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
  (void)cdc_interface_info;

}
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	1ffe8ca0 	.word	0x1ffe8ca0

080035b0 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
/*CDC class driver event for a control line state change on a CDC interface. This event fires
 * each time the host requests a control line state change (containing the virtual serial control
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x18>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	705a      	strb	r2, [r3, #1]
  (void)cdc_interface_info;

}
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	1ffe8ca0 	.word	0x1ffe8ca0

080035cc <USBD_VCOM_CDCClass_Event_BreakSent>:

/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <USBD_VCOM_CDCClass_Event_BreakSent+0x1c>)
 80035da:	2201      	movs	r2, #1
 80035dc:	709a      	strb	r2, [r3, #2]
  (void)cdc_interface_info;
  (void)duration;

}
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	1ffe8ca0 	.word	0x1ffe8ca0

080035ec <USBD_VCOM_Connect>:

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 80035f0:	f000 fd50 	bl	8004094 <USBD_Connect>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop

080035fc <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	460b      	mov	r3, r1
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <Endpoint_Write_Stream_LE+0x108>)
 800360c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003610:	461a      	mov	r2, r3
 8003612:	232c      	movs	r3, #44	; 0x2c
 8003614:	fb03 f302 	mul.w	r3, r3, r2
 8003618:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <Endpoint_Write_Stream_LE+0x108>)
 800361a:	4413      	add	r3, r2
 800361c:	3304      	adds	r3, #4
 800361e:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	83fb      	strh	r3, [r7, #30]
	uint16_t BytesTransfered = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	83bb      	strh	r3, [r7, #28]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <Endpoint_Write_Stream_LE+0x42>
	{
		Length -= *BytesProcessed;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	897a      	ldrh	r2, [r7, #10]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	83bb      	strh	r3, [r7, #28]
	}

	while (Length) 
 800363e:	e058      	b.n	80036f2 <Endpoint_Write_Stream_LE+0xf6>
	{
		if (ep->InInUse)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d000      	beq.n	8003652 <Endpoint_Write_Stream_LE+0x56>
		{
			continue;
 8003650:	e04f      	b.n	80036f2 <Endpoint_Write_Stream_LE+0xf6>
		}
		if (Endpoint_IsReadWriteAllowed()) 
 8003652:	f000 fa15 	bl	8003a80 <Endpoint_IsReadWriteAllowed>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d02f      	beq.n	80036bc <Endpoint_Write_Stream_LE+0xc0>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	1ad2      	subs	r2, r2, r3
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	429a      	cmp	r2, r3
 800366a:	d902      	bls.n	8003672 <Endpoint_Write_Stream_LE+0x76>
			{
				Bytes = Length;
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	83fb      	strh	r3, [r7, #30]
 8003670:	e007      	b.n	8003682 <Endpoint_Write_Stream_LE+0x86>
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	b29a      	uxth	r2, r3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	b29b      	uxth	r3, r3
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	18d1      	adds	r1, r2, r3
 800368c:	8bbb      	ldrh	r3, [r7, #28]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	441a      	add	r2, r3
 8003692:	8bfb      	ldrh	r3, [r7, #30]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	f001 fd9f 	bl	80051dc <memcpy>
			ep->InBytesAvailable += Bytes;
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	8bfb      	ldrh	r3, [r7, #30]
 80036a4:	441a      	add	r2, r3
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 80036aa:	8bba      	ldrh	r2, [r7, #28]
 80036ac:	8bfb      	ldrh	r3, [r7, #30]
 80036ae:	4413      	add	r3, r2
 80036b0:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 80036b2:	897a      	ldrh	r2, [r7, #10]
 80036b4:	8bfb      	ldrh	r3, [r7, #30]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	e01a      	b.n	80036f2 <Endpoint_Write_Stream_LE+0xf6>
		}
		else 
		{
			Endpoint_ClearIN();
 80036bc:	f000 f98e 	bl	80039dc <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	8892      	ldrh	r2, [r2, #4]
 80036c6:	f3c2 1286 	ubfx	r2, r2, #6, #7
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	4293      	cmp	r3, r2
 80036ce:	da07      	bge.n	80036e0 <Endpoint_Write_Stream_LE+0xe4>
			{
				if (BytesProcessed!=NULL) 
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <Endpoint_Write_Stream_LE+0xe4>
				{
					*BytesProcessed = BytesTransfered;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8bba      	ldrh	r2, [r7, #28]
 80036da:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80036dc:	2305      	movs	r3, #5
 80036de:	e00c      	b.n	80036fa <Endpoint_Write_Stream_LE+0xfe>
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 80036e0:	f000 f8e6 	bl	80038b0 <Endpoint_WaitUntilReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]
			if (ErrorCode) 
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <Endpoint_Write_Stream_LE+0xf6>
			{
				return ErrorCode;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	e003      	b.n	80036fa <Endpoint_Write_Stream_LE+0xfe>
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1a3      	bne.n	8003640 <Endpoint_Write_Stream_LE+0x44>
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	1ffe8f50 	.word	0x1ffe8f50

08003708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	2b00      	cmp	r3, #0
 8003718:	db0b      	blt.n	8003732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_EnableIRQ+0x34>)
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	79fa      	ldrb	r2, [r7, #7]
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2001      	movs	r0, #1
 800372a:	fa00 f202 	lsl.w	r2, r0, r2
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e100 	.word	0xe000e100

08003740 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	db10      	blt.n	8003774 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003752:	490b      	ldr	r1, [pc, #44]	; (8003780 <__NVIC_DisableIRQ+0x40>)
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	79fa      	ldrb	r2, [r7, #7]
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	2001      	movs	r0, #1
 8003762:	fa00 f202 	lsl.w	r2, r0, r2
 8003766:	3320      	adds	r3, #32
 8003768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800376c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003770:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000e100 	.word	0xe000e100

08003784 <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <Endpoint_IsINReady+0x54>)
 800378c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003790:	461a      	mov	r2, r3
 8003792:	232c      	movs	r3, #44	; 0x2c
 8003794:	fb03 f302 	mul.w	r3, r3, r2
 8003798:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <Endpoint_IsINReady+0x54>)
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <Endpoint_IsINReady+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <Endpoint_IsINReady+0x40>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <Endpoint_IsINReady+0x42>
 80037c4:	2300      	movs	r3, #0
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
	}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	1ffe8f50 	.word	0x1ffe8f50

080037dc <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <Endpoint_IsOUTReceived+0x40>)
 80037e4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80037e8:	461a      	mov	r2, r3
 80037ea:	232c      	movs	r3, #44	; 0x2c
 80037ec:	fb03 f302 	mul.w	r3, r3, r2
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <Endpoint_IsOUTReceived+0x40>)
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
	}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	1ffe8f50 	.word	0x1ffe8f50

08003820 <Endpoint_GetEndpointDirection>:
	 *  \return The currently selected endpoint's direction, as a
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <Endpoint_GetEndpointDirection+0x34>)
 8003828:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800382c:	461a      	mov	r2, r3
 800382e:	232c      	movs	r3, #44	; 0x2c
 8003830:	fb03 f302 	mul.w	r3, r3, r2
 8003834:	4a07      	ldr	r2, [pc, #28]	; (8003854 <Endpoint_GetEndpointDirection+0x34>)
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	607b      	str	r3, [r7, #4]
		return ep->Address & ENDPOINT_DIR_MASK;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003844:	b2db      	uxtb	r3, r3
	}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	1ffe8f50 	.word	0x1ffe8f50

08003858 <Endpoint_IsStalled>:
	 *  \return Boolean \c true if the currently selected endpoint is stalled,
	 *  \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
		bool status = false;
 800385e:	2300      	movs	r3, #0
 8003860:	71fb      	strb	r3, [r7, #7]
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <Endpoint_IsStalled+0x3c>)
 8003864:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003868:	4619      	mov	r1, r3
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <Endpoint_IsStalled+0x3c>)
 800386c:	232c      	movs	r3, #44	; 0x2c
 800386e:	fb03 f301 	mul.w	r3, r3, r1
 8003872:	4413      	add	r3, r2
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <Endpoint_IsStalled+0x2e>
		{
			status = true;
 8003882:	2301      	movs	r3, #1
 8003884:	71fb      	strb	r3, [r7, #7]
		}
		return status;
 8003886:	79fb      	ldrb	r3, [r7, #7]
	}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	1ffe8f50 	.word	0x1ffe8f50

08003898 <USB_Device_GetFrameNumber>:
 *  the frame number is incremented by one.
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
	return device.Driver->GetFrameNumber();
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <USB_Device_GetFrameNumber+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	1ffe8f50 	.word	0x1ffe8f50

080038b0 <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 80038b6:	2364      	movs	r3, #100	; 0x64
 80038b8:	71fb      	strb	r3, [r7, #7]
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 80038ba:	f7ff ffed 	bl	8003898 <USB_Device_GetFrameNumber>
 80038be:	4603      	mov	r3, r0
 80038c0:	80bb      	strh	r3, [r7, #4]

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 80038c2:	f7ff ffad 	bl	8003820 <Endpoint_GetEndpointDirection>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d106      	bne.n	80038da <Endpoint_WaitUntilReady+0x2a>
		{
			if (Endpoint_IsINReady())
 80038cc:	f7ff ff5a 	bl	8003784 <Endpoint_IsINReady>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e02c      	b.n	8003934 <Endpoint_WaitUntilReady+0x84>
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 80038da:	f7ff ff7f 	bl	80037dc <Endpoint_IsOUTReceived>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e025      	b.n	8003934 <Endpoint_WaitUntilReady+0x84>
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <Endpoint_WaitUntilReady+0x8c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	70fb      	strb	r3, [r7, #3]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <Endpoint_WaitUntilReady+0x48>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 80038f4:	2302      	movs	r3, #2
 80038f6:	e01d      	b.n	8003934 <Endpoint_WaitUntilReady+0x84>
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d101      	bne.n	8003902 <Endpoint_WaitUntilReady+0x52>
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 80038fe:	2303      	movs	r3, #3
 8003900:	e018      	b.n	8003934 <Endpoint_WaitUntilReady+0x84>
		}
		else if (Endpoint_IsStalled())
 8003902:	f7ff ffa9 	bl	8003858 <Endpoint_IsStalled>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <Endpoint_WaitUntilReady+0x60>
		{
		  return ENDPOINT_READYWAIT_EndpointStalled;
 800390c:	2301      	movs	r3, #1
 800390e:	e011      	b.n	8003934 <Endpoint_WaitUntilReady+0x84>
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8003910:	f7ff ffc2 	bl	8003898 <USB_Device_GetFrameNumber>
 8003914:	4603      	mov	r3, r0
 8003916:	803b      	strh	r3, [r7, #0]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8003918:	883a      	ldrh	r2, [r7, #0]
 800391a:	88bb      	ldrh	r3, [r7, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	d008      	beq.n	8003932 <Endpoint_WaitUntilReady+0x82>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 8003920:	883b      	ldrh	r3, [r7, #0]
 8003922:	80bb      	strh	r3, [r7, #4]

			if (!(TimeoutMSRem--))
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	1e5a      	subs	r2, r3, #1
 8003928:	71fa      	strb	r2, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <Endpoint_WaitUntilReady+0x82>
			{
			  return ENDPOINT_READYWAIT_Timeout;
 800392e:	2304      	movs	r3, #4
 8003930:	e000      	b.n	8003934 <Endpoint_WaitUntilReady+0x84>
			}
		}
	}
 8003932:	e7c6      	b.n	80038c2 <Endpoint_WaitUntilReady+0x12>
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	1ffe8d45 	.word	0x1ffe8d45

08003940 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) 
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <Endpoint_ClearOUT+0x98>)
 8003948:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800394c:	461a      	mov	r2, r3
 800394e:	232c      	movs	r3, #44	; 0x2c
 8003950:	fb03 f302 	mul.w	r3, r3, r2
 8003954:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <Endpoint_ClearOUT+0x98>)
 8003956:	4413      	add	r3, r2
 8003958:	3304      	adds	r3, #4
 800395a:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to
	 * not override it */
	if (ep->IsEnabled == 0)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d100      	bne.n	800396e <Endpoint_ClearOUT+0x2e>
	{
		return;
 800396c:	e030      	b.n	80039d0 <Endpoint_ClearOUT+0x90>
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <Endpoint_ClearOUT+0x98>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	7810      	ldrb	r0, [r2, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6911      	ldr	r1, [r2, #16]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6952      	ldr	r2, [r2, #20]
 8003980:	4798      	blx	r3
 8003982:	4603      	mov	r3, r0
 8003984:	461a      	mov	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	08db      	lsrs	r3, r3, #3
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d117      	bne.n	80039d0 <Endpoint_ClearOUT+0x90>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d113      	bne.n	80039d0 <Endpoint_ClearOUT+0x90>
	{
		ep->OutInUse = true;
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	8893      	ldrh	r3, [r2, #4]
 80039ac:	f043 0308 	orr.w	r3, r3, #8
 80039b0:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	8893      	ldrh	r3, [r2, #4]
 80039b6:	f36f 1345 	bfc	r3, #5, #1
 80039ba:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <Endpoint_ClearOUT+0x98>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	7811      	ldrb	r1, [r2, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6952      	ldr	r2, [r2, #20]
 80039ca:	4608      	mov	r0, r1
 80039cc:	4611      	mov	r1, r2
 80039ce:	4798      	blx	r3
	}
}
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	1ffe8f50 	.word	0x1ffe8f50

080039dc <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <Endpoint_ClearIN+0xa0>)
 80039e4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80039e8:	461a      	mov	r2, r3
 80039ea:	232c      	movs	r3, #44	; 0x2c
 80039ec:	fb03 f302 	mul.w	r3, r3, r2
 80039f0:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <Endpoint_ClearIN+0xa0>)
 80039f2:	4413      	add	r3, r2
 80039f4:	3304      	adds	r3, #4
 80039f6:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d007      	beq.n	8003a18 <Endpoint_ClearIN+0x3c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d100      	bne.n	8003a1a <Endpoint_ClearIN+0x3e>
		return;
 8003a18:	e02c      	b.n	8003a74 <Endpoint_ClearIN+0x98>
	ep->InInUse = true;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	8893      	ldrh	r3, [r2, #4]
 8003a1e:	f043 0310 	orr.w	r3, r3, #16
 8003a22:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8003a3a:	206b      	movs	r0, #107	; 0x6b
 8003a3c:	f7ff fe80 	bl	8003740 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <Endpoint_ClearIN+0xa0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a52:	4798      	blx	r3
 8003a54:	6038      	str	r0, [r7, #0]
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	1ad2      	subs	r2, r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8003a6e:	206b      	movs	r0, #107	; 0x6b
 8003a70:	f7ff fe4a 	bl	8003708 <__NVIC_EnableIRQ>

}
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	1ffe8f50 	.word	0x1ffe8f50

08003a80 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed() {
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <Endpoint_IsReadWriteAllowed+0x60>)
 8003a88:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	232c      	movs	r3, #44	; 0x2c
 8003a90:	fb03 f302 	mul.w	r3, r3, r2
 8003a94:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <Endpoint_IsReadWriteAllowed+0x60>)
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf34      	ite	cc
 8003aba:	2301      	movcc	r3, #1
 8003abc:	2300      	movcs	r3, #0
 8003abe:	71fb      	strb	r3, [r7, #7]
 8003ac0:	e006      	b.n	8003ad0 <Endpoint_IsReadWriteAllowed+0x50>
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	1ffe8f50 	.word	0x1ffe8f50

08003ae4 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <Endpoint_Write_8+0x64>)
 8003af0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003af4:	461a      	mov	r2, r3
 8003af6:	232c      	movs	r3, #44	; 0x2c
 8003af8:	fb03 f302 	mul.w	r3, r3, r2
 8003afc:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <Endpoint_Write_8+0x64>)
 8003afe:	4413      	add	r3, r2
 8003b00:	3304      	adds	r3, #4
 8003b02:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d20d      	bcs.n	8003b30 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	79fa      	ldrb	r2, [r7, #7]
 8003b20:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	619a      	str	r2, [r3, #24]

	      Success = true;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	f083 0301 	eor.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <Endpoint_Write_8+0x24>
}
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	1ffe8f50 	.word	0x1ffe8f50

08003b4c <Endpoint_Read_8>:

uint8_t Endpoint_Read_8() {
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <Endpoint_Read_8+0x6c>)
 8003b54:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b58:	461a      	mov	r2, r3
 8003b5a:	232c      	movs	r3, #44	; 0x2c
 8003b5c:	fb03 f302 	mul.w	r3, r3, r2
 8003b60:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <Endpoint_Read_8+0x6c>)
 8003b62:	4413      	add	r3, r2
 8003b64:	3304      	adds	r3, #4
 8003b66:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	71bb      	strb	r3, [r7, #6]

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d012      	beq.n	8003b9e <Endpoint_Read_8+0x52>
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	71bb      	strb	r3, [r7, #6]
		  EndPoint->OutOffset++;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	60da      	str	r2, [r3, #12]
		  EndPoint->OutBytesAvailable--;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	1e5a      	subs	r2, r3, #1
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	609a      	str	r2, [r3, #8]

		  Success = true;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e2      	bne.n	8003b70 <Endpoint_Read_8+0x24>
	 return data;
 8003baa:	79bb      	ldrb	r3, [r7, #6]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	1ffe8f50 	.word	0x1ffe8f50

08003bbc <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <Endpoint_Write_32_LE+0x64>)
 8003bc6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003bca:	461a      	mov	r2, r3
 8003bcc:	232c      	movs	r3, #44	; 0x2c
 8003bce:	fb03 f302 	mul.w	r3, r3, r2
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <Endpoint_Write_32_LE+0x64>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	3b03      	subs	r3, #3
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d20d      	bcs.n	8003c08 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
																		Data;
			EndPoint->InBytesAvailable+=4;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	619a      	str	r2, [r3, #24]

			Success = true;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	f083 0301 	eor.w	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e4      	bne.n	8003bde <Endpoint_Write_32_LE+0x22>
}
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	1ffe8f50 	.word	0x1ffe8f50

08003c24 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE() {
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <Endpoint_Read_32_LE+0x6c>)
 8003c2c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003c30:	461a      	mov	r2, r3
 8003c32:	232c      	movs	r3, #44	; 0x2c
 8003c34:	fb03 f302 	mul.w	r3, r3, r2
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <Endpoint_Read_32_LE+0x6c>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d912      	bls.n	8003c76 <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	1d1a      	adds	r2, r3, #4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	1f1a      	subs	r2, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]

			Success = true;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	f083 0301 	eor.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e2      	bne.n	8003c48 <Endpoint_Read_32_LE+0x24>
	return data;
 8003c82:	68bb      	ldr	r3, [r7, #8]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	1ffe8f50 	.word	0x1ffe8f50

08003c94 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e092      	b.n	8003dcc <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8003cbe:	4b48      	ldr	r3, [pc, #288]	; (8003de0 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69dc      	ldr	r4, [r3, #28]
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	7818      	ldrb	r0, [r3, #0]
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	7919      	ldrb	r1, [r3, #4]
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4413      	add	r3, r2
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8003cf8:	885b      	ldrh	r3, [r3, #2]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	47a0      	blx	r4
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <Endpoint_ConfigureEndpointTable+0x74>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e067      	b.n	8003dd8 <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8003d08:	7bb9      	ldrb	r1, [r7, #14]
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	7818      	ldrb	r0, [r3, #0]
 8003d1c:	4a30      	ldr	r2, [pc, #192]	; (8003de0 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d1e:	232c      	movs	r3, #44	; 0x2c
 8003d20:	fb03 f301 	mul.w	r3, r3, r1
 8003d24:	4413      	add	r3, r2
 8003d26:	4602      	mov	r2, r0
 8003d28:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8003d2a:	7bb8      	ldrb	r0, [r7, #14]
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	885b      	ldrh	r3, [r3, #2]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d44:	b2d9      	uxtb	r1, r3
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d48:	232c      	movs	r3, #44	; 0x2c
 8003d4a:	fb03 f300 	mul.w	r3, r3, r0
 8003d4e:	441a      	add	r2, r3
 8003d50:	8913      	ldrh	r3, [r2, #8]
 8003d52:	f361 138c 	bfi	r3, r1, #6, #7
 8003d56:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8003d58:	7bbb      	ldrb	r3, [r7, #14]
 8003d5a:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d5c:	212c      	movs	r1, #44	; 0x2c
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	441a      	add	r2, r3
 8003d64:	7a13      	ldrb	r3, [r2, #8]
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8003d6c:	7bbb      	ldrb	r3, [r7, #14]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	441a      	add	r2, r3
 8003d78:	8913      	ldrh	r3, [r2, #8]
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	8113      	strh	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8003d80:	7bfa      	ldrb	r2, [r7, #15]
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	db15      	blt.n	8003dc6 <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	4613      	mov	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	7818      	ldrb	r0, [r3, #0]
 8003db2:	7bbb      	ldrb	r3, [r7, #14]
 8003db4:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3310      	adds	r3, #16
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	47a0      	blx	r4

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	f4ff af68 	bcc.w	8003ca6 <Endpoint_ConfigureEndpointTable+0x12>
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8003dd6:	2301      	movs	r3, #1
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	1ffe8f50 	.word	0x1ffe8f50

08003de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <__NVIC_GetPriorityGrouping+0x18>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003df0:	0a1b      	lsrs	r3, r3, #8
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db0b      	blt.n	8003e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e12:	4908      	ldr	r1, [pc, #32]	; (8003e34 <__NVIC_EnableIRQ+0x34>)
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	79fa      	ldrb	r2, [r7, #7]
 8003e1c:	f002 021f 	and.w	r2, r2, #31
 8003e20:	2001      	movs	r0, #1
 8003e22:	fa00 f202 	lsl.w	r2, r0, r2
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db10      	blt.n	8003e6c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4a:	490b      	ldr	r1, [pc, #44]	; (8003e78 <__NVIC_DisableIRQ+0x40>)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	79fa      	ldrb	r2, [r7, #7]
 8003e54:	f002 021f 	and.w	r2, r2, #31
 8003e58:	2001      	movs	r0, #1
 8003e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5e:	3320      	adds	r3, #32
 8003e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e64:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003e68:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e100 	.word	0xe000e100

08003e7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	db0c      	blt.n	8003ea8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e8e:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <__NVIC_ClearPendingIRQ+0x38>)
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	79fa      	ldrb	r2, [r7, #7]
 8003e98:	f002 021f 	and.w	r2, r2, #31
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea2:	3360      	adds	r3, #96	; 0x60
 8003ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	db0a      	blt.n	8003ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ecc:	490d      	ldr	r1, [pc, #52]	; (8003f04 <__NVIC_SetPriority+0x4c>)
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	440b      	add	r3, r1
 8003edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003ee0:	e00a      	b.n	8003ef8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee2:	4909      	ldr	r1, [pc, #36]	; (8003f08 <__NVIC_SetPriority+0x50>)
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	3b04      	subs	r3, #4
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	761a      	strb	r2, [r3, #24]
  }
}
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000e100 	.word	0xe000e100
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	bf28      	it	cs
 8003f2a:	2306      	movcs	r3, #6
 8003f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3306      	adds	r3, #6
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d902      	bls.n	8003f3c <NVIC_EncodePriority+0x30>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <NVIC_EncodePriority+0x32>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2201      	movs	r2, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	1e5a      	subs	r2, r3, #1
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5a:	1e59      	subs	r1, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003f60:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3724      	adds	r7, #36	; 0x24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop

08003f70 <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	USBD_STATUS_t status = USBD_STATUS_SUCCESS;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 8003f7c:	f7fd feb0 	bl	8001ce0 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 8003f80:	483d      	ldr	r0, [pc, #244]	; (8004078 <USBD_Init+0x108>)
 8003f82:	2100      	movs	r1, #0
 8003f84:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8003f88:	f001 f933 	bl	80051f2 <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	; (800407c <USBD_Init+0x10c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <USBD_Init+0x108>)
 8003f94:	4a3a      	ldr	r2, [pc, #232]	; (8004080 <USBD_Init+0x110>)
 8003f96:	601a      	str	r2, [r3, #0]
	device.ep0_state = USBD_EP0_STATE_IDLE;
 8003f98:	4b37      	ldr	r3, [pc, #220]	; (8004078 <USBD_Init+0x108>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8003fa0:	4b35      	ldr	r3, [pc, #212]	; (8004078 <USBD_Init+0x108>)
 8003fa2:	4a38      	ldr	r2, [pc, #224]	; (8004084 <USBD_Init+0x114>)
 8003fa4:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 8003fa6:	4b34      	ldr	r3, [pc, #208]	; (8004078 <USBD_Init+0x108>)
 8003fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8003fae:	4b32      	ldr	r3, [pc, #200]	; (8004078 <USBD_Init+0x108>)
 8003fb0:	4a35      	ldr	r2, [pc, #212]	; (8004088 <USBD_Init+0x118>)
 8003fb2:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 8003fb4:	4b30      	ldr	r3, [pc, #192]	; (8004078 <USBD_Init+0x108>)
 8003fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fba:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
 8003fbc:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <USBD_Init+0x108>)
 8003fbe:	7913      	ldrb	r3, [r2, #4]
 8003fc0:	f36f 13c7 	bfc	r3, #7, #1
 8003fc4:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <USBD_Init+0x108>)
 8003fc8:	7a13      	ldrb	r3, [r2, #8]
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8003fd0:	4a29      	ldr	r2, [pc, #164]	; (8004078 <USBD_Init+0x108>)
 8003fd2:	8913      	ldrh	r3, [r2, #8]
 8003fd4:	f043 0302 	orr.w	r3, r3, #2
 8003fd8:	8113      	strh	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 8003fda:	4a27      	ldr	r2, [pc, #156]	; (8004078 <USBD_Init+0x108>)
 8003fdc:	8913      	ldrh	r3, [r2, #8]
 8003fde:	2140      	movs	r1, #64	; 0x40
 8003fe0:	f361 138c 	bfi	r3, r1, #6, #7
 8003fe4:	8113      	strh	r3, [r2, #8]

	if ((handle->event_cb->control_request == 0) ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	695b      	ldr	r3, [r3, #20]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	689b      	ldr	r3, [r3, #8]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <USBD_Init+0x9a>
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e031      	b.n	800406e <USBD_Init+0xfe>
	}
	else
	{
	  device.events = handle->event_cb;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <USBD_Init+0x108>)
 8004010:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8004014:	2001      	movs	r0, #1
 8004016:	f7fc fc95 	bl	8000944 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1b      	ldr	r2, [pc, #108]	; (800408c <USBD_Init+0x11c>)
 800401e:	605a      	str	r2, [r3, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <USBD_Init+0x120>)
 8004024:	609a      	str	r2, [r3, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <USBD_Init+0x108>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4610      	mov	r0, r2
 8004030:	4798      	blx	r3
 8004032:	4603      	mov	r3, r0
 8004034:	73fb      	strb	r3, [r7, #15]
	  if (USBD_STATUS_SUCCESS == status)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <USBD_Init+0xe2>
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();
 800403c:	f000 f87c 	bl	8004138 <USB_EnableUSBInterrupt>

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8004040:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <USBD_Init+0x108>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2000      	movs	r0, #0
 8004048:	2100      	movs	r1, #0
 800404a:	2240      	movs	r2, #64	; 0x40
 800404c:	4798      	blx	r3
 800404e:	4603      	mov	r3, r0
 8004050:	73fb      	strb	r3, [r7, #15]
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <USBD_Init+0xfe>
	  {
	  XMC_USBD_Disable();
 8004058:	f7fd fe42 	bl	8001ce0 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <USBD_Init+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4798      	blx	r3
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <USBD_Init+0xfe>
	  {
	    USB_DisableUSBInterrupt();
 800406a:	f000 f87b 	bl	8004164 <USB_DisableUSBInterrupt>
	  }
	  }
	}


	return status;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	1ffe8f50 	.word	0x1ffe8f50
 800407c:	1ffe8d45 	.word	0x1ffe8d45
 8004080:	0800858c 	.word	0x0800858c
 8004084:	1ffe8d50 	.word	0x1ffe8d50
 8004088:	1ffe8e50 	.word	0x1ffe8e50
 800408c:	08004799 	.word	0x08004799
 8004090:	080049f5 	.word	0x080049f5

08004094 <USBD_Connect>:
 *
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <USBD_Connect+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	4798      	blx	r3
 80040a0:	4603      	mov	r3, r0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	1ffe8f50 	.word	0x1ffe8f50

080040ac <USBD_SetEndpointBuffer>:
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	6039      	str	r1, [r7, #0]
 80040b6:	71fb      	strb	r3, [r7, #7]
 80040b8:	4613      	mov	r3, r2
 80040ba:	80bb      	strh	r3, [r7, #4]
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	b25b      	sxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da12      	bge.n	80040f2 <USBD_SetEndpointBuffer+0x46>
  {
    device.Endpoints[number].InBuffer = buf;
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <USBD_SetEndpointBuffer+0x74>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	212c      	movs	r1, #44	; 0x2c
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	3318      	adds	r3, #24
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	609a      	str	r2, [r3, #8]
    device.Endpoints[number].InBufferLength = len;
 80040de:	88ba      	ldrh	r2, [r7, #4]
 80040e0:	490f      	ldr	r1, [pc, #60]	; (8004120 <USBD_SetEndpointBuffer+0x74>)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	202c      	movs	r0, #44	; 0x2c
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	440b      	add	r3, r1
 80040ec:	3320      	adds	r3, #32
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	e011      	b.n	8004116 <USBD_SetEndpointBuffer+0x6a>
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 80040f2:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <USBD_SetEndpointBuffer+0x74>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3310      	adds	r3, #16
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	605a      	str	r2, [r3, #4]
    device.Endpoints[number].OutBufferLength = len;
 8004104:	88ba      	ldrh	r2, [r7, #4]
 8004106:	4906      	ldr	r1, [pc, #24]	; (8004120 <USBD_SetEndpointBuffer+0x74>)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	202c      	movs	r0, #44	; 0x2c
 800410c:	fb00 f303 	mul.w	r3, r0, r3
 8004110:	440b      	add	r3, r1
 8004112:	3310      	adds	r3, #16
 8004114:	609a      	str	r2, [r3, #8]
  }

}
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	1ffe8f50 	.word	0x1ffe8f50

08004124 <USB0_0_IRQHandler>:
 *
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 8004128:	4b02      	ldr	r3, [pc, #8]	; (8004134 <USB0_0_IRQHandler+0x10>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fd fd23 	bl	8001b78 <XMC_USBD_IRQHandler>
}
 8004132:	bd80      	pop	{r7, pc}
 8004134:	1ffe884c 	.word	0x1ffe884c

08004138 <USB_EnableUSBInterrupt>:
 * Enables and sets the priority of USB Interrupt
 *
 * First the interrupt priority is set and then the interrupt is enabled in the NVIC.
 */
static void USB_EnableUSBInterrupt(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), USB_PRE_EMPTION_PRIORITY, 
 800413c:	f7ff fe52 	bl	8003de4 <__NVIC_GetPriorityGrouping>
 8004140:	4603      	mov	r3, r0
 8004142:	4618      	mov	r0, r3
 8004144:	213f      	movs	r1, #63	; 0x3f
 8004146:	2200      	movs	r2, #0
 8004148:	f7ff fee0 	bl	8003f0c <NVIC_EncodePriority>
 800414c:	4603      	mov	r3, r0
 800414e:	206b      	movs	r0, #107	; 0x6b
 8004150:	4619      	mov	r1, r3
 8004152:	f7ff feb1 	bl	8003eb8 <__NVIC_SetPriority>
  USB_SUB_PRIORITY));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8004156:	206b      	movs	r0, #107	; 0x6b
 8004158:	f7ff fe90 	bl	8003e7c <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 800415c:	206b      	movs	r0, #107	; 0x6b
 800415e:	f7ff fe4f 	bl	8003e00 <__NVIC_EnableIRQ>
}
 8004162:	bd80      	pop	{r7, pc}

08004164 <USB_DisableUSBInterrupt>:
 * Disables the USB interrupt in the NVIC.
 *
 * Before the interrupt gets disabled, it will clear the pending IRQs.
 */
static void USB_DisableUSBInterrupt(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8004168:	206b      	movs	r0, #107	; 0x6b
 800416a:	f7ff fe87 	bl	8003e7c <__NVIC_ClearPendingIRQ>
  NVIC_DisableIRQ(USB0_0_IRQn);
 800416e:	206b      	movs	r0, #107	; 0x6b
 8004170:	f7ff fe62 	bl	8003e38 <__NVIC_DisableIRQ>
}
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop

08004178 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <USBD_HandleEP0_Stall+0x2c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2080      	movs	r0, #128	; 0x80
 8004184:	2101      	movs	r1, #1
 8004186:	4798      	blx	r3
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <USBD_HandleEP0_Stall+0x2a>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <USBD_HandleEP0_Stall+0x2c>)
 8004190:	2201      	movs	r2, #1
 8004192:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8004196:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <USBD_HandleEP0_Stall+0x2c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	2000      	movs	r0, #0
 800419e:	2118      	movs	r1, #24
 80041a0:	4798      	blx	r3
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	1ffe8f50 	.word	0x1ffe8f50

080041a8 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
  uint32_t length = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
  uint32_t ret;
  void *buffer = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	607b      	str	r3, [r7, #4]
  uint32_t status = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	603b      	str	r3, [r7, #0]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 80041ba:	4b95      	ldr	r3, [pc, #596]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 80041bc:	885b      	ldrh	r3, [r3, #2]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	61bb      	str	r3, [r7, #24]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 80041c4:	4b93      	ldr	r3, [pc, #588]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80041c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <USBD_Handle_DeviceRequest+0x32>
  {
    device.events->control_request();
 80041d0:	4b90      	ldr	r3, [pc, #576]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80041d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4798      	blx	r3
  }

  if (1U == device.IsSetupRecieved)
 80041da:	4b8e      	ldr	r3, [pc, #568]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80041dc:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 8228 	bne.w	8004640 <USBD_Handle_DeviceRequest+0x498>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 80041f0:	4b87      	ldr	r3, [pc, #540]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 80041f2:	785b      	ldrb	r3, [r3, #1]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	f200 821f 	bhi.w	800463a <USBD_Handle_DeviceRequest+0x492>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <USBD_Handle_DeviceRequest+0x5c>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	0800439f 	.word	0x0800439f
 8004208:	08004239 	.word	0x08004239
 800420c:	0800463b 	.word	0x0800463b
 8004210:	0800456d 	.word	0x0800456d
 8004214:	0800463b 	.word	0x0800463b
 8004218:	08004497 	.word	0x08004497
 800421c:	080042e5 	.word	0x080042e5
 8004220:	08004527 	.word	0x08004527
 8004224:	080042d5 	.word	0x080042d5
 8004228:	080044db 	.word	0x080044db
 800422c:	08004365 	.word	0x08004365
 8004230:	0800452d 	.word	0x0800452d
 8004234:	08004635 	.word	0x08004635
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 8004238:	4b75      	ldr	r3, [pc, #468]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d134      	bne.n	80042b0 <USBD_Handle_DeviceRequest+0x108>
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8004246:	4b72      	ldr	r3, [pc, #456]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 8004248:	889b      	ldrh	r3, [r3, #4]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8004252:	4b71      	ldr	r3, [pc, #452]	; (8004418 <USBD_Handle_DeviceRequest+0x270>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b04      	cmp	r3, #4
 800425a:	d004      	beq.n	8004266 <USBD_Handle_DeviceRequest+0xbe>
 800425c:	4b6c      	ldr	r3, [pc, #432]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 800425e:	889b      	ldrh	r3, [r3, #4]
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d121      	bne.n	80042aa <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
 8004266:	4a6b      	ldr	r2, [pc, #428]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	212c      	movs	r1, #44	; 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	7a1b      	ldrb	r3, [r3, #8]
 8004274:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004278:	b2db      	uxtb	r3, r3
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 800427a:	2b01      	cmp	r3, #1
 800427c:	d115      	bne.n	80042aa <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 800427e:	4a65      	ldr	r2, [pc, #404]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	212c      	movs	r1, #44	; 0x2c
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	441a      	add	r2, r3
 800428a:	8913      	ldrh	r3, [r2, #8]
 800428c:	f36f 0382 	bfc	r3, #2, #1
 8004290:	8113      	strh	r3, [r2, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 8004292:	4b60      	ldr	r3, [pc, #384]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 800429a:	8892      	ldrh	r2, [r2, #4]
 800429c:	b292      	uxth	r2, r2
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	4610      	mov	r0, r2
 80042a2:	2100      	movs	r1, #0
 80042a4:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 80042a6:	bf00      	nop
          }
          else
          {
            USBD_HandleEP0_Stall();
          }
          break;
 80042a8:	e1ca      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed", 0);
            }
          }
          else
          {
            USBD_HandleEP0_Stall();
 80042aa:	f7ff ff65 	bl	8004178 <USBD_HandleEP0_Stall>
          }
          break;
 80042ae:	e1c7      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80042b0:	4b57      	ldr	r3, [pc, #348]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d107      	bne.n	80042ce <USBD_Handle_DeviceRequest+0x126>
        {
          device.remote_wakeup = 0U;
 80042be:	4a55      	ldr	r2, [pc, #340]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80042c0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80042c4:	f36f 0382 	bfc	r3, #2, #1
 80042c8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
          break;
 80042cc:	e1b8      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        USBD_HandleEP0_Stall();
 80042ce:	f7ff ff53 	bl	8004178 <USBD_HandleEP0_Stall>
        break;
 80042d2:	e1b5      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 80042d4:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	2000      	movs	r0, #0
 80042dc:	494f      	ldr	r1, [pc, #316]	; (800441c <USBD_Handle_DeviceRequest+0x274>)
 80042de:	2201      	movs	r2, #1
 80042e0:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 80042e2:	e1ad      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 80042e4:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80042e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <USBD_Handle_DeviceRequest+0x170>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80042f0:	4b47      	ldr	r3, [pc, #284]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 80042f2:	885b      	ldrh	r3, [r3, #2]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 80042f8:	4b45      	ldr	r3, [pc, #276]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 80042fa:	889b      	ldrh	r3, [r3, #4]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 8004300:	4b44      	ldr	r3, [pc, #272]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004302:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	b290      	uxth	r0, r2
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	b291      	uxth	r1, r2
 8004310:	1d3a      	adds	r2, r7, #4
 8004312:	4798      	blx	r3
 8004314:	4603      	mov	r3, r0
 8004316:	61fb      	str	r3, [r7, #28]
        }

        if (0U == length)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <USBD_Handle_DeviceRequest+0x17c>
        {
          USBD_HandleEP0_Stall();
 800431e:	f7ff ff2b 	bl	8004178 <USBD_HandleEP0_Stall>

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;
 8004322:	e18d      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8004324:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 8004326:	88db      	ldrh	r3, [r3, #6]
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	429a      	cmp	r2, r3
 8004330:	d803      	bhi.n	800433a <USBD_Handle_DeviceRequest+0x192>
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 8004334:	88db      	ldrh	r3, [r3, #6]
 8004336:	b29b      	uxth	r3, r3
 8004338:	61fb      	str	r3, [r7, #28]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	2000      	movs	r0, #0
 8004344:	4611      	mov	r1, r2
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	4798      	blx	r3
 800434a:	4603      	mov	r3, r0
 800434c:	60bb      	str	r3, [r7, #8]
          device.Endpoints[0].InDataLeft = length - ret;
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004356:	6293      	str	r3, [r2, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4413      	add	r3, r2
 800435e:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004360:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
        break;
 8004362:	e16d      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <USBD_Handle_DeviceRequest+0x270>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b04      	cmp	r3, #4
 800436c:	d10e      	bne.n	800438c <USBD_Handle_DeviceRequest+0x1e4>
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 800436e:	4b29      	ldr	r3, [pc, #164]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 8004376:	8892      	ldrh	r2, [r2, #4]
 8004378:	b292      	uxth	r2, r2
 800437a:	f502 729c 	add.w	r2, r2, #312	; 0x138
 800437e:	4925      	ldr	r1, [pc, #148]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 8004380:	440a      	add	r2, r1
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 8004382:	2000      	movs	r0, #0
 8004384:	4611      	mov	r1, r2
 8004386:	2201      	movs	r2, #1
 8004388:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 800438a:	e159      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 800438c:	4b22      	ldr	r3, [pc, #136]	; (8004418 <USBD_Handle_DeviceRequest+0x270>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b03      	cmp	r3, #3
 8004394:	d102      	bne.n	800439c <USBD_Handle_DeviceRequest+0x1f4>
        {
          USBD_HandleEP0_Stall();
 8004396:	f7ff feef 	bl	8004178 <USBD_HandleEP0_Stall>
          break;
 800439a:	e151      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 800439c:	e150      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 800439e:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d119      	bne.n	80043e0 <USBD_Handle_DeviceRequest+0x238>
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80043ae:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80043b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80043c0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80043c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4313      	orrs	r3, r2
 80043cc:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	463a      	mov	r2, r7
 80043d6:	2000      	movs	r0, #0
 80043d8:	4611      	mov	r1, r2
 80043da:	2202      	movs	r2, #2
 80043dc:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 80043de:	e12f      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <USBD_Handle_DeviceRequest+0x268>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d118      	bne.n	8004420 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <USBD_Handle_DeviceRequest+0x270>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b2db      	uxtb	r3, r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d113      	bne.n	8004420 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <USBD_Handle_DeviceRequest+0x26c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	463a      	mov	r2, r7
 8004404:	2000      	movs	r0, #0
 8004406:	4611      	mov	r1, r2
 8004408:	2202      	movs	r2, #2
 800440a:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 800440c:	e118      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
 800440e:	bf00      	nop
 8004410:	1ffe8d48 	.word	0x1ffe8d48
 8004414:	1ffe8f50 	.word	0x1ffe8f50
 8004418:	1ffe8d45 	.word	0x1ffe8d45
 800441c:	1ffe9089 	.word	0x1ffe9089
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8004420:	4b8c      	ldr	r3, [pc, #560]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d130      	bne.n	8004490 <USBD_Handle_DeviceRequest+0x2e8>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800442e:	4b89      	ldr	r3, [pc, #548]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 8004430:	889b      	ldrh	r3, [r3, #4]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800443a:	4b87      	ldr	r3, [pc, #540]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b04      	cmp	r3, #4
 8004442:	d004      	beq.n	800444e <USBD_Handle_DeviceRequest+0x2a6>
 8004444:	4b83      	ldr	r3, [pc, #524]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 8004446:	889b      	ldrh	r3, [r3, #4]
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d120      	bne.n	8004490 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
 800444e:	4a83      	ldr	r2, [pc, #524]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	7a1b      	ldrb	r3, [r3, #8]
 800445c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004460:	b2db      	uxtb	r3, r3
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8004462:	2b01      	cmp	r3, #1
 8004464:	d114      	bne.n	8004490 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 8004466:	4a7d      	ldr	r2, [pc, #500]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	603b      	str	r3, [r7, #0]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800447e:	4b77      	ldr	r3, [pc, #476]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	463a      	mov	r2, r7
 8004486:	2000      	movs	r0, #0
 8004488:	4611      	mov	r1, r2
 800448a:	2202      	movs	r2, #2
 800448c:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 800448e:	e0d7      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default stall */
        USBD_HandleEP0_Stall();
 8004490:	f7ff fe72 	bl	8004178 <USBD_HandleEP0_Stall>
        break;
 8004494:	e0d4      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetAddress:
        if (0U == value)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <USBD_Handle_DeviceRequest+0x2fc>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 800449c:	4b6e      	ldr	r3, [pc, #440]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 800449e:	2202      	movs	r2, #2
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e002      	b.n	80044aa <USBD_Handle_DeviceRequest+0x302>
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 80044a4:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 80044a6:	2203      	movs	r2, #3
 80044a8:	701a      	strb	r2, [r3, #0]
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 80044aa:	4b6c      	ldr	r3, [pc, #432]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	4610      	mov	r0, r2
 80044b6:	2100      	movs	r1, #0
 80044b8:	4798      	blx	r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <USBD_Handle_DeviceRequest+0x330>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80044c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <USBD_Handle_DeviceRequest+0x330>
          {
            device.events->set_address();
 80044cc:	4b63      	ldr	r3, [pc, #396]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80044ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	4798      	blx	r3
          }
        }
        break;
 80044d6:	e0b3      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
 80044d8:	e0b2      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80044e0:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
        if (NULL != device.events->config_changed)
 80044e4:	4b5d      	ldr	r3, [pc, #372]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80044e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <USBD_Handle_DeviceRequest+0x352>
        {
          device.events->config_changed();
 80044f0:	4b5a      	ldr	r3, [pc, #360]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80044f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <USBD_Handle_DeviceRequest+0x360>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8004500:	4b55      	ldr	r3, [pc, #340]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
          break;
 8004506:	e09b      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 8004508:	4b54      	ldr	r3, [pc, #336]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 800450a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <USBD_Handle_DeviceRequest+0x378>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8004518:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 800451a:	2204      	movs	r2, #4
 800451c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USBD_HandleEP0_Stall();
        }
        break;
 800451e:	e08f      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
        }
        else
        {
          USBD_HandleEP0_Stall();
 8004520:	f7ff fe2a 	bl	8004178 <USBD_HandleEP0_Stall>
        }
        break;
 8004524:	e08c      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetDescriptor:
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
 8004526:	f7ff fe27 	bl	8004178 <USBD_HandleEP0_Stall>
        break;
 800452a:	e089      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 800452c:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b04      	cmp	r3, #4
 8004534:	d111      	bne.n	800455a <USBD_Handle_DeviceRequest+0x3b2>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8004536:	4b47      	ldr	r3, [pc, #284]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 8004538:	885b      	ldrh	r3, [r3, #2]
 800453a:	b29b      	uxth	r3, r3
 800453c:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 800453e:	4b45      	ldr	r3, [pc, #276]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 8004540:	889b      	ldrh	r3, [r3, #4]
 8004542:	b29b      	uxth	r3, r3
 8004544:	60fb      	str	r3, [r7, #12]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	4a44      	ldr	r2, [pc, #272]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004554:	460a      	mov	r2, r1
 8004556:	701a      	strb	r2, [r3, #0]
          break;
 8004558:	e072      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 800455a:	4b3f      	ldr	r3, [pc, #252]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d102      	bne.n	800456a <USBD_Handle_DeviceRequest+0x3c2>
        {
          USBD_HandleEP0_Stall();
 8004564:	f7ff fe08 	bl	8004178 <USBD_HandleEP0_Stall>
          break;
 8004568:	e06a      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 800456a:	e069      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d102      	bne.n	8004578 <USBD_Handle_DeviceRequest+0x3d0>
        {
          USBD_HandleEP0_Stall();
 8004572:	f7ff fe01 	bl	8004178 <USBD_HandleEP0_Stall>
          break;
 8004576:	e063      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004578:	4b37      	ldr	r3, [pc, #220]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b04      	cmp	r3, #4
 8004580:	d138      	bne.n	80045f4 <USBD_Handle_DeviceRequest+0x44c>
        {
          switch (value)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <USBD_Handle_DeviceRequest+0x3f6>
 8004588:	2b01      	cmp	r3, #1
 800458a:	d000      	beq.n	800458e <USBD_Handle_DeviceRequest+0x3e6>
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
            default:
              break;
 800458c:	e031      	b.n	80045f2 <USBD_Handle_DeviceRequest+0x44a>
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 800458e:	4a33      	ldr	r2, [pc, #204]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 8004590:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
              break;
 800459c:	e029      	b.n	80045f2 <USBD_Handle_DeviceRequest+0x44a>
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 800459e:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 80045a0:	889b      	ldrh	r3, [r3, #4]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	617b      	str	r3, [r7, #20]
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 80045aa:	4a2c      	ldr	r2, [pc, #176]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	7a1b      	ldrb	r3, [r3, #8]
 80045b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <USBD_Handle_DeviceRequest+0x420>
              {
                USBD_HandleEP0_Stall();
 80045c2:	f7ff fdd9 	bl	8004178 <USBD_HandleEP0_Stall>
 80045c6:	e013      	b.n	80045f0 <USBD_Handle_DeviceRequest+0x448>
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 80045c8:	4a24      	ldr	r2, [pc, #144]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	441a      	add	r2, r3
 80045d4:	8913      	ldrh	r3, [r2, #8]
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	8113      	strh	r3, [r2, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 80045dc:	4b1f      	ldr	r3, [pc, #124]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 80045e4:	8892      	ldrh	r2, [r2, #4]
 80045e6:	b292      	uxth	r2, r2
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	4610      	mov	r0, r2
 80045ec:	2101      	movs	r1, #1
 80045ee:	4798      	blx	r3
                {
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
 80045f0:	bf00      	nop
            default:
              break;
          }
          break;
 80045f2:	e025      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <USBD_Handle_DeviceRequest+0x4b0>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d117      	bne.n	800462e <USBD_Handle_DeviceRequest+0x486>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d114      	bne.n	800462e <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0303 	and.w	r3, r3, #3
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 800460e:	2b02      	cmp	r3, #2
 8004610:	d10d      	bne.n	800462e <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <USBD_Handle_DeviceRequest+0x4ac>)
 8004614:	889b      	ldrh	r3, [r3, #4]
 8004616:	b29b      	uxth	r3, r3
 8004618:	b2db      	uxtb	r3, r3
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <USBD_Handle_DeviceRequest+0x486>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 800461e:	4a0f      	ldr	r2, [pc, #60]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 8004620:	8913      	ldrh	r3, [r2, #8]
 8004622:	f043 0304 	orr.w	r3, r3, #4
 8004626:	8113      	strh	r3, [r2, #8]
            USBD_HandleEP0_Stall();
 8004628:	f7ff fda6 	bl	8004178 <USBD_HandleEP0_Stall>
            break;
 800462c:	e008      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default behaviour is stall */
        USBD_HandleEP0_Stall();
 800462e:	f7ff fda3 	bl	8004178 <USBD_HandleEP0_Stall>
        break;
 8004632:	e005      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SynchFrame:
        /* Not yet supported */
        USBD_HandleEP0_Stall();
 8004634:	f7ff fda0 	bl	8004178 <USBD_HandleEP0_Stall>
        break;
 8004638:	e002      	b.n	8004640 <USBD_Handle_DeviceRequest+0x498>

      default:
        USBD_HandleEP0_Stall();
 800463a:	f7ff fd9d 	bl	8004178 <USBD_HandleEP0_Stall>
        break;
 800463e:	bf00      	nop
    }
  }
  device.IsSetupRecieved = 0U;
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <USBD_Handle_DeviceRequest+0x4b4>)
 8004642:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8004646:	f022 0202 	bic.w	r2, r2, #2
 800464a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	1ffe8d48 	.word	0x1ffe8d48
 8004658:	1ffe8d45 	.word	0x1ffe8d45
 800465c:	1ffe8f50 	.word	0x1ffe8f50

08004660 <USBD_HandleEP0_IN>:
 * state.
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 8004664:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <USBD_HandleEP0_IN+0x48>)
 8004666:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800466a:	2b02      	cmp	r3, #2
 800466c:	d10a      	bne.n	8004684 <USBD_HandleEP0_IN+0x24>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <USBD_HandleEP0_IN+0x48>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	2000      	movs	r0, #0
 8004676:	2100      	movs	r1, #0
 8004678:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <USBD_HandleEP0_IN+0x48>)
 800467c:	2205      	movs	r2, #5
 800467e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004682:	e010      	b.n	80046a6 <USBD_HandleEP0_IN+0x46>
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <USBD_HandleEP0_IN+0x48>)
 8004686:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800468a:	2b03      	cmp	r3, #3
 800468c:	d10b      	bne.n	80046a6 <USBD_HandleEP0_IN+0x46>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <USBD_HandleEP0_IN+0x48>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <USBD_HandleEP0_IN+0x48>)
 8004696:	7912      	ldrb	r2, [r2, #4]
 8004698:	4610      	mov	r0, r2
 800469a:	2118      	movs	r1, #24
 800469c:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 800469e:	4b02      	ldr	r3, [pc, #8]	; (80046a8 <USBD_HandleEP0_IN+0x48>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_IN: invalid ep0 state", 0);
  }
}
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	1ffe8f50 	.word	0x1ffe8f50

080046ac <USBD_HandleEP0_OUT>:
 * for new SETUP packets, when in \ref USBD_EP0_STATE_OUT_STATUS. When endpoint 0 is in
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <USBD_HandleEP0_OUT+0x50>)
 80046b2:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d10d      	bne.n	80046d6 <USBD_HandleEP0_OUT+0x2a>
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 80046ba:	f7ff fd75 	bl	80041a8 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <USBD_HandleEP0_OUT+0x50>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	2000      	movs	r0, #0
 80046c6:	2100      	movs	r1, #0
 80046c8:	2200      	movs	r2, #0
 80046ca:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <USBD_HandleEP0_OUT+0x50>)
 80046ce:	2203      	movs	r2, #3
 80046d0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 80046d4:	e010      	b.n	80046f8 <USBD_HandleEP0_OUT+0x4c>
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <USBD_HandleEP0_OUT+0x50>)
 80046d8:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d10b      	bne.n	80046f8 <USBD_HandleEP0_OUT+0x4c>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <USBD_HandleEP0_OUT+0x50>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	4a05      	ldr	r2, [pc, #20]	; (80046fc <USBD_HandleEP0_OUT+0x50>)
 80046e8:	7912      	ldrb	r2, [r2, #4]
 80046ea:	4610      	mov	r0, r2
 80046ec:	2118      	movs	r1, #24
 80046ee:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80046f0:	4b02      	ldr	r3, [pc, #8]	; (80046fc <USBD_HandleEP0_OUT+0x50>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_OUT: invalid ep0 state", 0);
  }
}
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	1ffe8f50 	.word	0x1ffe8f50

08004700 <USBD_HandleEP0_SETUP>:
 * equals zero, it starts processing the request and sends in status response including the switch to
 * USBD_EP0_STATE_IN_STATUS. When the host expects data from the device, the function processes the control
 * request and switches to USBD_EP0_STATE_IN_DATA state.
 */
static void USBD_HandleEP0_SETUP()
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 8004706:	4b22      	ldr	r3, [pc, #136]	; (8004790 <USBD_HandleEP0_SETUP+0x90>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	2000      	movs	r0, #0
 800470e:	4921      	ldr	r1, [pc, #132]	; (8004794 <USBD_HandleEP0_SETUP+0x94>)
 8004710:	2208      	movs	r2, #8
 8004712:	4798      	blx	r3
 8004714:	4603      	mov	r3, r0
 8004716:	607b      	str	r3, [r7, #4]
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <USBD_HandleEP0_SETUP+0x90>)
 800471a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 800471e:	f042 0202 	orr.w	r2, r2, #2
 8004722:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d12d      	bne.n	8004788 <USBD_HandleEP0_SETUP+0x88>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 800472c:	4b19      	ldr	r3, [pc, #100]	; (8004794 <USBD_HandleEP0_SETUP+0x94>)
 800472e:	88db      	ldrh	r3, [r3, #6]
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <USBD_HandleEP0_SETUP+0x52>
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <USBD_HandleEP0_SETUP+0x90>)
 8004738:	2203      	movs	r2, #3
 800473a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 800473e:	f7ff fd33 	bl	80041a8 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <USBD_HandleEP0_SETUP+0x90>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	2000      	movs	r0, #0
 800474a:	2100      	movs	r1, #0
 800474c:	2200      	movs	r2, #0
 800474e:	4798      	blx	r3
 8004750:	e01a      	b.n	8004788 <USBD_HandleEP0_SETUP+0x88>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <USBD_HandleEP0_SETUP+0x94>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	b25b      	sxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	da06      	bge.n	800476e <USBD_HandleEP0_SETUP+0x6e>
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <USBD_HandleEP0_SETUP+0x90>)
 8004762:	2202      	movs	r2, #2
 8004764:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 8004768:	f7ff fd1e 	bl	80041a8 <USBD_Handle_DeviceRequest>
 800476c:	e00c      	b.n	8004788 <USBD_HandleEP0_SETUP+0x88>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <USBD_HandleEP0_SETUP+0x90>)
 8004770:	2204      	movs	r2, #4
 8004772:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <USBD_HandleEP0_SETUP+0x90>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	4a05      	ldr	r2, [pc, #20]	; (8004794 <USBD_HandleEP0_SETUP+0x94>)
 800477e:	88d2      	ldrh	r2, [r2, #6]
 8004780:	b292      	uxth	r2, r2
 8004782:	2000      	movs	r0, #0
 8004784:	4611      	mov	r1, r2
 8004786:	4798      	blx	r3
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_SETUP: read invalid setup packet size", 0);
  }
}
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	1ffe8f50 	.word	0x1ffe8f50
 8004794:	1ffe8d48 	.word	0x1ffe8d48

08004798 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  switch (event)
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	f200 811c 	bhi.w	80049e2 <USBD_SignalDeviceEventHandler+0x24a>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <USBD_SignalDeviceEventHandler+0x18>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	0800498b 	.word	0x0800498b
 80047b4:	0800496b 	.word	0x0800496b
 80047b8:	08004931 	.word	0x08004931
 80047bc:	0800494b 	.word	0x0800494b
 80047c0:	080047d9 	.word	0x080047d9
 80047c4:	080049e3 	.word	0x080049e3
 80047c8:	080049b7 	.word	0x080049b7
 80047cc:	08004993 	.word	0x08004993
 80047d0:	080049e3 	.word	0x080049e3
 80047d4:	08004917 	.word	0x08004917
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 80047d8:	4b84      	ldr	r3, [pc, #528]	; (80049ec <USBD_SignalDeviceEventHandler+0x254>)
 80047da:	2202      	movs	r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
 80047de:	4b84      	ldr	r3, [pc, #528]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      device.remote_wakeup = (uint8_t)0;
 80047e6:	4a82      	ldr	r2, [pc, #520]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80047e8:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80047ec:	f36f 0382 	bfc	r3, #2, #1
 80047f0:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 80047f4:	2307      	movs	r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e060      	b.n	80048bc <USBD_SignalDeviceEventHandler+0x124>
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f1c3 0307 	rsb	r3, r3, #7
 8004800:	4a7b      	ldr	r2, [pc, #492]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004802:	212c      	movs	r1, #44	; 0x2c
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	441a      	add	r2, r3
 800480a:	8913      	ldrh	r3, [r2, #8]
 800480c:	f36f 1304 	bfc	r3, #4, #1
 8004810:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f1c3 0307 	rsb	r3, r3, #7
 8004818:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 800481a:	212c      	movs	r1, #44	; 0x2c
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	441a      	add	r2, r3
 8004822:	8913      	ldrh	r3, [r2, #8]
 8004824:	f36f 03c3 	bfc	r3, #3, #1
 8004828:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f1c3 0307 	rsb	r3, r3, #7
 8004830:	4a6f      	ldr	r2, [pc, #444]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	441a      	add	r2, r3
 800483a:	8913      	ldrh	r3, [r2, #8]
 800483c:	f36f 0382 	bfc	r3, #2, #1
 8004840:	8113      	strh	r3, [r2, #8]
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b07      	cmp	r3, #7
 8004846:	d036      	beq.n	80048b6 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f1c3 0307 	rsb	r3, r3, #7
 800484e:	4a68      	ldr	r2, [pc, #416]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	7a1b      	ldrb	r3, [r3, #8]
 800485a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800485e:	b2db      	uxtb	r3, r3
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8004860:	2b00      	cmp	r3, #0
 8004862:	d028      	beq.n	80048b6 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8004864:	4b62      	ldr	r3, [pc, #392]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a1b      	ldr	r3, [r3, #32]
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	f1c2 0207 	rsb	r2, r2, #7
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8004870:	495f      	ldr	r1, [pc, #380]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004872:	202c      	movs	r0, #44	; 0x2c
 8004874:	fb00 f202 	mul.w	r2, r0, r2
 8004878:	440a      	add	r2, r1
 800487a:	7912      	ldrb	r2, [r2, #4]
 800487c:	4610      	mov	r0, r2
 800487e:	4798      	blx	r3
 8004880:	4603      	mov	r3, r0
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8004882:	2b00      	cmp	r3, #0
 8004884:	d117      	bne.n	80048b6 <USBD_SignalDeviceEventHandler+0x11e>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f1c3 0307 	rsb	r3, r3, #7
 800488c:	4a58      	ldr	r2, [pc, #352]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	441a      	add	r2, r3
 8004896:	7a13      	ldrb	r3, [r2, #8]
 8004898:	f36f 0300 	bfc	r3, #0, #1
 800489c:	7213      	strb	r3, [r2, #8]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f1c3 0307 	rsb	r3, r3, #7
 80048a4:	4a52      	ldr	r2, [pc, #328]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	441a      	add	r2, r3
 80048ae:	8913      	ldrh	r3, [r2, #8]
 80048b0:	f36f 0341 	bfc	r3, #1, #1
 80048b4:	8113      	strh	r3, [r2, #8]
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d19b      	bne.n	80047fa <USBD_SignalDeviceEventHandler+0x62>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 80048c2:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 80048ca:	2301      	movs	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e00a      	b.n	80048e6 <USBD_SignalDeviceEventHandler+0x14e>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f1c3 0301 	rsb	r3, r3, #1
 80048d6:	4a46      	ldr	r2, [pc, #280]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80048d8:	4413      	add	r3, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f1      	bne.n	80048d0 <USBD_SignalDeviceEventHandler+0x138>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80048ec:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80048f4:	7912      	ldrb	r2, [r2, #4]
 80048f6:	4610      	mov	r0, r2
 80048f8:	2118      	movs	r1, #24
 80048fa:	4798      	blx	r3
      if (NULL != device.events->reset)
 80048fc:	4b3c      	ldr	r3, [pc, #240]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80048fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <USBD_SignalDeviceEventHandler+0x17c>
      {
        device.events->reset();
 8004908:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 800490a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	4798      	blx	r3
      }
      break;
 8004912:	e067      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
 8004914:	e066      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8004916:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004918:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <USBD_SignalDeviceEventHandler+0x196>
      {
        device.events->start_of_frame();
 8004922:	4b33      	ldr	r3, [pc, #204]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004924:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4798      	blx	r3
      }
      break;
 800492c:	e05a      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
 800492e:	e059      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8004930:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004932:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <USBD_SignalDeviceEventHandler+0x1b0>
      {
        device.events->connect();
 800493c:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 800493e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4798      	blx	r3
      }
      break;
 8004946:	e04d      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
 8004948:	e04c      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 800494a:	4b28      	ldr	r3, [pc, #160]	; (80049ec <USBD_SignalDeviceEventHandler+0x254>)
 800494c:	2201      	movs	r2, #1
 800494e:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004952:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <USBD_SignalDeviceEventHandler+0x1d0>
      {
        device.events->disconnect();
 800495c:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 800495e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4798      	blx	r3
      }
      break;
 8004966:	e03d      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
 8004968:	e03c      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <USBD_SignalDeviceEventHandler+0x254>)
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004970:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004972:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <USBD_SignalDeviceEventHandler+0x1f0>
      {
        device.events->disconnect();
 800497c:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 800497e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4798      	blx	r3
      }
      break;
 8004986:	e02d      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
 8004988:	e02c      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <USBD_SignalDeviceEventHandler+0x254>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
      break;
 8004990:	e028      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8004992:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 8004994:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <USBD_SignalDeviceEventHandler+0x254>)
 800499a:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->wakeup)
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 800499e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <USBD_SignalDeviceEventHandler+0x21c>
      {
        device.events->wakeup();
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80049aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	4798      	blx	r3
      }
      break;
 80049b2:	e017      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
 80049b4:	e016      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <USBD_SignalDeviceEventHandler+0x254>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80049be:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <USBD_SignalDeviceEventHandler+0x254>)
 80049c4:	2205      	movs	r2, #5
 80049c6:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->suspend)
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80049ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <USBD_SignalDeviceEventHandler+0x248>
      {
        device.events->suspend();
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <USBD_SignalDeviceEventHandler+0x258>)
 80049d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4798      	blx	r3
      }
      break;
 80049de:	e001      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
 80049e0:	e000      	b.n	80049e4 <USBD_SignalDeviceEventHandler+0x24c>
    default:
      break;
 80049e2:	bf00      	nop
  }
}
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	1ffe8d45 	.word	0x1ffe8d45
 80049f0:	1ffe8f50 	.word	0x1ffe8f50

080049f4 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	460a      	mov	r2, r1
 80049fe:	71fb      	strb	r3, [r7, #7]
 8004a00:	4613      	mov	r3, r2
 8004a02:	71bb      	strb	r3, [r7, #6]
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	222c      	movs	r2, #44	; 0x2c
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	4a5e      	ldr	r2, [pc, #376]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004a12:	4413      	add	r3, r2
 8004a14:	3304      	adds	r3, #4
 8004a16:	617b      	str	r3, [r7, #20]
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8004a18:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004a1a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004a1e:	613b      	str	r3, [r7, #16]
  temp_dir = (uint32_t)device.CurrentDirection;
 8004a20:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004a22:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8004a26:	60fb      	str	r3, [r7, #12]
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004a32:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004a40:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  /* choose what to do based on the event */
  switch (ep_event)
 8004a44:	79bb      	ldrb	r3, [r7, #6]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d013      	beq.n	8004a72 <USBD_SignalEndpointEvent_Handler+0x7e>
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d03a      	beq.n	8004ac4 <USBD_SignalEndpointEvent_Handler+0xd0>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d000      	beq.n	8004a54 <USBD_SignalEndpointEvent_Handler+0x60>
        default:
          break;
      }
      break;
    default:
      break;
 8004a52:	e08e      	b.n	8004b72 <USBD_SignalEndpointEvent_Handler+0x17e>
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	8893      	ldrh	r3, [r2, #4]
 8004a58:	f36f 03c3 	bfc	r3, #3, #1
 8004a5c:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004a5e:	4b4b      	ldr	r3, [pc, #300]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004a60:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d000      	beq.n	8004a6a <USBD_SignalEndpointEvent_Handler+0x76>
      {
        case 0:
          USBD_HandleEP0_SETUP();
          break;
        default:
          break;
 8004a68:	e002      	b.n	8004a70 <USBD_SignalEndpointEvent_Handler+0x7c>
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_SETUP();
 8004a6a:	f7ff fe49 	bl	8004700 <USBD_HandleEP0_SETUP>
          break;
 8004a6e:	bf00      	nop
        default:
          break;
      }
      break;
 8004a70:	e07f      	b.n	8004b72 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	8893      	ldrh	r3, [r2, #4]
 8004a76:	f043 0320 	orr.w	r3, r3, #32
 8004a7a:	8093      	strh	r3, [r2, #4]
      if (ep->OutBytesAvailable == 0U)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d110      	bne.n	8004aa6 <USBD_SignalEndpointEvent_Handler+0xb2>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2200      	movs	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 8004a8a:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	7810      	ldrb	r0, [r2, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	6911      	ldr	r1, [r2, #16]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6952      	ldr	r2, [r2, #20]
 8004a9c:	4798      	blx	r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	609a      	str	r2, [r3, #8]
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	8893      	ldrh	r3, [r2, #4]
 8004aaa:	f36f 03c3 	bfc	r3, #3, #1
 8004aae:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004ab0:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004ab2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d000      	beq.n	8004abc <USBD_SignalEndpointEvent_Handler+0xc8>
      {
        case 0:
          USBD_HandleEP0_OUT();
          break;
        default:
          break;
 8004aba:	e002      	b.n	8004ac2 <USBD_SignalEndpointEvent_Handler+0xce>
      }
      ep->OutInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_OUT();
 8004abc:	f7ff fdf6 	bl	80046ac <USBD_HandleEP0_OUT>
          break;
 8004ac0:	bf00      	nop
        default:
          break;
      }
      break;
 8004ac2:	e056      	b.n	8004b72 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d017      	beq.n	8004afc <USBD_SignalEndpointEvent_Handler+0x108>
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8004acc:	4b2f      	ldr	r3, [pc, #188]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	7810      	ldrb	r0, [r2, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ade:	4798      	blx	r3
 8004ae0:	60b8      	str	r0, [r7, #8]
        ep->InDataLeft -= (uint32_t)data_count;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad2      	subs	r2, r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
        ep->InDataBuffer += (uint32_t)data_count;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	441a      	add	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8004afa:	e03a      	b.n	8004b72 <USBD_SignalEndpointEvent_Handler+0x17e>
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d121      	bne.n	8004b4e <USBD_SignalEndpointEvent_Handler+0x15a>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01d      	beq.n	8004b4e <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <USBD_SignalEndpointEvent_Handler+0x19c>)
 8004b18:	88d2      	ldrh	r2, [r2, #6]
 8004b1a:	b292      	uxth	r2, r2
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d016      	beq.n	8004b4e <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	8892      	ldrh	r2, [r2, #4]
 8004b28:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b32:	fb02 f201 	mul.w	r2, r2, r1
 8004b36:	1a9b      	subs	r3, r3, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d108      	bne.n	8004b4e <USBD_SignalEndpointEvent_Handler+0x15a>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	4610      	mov	r0, r2
 8004b48:	2100      	movs	r1, #0
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4798      	blx	r3
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2200      	movs	r2, #0
 8004b52:	619a      	str	r2, [r3, #24]
      ep->InInUse = (uint8_t)0;
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	8893      	ldrh	r3, [r2, #4]
 8004b58:	f36f 1304 	bfc	r3, #4, #1
 8004b5c:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004b60:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d000      	beq.n	8004b6a <USBD_SignalEndpointEvent_Handler+0x176>
      {
        case 0:
          USBD_HandleEP0_IN();
          break;
        default:
          break;
 8004b68:	e002      	b.n	8004b70 <USBD_SignalEndpointEvent_Handler+0x17c>
      ep->InBytesAvailable = 0U;
      ep->InInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_IN();
 8004b6a:	f7ff fd79 	bl	8004660 <USBD_HandleEP0_IN>
          break;
 8004b6e:	bf00      	nop
        default:
          break;
      }
      break;
 8004b70:	bf00      	nop
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004b78:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004b82:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
}
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	1ffe8f50 	.word	0x1ffe8f50
 8004b90:	1ffe8d48 	.word	0x1ffe8d48

08004b94 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7c1a      	ldrb	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	461a      	mov	r2, r3
 8004bae:	f7fb fbef 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7c1a      	ldrb	r2, [r3, #16]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	7c5b      	ldrb	r3, [r3, #17]
 8004bbe:	4608      	mov	r0, r1
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f7fc f96c 	bl	8000ea0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop

08004bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <__NVIC_SetPriorityGrouping+0x44>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c04:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <__NVIC_SetPriorityGrouping+0x44>)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	60d3      	str	r3, [r2, #12]
}
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <__NVIC_GetPriorityGrouping+0x18>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c28:	0a1b      	lsrs	r3, r3, #8
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db0a      	blt.n	8004c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	490d      	ldr	r1, [pc, #52]	; (8004c84 <__NVIC_SetPriority+0x4c>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	0092      	lsls	r2, r2, #2
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004c60:	e00a      	b.n	8004c78 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c62:	4909      	ldr	r1, [pc, #36]	; (8004c88 <__NVIC_SetPriority+0x50>)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	0092      	lsls	r2, r2, #2
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	440b      	add	r3, r1
 8004c76:	761a      	strb	r2, [r3, #24]
  }
}
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	e000e100 	.word	0xe000e100
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f1c3 0307 	rsb	r3, r3, #7
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	bf28      	it	cs
 8004caa:	2306      	movcs	r3, #6
 8004cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3306      	adds	r3, #6
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d902      	bls.n	8004cbc <NVIC_EncodePriority+0x30>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	e000      	b.n	8004cbe <NVIC_EncodePriority+0x32>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	1e5a      	subs	r2, r3, #1
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	401a      	ands	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	1e59      	subs	r1, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004ce0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	; 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <SystemCoreSetup>:
   REGION_SIZE_128KB |  0), 

}
;
void SystemCoreSetup(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7ff ff6c 	bl	8004bd4 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cfc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d00:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <SystemCoreSetup+0xfc>)
 8004d02:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d04:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004d08:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004d0a:	4a37      	ldr	r2, [pc, #220]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d0c:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8004d1a:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <SystemCoreSetup+0x100>)
 8004d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d20:	3314      	adds	r3, #20
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	603b      	str	r3, [r7, #0]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f023 030f 	bic.w	r3, r3, #15
 8004d2c:	603b      	str	r3, [r7, #0]
  temp |= PMU_FLASH_WS;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f043 0304 	orr.w	r3, r3, #4
 8004d34:	603b      	str	r3, [r7, #0]
  FLASH0->FCON = temp;
 8004d36:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <SystemCoreSetup+0x100>)
 8004d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3c:	3314      	adds	r3, #20
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8004d42:	4a29      	ldr	r2, [pc, #164]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d44:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8004d4e:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d50:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f023 0308 	bic.w	r3, r3, #8
 8004d58:	6153      	str	r3, [r2, #20]

  /* Set priority of memory managment fault */
  NVIC_SetPriority((IRQn_Type)MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0,0));
 8004d5a:	f7ff ff5f 	bl	8004c1c <__NVIC_GetPriorityGrouping>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4618      	mov	r0, r3
 8004d62:	2100      	movs	r1, #0
 8004d64:	2200      	movs	r2, #0
 8004d66:	f7ff ff91 	bl	8004c8c <NVIC_EncodePriority>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f06f 000b 	mvn.w	r0, #11
 8004d70:	4619      	mov	r1, r3
 8004d72:	f7ff ff61 	bl	8004c38 <__NVIC_SetPriority>
  /* Enable memory management fault */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	6253      	str	r3, [r2, #36]	; 0x24


  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8004d82:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d84:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d8c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8004d8e:	4a16      	ldr	r2, [pc, #88]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d90:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <SystemCoreSetup+0xf8>)
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d98:	6253      	str	r3, [r2, #36]	; 0x24
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004d9a:	f3bf 8f5f 	dmb	sy

__DMB();
MPU->CTRL = 0;
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <SystemCoreSetup+0x104>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
for(uint8_t i= 0; i<8; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	71fb      	strb	r3, [r7, #7]
 8004da8:	e011      	b.n	8004dce <SystemCoreSetup+0xde>
{
 MPU->RBAR = mpu_table[i*2];
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <SystemCoreSetup+0x104>)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4911      	ldr	r1, [pc, #68]	; (8004df8 <SystemCoreSetup+0x108>)
 8004db2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004db6:	60d3      	str	r3, [r2, #12]
 MPU->RASR = mpu_table[(i*2) + 1];
 8004db8:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <SystemCoreSetup+0x104>)
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	490d      	ldr	r1, [pc, #52]	; (8004df8 <SystemCoreSetup+0x108>)
 8004dc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dc6:	6113      	str	r3, [r2, #16]
  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;

__DMB();
MPU->CTRL = 0;
for(uint8_t i= 0; i<8; i++)
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	71fb      	strb	r3, [r7, #7]
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	2b07      	cmp	r3, #7
 8004dd2:	d9ea      	bls.n	8004daa <SystemCoreSetup+0xba>
{
 MPU->RBAR = mpu_table[i*2];
 MPU->RASR = mpu_table[(i*2) + 1];
}
MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk | MPU_CTRL_HFNMIENA_Msk;
 8004dd4:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <SystemCoreSetup+0x104>)
 8004dd6:	2207      	movs	r2, #7
 8004dd8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004dda:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004dde:	f3bf 8f6f 	isb	sy
__DSB();
__ISB();

}
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	e000ed00 	.word	0xe000ed00
 8004dec:	08000000 	.word	0x08000000
 8004df0:	58001000 	.word	0x58001000
 8004df4:	e000ed90 	.word	0xe000ed90
 8004df8:	08008780 	.word	0x08008780

08004dfc <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]

  return (status);
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8004e20:	4b02      	ldr	r3, [pc, #8]	; (8004e2c <OSCHP_GetFrequency+0x10>)
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	00b71b00 	.word	0x00b71b00

08004e30 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8004e38:	4906      	ldr	r1, [pc, #24]	; (8004e54 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	50004600 	.word	0x50004600

08004e58 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8004e5e:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <SystemCoreClockSetup+0x60>)
 8004e60:	1d3c      	adds	r4, r7, #4
 8004e62:	461d      	mov	r5, r3
 8004e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8004e6c:	1d3b      	adds	r3, r7, #4
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb fb7c 	bl	800056c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8004e74:	2000      	movs	r0, #0
 8004e76:	f7fb fc89 	bl	800078c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8004e7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004e7e:	f7fb fc3d 	bl	80006fc <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8004e82:	2006      	movs	r0, #6
 8004e84:	f7fb fd0e 	bl	80008a4 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8004e88:	f7fb fda4 	bl	80009d4 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8004e8c:	2003      	movs	r0, #3
 8004e8e:	2164      	movs	r1, #100	; 0x64
 8004e90:	f7fb fdb0 	bl	80009f4 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8004e94:	2000      	movs	r0, #0
 8004e96:	f7ff ffcb 	bl	8004e30 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8004e9a:	2002      	movs	r0, #2
 8004e9c:	f7fb fd3e 	bl	800091c <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7fb fc3f 	bl	8000724 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f7fb fd24 	bl	80008f4 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8004eac:	2001      	movs	r0, #1
 8004eae:	f7fb fd0d 	bl	80008cc <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb8:	080087c0 	.word	0x080087c0

08004ebc <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7c5b      	ldrb	r3, [r3, #17]
 8004ec8:	f083 0301 	eor.w	r3, r3, #1
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	e015      	b.n	8004f04 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	791a      	ldrb	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f7fb fa49 	bl	8000390 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	3301      	adds	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7c1b      	ldrb	r3, [r3, #16]
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d3e4      	bcc.n	8004ed8 <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop

08004f20 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8004f26:	2300      	movs	r3, #0
 8004f28:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004f2a:	4815      	ldr	r0, [pc, #84]	; (8004f80 <DAVE_Init+0x60>)
 8004f2c:	f7ff ff66 	bl	8004dfc <CLOCK_XMC4_Init>
 8004f30:	4603      	mov	r3, r0
 8004f32:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <DAVE_Init+0x24>
  {
	 /**  Initialization of USBD_VCOM APP instance USB_VCOM */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&USB_VCOM); 
 8004f3a:	4812      	ldr	r0, [pc, #72]	; (8004f84 <DAVE_Init+0x64>)
 8004f3c:	f7fe f98a 	bl	8003254 <USBD_VCOM_Init>
 8004f40:	4603      	mov	r3, r0
 8004f42:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
 8004f4a:	480f      	ldr	r0, [pc, #60]	; (8004f88 <DAVE_Init+0x68>)
 8004f4c:	f7ff fe22 	bl	8004b94 <DIGITAL_IO_Init>
 8004f50:	4603      	mov	r3, r0
 8004f52:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance button */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button); 
 8004f5a:	480c      	ldr	r0, [pc, #48]	; (8004f8c <DAVE_Init+0x6c>)
 8004f5c:	f7ff fe1a 	bl	8004b94 <DIGITAL_IO_Init>
 8004f60:	4603      	mov	r3, r0
 8004f62:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <DAVE_Init+0x54>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO_0 */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_0); 
 8004f6a:	4809      	ldr	r0, [pc, #36]	; (8004f90 <DAVE_Init+0x70>)
 8004f6c:	f7ff ffa6 	bl	8004ebc <BUS_IO_Init>
 8004f70:	4603      	mov	r3, r0
 8004f72:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8004f74:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	1ffe896c 	.word	0x1ffe896c
 8004f84:	1ffe8940 	.word	0x1ffe8940
 8004f88:	08008758 	.word	0x08008758
 8004f8c:	0800876c 	.word	0x0800876c
 8004f90:	1ffe8850 	.word	0x1ffe8850

08004f94 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	605a      	str	r2, [r3, #4]
}
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	f003 0301 	and.w	r3, r3, #1
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop

08004fe0 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7c1b      	ldrb	r3, [r3, #16]
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f7ff ffce 	bl	8004f94 <XMC_GPIO_ToggleOutput>
}
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop

08005000 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7c1b      	ldrb	r3, [r3, #16]
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f7ff ffd0 	bl	8004fb8 <XMC_GPIO_GetInput>
 8005018:	4603      	mov	r3, r0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop

08005024 <printf>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int	printf (const char *fmt, ...)
{
 8005024:	b40f      	push	{r0, r1, r2, r3}
 8005026:	b580      	push	{r7, lr}
 8005028:	b0c4      	sub	sp, #272	; 0x110
 800502a:	af00      	add	r7, sp, #0
	size_t len = strlen(fmt);
 800502c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005030:	f000 fddc 	bl	8005bec <strlen>
 8005034:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	char buffer_print[256];
	va_list args;
	va_start(args, fmt);
 8005038:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	601a      	str	r2, [r3, #0]
	vsnprintf(buffer_print, sizeof(buffer_print), fmt, args);
 8005040:	f107 0208 	add.w	r2, r7, #8
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	4610      	mov	r0, r2
 8005048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800504c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f000 fdfd 	bl	8005c50 <vsniprintf>
	va_end(args);
	size_t ret = USBD_VCOM_SendData(buffer_print, strlen(buffer_print));
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fdc6 	bl	8005bec <strlen>
 8005060:	4603      	mov	r3, r0
 8005062:	b29b      	uxth	r3, r3
 8005064:	f107 0208 	add.w	r2, r7, #8
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	f7fe f95e 	bl	800332c <USBD_VCOM_SendData>
 8005070:	4603      	mov	r3, r0
 8005072:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	return ret;
 8005076:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 800507a:	4618      	mov	r0, r3
 800507c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005086:	b004      	add	sp, #16
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop

0800508c <main>:
  return ch;
}


int main(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0

  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8005092:	f7ff ff45 	bl	8004f20 <DAVE_Init>
 8005096:	4603      	mov	r3, r0
 8005098:	70fb      	strb	r3, [r7, #3]

  if (status != DAVE_STATUS_SUCCESS)
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <main+0x1c>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
 80050a0:	482f      	ldr	r0, [pc, #188]	; (8005160 <main+0xd4>)
 80050a2:	f000 fd71 	bl	8005b88 <puts>

    while(1U)
    {


    }
 80050a6:	e7fe      	b.n	80050a6 <main+0x1a>


  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  if( USBD_VCOM_Connect() == USBD_VCOM_STATUS_SUCCESS )
 80050a8:	f7fe faa0 	bl	80035ec <USBD_VCOM_Connect>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11b      	bne.n	80050ea <main+0x5e>
	  {
//		  while (!USBD_VCOM_IsEnumDone());
		  uint16_t bytes = USBD_VCOM_BytesReceived();
 80050b2:	f7fe f9af 	bl	8003414 <USBD_VCOM_BytesReceived>
 80050b6:	4603      	mov	r3, r0
 80050b8:	81fb      	strh	r3, [r7, #14]
		  if (bytes)
 80050ba:	89fb      	ldrh	r3, [r7, #14]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00e      	beq.n	80050de <main+0x52>
		  {
			/* Get all bytes received and return them to host */
			while(bytes--)
 80050c0:	e008      	b.n	80050d4 <main+0x48>
			{
			  USBD_VCOM_ReceiveByte(&rx_buffer[0]);
 80050c2:	4828      	ldr	r0, [pc, #160]	; (8005164 <main+0xd8>)
 80050c4:	f7fe f982 	bl	80033cc <USBD_VCOM_ReceiveByte>
			  USBD_VCOM_SendByte(rx_buffer[0]);
 80050c8:	4b26      	ldr	r3, [pc, #152]	; (8005164 <main+0xd8>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe f90c 	bl	80032ec <USBD_VCOM_SendByte>
//		  while (!USBD_VCOM_IsEnumDone());
		  uint16_t bytes = USBD_VCOM_BytesReceived();
		  if (bytes)
		  {
			/* Get all bytes received and return them to host */
			while(bytes--)
 80050d4:	89fb      	ldrh	r3, [r7, #14]
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	81fa      	strh	r2, [r7, #14]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f1      	bne.n	80050c2 <main+0x36>
			  USBD_VCOM_ReceiveByte(&rx_buffer[0]);
			  USBD_VCOM_SendByte(rx_buffer[0]);
			}
		  }
		  /* Call general managment task */
		  CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 80050de:	4822      	ldr	r0, [pc, #136]	; (8005168 <main+0xdc>)
 80050e0:	f7fd ff4a 	bl	8002f78 <CDC_Device_USBTask>
		  USBD_VCOM_SendString("sdadas");
 80050e4:	4821      	ldr	r0, [pc, #132]	; (800516c <main+0xe0>)
 80050e6:	f7fe f94d 	bl	8003384 <USBD_VCOM_SendString>
	  }
	  printf("jalo");
 80050ea:	4821      	ldr	r0, [pc, #132]	; (8005170 <main+0xe4>)
 80050ec:	f7ff ff9a 	bl	8005024 <printf>
	  if(DIGITAL_IO_GetInput(&button) )
 80050f0:	4820      	ldr	r0, [pc, #128]	; (8005174 <main+0xe8>)
 80050f2:	f7ff ff85 	bl	8005000 <DIGITAL_IO_GetInput>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d018      	beq.n	800512e <main+0xa2>
	  {
		  DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
 80050fc:	481e      	ldr	r0, [pc, #120]	; (8005178 <main+0xec>)
 80050fe:	f7ff ff6f 	bl	8004fe0 <DIGITAL_IO_ToggleOutput>
		  for(float i=0; i<9000000; i++); // do nothing, halt for a while
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	e007      	b.n	800511a <main+0x8e>
 800510a:	edd7 7a02 	vldr	s15, [r7, #8]
 800510e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005116:	edc7 7a02 	vstr	s15, [r7, #8]
 800511a:	edd7 7a02 	vldr	s15, [r7, #8]
 800511e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800517c <main+0xf0>
 8005122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512a:	d4ee      	bmi.n	800510a <main+0x7e>
 800512c:	e017      	b.n	800515e <main+0xd2>
	  }else
	  {
		  DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
 800512e:	4812      	ldr	r0, [pc, #72]	; (8005178 <main+0xec>)
 8005130:	f7ff ff56 	bl	8004fe0 <DIGITAL_IO_ToggleOutput>
		  for(float i=0; i<1000000; i++); // do nothing, halt for a while
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	e007      	b.n	800514c <main+0xc0>
 800513c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005148:	edc7 7a01 	vstr	s15, [r7, #4]
 800514c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005150:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005180 <main+0xf4>
 8005154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	d4ee      	bmi.n	800513c <main+0xb0>
	  }

  }
 800515e:	e7a3      	b.n	80050a8 <main+0x1c>
 8005160:	080087f4 	.word	0x080087f4
 8005164:	1ffe8970 	.word	0x1ffe8970
 8005168:	1ffe8d24 	.word	0x1ffe8d24
 800516c:	08008814 	.word	0x08008814
 8005170:	0800881c 	.word	0x0800881c
 8005174:	0800876c 	.word	0x0800876c
 8005178:	08008758 	.word	0x08008758
 800517c:	4b095440 	.word	0x4b095440
 8005180:	49742400 	.word	0x49742400

08005184 <__errno>:
 8005184:	4b01      	ldr	r3, [pc, #4]	; (800518c <__errno+0x8>)
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	1ffe88c4 	.word	0x1ffe88c4

08005190 <__libc_init_array>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <__libc_init_array+0x3c>)
 8005194:	4c0e      	ldr	r4, [pc, #56]	; (80051d0 <__libc_init_array+0x40>)
 8005196:	1ae4      	subs	r4, r4, r3
 8005198:	10a4      	asrs	r4, r4, #2
 800519a:	2500      	movs	r5, #0
 800519c:	461e      	mov	r6, r3
 800519e:	42a5      	cmp	r5, r4
 80051a0:	d004      	beq.n	80051ac <__libc_init_array+0x1c>
 80051a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051a6:	4798      	blx	r3
 80051a8:	3501      	adds	r5, #1
 80051aa:	e7f8      	b.n	800519e <__libc_init_array+0xe>
 80051ac:	f7fd fcd0 	bl	8002b50 <_init>
 80051b0:	4c08      	ldr	r4, [pc, #32]	; (80051d4 <__libc_init_array+0x44>)
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <__libc_init_array+0x48>)
 80051b4:	1ae4      	subs	r4, r4, r3
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	2500      	movs	r5, #0
 80051ba:	461e      	mov	r6, r3
 80051bc:	42a5      	cmp	r5, r4
 80051be:	d004      	beq.n	80051ca <__libc_init_array+0x3a>
 80051c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051c4:	4798      	blx	r3
 80051c6:	3501      	adds	r5, #1
 80051c8:	e7f8      	b.n	80051bc <__libc_init_array+0x2c>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	1ffe8900 	.word	0x1ffe8900
 80051d0:	1ffe8900 	.word	0x1ffe8900
 80051d4:	1ffe8900 	.word	0x1ffe8900
 80051d8:	1ffe8900 	.word	0x1ffe8900

080051dc <memcpy>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	1e43      	subs	r3, r0, #1
 80051e0:	440a      	add	r2, r1
 80051e2:	4291      	cmp	r1, r2
 80051e4:	d004      	beq.n	80051f0 <memcpy+0x14>
 80051e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ee:	e7f8      	b.n	80051e2 <memcpy+0x6>
 80051f0:	bd10      	pop	{r4, pc}

080051f2 <memset>:
 80051f2:	4402      	add	r2, r0
 80051f4:	4603      	mov	r3, r0
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d002      	beq.n	8005200 <memset+0xe>
 80051fa:	f803 1b01 	strb.w	r1, [r3], #1
 80051fe:	e7fa      	b.n	80051f6 <memset+0x4>
 8005200:	4770      	bx	lr

08005202 <__cvt>:
 8005202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800520c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800520e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005210:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005214:	461d      	mov	r5, r3
 8005216:	bfb8      	it	lt
 8005218:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800521c:	f027 0720 	bic.w	r7, r7, #32
 8005220:	bfb6      	itet	lt
 8005222:	461d      	movlt	r5, r3
 8005224:	2300      	movge	r3, #0
 8005226:	232d      	movlt	r3, #45	; 0x2d
 8005228:	4614      	mov	r4, r2
 800522a:	bfb8      	it	lt
 800522c:	4614      	movlt	r4, r2
 800522e:	2f46      	cmp	r7, #70	; 0x46
 8005230:	700b      	strb	r3, [r1, #0]
 8005232:	d003      	beq.n	800523c <__cvt+0x3a>
 8005234:	2f45      	cmp	r7, #69	; 0x45
 8005236:	d103      	bne.n	8005240 <__cvt+0x3e>
 8005238:	3601      	adds	r6, #1
 800523a:	e001      	b.n	8005240 <__cvt+0x3e>
 800523c:	2303      	movs	r3, #3
 800523e:	e000      	b.n	8005242 <__cvt+0x40>
 8005240:	2302      	movs	r3, #2
 8005242:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 8005246:	ab06      	add	r3, sp, #24
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	ab07      	add	r3, sp, #28
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	4622      	mov	r2, r4
 8005250:	462b      	mov	r3, r5
 8005252:	f000 fe5d 	bl	8005f10 <_dtoa_r>
 8005256:	2f47      	cmp	r7, #71	; 0x47
 8005258:	4680      	mov	r8, r0
 800525a:	d102      	bne.n	8005262 <__cvt+0x60>
 800525c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800525e:	07db      	lsls	r3, r3, #31
 8005260:	d526      	bpl.n	80052b0 <__cvt+0xae>
 8005262:	2f46      	cmp	r7, #70	; 0x46
 8005264:	eb08 0906 	add.w	r9, r8, r6
 8005268:	d111      	bne.n	800528e <__cvt+0x8c>
 800526a:	f898 3000 	ldrb.w	r3, [r8]
 800526e:	2b30      	cmp	r3, #48	; 0x30
 8005270:	d10a      	bne.n	8005288 <__cvt+0x86>
 8005272:	4620      	mov	r0, r4
 8005274:	4629      	mov	r1, r5
 8005276:	2200      	movs	r2, #0
 8005278:	2300      	movs	r3, #0
 800527a:	f002 ffe7 	bl	800824c <__aeabi_dcmpeq>
 800527e:	b918      	cbnz	r0, 8005288 <__cvt+0x86>
 8005280:	f1c6 0601 	rsb	r6, r6, #1
 8005284:	f8ca 6000 	str.w	r6, [sl]
 8005288:	f8da 3000 	ldr.w	r3, [sl]
 800528c:	4499      	add	r9, r3
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	2200      	movs	r2, #0
 8005294:	2300      	movs	r3, #0
 8005296:	f002 ffd9 	bl	800824c <__aeabi_dcmpeq>
 800529a:	b108      	cbz	r0, 80052a0 <__cvt+0x9e>
 800529c:	f8cd 901c 	str.w	r9, [sp, #28]
 80052a0:	9b07      	ldr	r3, [sp, #28]
 80052a2:	454b      	cmp	r3, r9
 80052a4:	d204      	bcs.n	80052b0 <__cvt+0xae>
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	9207      	str	r2, [sp, #28]
 80052aa:	2230      	movs	r2, #48	; 0x30
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e7f7      	b.n	80052a0 <__cvt+0x9e>
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80052b4:	ebc8 0303 	rsb	r3, r8, r3
 80052b8:	4640      	mov	r0, r8
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	b008      	add	sp, #32
 80052be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080052c2 <__exponent>:
 80052c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052c4:	4603      	mov	r3, r0
 80052c6:	2900      	cmp	r1, #0
 80052c8:	bfb8      	it	lt
 80052ca:	4249      	neglt	r1, r1
 80052cc:	f803 2b02 	strb.w	r2, [r3], #2
 80052d0:	bfb4      	ite	lt
 80052d2:	222d      	movlt	r2, #45	; 0x2d
 80052d4:	222b      	movge	r2, #43	; 0x2b
 80052d6:	2909      	cmp	r1, #9
 80052d8:	7042      	strb	r2, [r0, #1]
 80052da:	dd19      	ble.n	8005310 <__exponent+0x4e>
 80052dc:	f10d 0407 	add.w	r4, sp, #7
 80052e0:	4626      	mov	r6, r4
 80052e2:	220a      	movs	r2, #10
 80052e4:	fb91 f5f2 	sdiv	r5, r1, r2
 80052e8:	fb02 1115 	mls	r1, r2, r5, r1
 80052ec:	3130      	adds	r1, #48	; 0x30
 80052ee:	2d09      	cmp	r5, #9
 80052f0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80052f4:	4629      	mov	r1, r5
 80052f6:	dcf4      	bgt.n	80052e2 <__exponent+0x20>
 80052f8:	3130      	adds	r1, #48	; 0x30
 80052fa:	1e65      	subs	r5, r4, #1
 80052fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005300:	42b5      	cmp	r5, r6
 8005302:	461a      	mov	r2, r3
 8005304:	d20a      	bcs.n	800531c <__exponent+0x5a>
 8005306:	f815 2b01 	ldrb.w	r2, [r5], #1
 800530a:	f803 2b01 	strb.w	r2, [r3], #1
 800530e:	e7f7      	b.n	8005300 <__exponent+0x3e>
 8005310:	2430      	movs	r4, #48	; 0x30
 8005312:	461a      	mov	r2, r3
 8005314:	4421      	add	r1, r4
 8005316:	f802 4b02 	strb.w	r4, [r2], #2
 800531a:	7059      	strb	r1, [r3, #1]
 800531c:	1a10      	subs	r0, r2, r0
 800531e:	b002      	add	sp, #8
 8005320:	bd70      	pop	{r4, r5, r6, pc}
	...

08005324 <_printf_float>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	b091      	sub	sp, #68	; 0x44
 800532a:	468b      	mov	fp, r1
 800532c:	4615      	mov	r5, r2
 800532e:	461e      	mov	r6, r3
 8005330:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005332:	4604      	mov	r4, r0
 8005334:	f001 fd26 	bl	8006d84 <_localeconv_r>
 8005338:	f8d0 a000 	ldr.w	sl, [r0]
 800533c:	4650      	mov	r0, sl
 800533e:	f000 fc55 	bl	8005bec <strlen>
 8005342:	2300      	movs	r3, #0
 8005344:	930e      	str	r3, [sp, #56]	; 0x38
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9009      	str	r0, [sp, #36]	; 0x24
 800534a:	3307      	adds	r3, #7
 800534c:	f023 0307 	bic.w	r3, r3, #7
 8005350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005354:	f103 0208 	add.w	r2, r3, #8
 8005358:	f89b 8018 	ldrb.w	r8, [fp, #24]
 800535c:	603a      	str	r2, [r7, #0]
 800535e:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8005362:	f000 fc19 	bl	8005b98 <__fpclassifyd>
 8005366:	2801      	cmp	r0, #1
 8005368:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800536c:	d119      	bne.n	80053a2 <_printf_float+0x7e>
 800536e:	2200      	movs	r2, #0
 8005370:	2300      	movs	r3, #0
 8005372:	f002 ff75 	bl	8008260 <__aeabi_dcmplt>
 8005376:	b110      	cbz	r0, 800537e <_printf_float+0x5a>
 8005378:	232d      	movs	r3, #45	; 0x2d
 800537a:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800537e:	4ba0      	ldr	r3, [pc, #640]	; (8005600 <_printf_float+0x2dc>)
 8005380:	4fa0      	ldr	r7, [pc, #640]	; (8005604 <_printf_float+0x2e0>)
 8005382:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005386:	bf88      	it	hi
 8005388:	461f      	movhi	r7, r3
 800538a:	2303      	movs	r3, #3
 800538c:	f8cb 3010 	str.w	r3, [fp, #16]
 8005390:	f8db 3000 	ldr.w	r3, [fp]
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	f8cb 3000 	str.w	r3, [fp]
 800539c:	f04f 0900 	mov.w	r9, #0
 80053a0:	e0a1      	b.n	80054e6 <_printf_float+0x1c2>
 80053a2:	f000 fbf9 	bl	8005b98 <__fpclassifyd>
 80053a6:	f8db 3000 	ldr.w	r3, [fp]
 80053aa:	b948      	cbnz	r0, 80053c0 <_printf_float+0x9c>
 80053ac:	4a96      	ldr	r2, [pc, #600]	; (8005608 <_printf_float+0x2e4>)
 80053ae:	4f97      	ldr	r7, [pc, #604]	; (800560c <_printf_float+0x2e8>)
 80053b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053b4:	bf88      	it	hi
 80053b6:	4617      	movhi	r7, r2
 80053b8:	2203      	movs	r2, #3
 80053ba:	f8cb 2010 	str.w	r2, [fp, #16]
 80053be:	e7e9      	b.n	8005394 <_printf_float+0x70>
 80053c0:	f8db 2004 	ldr.w	r2, [fp, #4]
 80053c4:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 80053c8:	1c57      	adds	r7, r2, #1
 80053ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80053ce:	d101      	bne.n	80053d4 <_printf_float+0xb0>
 80053d0:	2206      	movs	r2, #6
 80053d2:	e009      	b.n	80053e8 <_printf_float+0xc4>
 80053d4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80053d8:	d002      	beq.n	80053e0 <_printf_float+0xbc>
 80053da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053de:	d105      	bne.n	80053ec <_printf_float+0xc8>
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	f040 81c7 	bne.w	8005774 <_printf_float+0x450>
 80053e6:	2201      	movs	r2, #1
 80053e8:	f8cb 2004 	str.w	r2, [fp, #4]
 80053ec:	f8db 2004 	ldr.w	r2, [fp, #4]
 80053f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80053f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80053fc:	f8cb 3000 	str.w	r3, [fp]
 8005400:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005404:	9302      	str	r3, [sp, #8]
 8005406:	ab0d      	add	r3, sp, #52	; 0x34
 8005408:	9303      	str	r3, [sp, #12]
 800540a:	ab0e      	add	r3, sp, #56	; 0x38
 800540c:	9305      	str	r3, [sp, #20]
 800540e:	2300      	movs	r3, #0
 8005410:	9306      	str	r3, [sp, #24]
 8005412:	4620      	mov	r0, r4
 8005414:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005418:	f7ff fef3 	bl	8005202 <__cvt>
 800541c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005420:	2b47      	cmp	r3, #71	; 0x47
 8005422:	4607      	mov	r7, r0
 8005424:	d10a      	bne.n	800543c <_printf_float+0x118>
 8005426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005428:	1cd8      	adds	r0, r3, #3
 800542a:	db03      	blt.n	8005434 <_printf_float+0x110>
 800542c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005430:	4293      	cmp	r3, r2
 8005432:	dd37      	ble.n	80054a4 <_printf_float+0x180>
 8005434:	f1a8 0802 	sub.w	r8, r8, #2
 8005438:	fa5f f888 	uxtb.w	r8, r8
 800543c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005440:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005442:	d815      	bhi.n	8005470 <_printf_float+0x14c>
 8005444:	3901      	subs	r1, #1
 8005446:	4642      	mov	r2, r8
 8005448:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800544c:	910d      	str	r1, [sp, #52]	; 0x34
 800544e:	f7ff ff38 	bl	80052c2 <__exponent>
 8005452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005454:	1883      	adds	r3, r0, r2
 8005456:	2a01      	cmp	r2, #1
 8005458:	4681      	mov	r9, r0
 800545a:	f8cb 3010 	str.w	r3, [fp, #16]
 800545e:	dc03      	bgt.n	8005468 <_printf_float+0x144>
 8005460:	f8db 2000 	ldr.w	r2, [fp]
 8005464:	07d1      	lsls	r1, r2, #31
 8005466:	d538      	bpl.n	80054da <_printf_float+0x1b6>
 8005468:	3301      	adds	r3, #1
 800546a:	f8cb 3010 	str.w	r3, [fp, #16]
 800546e:	e034      	b.n	80054da <_printf_float+0x1b6>
 8005470:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005474:	d118      	bne.n	80054a8 <_printf_float+0x184>
 8005476:	2900      	cmp	r1, #0
 8005478:	f8db 3004 	ldr.w	r3, [fp, #4]
 800547c:	dd09      	ble.n	8005492 <_printf_float+0x16e>
 800547e:	f8cb 1010 	str.w	r1, [fp, #16]
 8005482:	b91b      	cbnz	r3, 800548c <_printf_float+0x168>
 8005484:	f8db 2000 	ldr.w	r2, [fp]
 8005488:	07d2      	lsls	r2, r2, #31
 800548a:	d521      	bpl.n	80054d0 <_printf_float+0x1ac>
 800548c:	3301      	adds	r3, #1
 800548e:	440b      	add	r3, r1
 8005490:	e01c      	b.n	80054cc <_printf_float+0x1a8>
 8005492:	b91b      	cbnz	r3, 800549c <_printf_float+0x178>
 8005494:	f8db 2000 	ldr.w	r2, [fp]
 8005498:	07d0      	lsls	r0, r2, #31
 800549a:	d501      	bpl.n	80054a0 <_printf_float+0x17c>
 800549c:	3302      	adds	r3, #2
 800549e:	e015      	b.n	80054cc <_printf_float+0x1a8>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e013      	b.n	80054cc <_printf_float+0x1a8>
 80054a4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80054a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ac:	4293      	cmp	r3, r2
 80054ae:	db07      	blt.n	80054c0 <_printf_float+0x19c>
 80054b0:	f8db 2000 	ldr.w	r2, [fp]
 80054b4:	f8cb 3010 	str.w	r3, [fp, #16]
 80054b8:	07d1      	lsls	r1, r2, #31
 80054ba:	d509      	bpl.n	80054d0 <_printf_float+0x1ac>
 80054bc:	3301      	adds	r3, #1
 80054be:	e005      	b.n	80054cc <_printf_float+0x1a8>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfd4      	ite	le
 80054c4:	f1c3 0302 	rsble	r3, r3, #2
 80054c8:	2301      	movgt	r3, #1
 80054ca:	4413      	add	r3, r2
 80054cc:	f8cb 3010 	str.w	r3, [fp, #16]
 80054d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054d2:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80054d6:	f04f 0900 	mov.w	r9, #0
 80054da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80054de:	b113      	cbz	r3, 80054e6 <_printf_float+0x1c2>
 80054e0:	232d      	movs	r3, #45	; 0x2d
 80054e2:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 80054e6:	9600      	str	r6, [sp, #0]
 80054e8:	4620      	mov	r0, r4
 80054ea:	4659      	mov	r1, fp
 80054ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80054ee:	462b      	mov	r3, r5
 80054f0:	f000 f95c 	bl	80057ac <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d102      	bne.n	80054fe <_printf_float+0x1da>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	e152      	b.n	80057a4 <_printf_float+0x480>
 80054fe:	f8db 3000 	ldr.w	r3, [fp]
 8005502:	055a      	lsls	r2, r3, #21
 8005504:	d405      	bmi.n	8005512 <_printf_float+0x1ee>
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	463a      	mov	r2, r7
 800550c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005510:	e108      	b.n	8005724 <_printf_float+0x400>
 8005512:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005516:	f240 80d0 	bls.w	80056ba <_printf_float+0x396>
 800551a:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800551e:	2200      	movs	r2, #0
 8005520:	2300      	movs	r3, #0
 8005522:	f002 fe93 	bl	800824c <__aeabi_dcmpeq>
 8005526:	b350      	cbz	r0, 800557e <_printf_float+0x25a>
 8005528:	4620      	mov	r0, r4
 800552a:	4629      	mov	r1, r5
 800552c:	4a38      	ldr	r2, [pc, #224]	; (8005610 <_printf_float+0x2ec>)
 800552e:	2301      	movs	r3, #1
 8005530:	47b0      	blx	r6
 8005532:	3001      	adds	r0, #1
 8005534:	d0e0      	beq.n	80054f8 <_printf_float+0x1d4>
 8005536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800553a:	429a      	cmp	r2, r3
 800553c:	db09      	blt.n	8005552 <_printf_float+0x22e>
 800553e:	f8db 3000 	ldr.w	r3, [fp]
 8005542:	07d8      	lsls	r0, r3, #31
 8005544:	d405      	bmi.n	8005552 <_printf_float+0x22e>
 8005546:	f8db 3000 	ldr.w	r3, [fp]
 800554a:	079f      	lsls	r7, r3, #30
 800554c:	f100 8110 	bmi.w	8005770 <_printf_float+0x44c>
 8005550:	e107      	b.n	8005762 <_printf_float+0x43e>
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	4652      	mov	r2, sl
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	47b0      	blx	r6
 800555c:	3001      	adds	r0, #1
 800555e:	d0cb      	beq.n	80054f8 <_printf_float+0x1d4>
 8005560:	2700      	movs	r7, #0
 8005562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005564:	3b01      	subs	r3, #1
 8005566:	429f      	cmp	r7, r3
 8005568:	daed      	bge.n	8005546 <_printf_float+0x222>
 800556a:	4620      	mov	r0, r4
 800556c:	4629      	mov	r1, r5
 800556e:	f10b 021a 	add.w	r2, fp, #26
 8005572:	2301      	movs	r3, #1
 8005574:	47b0      	blx	r6
 8005576:	3001      	adds	r0, #1
 8005578:	d0be      	beq.n	80054f8 <_printf_float+0x1d4>
 800557a:	3701      	adds	r7, #1
 800557c:	e7f1      	b.n	8005562 <_printf_float+0x23e>
 800557e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	dc29      	bgt.n	80055d8 <_printf_float+0x2b4>
 8005584:	4620      	mov	r0, r4
 8005586:	4629      	mov	r1, r5
 8005588:	4a21      	ldr	r2, [pc, #132]	; (8005610 <_printf_float+0x2ec>)
 800558a:	2301      	movs	r3, #1
 800558c:	47b0      	blx	r6
 800558e:	3001      	adds	r0, #1
 8005590:	d0b2      	beq.n	80054f8 <_printf_float+0x1d4>
 8005592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005594:	b92b      	cbnz	r3, 80055a2 <_printf_float+0x27e>
 8005596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005598:	b91b      	cbnz	r3, 80055a2 <_printf_float+0x27e>
 800559a:	f8db 3000 	ldr.w	r3, [fp]
 800559e:	07d9      	lsls	r1, r3, #31
 80055a0:	d5d1      	bpl.n	8005546 <_printf_float+0x222>
 80055a2:	4620      	mov	r0, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	4652      	mov	r2, sl
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	47b0      	blx	r6
 80055ac:	3001      	adds	r0, #1
 80055ae:	d0a3      	beq.n	80054f8 <_printf_float+0x1d4>
 80055b0:	f04f 0800 	mov.w	r8, #0
 80055b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055b6:	425b      	negs	r3, r3
 80055b8:	4598      	cmp	r8, r3
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	da08      	bge.n	80055d2 <_printf_float+0x2ae>
 80055c0:	f10b 021a 	add.w	r2, fp, #26
 80055c4:	2301      	movs	r3, #1
 80055c6:	47b0      	blx	r6
 80055c8:	3001      	adds	r0, #1
 80055ca:	d095      	beq.n	80054f8 <_printf_float+0x1d4>
 80055cc:	f108 0801 	add.w	r8, r8, #1
 80055d0:	e7f0      	b.n	80055b4 <_printf_float+0x290>
 80055d2:	463a      	mov	r2, r7
 80055d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d6:	e0a5      	b.n	8005724 <_printf_float+0x400>
 80055d8:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 80055dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055de:	429a      	cmp	r2, r3
 80055e0:	bfa8      	it	ge
 80055e2:	461a      	movge	r2, r3
 80055e4:	2a00      	cmp	r2, #0
 80055e6:	4691      	mov	r9, r2
 80055e8:	dc02      	bgt.n	80055f0 <_printf_float+0x2cc>
 80055ea:	f04f 0800 	mov.w	r8, #0
 80055ee:	e01c      	b.n	800562a <_printf_float+0x306>
 80055f0:	4620      	mov	r0, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	463a      	mov	r2, r7
 80055f6:	464b      	mov	r3, r9
 80055f8:	47b0      	blx	r6
 80055fa:	3001      	adds	r0, #1
 80055fc:	d1f5      	bne.n	80055ea <_printf_float+0x2c6>
 80055fe:	e77b      	b.n	80054f8 <_printf_float+0x1d4>
 8005600:	08008830 	.word	0x08008830
 8005604:	0800882c 	.word	0x0800882c
 8005608:	08008838 	.word	0x08008838
 800560c:	08008834 	.word	0x08008834
 8005610:	0800883c 	.word	0x0800883c
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f10b 021a 	add.w	r2, fp, #26
 800561c:	2301      	movs	r3, #1
 800561e:	47b0      	blx	r6
 8005620:	3001      	adds	r0, #1
 8005622:	f43f af69 	beq.w	80054f8 <_printf_float+0x1d4>
 8005626:	f108 0801 	add.w	r8, r8, #1
 800562a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800562e:	f1b9 0f00 	cmp.w	r9, #0
 8005632:	bfac      	ite	ge
 8005634:	ebc9 0203 	rsbge	r2, r9, r3
 8005638:	461a      	movlt	r2, r3
 800563a:	4590      	cmp	r8, r2
 800563c:	dbea      	blt.n	8005614 <_printf_float+0x2f0>
 800563e:	eb07 0803 	add.w	r8, r7, r3
 8005642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005646:	429a      	cmp	r2, r3
 8005648:	db10      	blt.n	800566c <_printf_float+0x348>
 800564a:	f8db 3000 	ldr.w	r3, [fp]
 800564e:	07da      	lsls	r2, r3, #31
 8005650:	d40c      	bmi.n	800566c <_printf_float+0x348>
 8005652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005654:	4417      	add	r7, r2
 8005656:	ebc8 0307 	rsb	r3, r8, r7
 800565a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800565c:	1bd2      	subs	r2, r2, r7
 800565e:	4293      	cmp	r3, r2
 8005660:	bfa8      	it	ge
 8005662:	4613      	movge	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	461f      	mov	r7, r3
 8005668:	dc08      	bgt.n	800567c <_printf_float+0x358>
 800566a:	e00e      	b.n	800568a <_printf_float+0x366>
 800566c:	4620      	mov	r0, r4
 800566e:	4629      	mov	r1, r5
 8005670:	4652      	mov	r2, sl
 8005672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005674:	47b0      	blx	r6
 8005676:	3001      	adds	r0, #1
 8005678:	d1eb      	bne.n	8005652 <_printf_float+0x32e>
 800567a:	e73d      	b.n	80054f8 <_printf_float+0x1d4>
 800567c:	4620      	mov	r0, r4
 800567e:	4629      	mov	r1, r5
 8005680:	4642      	mov	r2, r8
 8005682:	47b0      	blx	r6
 8005684:	3001      	adds	r0, #1
 8005686:	f43f af37 	beq.w	80054f8 <_printf_float+0x1d4>
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	e00a      	b.n	80056a6 <_printf_float+0x382>
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	f10b 021a 	add.w	r2, fp, #26
 8005698:	2301      	movs	r3, #1
 800569a:	47b0      	blx	r6
 800569c:	3001      	adds	r0, #1
 800569e:	f43f af2b 	beq.w	80054f8 <_printf_float+0x1d4>
 80056a2:	f108 0801 	add.w	r8, r8, #1
 80056a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056aa:	2f00      	cmp	r7, #0
 80056ac:	eba3 0302 	sub.w	r3, r3, r2
 80056b0:	bfa8      	it	ge
 80056b2:	1bdb      	subge	r3, r3, r7
 80056b4:	4598      	cmp	r8, r3
 80056b6:	dbeb      	blt.n	8005690 <_printf_float+0x36c>
 80056b8:	e745      	b.n	8005546 <_printf_float+0x222>
 80056ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056bc:	2a01      	cmp	r2, #1
 80056be:	dc01      	bgt.n	80056c4 <_printf_float+0x3a0>
 80056c0:	07db      	lsls	r3, r3, #31
 80056c2:	d536      	bpl.n	8005732 <_printf_float+0x40e>
 80056c4:	4620      	mov	r0, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	463a      	mov	r2, r7
 80056ca:	2301      	movs	r3, #1
 80056cc:	47b0      	blx	r6
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f af12 	beq.w	80054f8 <_printf_float+0x1d4>
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	4652      	mov	r2, sl
 80056da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056dc:	47b0      	blx	r6
 80056de:	3001      	adds	r0, #1
 80056e0:	f43f af0a 	beq.w	80054f8 <_printf_float+0x1d4>
 80056e4:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 80056e8:	2200      	movs	r2, #0
 80056ea:	2300      	movs	r3, #0
 80056ec:	f002 fdae 	bl	800824c <__aeabi_dcmpeq>
 80056f0:	b9e8      	cbnz	r0, 800572e <_printf_float+0x40a>
 80056f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	1c7a      	adds	r2, r7, #1
 80056fa:	3b01      	subs	r3, #1
 80056fc:	e01d      	b.n	800573a <_printf_float+0x416>
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f10b 021a 	add.w	r2, fp, #26
 8005706:	2301      	movs	r3, #1
 8005708:	47b0      	blx	r6
 800570a:	3001      	adds	r0, #1
 800570c:	f43f aef4 	beq.w	80054f8 <_printf_float+0x1d4>
 8005710:	3701      	adds	r7, #1
 8005712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005714:	3b01      	subs	r3, #1
 8005716:	429f      	cmp	r7, r3
 8005718:	dbf1      	blt.n	80056fe <_printf_float+0x3da>
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8005722:	464b      	mov	r3, r9
 8005724:	47b0      	blx	r6
 8005726:	3001      	adds	r0, #1
 8005728:	f47f af0d 	bne.w	8005546 <_printf_float+0x222>
 800572c:	e6e4      	b.n	80054f8 <_printf_float+0x1d4>
 800572e:	2700      	movs	r7, #0
 8005730:	e7ef      	b.n	8005712 <_printf_float+0x3ee>
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	463a      	mov	r2, r7
 8005738:	2301      	movs	r3, #1
 800573a:	47b0      	blx	r6
 800573c:	3001      	adds	r0, #1
 800573e:	d1ec      	bne.n	800571a <_printf_float+0x3f6>
 8005740:	e6da      	b.n	80054f8 <_printf_float+0x1d4>
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f10b 0219 	add.w	r2, fp, #25
 800574a:	2301      	movs	r3, #1
 800574c:	47b0      	blx	r6
 800574e:	3001      	adds	r0, #1
 8005750:	f43f aed2 	beq.w	80054f8 <_printf_float+0x1d4>
 8005754:	3701      	adds	r7, #1
 8005756:	f8db 300c 	ldr.w	r3, [fp, #12]
 800575a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	429f      	cmp	r7, r3
 8005760:	dbef      	blt.n	8005742 <_printf_float+0x41e>
 8005762:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005768:	4298      	cmp	r0, r3
 800576a:	bfb8      	it	lt
 800576c:	4618      	movlt	r0, r3
 800576e:	e019      	b.n	80057a4 <_printf_float+0x480>
 8005770:	2700      	movs	r7, #0
 8005772:	e7f0      	b.n	8005756 <_printf_float+0x432>
 8005774:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005778:	e88d 000c 	stmia.w	sp, {r2, r3}
 800577c:	f8cb 3000 	str.w	r3, [fp]
 8005780:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005784:	9302      	str	r3, [sp, #8]
 8005786:	ab0d      	add	r3, sp, #52	; 0x34
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	ab0e      	add	r3, sp, #56	; 0x38
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	2300      	movs	r3, #0
 8005790:	9306      	str	r3, [sp, #24]
 8005792:	f8cd 8010 	str.w	r8, [sp, #16]
 8005796:	4620      	mov	r0, r4
 8005798:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800579c:	f7ff fd31 	bl	8005202 <__cvt>
 80057a0:	4607      	mov	r7, r0
 80057a2:	e640      	b.n	8005426 <_printf_float+0x102>
 80057a4:	b011      	add	sp, #68	; 0x44
 80057a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057aa:	bf00      	nop

080057ac <_printf_common>:
 80057ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b0:	4691      	mov	r9, r2
 80057b2:	461f      	mov	r7, r3
 80057b4:	688a      	ldr	r2, [r1, #8]
 80057b6:	690b      	ldr	r3, [r1, #16]
 80057b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057bc:	4293      	cmp	r3, r2
 80057be:	bfb8      	it	lt
 80057c0:	4613      	movlt	r3, r2
 80057c2:	f8c9 3000 	str.w	r3, [r9]
 80057c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057ca:	4606      	mov	r6, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	b112      	cbz	r2, 80057d6 <_printf_common+0x2a>
 80057d0:	3301      	adds	r3, #1
 80057d2:	f8c9 3000 	str.w	r3, [r9]
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	0699      	lsls	r1, r3, #26
 80057da:	bf42      	ittt	mi
 80057dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057e0:	3302      	addmi	r3, #2
 80057e2:	f8c9 3000 	strmi.w	r3, [r9]
 80057e6:	6825      	ldr	r5, [r4, #0]
 80057e8:	f015 0506 	ands.w	r5, r5, #6
 80057ec:	d01c      	beq.n	8005828 <_printf_common+0x7c>
 80057ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	3300      	adds	r3, #0
 80057f6:	bf18      	it	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	0692      	lsls	r2, r2, #26
 80057fc:	d51f      	bpl.n	800583e <_printf_common+0x92>
 80057fe:	18e1      	adds	r1, r4, r3
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	2030      	movs	r0, #48	; 0x30
 8005804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005808:	4422      	add	r2, r4
 800580a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800580e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005812:	3302      	adds	r3, #2
 8005814:	e013      	b.n	800583e <_printf_common+0x92>
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f104 0219 	add.w	r2, r4, #25
 800581e:	2301      	movs	r3, #1
 8005820:	47c0      	blx	r8
 8005822:	3001      	adds	r0, #1
 8005824:	d007      	beq.n	8005836 <_printf_common+0x8a>
 8005826:	3501      	adds	r5, #1
 8005828:	68e3      	ldr	r3, [r4, #12]
 800582a:	f8d9 2000 	ldr.w	r2, [r9]
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	429d      	cmp	r5, r3
 8005832:	dbf0      	blt.n	8005816 <_printf_common+0x6a>
 8005834:	e7db      	b.n	80057ee <_printf_common+0x42>
 8005836:	f04f 30ff 	mov.w	r0, #4294967295
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	4630      	mov	r0, r6
 8005840:	4639      	mov	r1, r7
 8005842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005846:	47c0      	blx	r8
 8005848:	3001      	adds	r0, #1
 800584a:	d0f4      	beq.n	8005836 <_printf_common+0x8a>
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	f8d9 5000 	ldr.w	r5, [r9]
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	f002 0206 	and.w	r2, r2, #6
 8005858:	2a04      	cmp	r2, #4
 800585a:	bf08      	it	eq
 800585c:	1b5d      	subeq	r5, r3, r5
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	bf0c      	ite	eq
 8005864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005868:	2500      	movne	r5, #0
 800586a:	4293      	cmp	r3, r2
 800586c:	bfc4      	itt	gt
 800586e:	1a9b      	subgt	r3, r3, r2
 8005870:	18ed      	addgt	r5, r5, r3
 8005872:	f04f 0900 	mov.w	r9, #0
 8005876:	45a9      	cmp	r9, r5
 8005878:	da0a      	bge.n	8005890 <_printf_common+0xe4>
 800587a:	4630      	mov	r0, r6
 800587c:	4639      	mov	r1, r7
 800587e:	f104 021a 	add.w	r2, r4, #26
 8005882:	2301      	movs	r3, #1
 8005884:	47c0      	blx	r8
 8005886:	3001      	adds	r0, #1
 8005888:	d0d5      	beq.n	8005836 <_printf_common+0x8a>
 800588a:	f109 0901 	add.w	r9, r9, #1
 800588e:	e7f2      	b.n	8005876 <_printf_common+0xca>
 8005890:	2000      	movs	r0, #0
 8005892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005898 <_printf_i>:
 8005898:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800589c:	460c      	mov	r4, r1
 800589e:	4617      	mov	r7, r2
 80058a0:	7e22      	ldrb	r2, [r4, #24]
 80058a2:	2a6e      	cmp	r2, #110	; 0x6e
 80058a4:	4698      	mov	r8, r3
 80058a6:	4606      	mov	r6, r0
 80058a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058aa:	f101 0143 	add.w	r1, r1, #67	; 0x43
 80058ae:	f000 80a9 	beq.w	8005a04 <_printf_i+0x16c>
 80058b2:	d812      	bhi.n	80058da <_printf_i+0x42>
 80058b4:	2a63      	cmp	r2, #99	; 0x63
 80058b6:	d023      	beq.n	8005900 <_printf_i+0x68>
 80058b8:	d80a      	bhi.n	80058d0 <_printf_i+0x38>
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	f000 80b6 	beq.w	8005a2c <_printf_i+0x194>
 80058c0:	2a58      	cmp	r2, #88	; 0x58
 80058c2:	f040 80c5 	bne.w	8005a50 <_printf_i+0x1b8>
 80058c6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80058ca:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8005ac4 <_printf_i+0x22c>
 80058ce:	e051      	b.n	8005974 <_printf_i+0xdc>
 80058d0:	2a64      	cmp	r2, #100	; 0x64
 80058d2:	d01e      	beq.n	8005912 <_printf_i+0x7a>
 80058d4:	2a69      	cmp	r2, #105	; 0x69
 80058d6:	d01c      	beq.n	8005912 <_printf_i+0x7a>
 80058d8:	e0ba      	b.n	8005a50 <_printf_i+0x1b8>
 80058da:	2a73      	cmp	r2, #115	; 0x73
 80058dc:	f000 80aa 	beq.w	8005a34 <_printf_i+0x19c>
 80058e0:	d809      	bhi.n	80058f6 <_printf_i+0x5e>
 80058e2:	2a6f      	cmp	r2, #111	; 0x6f
 80058e4:	d02b      	beq.n	800593e <_printf_i+0xa6>
 80058e6:	2a70      	cmp	r2, #112	; 0x70
 80058e8:	f040 80b2 	bne.w	8005a50 <_printf_i+0x1b8>
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	f042 0220 	orr.w	r2, r2, #32
 80058f2:	6022      	str	r2, [r4, #0]
 80058f4:	e039      	b.n	800596a <_printf_i+0xd2>
 80058f6:	2a75      	cmp	r2, #117	; 0x75
 80058f8:	d021      	beq.n	800593e <_printf_i+0xa6>
 80058fa:	2a78      	cmp	r2, #120	; 0x78
 80058fc:	d035      	beq.n	800596a <_printf_i+0xd2>
 80058fe:	e0a7      	b.n	8005a50 <_printf_i+0x1b8>
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	1d11      	adds	r1, r2, #4
 8005904:	6019      	str	r1, [r3, #0]
 8005906:	6813      	ldr	r3, [r2, #0]
 8005908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800590c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005910:	e0a2      	b.n	8005a58 <_printf_i+0x1c0>
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	f010 0f80 	tst.w	r0, #128	; 0x80
 800591a:	d003      	beq.n	8005924 <_printf_i+0x8c>
 800591c:	1d10      	adds	r0, r2, #4
 800591e:	6018      	str	r0, [r3, #0]
 8005920:	6813      	ldr	r3, [r2, #0]
 8005922:	e005      	b.n	8005930 <_printf_i+0x98>
 8005924:	0645      	lsls	r5, r0, #25
 8005926:	d5f9      	bpl.n	800591c <_printf_i+0x84>
 8005928:	1d10      	adds	r0, r2, #4
 800592a:	6018      	str	r0, [r3, #0]
 800592c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005930:	2b00      	cmp	r3, #0
 8005932:	da3b      	bge.n	80059ac <_printf_i+0x114>
 8005934:	222d      	movs	r2, #45	; 0x2d
 8005936:	425b      	negs	r3, r3
 8005938:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800593c:	e036      	b.n	80059ac <_printf_i+0x114>
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005946:	d003      	beq.n	8005950 <_printf_i+0xb8>
 8005948:	1d10      	adds	r0, r2, #4
 800594a:	6018      	str	r0, [r3, #0]
 800594c:	6813      	ldr	r3, [r2, #0]
 800594e:	e004      	b.n	800595a <_printf_i+0xc2>
 8005950:	0640      	lsls	r0, r0, #25
 8005952:	d5f9      	bpl.n	8005948 <_printf_i+0xb0>
 8005954:	1d10      	adds	r0, r2, #4
 8005956:	6018      	str	r0, [r3, #0]
 8005958:	8813      	ldrh	r3, [r2, #0]
 800595a:	7e22      	ldrb	r2, [r4, #24]
 800595c:	f8df e164 	ldr.w	lr, [pc, #356]	; 8005ac4 <_printf_i+0x22c>
 8005960:	2a6f      	cmp	r2, #111	; 0x6f
 8005962:	bf0c      	ite	eq
 8005964:	2208      	moveq	r2, #8
 8005966:	220a      	movne	r2, #10
 8005968:	e01c      	b.n	80059a4 <_printf_i+0x10c>
 800596a:	2278      	movs	r2, #120	; 0x78
 800596c:	f8df e158 	ldr.w	lr, [pc, #344]	; 8005ac8 <_printf_i+0x230>
 8005970:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	f012 0f80 	tst.w	r2, #128	; 0x80
 800597c:	f100 0504 	add.w	r5, r0, #4
 8005980:	601d      	str	r5, [r3, #0]
 8005982:	d001      	beq.n	8005988 <_printf_i+0xf0>
 8005984:	6803      	ldr	r3, [r0, #0]
 8005986:	e002      	b.n	800598e <_printf_i+0xf6>
 8005988:	0655      	lsls	r5, r2, #25
 800598a:	d5fb      	bpl.n	8005984 <_printf_i+0xec>
 800598c:	8803      	ldrh	r3, [r0, #0]
 800598e:	07d0      	lsls	r0, r2, #31
 8005990:	bf44      	itt	mi
 8005992:	f042 0220 	orrmi.w	r2, r2, #32
 8005996:	6022      	strmi	r2, [r4, #0]
 8005998:	b91b      	cbnz	r3, 80059a2 <_printf_i+0x10a>
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	f022 0220 	bic.w	r2, r2, #32
 80059a0:	6022      	str	r2, [r4, #0]
 80059a2:	2210      	movs	r2, #16
 80059a4:	2000      	movs	r0, #0
 80059a6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80059aa:	e002      	b.n	80059b2 <_printf_i+0x11a>
 80059ac:	f8df e114 	ldr.w	lr, [pc, #276]	; 8005ac4 <_printf_i+0x22c>
 80059b0:	220a      	movs	r2, #10
 80059b2:	6865      	ldr	r5, [r4, #4]
 80059b4:	60a5      	str	r5, [r4, #8]
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	bfa2      	ittt	ge
 80059ba:	6820      	ldrge	r0, [r4, #0]
 80059bc:	f020 0004 	bicge.w	r0, r0, #4
 80059c0:	6020      	strge	r0, [r4, #0]
 80059c2:	b903      	cbnz	r3, 80059c6 <_printf_i+0x12e>
 80059c4:	b165      	cbz	r5, 80059e0 <_printf_i+0x148>
 80059c6:	460d      	mov	r5, r1
 80059c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80059cc:	fb02 3310 	mls	r3, r2, r0, r3
 80059d0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 80059d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059d8:	4603      	mov	r3, r0
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1f4      	bne.n	80059c8 <_printf_i+0x130>
 80059de:	e000      	b.n	80059e2 <_printf_i+0x14a>
 80059e0:	460d      	mov	r5, r1
 80059e2:	2a08      	cmp	r2, #8
 80059e4:	d10b      	bne.n	80059fe <_printf_i+0x166>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	07da      	lsls	r2, r3, #31
 80059ea:	d508      	bpl.n	80059fe <_printf_i+0x166>
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	6862      	ldr	r2, [r4, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	bfde      	ittt	le
 80059f4:	2330      	movle	r3, #48	; 0x30
 80059f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059fe:	1b49      	subs	r1, r1, r5
 8005a00:	6121      	str	r1, [r4, #16]
 8005a02:	e02e      	b.n	8005a62 <_printf_i+0x1ca>
 8005a04:	6825      	ldr	r5, [r4, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	6960      	ldr	r0, [r4, #20]
 8005a0a:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005a0e:	d003      	beq.n	8005a18 <_printf_i+0x180>
 8005a10:	1d15      	adds	r5, r2, #4
 8005a12:	601d      	str	r5, [r3, #0]
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	e008      	b.n	8005a2a <_printf_i+0x192>
 8005a18:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a1c:	f102 0504 	add.w	r5, r2, #4
 8005a20:	601d      	str	r5, [r3, #0]
 8005a22:	6813      	ldr	r3, [r2, #0]
 8005a24:	d001      	beq.n	8005a2a <_printf_i+0x192>
 8005a26:	8018      	strh	r0, [r3, #0]
 8005a28:	e000      	b.n	8005a2c <_printf_i+0x194>
 8005a2a:	6018      	str	r0, [r3, #0]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	460d      	mov	r5, r1
 8005a32:	e016      	b.n	8005a62 <_printf_i+0x1ca>
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	1d11      	adds	r1, r2, #4
 8005a38:	6019      	str	r1, [r3, #0]
 8005a3a:	6815      	ldr	r5, [r2, #0]
 8005a3c:	6862      	ldr	r2, [r4, #4]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	2100      	movs	r1, #0
 8005a42:	f001 f9f9 	bl	8006e38 <memchr>
 8005a46:	b108      	cbz	r0, 8005a4c <_printf_i+0x1b4>
 8005a48:	1b40      	subs	r0, r0, r5
 8005a4a:	6060      	str	r0, [r4, #4]
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	e004      	b.n	8005a5a <_printf_i+0x1c2>
 8005a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a54:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005a58:	2301      	movs	r3, #1
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a62:	f8cd 8000 	str.w	r8, [sp]
 8005a66:	4630      	mov	r0, r6
 8005a68:	4621      	mov	r1, r4
 8005a6a:	aa03      	add	r2, sp, #12
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	f7ff fe9d 	bl	80057ac <_printf_common>
 8005a72:	3001      	adds	r0, #1
 8005a74:	d102      	bne.n	8005a7c <_printf_i+0x1e4>
 8005a76:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7a:	e01f      	b.n	8005abc <_printf_i+0x224>
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4639      	mov	r1, r7
 8005a80:	462a      	mov	r2, r5
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	47c0      	blx	r8
 8005a86:	3001      	adds	r0, #1
 8005a88:	d0f5      	beq.n	8005a76 <_printf_i+0x1de>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	079b      	lsls	r3, r3, #30
 8005a8e:	d405      	bmi.n	8005a9c <_printf_i+0x204>
 8005a90:	68e0      	ldr	r0, [r4, #12]
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	4298      	cmp	r0, r3
 8005a96:	bfb8      	it	lt
 8005a98:	4618      	movlt	r0, r3
 8005a9a:	e00f      	b.n	8005abc <_printf_i+0x224>
 8005a9c:	2500      	movs	r5, #0
 8005a9e:	68e3      	ldr	r3, [r4, #12]
 8005aa0:	9a03      	ldr	r2, [sp, #12]
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	429d      	cmp	r5, r3
 8005aa6:	daf3      	bge.n	8005a90 <_printf_i+0x1f8>
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	4639      	mov	r1, r7
 8005aac:	f104 0219 	add.w	r2, r4, #25
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	47c0      	blx	r8
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d0de      	beq.n	8005a76 <_printf_i+0x1de>
 8005ab8:	3501      	adds	r5, #1
 8005aba:	e7f0      	b.n	8005a9e <_printf_i+0x206>
 8005abc:	b004      	add	sp, #16
 8005abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac2:	bf00      	nop
 8005ac4:	0800883e 	.word	0x0800883e
 8005ac8:	0800884f 	.word	0x0800884f

08005acc <_puts_r>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	460e      	mov	r6, r1
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b118      	cbz	r0, 8005adc <_puts_r+0x10>
 8005ad4:	6983      	ldr	r3, [r0, #24]
 8005ad6:	b90b      	cbnz	r3, 8005adc <_puts_r+0x10>
 8005ad8:	f001 f8cc 	bl	8006c74 <__sinit>
 8005adc:	68ac      	ldr	r4, [r5, #8]
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	0719      	lsls	r1, r3, #28
 8005ae2:	d501      	bpl.n	8005ae8 <_puts_r+0x1c>
 8005ae4:	6923      	ldr	r3, [r4, #16]
 8005ae6:	b983      	cbnz	r3, 8005b0a <_puts_r+0x3e>
 8005ae8:	4628      	mov	r0, r5
 8005aea:	4621      	mov	r1, r4
 8005aec:	f000 f914 	bl	8005d18 <__swsetup_r>
 8005af0:	b158      	cbz	r0, 8005b0a <_puts_r+0x3e>
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db0e      	blt.n	8005b1a <_puts_r+0x4e>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	3301      	adds	r3, #1
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	68a3      	ldr	r3, [r4, #8]
 8005b0c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005b10:	3b01      	subs	r3, #1
 8005b12:	60a3      	str	r3, [r4, #8]
 8005b14:	2a00      	cmp	r2, #0
 8005b16:	d1ef      	bne.n	8005af8 <_puts_r+0x2c>
 8005b18:	e016      	b.n	8005b48 <_puts_r+0x7c>
 8005b1a:	69a2      	ldr	r2, [r4, #24]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	db09      	blt.n	8005b34 <_puts_r+0x68>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	7819      	ldrb	r1, [r3, #0]
 8005b2c:	290a      	cmp	r1, #10
 8005b2e:	d1ea      	bne.n	8005b06 <_puts_r+0x3a>
 8005b30:	4628      	mov	r0, r5
 8005b32:	e002      	b.n	8005b3a <_puts_r+0x6e>
 8005b34:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b38:	4628      	mov	r0, r5
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	f000 f898 	bl	8005c70 <__swbuf_r>
 8005b40:	1c42      	adds	r2, r0, #1
 8005b42:	4250      	negs	r0, r2
 8005b44:	4150      	adcs	r0, r2
 8005b46:	e7d3      	b.n	8005af0 <_puts_r+0x24>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da15      	bge.n	8005b78 <_puts_r+0xac>
 8005b4c:	69a2      	ldr	r2, [r4, #24]
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	db08      	blt.n	8005b64 <_puts_r+0x98>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	220a      	movs	r2, #10
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	7819      	ldrb	r1, [r3, #0]
 8005b5c:	4291      	cmp	r1, r2
 8005b5e:	d10f      	bne.n	8005b80 <_puts_r+0xb4>
 8005b60:	4628      	mov	r0, r5
 8005b62:	e001      	b.n	8005b68 <_puts_r+0x9c>
 8005b64:	4628      	mov	r0, r5
 8005b66:	210a      	movs	r1, #10
 8005b68:	4622      	mov	r2, r4
 8005b6a:	f000 f881 	bl	8005c70 <__swbuf_r>
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	4258      	negs	r0, r3
 8005b72:	4158      	adcs	r0, r3
 8005b74:	b130      	cbz	r0, 8005b84 <_puts_r+0xb8>
 8005b76:	e7bc      	b.n	8005af2 <_puts_r+0x26>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	200a      	movs	r0, #10
 8005b86:	bd70      	pop	{r4, r5, r6, pc}

08005b88 <puts>:
 8005b88:	4b02      	ldr	r3, [pc, #8]	; (8005b94 <puts+0xc>)
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	f7ff bf9d 	b.w	8005acc <_puts_r>
 8005b92:	bf00      	nop
 8005b94:	1ffe88c4 	.word	0x1ffe88c4

08005b98 <__fpclassifyd>:
 8005b98:	460a      	mov	r2, r1
 8005b9a:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	d01b      	beq.n	8005bdc <__fpclassifyd+0x44>
 8005ba4:	480f      	ldr	r0, [pc, #60]	; (8005be4 <__fpclassifyd+0x4c>)
 8005ba6:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 8005baa:	4284      	cmp	r4, r0
 8005bac:	d910      	bls.n	8005bd0 <__fpclassifyd+0x38>
 8005bae:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8005bb2:	480c      	ldr	r0, [pc, #48]	; (8005be4 <__fpclassifyd+0x4c>)
 8005bb4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8005bb8:	4282      	cmp	r2, r0
 8005bba:	d909      	bls.n	8005bd0 <__fpclassifyd+0x38>
 8005bbc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005bc0:	d308      	bcc.n	8005bd4 <__fpclassifyd+0x3c>
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <__fpclassifyd+0x50>)
 8005bc4:	4291      	cmp	r1, r2
 8005bc6:	d107      	bne.n	8005bd8 <__fpclassifyd+0x40>
 8005bc8:	fab3 f083 	clz	r0, r3
 8005bcc:	0940      	lsrs	r0, r0, #5
 8005bce:	bd10      	pop	{r4, pc}
 8005bd0:	2004      	movs	r0, #4
 8005bd2:	bd10      	pop	{r4, pc}
 8005bd4:	2003      	movs	r0, #3
 8005bd6:	bd10      	pop	{r4, pc}
 8005bd8:	2000      	movs	r0, #0
 8005bda:	bd10      	pop	{r4, pc}
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d1e6      	bne.n	8005bae <__fpclassifyd+0x16>
 8005be0:	2002      	movs	r0, #2
 8005be2:	bd10      	pop	{r4, pc}
 8005be4:	7fdfffff 	.word	0x7fdfffff
 8005be8:	7ff00000 	.word	0x7ff00000

08005bec <strlen>:
 8005bec:	4603      	mov	r3, r0
 8005bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	d1fb      	bne.n	8005bee <strlen+0x2>
 8005bf6:	1a18      	subs	r0, r3, r0
 8005bf8:	3801      	subs	r0, #1
 8005bfa:	4770      	bx	lr

08005bfc <_vsniprintf_r>:
 8005bfc:	b530      	push	{r4, r5, lr}
 8005bfe:	1e14      	subs	r4, r2, #0
 8005c00:	b09b      	sub	sp, #108	; 0x6c
 8005c02:	4605      	mov	r5, r0
 8005c04:	da04      	bge.n	8005c10 <_vsniprintf_r+0x14>
 8005c06:	238b      	movs	r3, #139	; 0x8b
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0e:	e01c      	b.n	8005c4a <_vsniprintf_r+0x4e>
 8005c10:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005c14:	f8ad 200c 	strh.w	r2, [sp, #12]
 8005c18:	bf14      	ite	ne
 8005c1a:	f104 32ff 	addne.w	r2, r4, #4294967295
 8005c1e:	4622      	moveq	r2, r4
 8005c20:	9202      	str	r2, [sp, #8]
 8005c22:	9205      	str	r2, [sp, #20]
 8005c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c28:	9100      	str	r1, [sp, #0]
 8005c2a:	9104      	str	r1, [sp, #16]
 8005c2c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8005c30:	4669      	mov	r1, sp
 8005c32:	461a      	mov	r2, r3
 8005c34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c36:	f001 fcef 	bl	8007618 <_svfiprintf_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	bfbc      	itt	lt
 8005c3e:	238b      	movlt	r3, #139	; 0x8b
 8005c40:	602b      	strlt	r3, [r5, #0]
 8005c42:	b114      	cbz	r4, 8005c4a <_vsniprintf_r+0x4e>
 8005c44:	9b00      	ldr	r3, [sp, #0]
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	b01b      	add	sp, #108	; 0x6c
 8005c4c:	bd30      	pop	{r4, r5, pc}
	...

08005c50 <vsniprintf>:
 8005c50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <vsniprintf+0x1c>)
 8005c56:	4606      	mov	r6, r0
 8005c58:	460d      	mov	r5, r1
 8005c5a:	4614      	mov	r4, r2
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	4631      	mov	r1, r6
 8005c60:	462a      	mov	r2, r5
 8005c62:	4623      	mov	r3, r4
 8005c64:	f7ff ffca 	bl	8005bfc <_vsniprintf_r>
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	1ffe88c4 	.word	0x1ffe88c4

08005c70 <__swbuf_r>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	460d      	mov	r5, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	4606      	mov	r6, r0
 8005c78:	b118      	cbz	r0, 8005c82 <__swbuf_r+0x12>
 8005c7a:	6983      	ldr	r3, [r0, #24]
 8005c7c:	b90b      	cbnz	r3, 8005c82 <__swbuf_r+0x12>
 8005c7e:	f000 fff9 	bl	8006c74 <__sinit>
 8005c82:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <__swbuf_r+0x9c>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d101      	bne.n	8005c8c <__swbuf_r+0x1c>
 8005c88:	6874      	ldr	r4, [r6, #4]
 8005c8a:	e008      	b.n	8005c9e <__swbuf_r+0x2e>
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <__swbuf_r+0xa0>)
 8005c8e:	429c      	cmp	r4, r3
 8005c90:	d101      	bne.n	8005c96 <__swbuf_r+0x26>
 8005c92:	68b4      	ldr	r4, [r6, #8]
 8005c94:	e003      	b.n	8005c9e <__swbuf_r+0x2e>
 8005c96:	4b1f      	ldr	r3, [pc, #124]	; (8005d14 <__swbuf_r+0xa4>)
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	bf08      	it	eq
 8005c9c:	68f4      	ldreq	r4, [r6, #12]
 8005c9e:	69a3      	ldr	r3, [r4, #24]
 8005ca0:	60a3      	str	r3, [r4, #8]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	071a      	lsls	r2, r3, #28
 8005ca6:	d509      	bpl.n	8005cbc <__swbuf_r+0x4c>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	b13b      	cbz	r3, 8005cbc <__swbuf_r+0x4c>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	6920      	ldr	r0, [r4, #16]
 8005cb0:	1a18      	subs	r0, r3, r0
 8005cb2:	6963      	ldr	r3, [r4, #20]
 8005cb4:	4298      	cmp	r0, r3
 8005cb6:	b2ed      	uxtb	r5, r5
 8005cb8:	db0f      	blt.n	8005cda <__swbuf_r+0x6a>
 8005cba:	e008      	b.n	8005cce <__swbuf_r+0x5e>
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	f000 f82a 	bl	8005d18 <__swsetup_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d0f1      	beq.n	8005cac <__swbuf_r+0x3c>
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	bd70      	pop	{r4, r5, r6, pc}
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	f000 ff65 	bl	8006ba0 <_fflush_r>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d1f6      	bne.n	8005cc8 <__swbuf_r+0x58>
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	60a3      	str	r3, [r4, #8]
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	6022      	str	r2, [r4, #0]
 8005ce6:	701d      	strb	r5, [r3, #0]
 8005ce8:	6963      	ldr	r3, [r4, #20]
 8005cea:	3001      	adds	r0, #1
 8005cec:	4298      	cmp	r0, r3
 8005cee:	d004      	beq.n	8005cfa <__swbuf_r+0x8a>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	07db      	lsls	r3, r3, #31
 8005cf4:	d507      	bpl.n	8005d06 <__swbuf_r+0x96>
 8005cf6:	2d0a      	cmp	r5, #10
 8005cf8:	d105      	bne.n	8005d06 <__swbuf_r+0x96>
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f000 ff4f 	bl	8006ba0 <_fflush_r>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d1e0      	bne.n	8005cc8 <__swbuf_r+0x58>
 8005d06:	4628      	mov	r0, r5
 8005d08:	bd70      	pop	{r4, r5, r6, pc}
 8005d0a:	bf00      	nop
 8005d0c:	08008870 	.word	0x08008870
 8005d10:	08008890 	.word	0x08008890
 8005d14:	080088b0 	.word	0x080088b0

08005d18 <__swsetup_r>:
 8005d18:	4b31      	ldr	r3, [pc, #196]	; (8005de0 <__swsetup_r+0xc8>)
 8005d1a:	b570      	push	{r4, r5, r6, lr}
 8005d1c:	681d      	ldr	r5, [r3, #0]
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	b125      	cbz	r5, 8005d2e <__swsetup_r+0x16>
 8005d24:	69ab      	ldr	r3, [r5, #24]
 8005d26:	b913      	cbnz	r3, 8005d2e <__swsetup_r+0x16>
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 ffa3 	bl	8006c74 <__sinit>
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <__swsetup_r+0xcc>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d101      	bne.n	8005d38 <__swsetup_r+0x20>
 8005d34:	686c      	ldr	r4, [r5, #4]
 8005d36:	e008      	b.n	8005d4a <__swsetup_r+0x32>
 8005d38:	4b2b      	ldr	r3, [pc, #172]	; (8005de8 <__swsetup_r+0xd0>)
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	d101      	bne.n	8005d42 <__swsetup_r+0x2a>
 8005d3e:	68ac      	ldr	r4, [r5, #8]
 8005d40:	e003      	b.n	8005d4a <__swsetup_r+0x32>
 8005d42:	4b2a      	ldr	r3, [pc, #168]	; (8005dec <__swsetup_r+0xd4>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	bf08      	it	eq
 8005d48:	68ec      	ldreq	r4, [r5, #12]
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	0711      	lsls	r1, r2, #28
 8005d50:	d41d      	bmi.n	8005d8e <__swsetup_r+0x76>
 8005d52:	06d5      	lsls	r5, r2, #27
 8005d54:	d402      	bmi.n	8005d5c <__swsetup_r+0x44>
 8005d56:	2209      	movs	r2, #9
 8005d58:	6032      	str	r2, [r6, #0]
 8005d5a:	e038      	b.n	8005dce <__swsetup_r+0xb6>
 8005d5c:	0750      	lsls	r0, r2, #29
 8005d5e:	d512      	bpl.n	8005d86 <__swsetup_r+0x6e>
 8005d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d62:	b141      	cbz	r1, 8005d76 <__swsetup_r+0x5e>
 8005d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	d002      	beq.n	8005d72 <__swsetup_r+0x5a>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f001 fb5f 	bl	8007430 <_free_r>
 8005d72:	2300      	movs	r3, #0
 8005d74:	6363      	str	r3, [r4, #52]	; 0x34
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	f043 0308 	orr.w	r3, r3, #8
 8005d8c:	81a3      	strh	r3, [r4, #12]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	b94b      	cbnz	r3, 8005da6 <__swsetup_r+0x8e>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9c:	d003      	beq.n	8005da6 <__swsetup_r+0x8e>
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4621      	mov	r1, r4
 8005da2:	f000 fff3 	bl	8006d8c <__smakebuf_r>
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f013 0201 	ands.w	r2, r3, #1
 8005dac:	d005      	beq.n	8005dba <__swsetup_r+0xa2>
 8005dae:	2200      	movs	r2, #0
 8005db0:	60a2      	str	r2, [r4, #8]
 8005db2:	6962      	ldr	r2, [r4, #20]
 8005db4:	4252      	negs	r2, r2
 8005db6:	61a2      	str	r2, [r4, #24]
 8005db8:	e003      	b.n	8005dc2 <__swsetup_r+0xaa>
 8005dba:	0799      	lsls	r1, r3, #30
 8005dbc:	bf58      	it	pl
 8005dbe:	6962      	ldrpl	r2, [r4, #20]
 8005dc0:	60a2      	str	r2, [r4, #8]
 8005dc2:	6922      	ldr	r2, [r4, #16]
 8005dc4:	b94a      	cbnz	r2, 8005dda <__swsetup_r+0xc2>
 8005dc6:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8005dca:	b280      	uxth	r0, r0
 8005dcc:	b130      	cbz	r0, 8005ddc <__swsetup_r+0xc4>
 8005dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	2000      	movs	r0, #0
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
 8005dde:	bf00      	nop
 8005de0:	1ffe88c4 	.word	0x1ffe88c4
 8005de4:	08008870 	.word	0x08008870
 8005de8:	08008890 	.word	0x08008890
 8005dec:	080088b0 	.word	0x080088b0

08005df0 <quorem>:
 8005df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	6903      	ldr	r3, [r0, #16]
 8005df6:	690c      	ldr	r4, [r1, #16]
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	4680      	mov	r8, r0
 8005dfc:	f2c0 8081 	blt.w	8005f02 <quorem+0x112>
 8005e00:	3c01      	subs	r4, #1
 8005e02:	f101 0714 	add.w	r7, r1, #20
 8005e06:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005e0a:	f100 0614 	add.w	r6, r0, #20
 8005e0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e12:	eb06 030e 	add.w	r3, r6, lr
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	3501      	adds	r5, #1
 8005e1a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8005e1e:	fbb3 f5f5 	udiv	r5, r3, r5
 8005e22:	eb07 090e 	add.w	r9, r7, lr
 8005e26:	b3c5      	cbz	r5, 8005e9a <quorem+0xaa>
 8005e28:	f04f 0a00 	mov.w	sl, #0
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	46b4      	mov	ip, r6
 8005e30:	46d3      	mov	fp, sl
 8005e32:	f850 3b04 	ldr.w	r3, [r0], #4
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	0c1b      	lsrs	r3, r3, #16
 8005e3a:	fb02 a205 	mla	r2, r2, r5, sl
 8005e3e:	436b      	muls	r3, r5
 8005e40:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005e44:	b292      	uxth	r2, r2
 8005e46:	ebc2 020b 	rsb	r2, r2, fp
 8005e4a:	f8bc b000 	ldrh.w	fp, [ip]
 8005e4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e52:	fa12 f28b 	uxtah	r2, r2, fp
 8005e56:	fa1f fb83 	uxth.w	fp, r3
 8005e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8005e5e:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8005e62:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005e66:	b292      	uxth	r2, r2
 8005e68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e6c:	4548      	cmp	r0, r9
 8005e6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e72:	f84c 2b04 	str.w	r2, [ip], #4
 8005e76:	d9dc      	bls.n	8005e32 <quorem+0x42>
 8005e78:	f856 300e 	ldr.w	r3, [r6, lr]
 8005e7c:	b96b      	cbnz	r3, 8005e9a <quorem+0xaa>
 8005e7e:	9b01      	ldr	r3, [sp, #4]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	42b3      	cmp	r3, r6
 8005e84:	461a      	mov	r2, r3
 8005e86:	d802      	bhi.n	8005e8e <quorem+0x9e>
 8005e88:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e8c:	e005      	b.n	8005e9a <quorem+0xaa>
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	3b04      	subs	r3, #4
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	d1f8      	bne.n	8005e88 <quorem+0x98>
 8005e96:	3c01      	subs	r4, #1
 8005e98:	e7f3      	b.n	8005e82 <quorem+0x92>
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f001 f9ed 	bl	800727a <__mcmp>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	db2c      	blt.n	8005efe <quorem+0x10e>
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f04f 0e00 	mov.w	lr, #0
 8005eac:	f857 1b04 	ldr.w	r1, [r7], #4
 8005eb0:	f8d0 c000 	ldr.w	ip, [r0]
 8005eb4:	b28a      	uxth	r2, r1
 8005eb6:	ebc2 030e 	rsb	r3, r2, lr
 8005eba:	0c09      	lsrs	r1, r1, #16
 8005ebc:	fa13 f38c 	uxtah	r3, r3, ip
 8005ec0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8005ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ece:	454f      	cmp	r7, r9
 8005ed0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005ed4:	f840 3b04 	str.w	r3, [r0], #4
 8005ed8:	d9e8      	bls.n	8005eac <quorem+0xbc>
 8005eda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005ede:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ee2:	b962      	cbnz	r2, 8005efe <quorem+0x10e>
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	42b3      	cmp	r3, r6
 8005ee8:	461a      	mov	r2, r3
 8005eea:	d802      	bhi.n	8005ef2 <quorem+0x102>
 8005eec:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ef0:	e005      	b.n	8005efe <quorem+0x10e>
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	d1f8      	bne.n	8005eec <quorem+0xfc>
 8005efa:	3c01      	subs	r4, #1
 8005efc:	e7f3      	b.n	8005ee6 <quorem+0xf6>
 8005efe:	4628      	mov	r0, r5
 8005f00:	e000      	b.n	8005f04 <quorem+0x114>
 8005f02:	2000      	movs	r0, #0
 8005f04:	b003      	add	sp, #12
 8005f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0a:	0000      	movs	r0, r0
 8005f0c:	0000      	movs	r0, r0
	...

08005f10 <_dtoa_r>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f16:	b097      	sub	sp, #92	; 0x5c
 8005f18:	4682      	mov	sl, r0
 8005f1a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8005f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f20:	b945      	cbnz	r5, 8005f34 <_dtoa_r+0x24>
 8005f22:	2010      	movs	r0, #16
 8005f24:	f000 ff80 	bl	8006e28 <malloc>
 8005f28:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8005f2c:	6045      	str	r5, [r0, #4]
 8005f2e:	6085      	str	r5, [r0, #8]
 8005f30:	6005      	str	r5, [r0, #0]
 8005f32:	60c5      	str	r5, [r0, #12]
 8005f34:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	b159      	cbz	r1, 8005f54 <_dtoa_r+0x44>
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	604a      	str	r2, [r1, #4]
 8005f40:	2301      	movs	r3, #1
 8005f42:	4093      	lsls	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
 8005f46:	4650      	mov	r0, sl
 8005f48:	f000 ffba 	bl	8006ec0 <_Bfree>
 8005f4c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	4aa2      	ldr	r2, [pc, #648]	; (80061e0 <_dtoa_r+0x2d0>)
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bfbf      	itttt	lt
 8005f5c:	2301      	movlt	r3, #1
 8005f5e:	6023      	strlt	r3, [r4, #0]
 8005f60:	9b03      	ldrlt	r3, [sp, #12]
 8005f62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f66:	bfb8      	it	lt
 8005f68:	9303      	strlt	r3, [sp, #12]
 8005f6a:	9f03      	ldr	r7, [sp, #12]
 8005f6c:	bfa4      	itt	ge
 8005f6e:	2300      	movge	r3, #0
 8005f70:	6023      	strge	r3, [r4, #0]
 8005f72:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8005f76:	0d1b      	lsrs	r3, r3, #20
 8005f78:	051b      	lsls	r3, r3, #20
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d11d      	bne.n	8005fba <_dtoa_r+0xaa>
 8005f7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	9b02      	ldr	r3, [sp, #8]
 8005f88:	b943      	cbnz	r3, 8005f9c <_dtoa_r+0x8c>
 8005f8a:	4a96      	ldr	r2, [pc, #600]	; (80061e4 <_dtoa_r+0x2d4>)
 8005f8c:	4b96      	ldr	r3, [pc, #600]	; (80061e8 <_dtoa_r+0x2d8>)
 8005f8e:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8005f92:	2800      	cmp	r0, #0
 8005f94:	bf14      	ite	ne
 8005f96:	4618      	movne	r0, r3
 8005f98:	4610      	moveq	r0, r2
 8005f9a:	e000      	b.n	8005f9e <_dtoa_r+0x8e>
 8005f9c:	4892      	ldr	r0, [pc, #584]	; (80061e8 <_dtoa_r+0x2d8>)
 8005f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8573 	beq.w	8006a8c <_dtoa_r+0xb7c>
 8005fa6:	78c3      	ldrb	r3, [r0, #3]
 8005fa8:	b113      	cbz	r3, 8005fb0 <_dtoa_r+0xa0>
 8005faa:	f100 0308 	add.w	r3, r0, #8
 8005fae:	e000      	b.n	8005fb2 <_dtoa_r+0xa2>
 8005fb0:	1cc3      	adds	r3, r0, #3
 8005fb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	f000 bd69 	b.w	8006a8c <_dtoa_r+0xb7c>
 8005fba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f002 f941 	bl	800824c <__aeabi_dcmpeq>
 8005fca:	4680      	mov	r8, r0
 8005fcc:	b158      	cbz	r0, 8005fe6 <_dtoa_r+0xd6>
 8005fce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 8546 	beq.w	8006a68 <_dtoa_r+0xb58>
 8005fdc:	4883      	ldr	r0, [pc, #524]	; (80061ec <_dtoa_r+0x2dc>)
 8005fde:	6018      	str	r0, [r3, #0]
 8005fe0:	3801      	subs	r0, #1
 8005fe2:	f000 bd53 	b.w	8006a8c <_dtoa_r+0xb7c>
 8005fe6:	ab15      	add	r3, sp, #84	; 0x54
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	ab14      	add	r3, sp, #80	; 0x50
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	4650      	mov	r0, sl
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	f001 f9bc 	bl	8007370 <__d2b>
 8005ff8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ffc:	9007      	str	r0, [sp, #28]
 8005ffe:	b15e      	cbz	r6, 8006018 <_dtoa_r+0x108>
 8006000:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006004:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006008:	4620      	mov	r0, r4
 800600a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800600e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8006012:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006016:	e01d      	b.n	8006054 <_dtoa_r+0x144>
 8006018:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800601a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800601c:	441e      	add	r6, r3
 800601e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8006022:	429e      	cmp	r6, r3
 8006024:	bfad      	iteet	ge
 8006026:	9a02      	ldrge	r2, [sp, #8]
 8006028:	4b71      	ldrlt	r3, [pc, #452]	; (80061f0 <_dtoa_r+0x2e0>)
 800602a:	9a02      	ldrlt	r2, [sp, #8]
 800602c:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 8006030:	bfa3      	ittte	ge
 8006032:	fa22 f003 	lsrge.w	r0, r2, r3
 8006036:	4b6f      	ldrge	r3, [pc, #444]	; (80061f4 <_dtoa_r+0x2e4>)
 8006038:	1b9b      	subge	r3, r3, r6
 800603a:	1b9b      	sublt	r3, r3, r6
 800603c:	bfaa      	itet	ge
 800603e:	409f      	lslge	r7, r3
 8006040:	fa02 f003 	lsllt.w	r0, r2, r3
 8006044:	4338      	orrge	r0, r7
 8006046:	f001 fe23 	bl	8007c90 <__aeabi_ui2d>
 800604a:	2301      	movs	r3, #1
 800604c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006050:	3e01      	subs	r6, #1
 8006052:	9313      	str	r3, [sp, #76]	; 0x4c
 8006054:	2200      	movs	r2, #0
 8006056:	4b68      	ldr	r3, [pc, #416]	; (80061f8 <_dtoa_r+0x2e8>)
 8006058:	f001 fcdc 	bl	8007a14 <__aeabi_dsub>
 800605c:	a35a      	add	r3, pc, #360	; (adr r3, 80061c8 <_dtoa_r+0x2b8>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f001 fe8b 	bl	8007d7c <__aeabi_dmul>
 8006066:	a35a      	add	r3, pc, #360	; (adr r3, 80061d0 <_dtoa_r+0x2c0>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f001 fcd4 	bl	8007a18 <__adddf3>
 8006070:	4604      	mov	r4, r0
 8006072:	4630      	mov	r0, r6
 8006074:	460d      	mov	r5, r1
 8006076:	f001 fe1b 	bl	8007cb0 <__aeabi_i2d>
 800607a:	a357      	add	r3, pc, #348	; (adr r3, 80061d8 <_dtoa_r+0x2c8>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f001 fe7c 	bl	8007d7c <__aeabi_dmul>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	f001 fcc4 	bl	8007a18 <__adddf3>
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	f002 f90c 	bl	80082b0 <__aeabi_d2iz>
 8006098:	4629      	mov	r1, r5
 800609a:	4683      	mov	fp, r0
 800609c:	2200      	movs	r2, #0
 800609e:	4620      	mov	r0, r4
 80060a0:	2300      	movs	r3, #0
 80060a2:	f002 f8dd 	bl	8008260 <__aeabi_dcmplt>
 80060a6:	b158      	cbz	r0, 80060c0 <_dtoa_r+0x1b0>
 80060a8:	4658      	mov	r0, fp
 80060aa:	f001 fe01 	bl	8007cb0 <__aeabi_i2d>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4620      	mov	r0, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	f002 f8c9 	bl	800824c <__aeabi_dcmpeq>
 80060ba:	b908      	cbnz	r0, 80060c0 <_dtoa_r+0x1b0>
 80060bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060c0:	f1bb 0f16 	cmp.w	fp, #22
 80060c4:	d80d      	bhi.n	80060e2 <_dtoa_r+0x1d2>
 80060c6:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <_dtoa_r+0x2ec>)
 80060c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060d4:	f002 f8e2 	bl	800829c <__aeabi_dcmpgt>
 80060d8:	b130      	cbz	r0, 80060e8 <_dtoa_r+0x1d8>
 80060da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060de:	2300      	movs	r3, #0
 80060e0:	e000      	b.n	80060e4 <_dtoa_r+0x1d4>
 80060e2:	2301      	movs	r3, #1
 80060e4:	9312      	str	r3, [sp, #72]	; 0x48
 80060e6:	e000      	b.n	80060ea <_dtoa_r+0x1da>
 80060e8:	9012      	str	r0, [sp, #72]	; 0x48
 80060ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060ec:	1b9e      	subs	r6, r3, r6
 80060ee:	1e73      	subs	r3, r6, #1
 80060f0:	930a      	str	r3, [sp, #40]	; 0x28
 80060f2:	bf45      	ittet	mi
 80060f4:	425b      	negmi	r3, r3
 80060f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80060f8:	2300      	movpl	r3, #0
 80060fa:	2300      	movmi	r3, #0
 80060fc:	bf4c      	ite	mi
 80060fe:	930a      	strmi	r3, [sp, #40]	; 0x28
 8006100:	9309      	strpl	r3, [sp, #36]	; 0x24
 8006102:	f1bb 0f00 	cmp.w	fp, #0
 8006106:	db07      	blt.n	8006118 <_dtoa_r+0x208>
 8006108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800610e:	445b      	add	r3, fp
 8006110:	930a      	str	r3, [sp, #40]	; 0x28
 8006112:	2300      	movs	r3, #0
 8006114:	930b      	str	r3, [sp, #44]	; 0x2c
 8006116:	e008      	b.n	800612a <_dtoa_r+0x21a>
 8006118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611a:	ebcb 0303 	rsb	r3, fp, r3
 800611e:	9309      	str	r3, [sp, #36]	; 0x24
 8006120:	f1cb 0300 	rsb	r3, fp, #0
 8006124:	930b      	str	r3, [sp, #44]	; 0x2c
 8006126:	2300      	movs	r3, #0
 8006128:	930d      	str	r3, [sp, #52]	; 0x34
 800612a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800612c:	2b09      	cmp	r3, #9
 800612e:	d828      	bhi.n	8006182 <_dtoa_r+0x272>
 8006130:	2b05      	cmp	r3, #5
 8006132:	bfc4      	itt	gt
 8006134:	3b04      	subgt	r3, #4
 8006136:	9320      	strgt	r3, [sp, #128]	; 0x80
 8006138:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800613a:	f1a3 0302 	sub.w	r3, r3, #2
 800613e:	bfcc      	ite	gt
 8006140:	2500      	movgt	r5, #0
 8006142:	2501      	movle	r5, #1
 8006144:	2b03      	cmp	r3, #3
 8006146:	d821      	bhi.n	800618c <_dtoa_r+0x27c>
 8006148:	e8df f003 	tbb	[pc, r3]
 800614c:	10040e02 	.word	0x10040e02
 8006150:	2300      	movs	r3, #0
 8006152:	e000      	b.n	8006156 <_dtoa_r+0x246>
 8006154:	2301      	movs	r3, #1
 8006156:	930c      	str	r3, [sp, #48]	; 0x30
 8006158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615a:	2b00      	cmp	r3, #0
 800615c:	dc20      	bgt.n	80061a0 <_dtoa_r+0x290>
 800615e:	2301      	movs	r3, #1
 8006160:	9306      	str	r3, [sp, #24]
 8006162:	9305      	str	r3, [sp, #20]
 8006164:	461a      	mov	r2, r3
 8006166:	e019      	b.n	800619c <_dtoa_r+0x28c>
 8006168:	2300      	movs	r3, #0
 800616a:	e000      	b.n	800616e <_dtoa_r+0x25e>
 800616c:	2301      	movs	r3, #1
 800616e:	930c      	str	r3, [sp, #48]	; 0x30
 8006170:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006172:	445b      	add	r3, fp
 8006174:	9306      	str	r3, [sp, #24]
 8006176:	3301      	adds	r3, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	9305      	str	r3, [sp, #20]
 800617c:	bfb8      	it	lt
 800617e:	2301      	movlt	r3, #1
 8006180:	e011      	b.n	80061a6 <_dtoa_r+0x296>
 8006182:	2501      	movs	r5, #1
 8006184:	2300      	movs	r3, #0
 8006186:	9320      	str	r3, [sp, #128]	; 0x80
 8006188:	950c      	str	r5, [sp, #48]	; 0x30
 800618a:	e001      	b.n	8006190 <_dtoa_r+0x280>
 800618c:	2301      	movs	r3, #1
 800618e:	930c      	str	r3, [sp, #48]	; 0x30
 8006190:	f04f 33ff 	mov.w	r3, #4294967295
 8006194:	9306      	str	r3, [sp, #24]
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	2312      	movs	r3, #18
 800619c:	9221      	str	r2, [sp, #132]	; 0x84
 800619e:	e002      	b.n	80061a6 <_dtoa_r+0x296>
 80061a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a2:	9306      	str	r3, [sp, #24]
 80061a4:	9305      	str	r3, [sp, #20]
 80061a6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 80061aa:	2200      	movs	r2, #0
 80061ac:	6062      	str	r2, [r4, #4]
 80061ae:	2104      	movs	r1, #4
 80061b0:	f101 0214 	add.w	r2, r1, #20
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d823      	bhi.n	8006200 <_dtoa_r+0x2f0>
 80061b8:	6862      	ldr	r2, [r4, #4]
 80061ba:	3201      	adds	r2, #1
 80061bc:	6062      	str	r2, [r4, #4]
 80061be:	0049      	lsls	r1, r1, #1
 80061c0:	e7f6      	b.n	80061b0 <_dtoa_r+0x2a0>
 80061c2:	bf00      	nop
 80061c4:	f3af 8000 	nop.w
 80061c8:	636f4361 	.word	0x636f4361
 80061cc:	3fd287a7 	.word	0x3fd287a7
 80061d0:	8b60c8b3 	.word	0x8b60c8b3
 80061d4:	3fc68a28 	.word	0x3fc68a28
 80061d8:	509f79fb 	.word	0x509f79fb
 80061dc:	3fd34413 	.word	0x3fd34413
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	08008860 	.word	0x08008860
 80061e8:	08008869 	.word	0x08008869
 80061ec:	0800883d 	.word	0x0800883d
 80061f0:	fffffbee 	.word	0xfffffbee
 80061f4:	fffffc0e 	.word	0xfffffc0e
 80061f8:	3ff80000 	.word	0x3ff80000
 80061fc:	080088d8 	.word	0x080088d8
 8006200:	4650      	mov	r0, sl
 8006202:	6861      	ldr	r1, [r4, #4]
 8006204:	f000 fe27 	bl	8006e56 <_Balloc>
 8006208:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800620c:	6020      	str	r0, [r4, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	9308      	str	r3, [sp, #32]
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	2b0e      	cmp	r3, #14
 8006216:	f200 814b 	bhi.w	80064b0 <_dtoa_r+0x5a0>
 800621a:	2d00      	cmp	r5, #0
 800621c:	f000 8148 	beq.w	80064b0 <_dtoa_r+0x5a0>
 8006220:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006224:	f1bb 0f00 	cmp.w	fp, #0
 8006228:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800622c:	dd31      	ble.n	8006292 <_dtoa_r+0x382>
 800622e:	4ab3      	ldr	r2, [pc, #716]	; (80064fc <_dtoa_r+0x5ec>)
 8006230:	f00b 030f 	and.w	r3, fp, #15
 8006234:	ea4f 172b 	mov.w	r7, fp, asr #4
 8006238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800623c:	06f8      	lsls	r0, r7, #27
 800623e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006242:	d50c      	bpl.n	800625e <_dtoa_r+0x34e>
 8006244:	4bae      	ldr	r3, [pc, #696]	; (8006500 <_dtoa_r+0x5f0>)
 8006246:	ec51 0b17 	vmov	r0, r1, d7
 800624a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800624e:	f001 febf 	bl	8007fd0 <__aeabi_ddiv>
 8006252:	f007 070f 	and.w	r7, r7, #15
 8006256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800625a:	2603      	movs	r6, #3
 800625c:	e000      	b.n	8006260 <_dtoa_r+0x350>
 800625e:	2602      	movs	r6, #2
 8006260:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8006500 <_dtoa_r+0x5f0>
 8006264:	b177      	cbz	r7, 8006284 <_dtoa_r+0x374>
 8006266:	07f9      	lsls	r1, r7, #31
 8006268:	d508      	bpl.n	800627c <_dtoa_r+0x36c>
 800626a:	4620      	mov	r0, r4
 800626c:	4629      	mov	r1, r5
 800626e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006272:	f001 fd83 	bl	8007d7c <__aeabi_dmul>
 8006276:	3601      	adds	r6, #1
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	107f      	asrs	r7, r7, #1
 800627e:	f108 0808 	add.w	r8, r8, #8
 8006282:	e7ef      	b.n	8006264 <_dtoa_r+0x354>
 8006284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	f001 fea0 	bl	8007fd0 <__aeabi_ddiv>
 8006290:	e01b      	b.n	80062ca <_dtoa_r+0x3ba>
 8006292:	f1cb 0400 	rsb	r4, fp, #0
 8006296:	b1dc      	cbz	r4, 80062d0 <_dtoa_r+0x3c0>
 8006298:	4b98      	ldr	r3, [pc, #608]	; (80064fc <_dtoa_r+0x5ec>)
 800629a:	4d99      	ldr	r5, [pc, #612]	; (8006500 <_dtoa_r+0x5f0>)
 800629c:	f004 020f 	and.w	r2, r4, #15
 80062a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f001 fd66 	bl	8007d7c <__aeabi_dmul>
 80062b0:	1124      	asrs	r4, r4, #4
 80062b2:	2602      	movs	r6, #2
 80062b4:	b14c      	cbz	r4, 80062ca <_dtoa_r+0x3ba>
 80062b6:	07e2      	lsls	r2, r4, #31
 80062b8:	d504      	bpl.n	80062c4 <_dtoa_r+0x3b4>
 80062ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062be:	3601      	adds	r6, #1
 80062c0:	f001 fd5c 	bl	8007d7c <__aeabi_dmul>
 80062c4:	1064      	asrs	r4, r4, #1
 80062c6:	3508      	adds	r5, #8
 80062c8:	e7f4      	b.n	80062b4 <_dtoa_r+0x3a4>
 80062ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ce:	e000      	b.n	80062d2 <_dtoa_r+0x3c2>
 80062d0:	2602      	movs	r6, #2
 80062d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062d4:	b1db      	cbz	r3, 800630e <_dtoa_r+0x3fe>
 80062d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	4620      	mov	r0, r4
 80062de:	4629      	mov	r1, r5
 80062e0:	4b88      	ldr	r3, [pc, #544]	; (8006504 <_dtoa_r+0x5f4>)
 80062e2:	f001 ffbd 	bl	8008260 <__aeabi_dcmplt>
 80062e6:	b190      	cbz	r0, 800630e <_dtoa_r+0x3fe>
 80062e8:	9b05      	ldr	r3, [sp, #20]
 80062ea:	b183      	cbz	r3, 800630e <_dtoa_r+0x3fe>
 80062ec:	9b06      	ldr	r3, [sp, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f340 80da 	ble.w	80064a8 <_dtoa_r+0x598>
 80062f4:	4629      	mov	r1, r5
 80062f6:	4620      	mov	r0, r4
 80062f8:	2200      	movs	r2, #0
 80062fa:	4b83      	ldr	r3, [pc, #524]	; (8006508 <_dtoa_r+0x5f8>)
 80062fc:	f001 fd3e 	bl	8007d7c <__aeabi_dmul>
 8006300:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006308:	3601      	adds	r6, #1
 800630a:	9d06      	ldr	r5, [sp, #24]
 800630c:	e001      	b.n	8006312 <_dtoa_r+0x402>
 800630e:	9d05      	ldr	r5, [sp, #20]
 8006310:	465f      	mov	r7, fp
 8006312:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006316:	4630      	mov	r0, r6
 8006318:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800631c:	f001 fcc8 	bl	8007cb0 <__aeabi_i2d>
 8006320:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006324:	f001 fd2a 	bl	8007d7c <__aeabi_dmul>
 8006328:	2200      	movs	r2, #0
 800632a:	4b78      	ldr	r3, [pc, #480]	; (800650c <_dtoa_r+0x5fc>)
 800632c:	f001 fb74 	bl	8007a18 <__adddf3>
 8006330:	4680      	mov	r8, r0
 8006332:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006336:	b9cd      	cbnz	r5, 800636c <_dtoa_r+0x45c>
 8006338:	2200      	movs	r2, #0
 800633a:	4b75      	ldr	r3, [pc, #468]	; (8006510 <_dtoa_r+0x600>)
 800633c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006340:	f001 fb68 	bl	8007a14 <__aeabi_dsub>
 8006344:	4642      	mov	r2, r8
 8006346:	464b      	mov	r3, r9
 8006348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800634c:	f001 ffa6 	bl	800829c <__aeabi_dcmpgt>
 8006350:	2800      	cmp	r0, #0
 8006352:	f040 8246 	bne.w	80067e2 <_dtoa_r+0x8d2>
 8006356:	4642      	mov	r2, r8
 8006358:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800635c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006360:	f001 ff7e 	bl	8008260 <__aeabi_dcmplt>
 8006364:	2800      	cmp	r0, #0
 8006366:	f040 8236 	bne.w	80067d6 <_dtoa_r+0x8c6>
 800636a:	e09d      	b.n	80064a8 <_dtoa_r+0x598>
 800636c:	4b63      	ldr	r3, [pc, #396]	; (80064fc <_dtoa_r+0x5ec>)
 800636e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006370:	1e6a      	subs	r2, r5, #1
 8006372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006376:	2900      	cmp	r1, #0
 8006378:	d049      	beq.n	800640e <_dtoa_r+0x4fe>
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	2000      	movs	r0, #0
 8006380:	4964      	ldr	r1, [pc, #400]	; (8006514 <_dtoa_r+0x604>)
 8006382:	f001 fe25 	bl	8007fd0 <__aeabi_ddiv>
 8006386:	4642      	mov	r2, r8
 8006388:	464b      	mov	r3, r9
 800638a:	f001 fb43 	bl	8007a14 <__aeabi_dsub>
 800638e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8006392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006396:	9c08      	ldr	r4, [sp, #32]
 8006398:	4649      	mov	r1, r9
 800639a:	4640      	mov	r0, r8
 800639c:	f001 ff88 	bl	80082b0 <__aeabi_d2iz>
 80063a0:	4606      	mov	r6, r0
 80063a2:	f001 fc85 	bl	8007cb0 <__aeabi_i2d>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f001 fb31 	bl	8007a14 <__aeabi_dsub>
 80063b2:	3630      	adds	r6, #48	; 0x30
 80063b4:	f804 6b01 	strb.w	r6, [r4], #1
 80063b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063bc:	4680      	mov	r8, r0
 80063be:	4689      	mov	r9, r1
 80063c0:	f001 ff4e 	bl	8008260 <__aeabi_dcmplt>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f040 8340 	bne.w	8006a4a <_dtoa_r+0xb3a>
 80063ca:	4642      	mov	r2, r8
 80063cc:	464b      	mov	r3, r9
 80063ce:	2000      	movs	r0, #0
 80063d0:	494c      	ldr	r1, [pc, #304]	; (8006504 <_dtoa_r+0x5f4>)
 80063d2:	f001 fb1f 	bl	8007a14 <__aeabi_dsub>
 80063d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063da:	f001 ff41 	bl	8008260 <__aeabi_dcmplt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	f040 80d3 	bne.w	800658a <_dtoa_r+0x67a>
 80063e4:	9b08      	ldr	r3, [sp, #32]
 80063e6:	1ae3      	subs	r3, r4, r3
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	da5d      	bge.n	80064a8 <_dtoa_r+0x598>
 80063ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f0:	2200      	movs	r2, #0
 80063f2:	4b45      	ldr	r3, [pc, #276]	; (8006508 <_dtoa_r+0x5f8>)
 80063f4:	f001 fcc2 	bl	8007d7c <__aeabi_dmul>
 80063f8:	2200      	movs	r2, #0
 80063fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063fe:	4b42      	ldr	r3, [pc, #264]	; (8006508 <_dtoa_r+0x5f8>)
 8006400:	4640      	mov	r0, r8
 8006402:	4649      	mov	r1, r9
 8006404:	f001 fcba 	bl	8007d7c <__aeabi_dmul>
 8006408:	4680      	mov	r8, r0
 800640a:	4689      	mov	r9, r1
 800640c:	e7c4      	b.n	8006398 <_dtoa_r+0x488>
 800640e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006412:	4642      	mov	r2, r8
 8006414:	464b      	mov	r3, r9
 8006416:	f001 fcb1 	bl	8007d7c <__aeabi_dmul>
 800641a:	9b08      	ldr	r3, [sp, #32]
 800641c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006420:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8006424:	195c      	adds	r4, r3, r5
 8006426:	461d      	mov	r5, r3
 8006428:	4649      	mov	r1, r9
 800642a:	4640      	mov	r0, r8
 800642c:	f001 ff40 	bl	80082b0 <__aeabi_d2iz>
 8006430:	4606      	mov	r6, r0
 8006432:	f001 fc3d 	bl	8007cb0 <__aeabi_i2d>
 8006436:	3630      	adds	r6, #48	; 0x30
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4640      	mov	r0, r8
 800643e:	4649      	mov	r1, r9
 8006440:	f001 fae8 	bl	8007a14 <__aeabi_dsub>
 8006444:	f805 6b01 	strb.w	r6, [r5], #1
 8006448:	42a5      	cmp	r5, r4
 800644a:	4680      	mov	r8, r0
 800644c:	4689      	mov	r9, r1
 800644e:	d124      	bne.n	800649a <_dtoa_r+0x58a>
 8006450:	2200      	movs	r2, #0
 8006452:	4b30      	ldr	r3, [pc, #192]	; (8006514 <_dtoa_r+0x604>)
 8006454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006458:	f001 fade 	bl	8007a18 <__adddf3>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f001 ff1a 	bl	800829c <__aeabi_dcmpgt>
 8006468:	2800      	cmp	r0, #0
 800646a:	f040 808e 	bne.w	800658a <_dtoa_r+0x67a>
 800646e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006472:	2000      	movs	r0, #0
 8006474:	4927      	ldr	r1, [pc, #156]	; (8006514 <_dtoa_r+0x604>)
 8006476:	f001 facd 	bl	8007a14 <__aeabi_dsub>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4640      	mov	r0, r8
 8006480:	4649      	mov	r1, r9
 8006482:	f001 feed 	bl	8008260 <__aeabi_dcmplt>
 8006486:	b178      	cbz	r0, 80064a8 <_dtoa_r+0x598>
 8006488:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800648c:	2b30      	cmp	r3, #48	; 0x30
 800648e:	f104 32ff 	add.w	r2, r4, #4294967295
 8006492:	f040 82da 	bne.w	8006a4a <_dtoa_r+0xb3a>
 8006496:	4614      	mov	r4, r2
 8006498:	e7f6      	b.n	8006488 <_dtoa_r+0x578>
 800649a:	2200      	movs	r2, #0
 800649c:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <_dtoa_r+0x5f8>)
 800649e:	f001 fc6d 	bl	8007d7c <__aeabi_dmul>
 80064a2:	4680      	mov	r8, r0
 80064a4:	4689      	mov	r9, r1
 80064a6:	e7bf      	b.n	8006428 <_dtoa_r+0x518>
 80064a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f2c0 808b 	blt.w	80065ce <_dtoa_r+0x6be>
 80064b8:	f1bb 0f0e 	cmp.w	fp, #14
 80064bc:	f300 8087 	bgt.w	80065ce <_dtoa_r+0x6be>
 80064c0:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <_dtoa_r+0x5ec>)
 80064c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da23      	bge.n	8006518 <_dtoa_r+0x608>
 80064d0:	9b05      	ldr	r3, [sp, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	dc20      	bgt.n	8006518 <_dtoa_r+0x608>
 80064d6:	f040 817d 	bne.w	80067d4 <_dtoa_r+0x8c4>
 80064da:	4630      	mov	r0, r6
 80064dc:	2200      	movs	r2, #0
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <_dtoa_r+0x600>)
 80064e0:	4639      	mov	r1, r7
 80064e2:	f001 fc4b 	bl	8007d7c <__aeabi_dmul>
 80064e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064ea:	f001 fecd 	bl	8008288 <__aeabi_dcmpge>
 80064ee:	9d05      	ldr	r5, [sp, #20]
 80064f0:	462e      	mov	r6, r5
 80064f2:	2800      	cmp	r0, #0
 80064f4:	f040 8170 	bne.w	80067d8 <_dtoa_r+0x8c8>
 80064f8:	e175      	b.n	80067e6 <_dtoa_r+0x8d6>
 80064fa:	bf00      	nop
 80064fc:	080088d8 	.word	0x080088d8
 8006500:	080089a0 	.word	0x080089a0
 8006504:	3ff00000 	.word	0x3ff00000
 8006508:	40240000 	.word	0x40240000
 800650c:	401c0000 	.word	0x401c0000
 8006510:	40140000 	.word	0x40140000
 8006514:	3fe00000 	.word	0x3fe00000
 8006518:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800651c:	9c08      	ldr	r4, [sp, #32]
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f001 fd53 	bl	8007fd0 <__aeabi_ddiv>
 800652a:	f001 fec1 	bl	80082b0 <__aeabi_d2iz>
 800652e:	4605      	mov	r5, r0
 8006530:	f001 fbbe 	bl	8007cb0 <__aeabi_i2d>
 8006534:	4632      	mov	r2, r6
 8006536:	463b      	mov	r3, r7
 8006538:	f001 fc20 	bl	8007d7c <__aeabi_dmul>
 800653c:	460b      	mov	r3, r1
 800653e:	4602      	mov	r2, r0
 8006540:	4649      	mov	r1, r9
 8006542:	4640      	mov	r0, r8
 8006544:	f001 fa66 	bl	8007a14 <__aeabi_dsub>
 8006548:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800654c:	9b08      	ldr	r3, [sp, #32]
 800654e:	f804 eb01 	strb.w	lr, [r4], #1
 8006552:	ebc3 0e04 	rsb	lr, r3, r4
 8006556:	9b05      	ldr	r3, [sp, #20]
 8006558:	459e      	cmp	lr, r3
 800655a:	d12b      	bne.n	80065b4 <_dtoa_r+0x6a4>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	f001 fa5a 	bl	8007a18 <__adddf3>
 8006564:	4632      	mov	r2, r6
 8006566:	463b      	mov	r3, r7
 8006568:	4680      	mov	r8, r0
 800656a:	4689      	mov	r9, r1
 800656c:	f001 fe96 	bl	800829c <__aeabi_dcmpgt>
 8006570:	b970      	cbnz	r0, 8006590 <_dtoa_r+0x680>
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	4632      	mov	r2, r6
 8006578:	463b      	mov	r3, r7
 800657a:	f001 fe67 	bl	800824c <__aeabi_dcmpeq>
 800657e:	2800      	cmp	r0, #0
 8006580:	f000 8264 	beq.w	8006a4c <_dtoa_r+0xb3c>
 8006584:	07eb      	lsls	r3, r5, #31
 8006586:	d403      	bmi.n	8006590 <_dtoa_r+0x680>
 8006588:	e260      	b.n	8006a4c <_dtoa_r+0xb3c>
 800658a:	46bb      	mov	fp, r7
 800658c:	e000      	b.n	8006590 <_dtoa_r+0x680>
 800658e:	461c      	mov	r4, r3
 8006590:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006594:	2a39      	cmp	r2, #57	; 0x39
 8006596:	f104 33ff 	add.w	r3, r4, #4294967295
 800659a:	d107      	bne.n	80065ac <_dtoa_r+0x69c>
 800659c:	9a08      	ldr	r2, [sp, #32]
 800659e:	4293      	cmp	r3, r2
 80065a0:	d1f5      	bne.n	800658e <_dtoa_r+0x67e>
 80065a2:	2330      	movs	r3, #48	; 0x30
 80065a4:	7013      	strb	r3, [r2, #0]
 80065a6:	f10b 0b01 	add.w	fp, fp, #1
 80065aa:	4613      	mov	r3, r2
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	3201      	adds	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e24b      	b.n	8006a4c <_dtoa_r+0xb3c>
 80065b4:	2200      	movs	r2, #0
 80065b6:	4ba4      	ldr	r3, [pc, #656]	; (8006848 <_dtoa_r+0x938>)
 80065b8:	f001 fbe0 	bl	8007d7c <__aeabi_dmul>
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	4680      	mov	r8, r0
 80065c2:	4689      	mov	r9, r1
 80065c4:	f001 fe42 	bl	800824c <__aeabi_dcmpeq>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d0a8      	beq.n	800651e <_dtoa_r+0x60e>
 80065cc:	e23e      	b.n	8006a4c <_dtoa_r+0xb3c>
 80065ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d032      	beq.n	800663a <_dtoa_r+0x72a>
 80065d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065d6:	2a01      	cmp	r2, #1
 80065d8:	dc0a      	bgt.n	80065f0 <_dtoa_r+0x6e0>
 80065da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065dc:	b112      	cbz	r2, 80065e4 <_dtoa_r+0x6d4>
 80065de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065e2:	e002      	b.n	80065ea <_dtoa_r+0x6da>
 80065e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80065ee:	e018      	b.n	8006622 <_dtoa_r+0x712>
 80065f0:	9b05      	ldr	r3, [sp, #20]
 80065f2:	1e5d      	subs	r5, r3, #1
 80065f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f6:	42ab      	cmp	r3, r5
 80065f8:	bfbf      	itttt	lt
 80065fa:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80065fc:	950b      	strlt	r5, [sp, #44]	; 0x2c
 80065fe:	1aea      	sublt	r2, r5, r3
 8006600:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006602:	bfb6      	itet	lt
 8006604:	189b      	addlt	r3, r3, r2
 8006606:	1b5d      	subge	r5, r3, r5
 8006608:	930d      	strlt	r3, [sp, #52]	; 0x34
 800660a:	9b05      	ldr	r3, [sp, #20]
 800660c:	bfb8      	it	lt
 800660e:	2500      	movlt	r5, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	bfb9      	ittee	lt
 8006614:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8006616:	9a05      	ldrlt	r2, [sp, #20]
 8006618:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 800661a:	9b05      	ldrge	r3, [sp, #20]
 800661c:	bfbc      	itt	lt
 800661e:	1a9c      	sublt	r4, r3, r2
 8006620:	2300      	movlt	r3, #0
 8006622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006624:	441a      	add	r2, r3
 8006626:	9209      	str	r2, [sp, #36]	; 0x24
 8006628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662a:	4650      	mov	r0, sl
 800662c:	441a      	add	r2, r3
 800662e:	2101      	movs	r1, #1
 8006630:	920a      	str	r2, [sp, #40]	; 0x28
 8006632:	f000 fce7 	bl	8007004 <__i2b>
 8006636:	4606      	mov	r6, r0
 8006638:	e002      	b.n	8006640 <_dtoa_r+0x730>
 800663a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800663c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800663e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006640:	b164      	cbz	r4, 800665c <_dtoa_r+0x74c>
 8006642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd09      	ble.n	800665c <_dtoa_r+0x74c>
 8006648:	42a3      	cmp	r3, r4
 800664a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664c:	bfa8      	it	ge
 800664e:	4623      	movge	r3, r4
 8006650:	1ad2      	subs	r2, r2, r3
 8006652:	9209      	str	r2, [sp, #36]	; 0x24
 8006654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006656:	1ae4      	subs	r4, r4, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	930a      	str	r3, [sp, #40]	; 0x28
 800665c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665e:	2b00      	cmp	r3, #0
 8006660:	dd20      	ble.n	80066a4 <_dtoa_r+0x794>
 8006662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006664:	b1c3      	cbz	r3, 8006698 <_dtoa_r+0x788>
 8006666:	2d00      	cmp	r5, #0
 8006668:	dd10      	ble.n	800668c <_dtoa_r+0x77c>
 800666a:	4631      	mov	r1, r6
 800666c:	462a      	mov	r2, r5
 800666e:	4650      	mov	r0, sl
 8006670:	f000 fd62 	bl	8007138 <__pow5mult>
 8006674:	4606      	mov	r6, r0
 8006676:	4631      	mov	r1, r6
 8006678:	9a07      	ldr	r2, [sp, #28]
 800667a:	4650      	mov	r0, sl
 800667c:	f000 fccb 	bl	8007016 <__multiply>
 8006680:	9907      	ldr	r1, [sp, #28]
 8006682:	4607      	mov	r7, r0
 8006684:	4650      	mov	r0, sl
 8006686:	f000 fc1b 	bl	8006ec0 <_Bfree>
 800668a:	9707      	str	r7, [sp, #28]
 800668c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668e:	1b5a      	subs	r2, r3, r5
 8006690:	d008      	beq.n	80066a4 <_dtoa_r+0x794>
 8006692:	4650      	mov	r0, sl
 8006694:	9907      	ldr	r1, [sp, #28]
 8006696:	e002      	b.n	800669e <_dtoa_r+0x78e>
 8006698:	9907      	ldr	r1, [sp, #28]
 800669a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800669c:	4650      	mov	r0, sl
 800669e:	f000 fd4b 	bl	8007138 <__pow5mult>
 80066a2:	9007      	str	r0, [sp, #28]
 80066a4:	4650      	mov	r0, sl
 80066a6:	2101      	movs	r1, #1
 80066a8:	f000 fcac 	bl	8007004 <__i2b>
 80066ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	4605      	mov	r5, r0
 80066b2:	dd0a      	ble.n	80066ca <_dtoa_r+0x7ba>
 80066b4:	4629      	mov	r1, r5
 80066b6:	461a      	mov	r2, r3
 80066b8:	4650      	mov	r0, sl
 80066ba:	f000 fd3d 	bl	8007138 <__pow5mult>
 80066be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	4605      	mov	r5, r0
 80066c4:	dd04      	ble.n	80066d0 <_dtoa_r+0x7c0>
 80066c6:	2700      	movs	r7, #0
 80066c8:	e01b      	b.n	8006702 <_dtoa_r+0x7f2>
 80066ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	dc13      	bgt.n	80066f8 <_dtoa_r+0x7e8>
 80066d0:	9b02      	ldr	r3, [sp, #8]
 80066d2:	b98b      	cbnz	r3, 80066f8 <_dtoa_r+0x7e8>
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066da:	b97b      	cbnz	r3, 80066fc <_dtoa_r+0x7ec>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80066e2:	0d3f      	lsrs	r7, r7, #20
 80066e4:	053f      	lsls	r7, r7, #20
 80066e6:	b157      	cbz	r7, 80066fe <_dtoa_r+0x7ee>
 80066e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ea:	3301      	adds	r3, #1
 80066ec:	9309      	str	r3, [sp, #36]	; 0x24
 80066ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f0:	3301      	adds	r3, #1
 80066f2:	930a      	str	r3, [sp, #40]	; 0x28
 80066f4:	2701      	movs	r7, #1
 80066f6:	e002      	b.n	80066fe <_dtoa_r+0x7ee>
 80066f8:	2700      	movs	r7, #0
 80066fa:	e000      	b.n	80066fe <_dtoa_r+0x7ee>
 80066fc:	9f02      	ldr	r7, [sp, #8]
 80066fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006700:	b143      	cbz	r3, 8006714 <_dtoa_r+0x804>
 8006702:	692b      	ldr	r3, [r5, #16]
 8006704:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006708:	6918      	ldr	r0, [r3, #16]
 800670a:	f000 fc2e 	bl	8006f6a <__hi0bits>
 800670e:	f1c0 0020 	rsb	r0, r0, #32
 8006712:	e000      	b.n	8006716 <_dtoa_r+0x806>
 8006714:	2001      	movs	r0, #1
 8006716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006718:	4418      	add	r0, r3
 800671a:	f010 001f 	ands.w	r0, r0, #31
 800671e:	d008      	beq.n	8006732 <_dtoa_r+0x822>
 8006720:	f1c0 0320 	rsb	r3, r0, #32
 8006724:	2b04      	cmp	r3, #4
 8006726:	dd02      	ble.n	800672e <_dtoa_r+0x81e>
 8006728:	f1c0 001c 	rsb	r0, r0, #28
 800672c:	e002      	b.n	8006734 <_dtoa_r+0x824>
 800672e:	d008      	beq.n	8006742 <_dtoa_r+0x832>
 8006730:	4618      	mov	r0, r3
 8006732:	301c      	adds	r0, #28
 8006734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006736:	4403      	add	r3, r0
 8006738:	9309      	str	r3, [sp, #36]	; 0x24
 800673a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673c:	4403      	add	r3, r0
 800673e:	4404      	add	r4, r0
 8006740:	930a      	str	r3, [sp, #40]	; 0x28
 8006742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	dd05      	ble.n	8006754 <_dtoa_r+0x844>
 8006748:	4650      	mov	r0, sl
 800674a:	9907      	ldr	r1, [sp, #28]
 800674c:	461a      	mov	r2, r3
 800674e:	f000 fd41 	bl	80071d4 <__lshift>
 8006752:	9007      	str	r0, [sp, #28]
 8006754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	dd05      	ble.n	8006766 <_dtoa_r+0x856>
 800675a:	4629      	mov	r1, r5
 800675c:	4650      	mov	r0, sl
 800675e:	461a      	mov	r2, r3
 8006760:	f000 fd38 	bl	80071d4 <__lshift>
 8006764:	4605      	mov	r5, r0
 8006766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006768:	b1eb      	cbz	r3, 80067a6 <_dtoa_r+0x896>
 800676a:	9807      	ldr	r0, [sp, #28]
 800676c:	4629      	mov	r1, r5
 800676e:	f000 fd84 	bl	800727a <__mcmp>
 8006772:	2800      	cmp	r0, #0
 8006774:	da17      	bge.n	80067a6 <_dtoa_r+0x896>
 8006776:	2300      	movs	r3, #0
 8006778:	4650      	mov	r0, sl
 800677a:	9907      	ldr	r1, [sp, #28]
 800677c:	220a      	movs	r2, #10
 800677e:	f000 fbb6 	bl	8006eee <__multadd>
 8006782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006784:	9007      	str	r0, [sp, #28]
 8006786:	f10b 3bff 	add.w	fp, fp, #4294967295
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8170 	beq.w	8006a70 <_dtoa_r+0xb60>
 8006790:	4631      	mov	r1, r6
 8006792:	2300      	movs	r3, #0
 8006794:	4650      	mov	r0, sl
 8006796:	220a      	movs	r2, #10
 8006798:	f000 fba9 	bl	8006eee <__multadd>
 800679c:	9b06      	ldr	r3, [sp, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	4606      	mov	r6, r0
 80067a2:	dc33      	bgt.n	800680c <_dtoa_r+0x8fc>
 80067a4:	e16d      	b.n	8006a82 <_dtoa_r+0xb72>
 80067a6:	9b05      	ldr	r3, [sp, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dc26      	bgt.n	80067fa <_dtoa_r+0x8ea>
 80067ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	dd23      	ble.n	80067fa <_dtoa_r+0x8ea>
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	9306      	str	r3, [sp, #24]
 80067b6:	9b06      	ldr	r3, [sp, #24]
 80067b8:	b973      	cbnz	r3, 80067d8 <_dtoa_r+0x8c8>
 80067ba:	4629      	mov	r1, r5
 80067bc:	2205      	movs	r2, #5
 80067be:	4650      	mov	r0, sl
 80067c0:	f000 fb95 	bl	8006eee <__multadd>
 80067c4:	4605      	mov	r5, r0
 80067c6:	4629      	mov	r1, r5
 80067c8:	9807      	ldr	r0, [sp, #28]
 80067ca:	f000 fd56 	bl	800727a <__mcmp>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	dc09      	bgt.n	80067e6 <_dtoa_r+0x8d6>
 80067d2:	e001      	b.n	80067d8 <_dtoa_r+0x8c8>
 80067d4:	2500      	movs	r5, #0
 80067d6:	462e      	mov	r6, r5
 80067d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067da:	9c08      	ldr	r4, [sp, #32]
 80067dc:	ea6f 0b03 	mvn.w	fp, r3
 80067e0:	e008      	b.n	80067f4 <_dtoa_r+0x8e4>
 80067e2:	46bb      	mov	fp, r7
 80067e4:	462e      	mov	r6, r5
 80067e6:	9b08      	ldr	r3, [sp, #32]
 80067e8:	9a08      	ldr	r2, [sp, #32]
 80067ea:	1c5c      	adds	r4, r3, #1
 80067ec:	2331      	movs	r3, #49	; 0x31
 80067ee:	7013      	strb	r3, [r2, #0]
 80067f0:	f10b 0b01 	add.w	fp, fp, #1
 80067f4:	46b1      	mov	r9, r6
 80067f6:	2600      	movs	r6, #0
 80067f8:	e114      	b.n	8006a24 <_dtoa_r+0xb14>
 80067fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fc:	b923      	cbnz	r3, 8006808 <_dtoa_r+0x8f8>
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	9306      	str	r3, [sp, #24]
 8006802:	9f08      	ldr	r7, [sp, #32]
 8006804:	9c07      	ldr	r4, [sp, #28]
 8006806:	e0cc      	b.n	80069a2 <_dtoa_r+0xa92>
 8006808:	9b05      	ldr	r3, [sp, #20]
 800680a:	9306      	str	r3, [sp, #24]
 800680c:	2c00      	cmp	r4, #0
 800680e:	dd05      	ble.n	800681c <_dtoa_r+0x90c>
 8006810:	4631      	mov	r1, r6
 8006812:	4650      	mov	r0, sl
 8006814:	4622      	mov	r2, r4
 8006816:	f000 fcdd 	bl	80071d4 <__lshift>
 800681a:	4606      	mov	r6, r0
 800681c:	b1b7      	cbz	r7, 800684c <_dtoa_r+0x93c>
 800681e:	6871      	ldr	r1, [r6, #4]
 8006820:	4650      	mov	r0, sl
 8006822:	f000 fb18 	bl	8006e56 <_Balloc>
 8006826:	6932      	ldr	r2, [r6, #16]
 8006828:	3202      	adds	r2, #2
 800682a:	4604      	mov	r4, r0
 800682c:	f106 010c 	add.w	r1, r6, #12
 8006830:	0092      	lsls	r2, r2, #2
 8006832:	300c      	adds	r0, #12
 8006834:	f7fe fcd2 	bl	80051dc <memcpy>
 8006838:	4650      	mov	r0, sl
 800683a:	4621      	mov	r1, r4
 800683c:	2201      	movs	r2, #1
 800683e:	f000 fcc9 	bl	80071d4 <__lshift>
 8006842:	4681      	mov	r9, r0
 8006844:	e003      	b.n	800684e <_dtoa_r+0x93e>
 8006846:	bf00      	nop
 8006848:	40240000 	.word	0x40240000
 800684c:	46b1      	mov	r9, r6
 800684e:	9f08      	ldr	r7, [sp, #32]
 8006850:	9c07      	ldr	r4, [sp, #28]
 8006852:	4629      	mov	r1, r5
 8006854:	4620      	mov	r0, r4
 8006856:	f7ff facb 	bl	8005df0 <quorem>
 800685a:	4631      	mov	r1, r6
 800685c:	9009      	str	r0, [sp, #36]	; 0x24
 800685e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fd09 	bl	800727a <__mcmp>
 8006868:	464a      	mov	r2, r9
 800686a:	9005      	str	r0, [sp, #20]
 800686c:	4629      	mov	r1, r5
 800686e:	4650      	mov	r0, sl
 8006870:	f000 fd1f 	bl	80072b2 <__mdiff>
 8006874:	68c2      	ldr	r2, [r0, #12]
 8006876:	4603      	mov	r3, r0
 8006878:	b93a      	cbnz	r2, 800688a <_dtoa_r+0x97a>
 800687a:	4619      	mov	r1, r3
 800687c:	4620      	mov	r0, r4
 800687e:	9307      	str	r3, [sp, #28]
 8006880:	f000 fcfb 	bl	800727a <__mcmp>
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	4602      	mov	r2, r0
 8006888:	e000      	b.n	800688c <_dtoa_r+0x97c>
 800688a:	2201      	movs	r2, #1
 800688c:	4650      	mov	r0, sl
 800688e:	4619      	mov	r1, r3
 8006890:	9207      	str	r2, [sp, #28]
 8006892:	f000 fb15 	bl	8006ec0 <_Bfree>
 8006896:	9a07      	ldr	r2, [sp, #28]
 8006898:	b9a2      	cbnz	r2, 80068c4 <_dtoa_r+0x9b4>
 800689a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800689c:	b993      	cbnz	r3, 80068c4 <_dtoa_r+0x9b4>
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	b973      	cbnz	r3, 80068c4 <_dtoa_r+0x9b4>
 80068a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068aa:	463b      	mov	r3, r7
 80068ac:	9407      	str	r4, [sp, #28]
 80068ae:	d040      	beq.n	8006932 <_dtoa_r+0xa22>
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bfc8      	it	gt
 80068b6:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 80068b8:	f107 0401 	add.w	r4, r7, #1
 80068bc:	bfc8      	it	gt
 80068be:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 80068c2:	e03d      	b.n	8006940 <_dtoa_r+0xa30>
 80068c4:	9b05      	ldr	r3, [sp, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da04      	bge.n	80068d4 <_dtoa_r+0x9c4>
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	46c4      	mov	ip, r8
 80068ce:	9407      	str	r4, [sp, #28]
 80068d0:	dc08      	bgt.n	80068e4 <_dtoa_r+0x9d4>
 80068d2:	e021      	b.n	8006918 <_dtoa_r+0xa08>
 80068d4:	d124      	bne.n	8006920 <_dtoa_r+0xa10>
 80068d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068d8:	bb13      	cbnz	r3, 8006920 <_dtoa_r+0xa10>
 80068da:	9b02      	ldr	r3, [sp, #8]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	b9f3      	cbnz	r3, 8006920 <_dtoa_r+0xa10>
 80068e2:	e7f2      	b.n	80068ca <_dtoa_r+0x9ba>
 80068e4:	4621      	mov	r1, r4
 80068e6:	2201      	movs	r2, #1
 80068e8:	4650      	mov	r0, sl
 80068ea:	9705      	str	r7, [sp, #20]
 80068ec:	f8cd 8008 	str.w	r8, [sp, #8]
 80068f0:	f000 fc70 	bl	80071d4 <__lshift>
 80068f4:	4629      	mov	r1, r5
 80068f6:	9007      	str	r0, [sp, #28]
 80068f8:	f000 fcbf 	bl	800727a <__mcmp>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006902:	9b05      	ldr	r3, [sp, #20]
 8006904:	dc03      	bgt.n	800690e <_dtoa_r+0x9fe>
 8006906:	d107      	bne.n	8006918 <_dtoa_r+0xa08>
 8006908:	f018 0f01 	tst.w	r8, #1
 800690c:	d004      	beq.n	8006918 <_dtoa_r+0xa08>
 800690e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006912:	d00e      	beq.n	8006932 <_dtoa_r+0xa22>
 8006914:	f108 0c01 	add.w	ip, r8, #1
 8006918:	1c7c      	adds	r4, r7, #1
 800691a:	f887 c000 	strb.w	ip, [r7]
 800691e:	e081      	b.n	8006a24 <_dtoa_r+0xb14>
 8006920:	2a00      	cmp	r2, #0
 8006922:	f107 0201 	add.w	r2, r7, #1
 8006926:	dd0e      	ble.n	8006946 <_dtoa_r+0xa36>
 8006928:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800692c:	463b      	mov	r3, r7
 800692e:	9407      	str	r4, [sp, #28]
 8006930:	d103      	bne.n	800693a <_dtoa_r+0xa2a>
 8006932:	2239      	movs	r2, #57	; 0x39
 8006934:	3701      	adds	r7, #1
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e057      	b.n	80069ea <_dtoa_r+0xada>
 800693a:	4614      	mov	r4, r2
 800693c:	f108 0801 	add.w	r8, r8, #1
 8006940:	f887 8000 	strb.w	r8, [r7]
 8006944:	e06e      	b.n	8006a24 <_dtoa_r+0xb14>
 8006946:	9b08      	ldr	r3, [sp, #32]
 8006948:	f802 8c01 	strb.w	r8, [r2, #-1]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	4617      	mov	r7, r2
 8006950:	9a06      	ldr	r2, [sp, #24]
 8006952:	4293      	cmp	r3, r2
 8006954:	d03a      	beq.n	80069cc <_dtoa_r+0xabc>
 8006956:	4621      	mov	r1, r4
 8006958:	220a      	movs	r2, #10
 800695a:	2300      	movs	r3, #0
 800695c:	4650      	mov	r0, sl
 800695e:	f000 fac6 	bl	8006eee <__multadd>
 8006962:	454e      	cmp	r6, r9
 8006964:	4604      	mov	r4, r0
 8006966:	4631      	mov	r1, r6
 8006968:	4650      	mov	r0, sl
 800696a:	f04f 020a 	mov.w	r2, #10
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	d104      	bne.n	800697e <_dtoa_r+0xa6e>
 8006974:	f000 fabb 	bl	8006eee <__multadd>
 8006978:	4606      	mov	r6, r0
 800697a:	4681      	mov	r9, r0
 800697c:	e769      	b.n	8006852 <_dtoa_r+0x942>
 800697e:	f000 fab6 	bl	8006eee <__multadd>
 8006982:	4649      	mov	r1, r9
 8006984:	4606      	mov	r6, r0
 8006986:	220a      	movs	r2, #10
 8006988:	4650      	mov	r0, sl
 800698a:	2300      	movs	r3, #0
 800698c:	f000 faaf 	bl	8006eee <__multadd>
 8006990:	4681      	mov	r9, r0
 8006992:	e75e      	b.n	8006852 <_dtoa_r+0x942>
 8006994:	4621      	mov	r1, r4
 8006996:	4650      	mov	r0, sl
 8006998:	220a      	movs	r2, #10
 800699a:	2300      	movs	r3, #0
 800699c:	f000 faa7 	bl	8006eee <__multadd>
 80069a0:	4604      	mov	r4, r0
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7ff fa23 	bl	8005df0 <quorem>
 80069aa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069ae:	f807 8b01 	strb.w	r8, [r7], #1
 80069b2:	9b08      	ldr	r3, [sp, #32]
 80069b4:	9a06      	ldr	r2, [sp, #24]
 80069b6:	1afb      	subs	r3, r7, r3
 80069b8:	4293      	cmp	r3, r2
 80069ba:	dbeb      	blt.n	8006994 <_dtoa_r+0xa84>
 80069bc:	9b08      	ldr	r3, [sp, #32]
 80069be:	2a01      	cmp	r2, #1
 80069c0:	bfac      	ite	ge
 80069c2:	189b      	addge	r3, r3, r2
 80069c4:	3301      	addlt	r3, #1
 80069c6:	46b1      	mov	r9, r6
 80069c8:	461f      	mov	r7, r3
 80069ca:	2600      	movs	r6, #0
 80069cc:	4621      	mov	r1, r4
 80069ce:	2201      	movs	r2, #1
 80069d0:	4650      	mov	r0, sl
 80069d2:	f000 fbff 	bl	80071d4 <__lshift>
 80069d6:	4629      	mov	r1, r5
 80069d8:	9007      	str	r0, [sp, #28]
 80069da:	f000 fc4e 	bl	800727a <__mcmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	dc03      	bgt.n	80069ea <_dtoa_r+0xada>
 80069e2:	d116      	bne.n	8006a12 <_dtoa_r+0xb02>
 80069e4:	f018 0f01 	tst.w	r8, #1
 80069e8:	d013      	beq.n	8006a12 <_dtoa_r+0xb02>
 80069ea:	463c      	mov	r4, r7
 80069ec:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80069f0:	2b39      	cmp	r3, #57	; 0x39
 80069f2:	f104 32ff 	add.w	r2, r4, #4294967295
 80069f6:	d109      	bne.n	8006a0c <_dtoa_r+0xafc>
 80069f8:	9b08      	ldr	r3, [sp, #32]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d104      	bne.n	8006a08 <_dtoa_r+0xaf8>
 80069fe:	f10b 0b01 	add.w	fp, fp, #1
 8006a02:	2331      	movs	r3, #49	; 0x31
 8006a04:	9a08      	ldr	r2, [sp, #32]
 8006a06:	e002      	b.n	8006a0e <_dtoa_r+0xafe>
 8006a08:	4614      	mov	r4, r2
 8006a0a:	e7ef      	b.n	80069ec <_dtoa_r+0xadc>
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	7013      	strb	r3, [r2, #0]
 8006a10:	e008      	b.n	8006a24 <_dtoa_r+0xb14>
 8006a12:	463c      	mov	r4, r7
 8006a14:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006a18:	2b30      	cmp	r3, #48	; 0x30
 8006a1a:	f104 32ff 	add.w	r2, r4, #4294967295
 8006a1e:	d101      	bne.n	8006a24 <_dtoa_r+0xb14>
 8006a20:	4614      	mov	r4, r2
 8006a22:	e7f7      	b.n	8006a14 <_dtoa_r+0xb04>
 8006a24:	4650      	mov	r0, sl
 8006a26:	4629      	mov	r1, r5
 8006a28:	f000 fa4a 	bl	8006ec0 <_Bfree>
 8006a2c:	f1b9 0f00 	cmp.w	r9, #0
 8006a30:	d00c      	beq.n	8006a4c <_dtoa_r+0xb3c>
 8006a32:	b12e      	cbz	r6, 8006a40 <_dtoa_r+0xb30>
 8006a34:	454e      	cmp	r6, r9
 8006a36:	d003      	beq.n	8006a40 <_dtoa_r+0xb30>
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	f000 fa40 	bl	8006ec0 <_Bfree>
 8006a40:	4650      	mov	r0, sl
 8006a42:	4649      	mov	r1, r9
 8006a44:	f000 fa3c 	bl	8006ec0 <_Bfree>
 8006a48:	e000      	b.n	8006a4c <_dtoa_r+0xb3c>
 8006a4a:	46bb      	mov	fp, r7
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	9907      	ldr	r1, [sp, #28]
 8006a50:	f000 fa36 	bl	8006ec0 <_Bfree>
 8006a54:	2300      	movs	r3, #0
 8006a56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a58:	7023      	strb	r3, [r4, #0]
 8006a5a:	f10b 0301 	add.w	r3, fp, #1
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a62:	b11b      	cbz	r3, 8006a6c <_dtoa_r+0xb5c>
 8006a64:	601c      	str	r4, [r3, #0]
 8006a66:	e001      	b.n	8006a6c <_dtoa_r+0xb5c>
 8006a68:	480a      	ldr	r0, [pc, #40]	; (8006a94 <_dtoa_r+0xb84>)
 8006a6a:	e00f      	b.n	8006a8c <_dtoa_r+0xb7c>
 8006a6c:	9808      	ldr	r0, [sp, #32]
 8006a6e:	e00d      	b.n	8006a8c <_dtoa_r+0xb7c>
 8006a70:	9b06      	ldr	r3, [sp, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f73f aec5 	bgt.w	8006802 <_dtoa_r+0x8f2>
 8006a78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	f73f ae9b 	bgt.w	80067b6 <_dtoa_r+0x8a6>
 8006a80:	e6bf      	b.n	8006802 <_dtoa_r+0x8f2>
 8006a82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	f73f ae96 	bgt.w	80067b6 <_dtoa_r+0x8a6>
 8006a8a:	e6bf      	b.n	800680c <_dtoa_r+0x8fc>
 8006a8c:	b017      	add	sp, #92	; 0x5c
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	bf00      	nop
 8006a94:	0800883c 	.word	0x0800883c

08006a98 <__sflush_r>:
 8006a98:	898a      	ldrh	r2, [r1, #12]
 8006a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	0710      	lsls	r0, r2, #28
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	d457      	bmi.n	8006b56 <__sflush_r+0xbe>
 8006aa6:	684b      	ldr	r3, [r1, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dc02      	bgt.n	8006ab2 <__sflush_r+0x1a>
 8006aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dd18      	ble.n	8006ae4 <__sflush_r+0x4c>
 8006ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab4:	b1b6      	cbz	r6, 8006ae4 <__sflush_r+0x4c>
 8006ab6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006aba:	2300      	movs	r3, #0
 8006abc:	b292      	uxth	r2, r2
 8006abe:	682f      	ldr	r7, [r5, #0]
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	b10a      	cbz	r2, 8006ac8 <__sflush_r+0x30>
 8006ac4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006ac6:	e010      	b.n	8006aea <__sflush_r+0x52>
 8006ac8:	6a21      	ldr	r1, [r4, #32]
 8006aca:	4628      	mov	r0, r5
 8006acc:	2301      	movs	r3, #1
 8006ace:	47b0      	blx	r6
 8006ad0:	1c41      	adds	r1, r0, #1
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	d109      	bne.n	8006aea <__sflush_r+0x52>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b13b      	cbz	r3, 8006aea <__sflush_r+0x52>
 8006ada:	2b1d      	cmp	r3, #29
 8006adc:	d001      	beq.n	8006ae2 <__sflush_r+0x4a>
 8006ade:	2b16      	cmp	r3, #22
 8006ae0:	d147      	bne.n	8006b72 <__sflush_r+0xda>
 8006ae2:	602f      	str	r7, [r5, #0]
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	075b      	lsls	r3, r3, #29
 8006aee:	d505      	bpl.n	8006afc <__sflush_r+0x64>
 8006af0:	6863      	ldr	r3, [r4, #4]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006af6:	b10b      	cbz	r3, 8006afc <__sflush_r+0x64>
 8006af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006afe:	6a21      	ldr	r1, [r4, #32]
 8006b00:	2300      	movs	r3, #0
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b0      	blx	r6
 8006b06:	1c46      	adds	r6, r0, #1
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	d105      	bne.n	8006b18 <__sflush_r+0x80>
 8006b0c:	682a      	ldr	r2, [r5, #0]
 8006b0e:	b11a      	cbz	r2, 8006b18 <__sflush_r+0x80>
 8006b10:	2a1d      	cmp	r2, #29
 8006b12:	d001      	beq.n	8006b18 <__sflush_r+0x80>
 8006b14:	2a16      	cmp	r2, #22
 8006b16:	d119      	bne.n	8006b4c <__sflush_r+0xb4>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	6062      	str	r2, [r4, #4]
 8006b1c:	04d9      	lsls	r1, r3, #19
 8006b1e:	6922      	ldr	r2, [r4, #16]
 8006b20:	6022      	str	r2, [r4, #0]
 8006b22:	d504      	bpl.n	8006b2e <__sflush_r+0x96>
 8006b24:	1c42      	adds	r2, r0, #1
 8006b26:	d101      	bne.n	8006b2c <__sflush_r+0x94>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b903      	cbnz	r3, 8006b2e <__sflush_r+0x96>
 8006b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8006b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b30:	602f      	str	r7, [r5, #0]
 8006b32:	2900      	cmp	r1, #0
 8006b34:	d0d6      	beq.n	8006ae4 <__sflush_r+0x4c>
 8006b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	d002      	beq.n	8006b44 <__sflush_r+0xac>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 fc76 	bl	8007430 <_free_r>
 8006b44:	2000      	movs	r0, #0
 8006b46:	6360      	str	r0, [r4, #52]	; 0x34
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b56:	690f      	ldr	r7, [r1, #16]
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	d0c3      	beq.n	8006ae4 <__sflush_r+0x4c>
 8006b5c:	0793      	lsls	r3, r2, #30
 8006b5e:	680e      	ldr	r6, [r1, #0]
 8006b60:	bf08      	it	eq
 8006b62:	694b      	ldreq	r3, [r1, #20]
 8006b64:	600f      	str	r7, [r1, #0]
 8006b66:	bf18      	it	ne
 8006b68:	2300      	movne	r3, #0
 8006b6a:	ebc7 0806 	rsb	r8, r7, r6
 8006b6e:	608b      	str	r3, [r1, #8]
 8006b70:	e012      	b.n	8006b98 <__sflush_r+0x100>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b82:	4628      	mov	r0, r5
 8006b84:	6a21      	ldr	r1, [r4, #32]
 8006b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b88:	463a      	mov	r2, r7
 8006b8a:	4643      	mov	r3, r8
 8006b8c:	47b0      	blx	r6
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	ddef      	ble.n	8006b72 <__sflush_r+0xda>
 8006b92:	4407      	add	r7, r0
 8006b94:	ebc0 0808 	rsb	r8, r0, r8
 8006b98:	f1b8 0f00 	cmp.w	r8, #0
 8006b9c:	dcf1      	bgt.n	8006b82 <__sflush_r+0xea>
 8006b9e:	e7a1      	b.n	8006ae4 <__sflush_r+0x4c>

08006ba0 <_fflush_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	690b      	ldr	r3, [r1, #16]
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	b1db      	cbz	r3, 8006be2 <_fflush_r+0x42>
 8006baa:	b118      	cbz	r0, 8006bb4 <_fflush_r+0x14>
 8006bac:	6983      	ldr	r3, [r0, #24]
 8006bae:	b90b      	cbnz	r3, 8006bb4 <_fflush_r+0x14>
 8006bb0:	f000 f860 	bl	8006c74 <__sinit>
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <_fflush_r+0x48>)
 8006bb6:	429c      	cmp	r4, r3
 8006bb8:	d101      	bne.n	8006bbe <_fflush_r+0x1e>
 8006bba:	686c      	ldr	r4, [r5, #4]
 8006bbc:	e008      	b.n	8006bd0 <_fflush_r+0x30>
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <_fflush_r+0x4c>)
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	d101      	bne.n	8006bc8 <_fflush_r+0x28>
 8006bc4:	68ac      	ldr	r4, [r5, #8]
 8006bc6:	e003      	b.n	8006bd0 <_fflush_r+0x30>
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <_fflush_r+0x50>)
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	bf08      	it	eq
 8006bce:	68ec      	ldreq	r4, [r5, #12]
 8006bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd4:	b12b      	cbz	r3, 8006be2 <_fflush_r+0x42>
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	4621      	mov	r1, r4
 8006bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bde:	f7ff bf5b 	b.w	8006a98 <__sflush_r>
 8006be2:	2000      	movs	r0, #0
 8006be4:	bd38      	pop	{r3, r4, r5, pc}
 8006be6:	bf00      	nop
 8006be8:	08008870 	.word	0x08008870
 8006bec:	08008890 	.word	0x08008890
 8006bf0:	080088b0 	.word	0x080088b0

08006bf4 <_cleanup_r>:
 8006bf4:	4901      	ldr	r1, [pc, #4]	; (8006bfc <_cleanup_r+0x8>)
 8006bf6:	f000 b8a7 	b.w	8006d48 <_fwalk_reent>
 8006bfa:	bf00      	nop
 8006bfc:	08006ba1 	.word	0x08006ba1

08006c00 <std.isra.0>:
 8006c00:	2300      	movs	r3, #0
 8006c02:	b510      	push	{r4, lr}
 8006c04:	4604      	mov	r4, r0
 8006c06:	6003      	str	r3, [r0, #0]
 8006c08:	6043      	str	r3, [r0, #4]
 8006c0a:	6083      	str	r3, [r0, #8]
 8006c0c:	8181      	strh	r1, [r0, #12]
 8006c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c10:	81c2      	strh	r2, [r0, #14]
 8006c12:	6103      	str	r3, [r0, #16]
 8006c14:	6143      	str	r3, [r0, #20]
 8006c16:	6183      	str	r3, [r0, #24]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	305c      	adds	r0, #92	; 0x5c
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	f7fe fae8 	bl	80051f2 <memset>
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <std.isra.0+0x38>)
 8006c24:	6263      	str	r3, [r4, #36]	; 0x24
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <std.isra.0+0x3c>)
 8006c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <std.isra.0+0x40>)
 8006c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <std.isra.0+0x44>)
 8006c30:	6224      	str	r4, [r4, #32]
 8006c32:	6323      	str	r3, [r4, #48]	; 0x30
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	bf00      	nop
 8006c38:	0800781d 	.word	0x0800781d
 8006c3c:	0800783f 	.word	0x0800783f
 8006c40:	08007877 	.word	0x08007877
 8006c44:	0800789b 	.word	0x0800789b

08006c48 <__sfmoreglue>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	2368      	movs	r3, #104	; 0x68
 8006c4c:	1e4d      	subs	r5, r1, #1
 8006c4e:	435d      	muls	r5, r3
 8006c50:	460e      	mov	r6, r1
 8006c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c56:	f000 fc2f 	bl	80074b8 <_malloc_r>
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	b140      	cbz	r0, 8006c70 <__sfmoreglue+0x28>
 8006c5e:	2100      	movs	r1, #0
 8006c60:	e880 0042 	stmia.w	r0, {r1, r6}
 8006c64:	300c      	adds	r0, #12
 8006c66:	60a0      	str	r0, [r4, #8]
 8006c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c6c:	f7fe fac1 	bl	80051f2 <memset>
 8006c70:	4620      	mov	r0, r4
 8006c72:	bd70      	pop	{r4, r5, r6, pc}

08006c74 <__sinit>:
 8006c74:	6983      	ldr	r3, [r0, #24]
 8006c76:	b510      	push	{r4, lr}
 8006c78:	4604      	mov	r4, r0
 8006c7a:	bb33      	cbnz	r3, 8006cca <__sinit+0x56>
 8006c7c:	6483      	str	r3, [r0, #72]	; 0x48
 8006c7e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006c80:	6503      	str	r3, [r0, #80]	; 0x50
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <__sinit+0x58>)
 8006c84:	4a12      	ldr	r2, [pc, #72]	; (8006cd0 <__sinit+0x5c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6282      	str	r2, [r0, #40]	; 0x28
 8006c8a:	4298      	cmp	r0, r3
 8006c8c:	bf04      	itt	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	6183      	streq	r3, [r0, #24]
 8006c92:	f000 f81f 	bl	8006cd4 <__sfp>
 8006c96:	6060      	str	r0, [r4, #4]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f81b 	bl	8006cd4 <__sfp>
 8006c9e:	60a0      	str	r0, [r4, #8]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 f817 	bl	8006cd4 <__sfp>
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	60e0      	str	r0, [r4, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	6860      	ldr	r0, [r4, #4]
 8006cae:	f7ff ffa7 	bl	8006c00 <std.isra.0>
 8006cb2:	68a0      	ldr	r0, [r4, #8]
 8006cb4:	2109      	movs	r1, #9
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f7ff ffa2 	bl	8006c00 <std.isra.0>
 8006cbc:	68e0      	ldr	r0, [r4, #12]
 8006cbe:	2112      	movs	r1, #18
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f7ff ff9d 	bl	8006c00 <std.isra.0>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61a3      	str	r3, [r4, #24]
 8006cca:	bd10      	pop	{r4, pc}
 8006ccc:	08008828 	.word	0x08008828
 8006cd0:	08006bf5 	.word	0x08006bf5

08006cd4 <__sfp>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	4b1b      	ldr	r3, [pc, #108]	; (8006d44 <__sfp+0x70>)
 8006cd8:	681e      	ldr	r6, [r3, #0]
 8006cda:	69b3      	ldr	r3, [r6, #24]
 8006cdc:	4607      	mov	r7, r0
 8006cde:	b913      	cbnz	r3, 8006ce6 <__sfp+0x12>
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7ff ffc7 	bl	8006c74 <__sinit>
 8006ce6:	3648      	adds	r6, #72	; 0x48
 8006ce8:	68b4      	ldr	r4, [r6, #8]
 8006cea:	6873      	ldr	r3, [r6, #4]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	d404      	bmi.n	8006cfa <__sfp+0x26>
 8006cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cf4:	b175      	cbz	r5, 8006d14 <__sfp+0x40>
 8006cf6:	3468      	adds	r4, #104	; 0x68
 8006cf8:	e7f8      	b.n	8006cec <__sfp+0x18>
 8006cfa:	6833      	ldr	r3, [r6, #0]
 8006cfc:	b92b      	cbnz	r3, 8006d0a <__sfp+0x36>
 8006cfe:	4638      	mov	r0, r7
 8006d00:	2104      	movs	r1, #4
 8006d02:	f7ff ffa1 	bl	8006c48 <__sfmoreglue>
 8006d06:	6030      	str	r0, [r6, #0]
 8006d08:	b108      	cbz	r0, 8006d0e <__sfp+0x3a>
 8006d0a:	6836      	ldr	r6, [r6, #0]
 8006d0c:	e7ec      	b.n	8006ce8 <__sfp+0x14>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d18:	81e3      	strh	r3, [r4, #14]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d20:	6025      	str	r5, [r4, #0]
 8006d22:	60a5      	str	r5, [r4, #8]
 8006d24:	6065      	str	r5, [r4, #4]
 8006d26:	6125      	str	r5, [r4, #16]
 8006d28:	6165      	str	r5, [r4, #20]
 8006d2a:	61a5      	str	r5, [r4, #24]
 8006d2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d30:	4629      	mov	r1, r5
 8006d32:	2208      	movs	r2, #8
 8006d34:	f7fe fa5d 	bl	80051f2 <memset>
 8006d38:	6365      	str	r5, [r4, #52]	; 0x34
 8006d3a:	63a5      	str	r5, [r4, #56]	; 0x38
 8006d3c:	64a5      	str	r5, [r4, #72]	; 0x48
 8006d3e:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006d40:	4620      	mov	r0, r4
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d44:	08008828 	.word	0x08008828

08006d48 <_fwalk_reent>:
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	4680      	mov	r8, r0
 8006d4e:	4689      	mov	r9, r1
 8006d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d54:	2600      	movs	r6, #0
 8006d56:	b194      	cbz	r4, 8006d7e <_fwalk_reent+0x36>
 8006d58:	68a5      	ldr	r5, [r4, #8]
 8006d5a:	6867      	ldr	r7, [r4, #4]
 8006d5c:	3f01      	subs	r7, #1
 8006d5e:	d40c      	bmi.n	8006d7a <_fwalk_reent+0x32>
 8006d60:	89ab      	ldrh	r3, [r5, #12]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d907      	bls.n	8006d76 <_fwalk_reent+0x2e>
 8006d66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	d003      	beq.n	8006d76 <_fwalk_reent+0x2e>
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4629      	mov	r1, r5
 8006d72:	47c8      	blx	r9
 8006d74:	4306      	orrs	r6, r0
 8006d76:	3568      	adds	r5, #104	; 0x68
 8006d78:	e7f0      	b.n	8006d5c <_fwalk_reent+0x14>
 8006d7a:	6824      	ldr	r4, [r4, #0]
 8006d7c:	e7eb      	b.n	8006d56 <_fwalk_reent+0xe>
 8006d7e:	4630      	mov	r0, r6
 8006d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006d84 <_localeconv_r>:
 8006d84:	4800      	ldr	r0, [pc, #0]	; (8006d88 <_localeconv_r+0x4>)
 8006d86:	4770      	bx	lr
 8006d88:	1ffe88c8 	.word	0x1ffe88c8

08006d8c <__smakebuf_r>:
 8006d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8e:	898b      	ldrh	r3, [r1, #12]
 8006d90:	079d      	lsls	r5, r3, #30
 8006d92:	b091      	sub	sp, #68	; 0x44
 8006d94:	4606      	mov	r6, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	d426      	bmi.n	8006de8 <__smakebuf_r+0x5c>
 8006d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9e:	2900      	cmp	r1, #0
 8006da0:	da09      	bge.n	8006db6 <__smakebuf_r+0x2a>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006da8:	f04f 0500 	mov.w	r5, #0
 8006dac:	bf14      	ite	ne
 8006dae:	2740      	movne	r7, #64	; 0x40
 8006db0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8006db4:	e00d      	b.n	8006dd2 <__smakebuf_r+0x46>
 8006db6:	aa01      	add	r2, sp, #4
 8006db8:	f000 fd96 	bl	80078e8 <_fstat_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	dbf0      	blt.n	8006da2 <__smakebuf_r+0x16>
 8006dc0:	9d02      	ldr	r5, [sp, #8]
 8006dc2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8006dc6:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8006dca:	424d      	negs	r5, r1
 8006dcc:	414d      	adcs	r5, r1
 8006dce:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	f000 fb6f 	bl	80074b8 <_malloc_r>
 8006dda:	b960      	cbnz	r0, 8006df6 <__smakebuf_r+0x6a>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	059a      	lsls	r2, r3, #22
 8006de0:	d41d      	bmi.n	8006e1e <__smakebuf_r+0x92>
 8006de2:	f043 0302 	orr.w	r3, r3, #2
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	2301      	movs	r3, #1
 8006df2:	6163      	str	r3, [r4, #20]
 8006df4:	e013      	b.n	8006e1e <__smakebuf_r+0x92>
 8006df6:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <__smakebuf_r+0x98>)
 8006df8:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	6020      	str	r0, [r4, #0]
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	6120      	str	r0, [r4, #16]
 8006e06:	6167      	str	r7, [r4, #20]
 8006e08:	b14d      	cbz	r5, 8006e1e <__smakebuf_r+0x92>
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e10:	f000 fd7c 	bl	800790c <_isatty_r>
 8006e14:	b118      	cbz	r0, 8006e1e <__smakebuf_r+0x92>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f043 0301 	orr.w	r3, r3, #1
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	b011      	add	sp, #68	; 0x44
 8006e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e22:	bf00      	nop
 8006e24:	08006bf5 	.word	0x08006bf5

08006e28 <malloc>:
 8006e28:	4b02      	ldr	r3, [pc, #8]	; (8006e34 <malloc+0xc>)
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	f000 bb43 	b.w	80074b8 <_malloc_r>
 8006e32:	bf00      	nop
 8006e34:	1ffe88c4 	.word	0x1ffe88c4

08006e38 <memchr>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	b2c9      	uxtb	r1, r1
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4290      	cmp	r0, r2
 8006e40:	4603      	mov	r3, r0
 8006e42:	d006      	beq.n	8006e52 <memchr+0x1a>
 8006e44:	781c      	ldrb	r4, [r3, #0]
 8006e46:	428c      	cmp	r4, r1
 8006e48:	f100 0001 	add.w	r0, r0, #1
 8006e4c:	d1f7      	bne.n	8006e3e <memchr+0x6>
 8006e4e:	4618      	mov	r0, r3
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	2000      	movs	r0, #0
 8006e54:	bd10      	pop	{r4, pc}

08006e56 <_Balloc>:
 8006e56:	b570      	push	{r4, r5, r6, lr}
 8006e58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	460e      	mov	r6, r1
 8006e5e:	b93d      	cbnz	r5, 8006e70 <_Balloc+0x1a>
 8006e60:	2010      	movs	r0, #16
 8006e62:	f7ff ffe1 	bl	8006e28 <malloc>
 8006e66:	6260      	str	r0, [r4, #36]	; 0x24
 8006e68:	6045      	str	r5, [r0, #4]
 8006e6a:	6085      	str	r5, [r0, #8]
 8006e6c:	6005      	str	r5, [r0, #0]
 8006e6e:	60c5      	str	r5, [r0, #12]
 8006e70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e72:	68eb      	ldr	r3, [r5, #12]
 8006e74:	b143      	cbz	r3, 8006e88 <_Balloc+0x32>
 8006e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e7e:	b178      	cbz	r0, 8006ea0 <_Balloc+0x4a>
 8006e80:	6802      	ldr	r2, [r0, #0]
 8006e82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006e86:	e017      	b.n	8006eb8 <_Balloc+0x62>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	2104      	movs	r1, #4
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	f000 fac1 	bl	8007414 <_calloc_r>
 8006e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e94:	60e8      	str	r0, [r5, #12]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ec      	bne.n	8006e76 <_Balloc+0x20>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	fa01 f506 	lsl.w	r5, r1, r6
 8006ea6:	1d6a      	adds	r2, r5, #5
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	0092      	lsls	r2, r2, #2
 8006eac:	f000 fab2 	bl	8007414 <_calloc_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d0f3      	beq.n	8006e9c <_Balloc+0x46>
 8006eb4:	6046      	str	r6, [r0, #4]
 8006eb6:	6085      	str	r5, [r0, #8]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	6103      	str	r3, [r0, #16]
 8006ebc:	60c3      	str	r3, [r0, #12]
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}

08006ec0 <_Bfree>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	b93c      	cbnz	r4, 8006eda <_Bfree+0x1a>
 8006eca:	2010      	movs	r0, #16
 8006ecc:	f7ff ffac 	bl	8006e28 <malloc>
 8006ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8006ed2:	6044      	str	r4, [r0, #4]
 8006ed4:	6084      	str	r4, [r0, #8]
 8006ed6:	6004      	str	r4, [r0, #0]
 8006ed8:	60c4      	str	r4, [r0, #12]
 8006eda:	b13d      	cbz	r5, 8006eec <_Bfree+0x2c>
 8006edc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ede:	686a      	ldr	r2, [r5, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ee6:	6029      	str	r1, [r5, #0]
 8006ee8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006eec:	bd70      	pop	{r4, r5, r6, pc}

08006eee <__multadd>:
 8006eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef2:	690f      	ldr	r7, [r1, #16]
 8006ef4:	4698      	mov	r8, r3
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	f101 0e14 	add.w	lr, r1, #20
 8006efe:	2300      	movs	r3, #0
 8006f00:	f8de 0000 	ldr.w	r0, [lr]
 8006f04:	b285      	uxth	r5, r0
 8006f06:	0c01      	lsrs	r1, r0, #16
 8006f08:	fb02 8505 	mla	r5, r2, r5, r8
 8006f0c:	4351      	muls	r1, r2
 8006f0e:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8006f12:	3301      	adds	r3, #1
 8006f14:	b2ad      	uxth	r5, r5
 8006f16:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8006f1a:	42bb      	cmp	r3, r7
 8006f1c:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8006f20:	f84e 1b04 	str.w	r1, [lr], #4
 8006f24:	dbec      	blt.n	8006f00 <__multadd+0x12>
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	d01b      	beq.n	8006f64 <__multadd+0x76>
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	429f      	cmp	r7, r3
 8006f30:	db12      	blt.n	8006f58 <__multadd+0x6a>
 8006f32:	6861      	ldr	r1, [r4, #4]
 8006f34:	4630      	mov	r0, r6
 8006f36:	3101      	adds	r1, #1
 8006f38:	f7ff ff8d 	bl	8006e56 <_Balloc>
 8006f3c:	6922      	ldr	r2, [r4, #16]
 8006f3e:	3202      	adds	r2, #2
 8006f40:	f104 010c 	add.w	r1, r4, #12
 8006f44:	4605      	mov	r5, r0
 8006f46:	0092      	lsls	r2, r2, #2
 8006f48:	300c      	adds	r0, #12
 8006f4a:	f7fe f947 	bl	80051dc <memcpy>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4630      	mov	r0, r6
 8006f52:	f7ff ffb5 	bl	8006ec0 <_Bfree>
 8006f56:	462c      	mov	r4, r5
 8006f58:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8006f5c:	3701      	adds	r7, #1
 8006f5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f62:	6127      	str	r7, [r4, #16]
 8006f64:	4620      	mov	r0, r4
 8006f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f6a <__hi0bits>:
 8006f6a:	0c03      	lsrs	r3, r0, #16
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	b913      	cbnz	r3, 8006f76 <__hi0bits+0xc>
 8006f70:	0400      	lsls	r0, r0, #16
 8006f72:	2310      	movs	r3, #16
 8006f74:	e000      	b.n	8006f78 <__hi0bits+0xe>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f7c:	bf04      	itt	eq
 8006f7e:	0200      	lsleq	r0, r0, #8
 8006f80:	3308      	addeq	r3, #8
 8006f82:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f86:	bf04      	itt	eq
 8006f88:	0100      	lsleq	r0, r0, #4
 8006f8a:	3304      	addeq	r3, #4
 8006f8c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f90:	bf04      	itt	eq
 8006f92:	0080      	lsleq	r0, r0, #2
 8006f94:	3302      	addeq	r3, #2
 8006f96:	2800      	cmp	r0, #0
 8006f98:	db03      	blt.n	8006fa2 <__hi0bits+0x38>
 8006f9a:	0042      	lsls	r2, r0, #1
 8006f9c:	d503      	bpl.n	8006fa6 <__hi0bits+0x3c>
 8006f9e:	1c58      	adds	r0, r3, #1
 8006fa0:	4770      	bx	lr
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	4770      	bx	lr
 8006fa6:	2020      	movs	r0, #32
 8006fa8:	4770      	bx	lr

08006faa <__lo0bits>:
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	f013 0207 	ands.w	r2, r3, #7
 8006fb0:	d00b      	beq.n	8006fca <__lo0bits+0x20>
 8006fb2:	07d9      	lsls	r1, r3, #31
 8006fb4:	d422      	bmi.n	8006ffc <__lo0bits+0x52>
 8006fb6:	079a      	lsls	r2, r3, #30
 8006fb8:	bf4b      	itete	mi
 8006fba:	085b      	lsrmi	r3, r3, #1
 8006fbc:	089b      	lsrpl	r3, r3, #2
 8006fbe:	6003      	strmi	r3, [r0, #0]
 8006fc0:	6003      	strpl	r3, [r0, #0]
 8006fc2:	bf4c      	ite	mi
 8006fc4:	2001      	movmi	r0, #1
 8006fc6:	2002      	movpl	r0, #2
 8006fc8:	4770      	bx	lr
 8006fca:	b299      	uxth	r1, r3
 8006fcc:	b909      	cbnz	r1, 8006fd2 <__lo0bits+0x28>
 8006fce:	0c1b      	lsrs	r3, r3, #16
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006fd6:	bf04      	itt	eq
 8006fd8:	0a1b      	lsreq	r3, r3, #8
 8006fda:	3208      	addeq	r2, #8
 8006fdc:	0719      	lsls	r1, r3, #28
 8006fde:	bf04      	itt	eq
 8006fe0:	091b      	lsreq	r3, r3, #4
 8006fe2:	3204      	addeq	r2, #4
 8006fe4:	0799      	lsls	r1, r3, #30
 8006fe6:	bf04      	itt	eq
 8006fe8:	089b      	lsreq	r3, r3, #2
 8006fea:	3202      	addeq	r2, #2
 8006fec:	07d9      	lsls	r1, r3, #31
 8006fee:	d402      	bmi.n	8006ff6 <__lo0bits+0x4c>
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	d005      	beq.n	8007000 <__lo0bits+0x56>
 8006ff4:	3201      	adds	r2, #1
 8006ff6:	6003      	str	r3, [r0, #0]
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4770      	bx	lr
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	4770      	bx	lr
 8007000:	2020      	movs	r0, #32
 8007002:	4770      	bx	lr

08007004 <__i2b>:
 8007004:	b510      	push	{r4, lr}
 8007006:	460c      	mov	r4, r1
 8007008:	2101      	movs	r1, #1
 800700a:	f7ff ff24 	bl	8006e56 <_Balloc>
 800700e:	2201      	movs	r2, #1
 8007010:	6144      	str	r4, [r0, #20]
 8007012:	6102      	str	r2, [r0, #16]
 8007014:	bd10      	pop	{r4, pc}

08007016 <__multiply>:
 8007016:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	4614      	mov	r4, r2
 800701c:	690a      	ldr	r2, [r1, #16]
 800701e:	6923      	ldr	r3, [r4, #16]
 8007020:	429a      	cmp	r2, r3
 8007022:	bfb8      	it	lt
 8007024:	460b      	movlt	r3, r1
 8007026:	4688      	mov	r8, r1
 8007028:	bfbc      	itt	lt
 800702a:	46a0      	movlt	r8, r4
 800702c:	461c      	movlt	r4, r3
 800702e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007032:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800703a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800703e:	eb07 0609 	add.w	r6, r7, r9
 8007042:	429e      	cmp	r6, r3
 8007044:	bfc8      	it	gt
 8007046:	3101      	addgt	r1, #1
 8007048:	f7ff ff05 	bl	8006e56 <_Balloc>
 800704c:	f100 0514 	add.w	r5, r0, #20
 8007050:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007054:	462b      	mov	r3, r5
 8007056:	4563      	cmp	r3, ip
 8007058:	d203      	bcs.n	8007062 <__multiply+0x4c>
 800705a:	2200      	movs	r2, #0
 800705c:	f843 2b04 	str.w	r2, [r3], #4
 8007060:	e7f9      	b.n	8007056 <__multiply+0x40>
 8007062:	f104 0214 	add.w	r2, r4, #20
 8007066:	f108 0114 	add.w	r1, r8, #20
 800706a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800706e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	9b00      	ldr	r3, [sp, #0]
 8007076:	9201      	str	r2, [sp, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d257      	bcs.n	800712c <__multiply+0x116>
 800707c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007080:	f1bb 0f00 	cmp.w	fp, #0
 8007084:	d023      	beq.n	80070ce <__multiply+0xb8>
 8007086:	4689      	mov	r9, r1
 8007088:	46ae      	mov	lr, r5
 800708a:	f04f 0800 	mov.w	r8, #0
 800708e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007092:	f8be a000 	ldrh.w	sl, [lr]
 8007096:	b2a3      	uxth	r3, r4
 8007098:	fb0b a303 	mla	r3, fp, r3, sl
 800709c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070a0:	f8de 4000 	ldr.w	r4, [lr]
 80070a4:	4443      	add	r3, r8
 80070a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80070ae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80070b2:	46f2      	mov	sl, lr
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80070ba:	454f      	cmp	r7, r9
 80070bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070c0:	f84a 3b04 	str.w	r3, [sl], #4
 80070c4:	d901      	bls.n	80070ca <__multiply+0xb4>
 80070c6:	46d6      	mov	lr, sl
 80070c8:	e7e1      	b.n	800708e <__multiply+0x78>
 80070ca:	f8ce 8004 	str.w	r8, [lr, #4]
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80070d4:	3204      	adds	r2, #4
 80070d6:	f1ba 0f00 	cmp.w	sl, #0
 80070da:	d021      	beq.n	8007120 <__multiply+0x10a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	462c      	mov	r4, r5
 80070e0:	4689      	mov	r9, r1
 80070e2:	f04f 0800 	mov.w	r8, #0
 80070e6:	f8b9 e000 	ldrh.w	lr, [r9]
 80070ea:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80070ee:	fb0a be0e 	mla	lr, sl, lr, fp
 80070f2:	44f0      	add	r8, lr
 80070f4:	46a3      	mov	fp, r4
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80070fc:	f84b 3b04 	str.w	r3, [fp], #4
 8007100:	f859 3b04 	ldr.w	r3, [r9], #4
 8007104:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	fb0a e303 	mla	r3, sl, r3, lr
 800710e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8007112:	45b9      	cmp	r9, r7
 8007114:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007118:	d201      	bcs.n	800711e <__multiply+0x108>
 800711a:	465c      	mov	r4, fp
 800711c:	e7e3      	b.n	80070e6 <__multiply+0xd0>
 800711e:	6063      	str	r3, [r4, #4]
 8007120:	3504      	adds	r5, #4
 8007122:	e7a7      	b.n	8007074 <__multiply+0x5e>
 8007124:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007128:	b913      	cbnz	r3, 8007130 <__multiply+0x11a>
 800712a:	3e01      	subs	r6, #1
 800712c:	2e00      	cmp	r6, #0
 800712e:	dcf9      	bgt.n	8007124 <__multiply+0x10e>
 8007130:	6106      	str	r6, [r0, #16]
 8007132:	b003      	add	sp, #12
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007138 <__pow5mult>:
 8007138:	f012 0303 	ands.w	r3, r2, #3
 800713c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	4615      	mov	r5, r2
 8007146:	d007      	beq.n	8007158 <__pow5mult+0x20>
 8007148:	3b01      	subs	r3, #1
 800714a:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <__pow5mult+0x98>)
 800714c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007150:	2300      	movs	r3, #0
 8007152:	f7ff fecc 	bl	8006eee <__multadd>
 8007156:	4607      	mov	r7, r0
 8007158:	10ad      	asrs	r5, r5, #2
 800715a:	d035      	beq.n	80071c8 <__pow5mult+0x90>
 800715c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800715e:	b93c      	cbnz	r4, 8007170 <__pow5mult+0x38>
 8007160:	2010      	movs	r0, #16
 8007162:	f7ff fe61 	bl	8006e28 <malloc>
 8007166:	6270      	str	r0, [r6, #36]	; 0x24
 8007168:	6044      	str	r4, [r0, #4]
 800716a:	6084      	str	r4, [r0, #8]
 800716c:	6004      	str	r4, [r0, #0]
 800716e:	60c4      	str	r4, [r0, #12]
 8007170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007178:	b97c      	cbnz	r4, 800719a <__pow5mult+0x62>
 800717a:	4630      	mov	r0, r6
 800717c:	f240 2171 	movw	r1, #625	; 0x271
 8007180:	f7ff ff40 	bl	8007004 <__i2b>
 8007184:	2300      	movs	r3, #0
 8007186:	f8c8 0008 	str.w	r0, [r8, #8]
 800718a:	4604      	mov	r4, r0
 800718c:	6003      	str	r3, [r0, #0]
 800718e:	e004      	b.n	800719a <__pow5mult+0x62>
 8007190:	106d      	asrs	r5, r5, #1
 8007192:	d019      	beq.n	80071c8 <__pow5mult+0x90>
 8007194:	6820      	ldr	r0, [r4, #0]
 8007196:	b170      	cbz	r0, 80071b6 <__pow5mult+0x7e>
 8007198:	4604      	mov	r4, r0
 800719a:	07eb      	lsls	r3, r5, #31
 800719c:	d5f8      	bpl.n	8007190 <__pow5mult+0x58>
 800719e:	4639      	mov	r1, r7
 80071a0:	4622      	mov	r2, r4
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7ff ff37 	bl	8007016 <__multiply>
 80071a8:	4639      	mov	r1, r7
 80071aa:	4680      	mov	r8, r0
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7ff fe87 	bl	8006ec0 <_Bfree>
 80071b2:	4647      	mov	r7, r8
 80071b4:	e7ec      	b.n	8007190 <__pow5mult+0x58>
 80071b6:	4630      	mov	r0, r6
 80071b8:	4621      	mov	r1, r4
 80071ba:	4622      	mov	r2, r4
 80071bc:	f7ff ff2b 	bl	8007016 <__multiply>
 80071c0:	2300      	movs	r3, #0
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	e7e7      	b.n	8007198 <__pow5mult+0x60>
 80071c8:	4638      	mov	r0, r7
 80071ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ce:	bf00      	nop
 80071d0:	080089c8 	.word	0x080089c8

080071d4 <__lshift>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	460c      	mov	r4, r1
 80071da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	6849      	ldr	r1, [r1, #4]
 80071e2:	eb0a 0903 	add.w	r9, sl, r3
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	4607      	mov	r7, r0
 80071ea:	4616      	mov	r6, r2
 80071ec:	f109 0501 	add.w	r5, r9, #1
 80071f0:	429d      	cmp	r5, r3
 80071f2:	dd02      	ble.n	80071fa <__lshift+0x26>
 80071f4:	3101      	adds	r1, #1
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	e7fa      	b.n	80071f0 <__lshift+0x1c>
 80071fa:	4638      	mov	r0, r7
 80071fc:	f7ff fe2b 	bl	8006e56 <_Balloc>
 8007200:	2300      	movs	r3, #0
 8007202:	4680      	mov	r8, r0
 8007204:	f100 0114 	add.w	r1, r0, #20
 8007208:	4553      	cmp	r3, sl
 800720a:	da04      	bge.n	8007216 <__lshift+0x42>
 800720c:	2200      	movs	r2, #0
 800720e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007212:	3301      	adds	r3, #1
 8007214:	e7f8      	b.n	8007208 <__lshift+0x34>
 8007216:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800721a:	6920      	ldr	r0, [r4, #16]
 800721c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007220:	f016 021f 	ands.w	r2, r6, #31
 8007224:	f104 0114 	add.w	r1, r4, #20
 8007228:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800722c:	d014      	beq.n	8007258 <__lshift+0x84>
 800722e:	f1c2 0c20 	rsb	ip, r2, #32
 8007232:	2000      	movs	r0, #0
 8007234:	680e      	ldr	r6, [r1, #0]
 8007236:	4096      	lsls	r6, r2
 8007238:	4330      	orrs	r0, r6
 800723a:	469a      	mov	sl, r3
 800723c:	f843 0b04 	str.w	r0, [r3], #4
 8007240:	f851 0b04 	ldr.w	r0, [r1], #4
 8007244:	4571      	cmp	r1, lr
 8007246:	fa20 f00c 	lsr.w	r0, r0, ip
 800724a:	d3f3      	bcc.n	8007234 <__lshift+0x60>
 800724c:	f8ca 0004 	str.w	r0, [sl, #4]
 8007250:	b148      	cbz	r0, 8007266 <__lshift+0x92>
 8007252:	f109 0502 	add.w	r5, r9, #2
 8007256:	e006      	b.n	8007266 <__lshift+0x92>
 8007258:	3b04      	subs	r3, #4
 800725a:	f851 2b04 	ldr.w	r2, [r1], #4
 800725e:	f843 2f04 	str.w	r2, [r3, #4]!
 8007262:	4571      	cmp	r1, lr
 8007264:	d3f9      	bcc.n	800725a <__lshift+0x86>
 8007266:	3d01      	subs	r5, #1
 8007268:	4638      	mov	r0, r7
 800726a:	f8c8 5010 	str.w	r5, [r8, #16]
 800726e:	4621      	mov	r1, r4
 8007270:	f7ff fe26 	bl	8006ec0 <_Bfree>
 8007274:	4640      	mov	r0, r8
 8007276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800727a <__mcmp>:
 800727a:	6903      	ldr	r3, [r0, #16]
 800727c:	690a      	ldr	r2, [r1, #16]
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	b510      	push	{r4, lr}
 8007282:	d111      	bne.n	80072a8 <__mcmp+0x2e>
 8007284:	0092      	lsls	r2, r2, #2
 8007286:	3014      	adds	r0, #20
 8007288:	3114      	adds	r1, #20
 800728a:	1883      	adds	r3, r0, r2
 800728c:	440a      	add	r2, r1
 800728e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007292:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007296:	428c      	cmp	r4, r1
 8007298:	d002      	beq.n	80072a0 <__mcmp+0x26>
 800729a:	d307      	bcc.n	80072ac <__mcmp+0x32>
 800729c:	2001      	movs	r0, #1
 800729e:	bd10      	pop	{r4, pc}
 80072a0:	4283      	cmp	r3, r0
 80072a2:	d8f4      	bhi.n	800728e <__mcmp+0x14>
 80072a4:	2000      	movs	r0, #0
 80072a6:	bd10      	pop	{r4, pc}
 80072a8:	4618      	mov	r0, r3
 80072aa:	bd10      	pop	{r4, pc}
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	bd10      	pop	{r4, pc}

080072b2 <__mdiff>:
 80072b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b6:	4607      	mov	r7, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	4615      	mov	r5, r2
 80072c0:	f7ff ffdb 	bl	800727a <__mcmp>
 80072c4:	1e06      	subs	r6, r0, #0
 80072c6:	d108      	bne.n	80072da <__mdiff+0x28>
 80072c8:	4638      	mov	r0, r7
 80072ca:	4631      	mov	r1, r6
 80072cc:	f7ff fdc3 	bl	8006e56 <_Balloc>
 80072d0:	2301      	movs	r3, #1
 80072d2:	6103      	str	r3, [r0, #16]
 80072d4:	6146      	str	r6, [r0, #20]
 80072d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072da:	bfbc      	itt	lt
 80072dc:	4623      	movlt	r3, r4
 80072de:	462c      	movlt	r4, r5
 80072e0:	4638      	mov	r0, r7
 80072e2:	6861      	ldr	r1, [r4, #4]
 80072e4:	bfba      	itte	lt
 80072e6:	461d      	movlt	r5, r3
 80072e8:	2601      	movlt	r6, #1
 80072ea:	2600      	movge	r6, #0
 80072ec:	f7ff fdb3 	bl	8006e56 <_Balloc>
 80072f0:	692b      	ldr	r3, [r5, #16]
 80072f2:	60c6      	str	r6, [r0, #12]
 80072f4:	6926      	ldr	r6, [r4, #16]
 80072f6:	f105 0914 	add.w	r9, r5, #20
 80072fa:	3414      	adds	r4, #20
 80072fc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8007300:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007304:	f100 0514 	add.w	r5, r0, #20
 8007308:	f04f 0c00 	mov.w	ip, #0
 800730c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007310:	f859 2b04 	ldr.w	r2, [r9], #4
 8007314:	fa1c f183 	uxtah	r1, ip, r3
 8007318:	fa1f fe82 	uxth.w	lr, r2
 800731c:	0c12      	lsrs	r2, r2, #16
 800731e:	ebce 0101 	rsb	r1, lr, r1
 8007322:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8007326:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800732a:	b289      	uxth	r1, r1
 800732c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007330:	45c8      	cmp	r8, r9
 8007332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007336:	46a6      	mov	lr, r4
 8007338:	f845 3b04 	str.w	r3, [r5], #4
 800733c:	d8e6      	bhi.n	800730c <__mdiff+0x5a>
 800733e:	45be      	cmp	lr, r7
 8007340:	d20e      	bcs.n	8007360 <__mdiff+0xae>
 8007342:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007346:	fa1c f482 	uxtah	r4, ip, r2
 800734a:	0c12      	lsrs	r2, r2, #16
 800734c:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8007350:	b2a4      	uxth	r4, r4
 8007352:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007356:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800735a:	f845 2b04 	str.w	r2, [r5], #4
 800735e:	e7ee      	b.n	800733e <__mdiff+0x8c>
 8007360:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007364:	b90b      	cbnz	r3, 800736a <__mdiff+0xb8>
 8007366:	3e01      	subs	r6, #1
 8007368:	e7fa      	b.n	8007360 <__mdiff+0xae>
 800736a:	6106      	str	r6, [r0, #16]
 800736c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007370 <__d2b>:
 8007370:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007374:	2101      	movs	r1, #1
 8007376:	461d      	mov	r5, r3
 8007378:	9f08      	ldr	r7, [sp, #32]
 800737a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800737c:	4614      	mov	r4, r2
 800737e:	f7ff fd6a 	bl	8006e56 <_Balloc>
 8007382:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007386:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800738a:	4680      	mov	r8, r0
 800738c:	b10d      	cbz	r5, 8007392 <__d2b+0x22>
 800738e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	b1ec      	cbz	r4, 80073d2 <__d2b+0x62>
 8007396:	a802      	add	r0, sp, #8
 8007398:	f840 4d08 	str.w	r4, [r0, #-8]!
 800739c:	f7ff fe05 	bl	8006faa <__lo0bits>
 80073a0:	9b00      	ldr	r3, [sp, #0]
 80073a2:	b150      	cbz	r0, 80073ba <__d2b+0x4a>
 80073a4:	9a01      	ldr	r2, [sp, #4]
 80073a6:	f1c0 0120 	rsb	r1, r0, #32
 80073aa:	fa02 f101 	lsl.w	r1, r2, r1
 80073ae:	430b      	orrs	r3, r1
 80073b0:	40c2      	lsrs	r2, r0
 80073b2:	f8c8 3014 	str.w	r3, [r8, #20]
 80073b6:	9201      	str	r2, [sp, #4]
 80073b8:	e001      	b.n	80073be <__d2b+0x4e>
 80073ba:	f8c8 3014 	str.w	r3, [r8, #20]
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	f8c8 3018 	str.w	r3, [r8, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	bf14      	ite	ne
 80073c8:	2402      	movne	r4, #2
 80073ca:	2401      	moveq	r4, #1
 80073cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80073d0:	e009      	b.n	80073e6 <__d2b+0x76>
 80073d2:	a801      	add	r0, sp, #4
 80073d4:	f7ff fde9 	bl	8006faa <__lo0bits>
 80073d8:	2401      	movs	r4, #1
 80073da:	9b01      	ldr	r3, [sp, #4]
 80073dc:	f8c8 3014 	str.w	r3, [r8, #20]
 80073e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80073e4:	3020      	adds	r0, #32
 80073e6:	b135      	cbz	r5, 80073f6 <__d2b+0x86>
 80073e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073ec:	4405      	add	r5, r0
 80073ee:	603d      	str	r5, [r7, #0]
 80073f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073f4:	e009      	b.n	800740a <__d2b+0x9a>
 80073f6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80073fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073fe:	6038      	str	r0, [r7, #0]
 8007400:	6918      	ldr	r0, [r3, #16]
 8007402:	f7ff fdb2 	bl	8006f6a <__hi0bits>
 8007406:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800740a:	6030      	str	r0, [r6, #0]
 800740c:	4640      	mov	r0, r8
 800740e:	b002      	add	sp, #8
 8007410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007414 <_calloc_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	fb02 f401 	mul.w	r4, r2, r1
 800741a:	4621      	mov	r1, r4
 800741c:	f000 f84c 	bl	80074b8 <_malloc_r>
 8007420:	4605      	mov	r5, r0
 8007422:	b118      	cbz	r0, 800742c <_calloc_r+0x18>
 8007424:	2100      	movs	r1, #0
 8007426:	4622      	mov	r2, r4
 8007428:	f7fd fee3 	bl	80051f2 <memset>
 800742c:	4628      	mov	r0, r5
 800742e:	bd38      	pop	{r3, r4, r5, pc}

08007430 <_free_r>:
 8007430:	b530      	push	{r4, r5, lr}
 8007432:	2900      	cmp	r1, #0
 8007434:	d03d      	beq.n	80074b2 <_free_r+0x82>
 8007436:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800743a:	1f0b      	subs	r3, r1, #4
 800743c:	491d      	ldr	r1, [pc, #116]	; (80074b4 <_free_r+0x84>)
 800743e:	2a00      	cmp	r2, #0
 8007440:	bfb8      	it	lt
 8007442:	189b      	addlt	r3, r3, r2
 8007444:	680a      	ldr	r2, [r1, #0]
 8007446:	460c      	mov	r4, r1
 8007448:	b912      	cbnz	r2, 8007450 <_free_r+0x20>
 800744a:	605a      	str	r2, [r3, #4]
 800744c:	600b      	str	r3, [r1, #0]
 800744e:	bd30      	pop	{r4, r5, pc}
 8007450:	4293      	cmp	r3, r2
 8007452:	d20d      	bcs.n	8007470 <_free_r+0x40>
 8007454:	6819      	ldr	r1, [r3, #0]
 8007456:	1858      	adds	r0, r3, r1
 8007458:	4290      	cmp	r0, r2
 800745a:	bf01      	itttt	eq
 800745c:	585a      	ldreq	r2, [r3, r1]
 800745e:	1852      	addeq	r2, r2, r1
 8007460:	601a      	streq	r2, [r3, #0]
 8007462:	6842      	ldreq	r2, [r0, #4]
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	bd30      	pop	{r4, r5, pc}
 800746a:	4299      	cmp	r1, r3
 800746c:	d803      	bhi.n	8007476 <_free_r+0x46>
 800746e:	460a      	mov	r2, r1
 8007470:	6851      	ldr	r1, [r2, #4]
 8007472:	2900      	cmp	r1, #0
 8007474:	d1f9      	bne.n	800746a <_free_r+0x3a>
 8007476:	6814      	ldr	r4, [r2, #0]
 8007478:	1915      	adds	r5, r2, r4
 800747a:	429d      	cmp	r5, r3
 800747c:	d10a      	bne.n	8007494 <_free_r+0x64>
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4423      	add	r3, r4
 8007482:	18d0      	adds	r0, r2, r3
 8007484:	4288      	cmp	r0, r1
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	d113      	bne.n	80074b2 <_free_r+0x82>
 800748a:	6808      	ldr	r0, [r1, #0]
 800748c:	4403      	add	r3, r0
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	684b      	ldr	r3, [r1, #4]
 8007492:	e00d      	b.n	80074b0 <_free_r+0x80>
 8007494:	d902      	bls.n	800749c <_free_r+0x6c>
 8007496:	230c      	movs	r3, #12
 8007498:	6003      	str	r3, [r0, #0]
 800749a:	bd30      	pop	{r4, r5, pc}
 800749c:	681c      	ldr	r4, [r3, #0]
 800749e:	1918      	adds	r0, r3, r4
 80074a0:	4288      	cmp	r0, r1
 80074a2:	bf04      	itt	eq
 80074a4:	6808      	ldreq	r0, [r1, #0]
 80074a6:	6849      	ldreq	r1, [r1, #4]
 80074a8:	6059      	str	r1, [r3, #4]
 80074aa:	bf04      	itt	eq
 80074ac:	1900      	addeq	r0, r0, r4
 80074ae:	6018      	streq	r0, [r3, #0]
 80074b0:	6053      	str	r3, [r2, #4]
 80074b2:	bd30      	pop	{r4, r5, pc}
 80074b4:	1ffe89b4 	.word	0x1ffe89b4

080074b8 <_malloc_r>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	1ccc      	adds	r4, r1, #3
 80074bc:	f024 0403 	bic.w	r4, r4, #3
 80074c0:	3408      	adds	r4, #8
 80074c2:	2c0c      	cmp	r4, #12
 80074c4:	bf38      	it	cc
 80074c6:	240c      	movcc	r4, #12
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	4606      	mov	r6, r0
 80074cc:	da03      	bge.n	80074d6 <_malloc_r+0x1e>
 80074ce:	230c      	movs	r3, #12
 80074d0:	6033      	str	r3, [r6, #0]
 80074d2:	2000      	movs	r0, #0
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	428c      	cmp	r4, r1
 80074d8:	d3f9      	bcc.n	80074ce <_malloc_r+0x16>
 80074da:	4a20      	ldr	r2, [pc, #128]	; (800755c <_malloc_r+0xa4>)
 80074dc:	6813      	ldr	r3, [r2, #0]
 80074de:	4610      	mov	r0, r2
 80074e0:	4619      	mov	r1, r3
 80074e2:	b1a1      	cbz	r1, 800750e <_malloc_r+0x56>
 80074e4:	680a      	ldr	r2, [r1, #0]
 80074e6:	1b12      	subs	r2, r2, r4
 80074e8:	d40e      	bmi.n	8007508 <_malloc_r+0x50>
 80074ea:	2a0b      	cmp	r2, #11
 80074ec:	d903      	bls.n	80074f6 <_malloc_r+0x3e>
 80074ee:	600a      	str	r2, [r1, #0]
 80074f0:	188b      	adds	r3, r1, r2
 80074f2:	508c      	str	r4, [r1, r2]
 80074f4:	e01f      	b.n	8007536 <_malloc_r+0x7e>
 80074f6:	428b      	cmp	r3, r1
 80074f8:	bf0d      	iteet	eq
 80074fa:	685a      	ldreq	r2, [r3, #4]
 80074fc:	684a      	ldrne	r2, [r1, #4]
 80074fe:	605a      	strne	r2, [r3, #4]
 8007500:	6002      	streq	r2, [r0, #0]
 8007502:	bf18      	it	ne
 8007504:	460b      	movne	r3, r1
 8007506:	e016      	b.n	8007536 <_malloc_r+0x7e>
 8007508:	460b      	mov	r3, r1
 800750a:	6849      	ldr	r1, [r1, #4]
 800750c:	e7e9      	b.n	80074e2 <_malloc_r+0x2a>
 800750e:	4d14      	ldr	r5, [pc, #80]	; (8007560 <_malloc_r+0xa8>)
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b91b      	cbnz	r3, 800751c <_malloc_r+0x64>
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f971 	bl	80077fc <_sbrk_r>
 800751a:	6028      	str	r0, [r5, #0]
 800751c:	4630      	mov	r0, r6
 800751e:	4621      	mov	r1, r4
 8007520:	f000 f96c 	bl	80077fc <_sbrk_r>
 8007524:	1c42      	adds	r2, r0, #1
 8007526:	4603      	mov	r3, r0
 8007528:	d0d1      	beq.n	80074ce <_malloc_r+0x16>
 800752a:	1cc5      	adds	r5, r0, #3
 800752c:	f025 0503 	bic.w	r5, r5, #3
 8007530:	4285      	cmp	r5, r0
 8007532:	d10a      	bne.n	800754a <_malloc_r+0x92>
 8007534:	601c      	str	r4, [r3, #0]
 8007536:	f103 000b 	add.w	r0, r3, #11
 800753a:	1d1a      	adds	r2, r3, #4
 800753c:	f020 0007 	bic.w	r0, r0, #7
 8007540:	1a82      	subs	r2, r0, r2
 8007542:	d00a      	beq.n	800755a <_malloc_r+0xa2>
 8007544:	4251      	negs	r1, r2
 8007546:	5099      	str	r1, [r3, r2]
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	4630      	mov	r0, r6
 800754c:	1ae9      	subs	r1, r5, r3
 800754e:	f000 f955 	bl	80077fc <_sbrk_r>
 8007552:	3001      	adds	r0, #1
 8007554:	d0bb      	beq.n	80074ce <_malloc_r+0x16>
 8007556:	462b      	mov	r3, r5
 8007558:	e7ec      	b.n	8007534 <_malloc_r+0x7c>
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	1ffe89b4 	.word	0x1ffe89b4
 8007560:	1ffe89b0 	.word	0x1ffe89b0

08007564 <__ssputs_r>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	688e      	ldr	r6, [r1, #8]
 800756a:	42b3      	cmp	r3, r6
 800756c:	4682      	mov	sl, r0
 800756e:	460c      	mov	r4, r1
 8007570:	4690      	mov	r8, r2
 8007572:	4699      	mov	r9, r3
 8007574:	d340      	bcc.n	80075f8 <__ssputs_r+0x94>
 8007576:	898a      	ldrh	r2, [r1, #12]
 8007578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800757c:	d03a      	beq.n	80075f4 <__ssputs_r+0x90>
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	6909      	ldr	r1, [r1, #16]
 8007582:	1a6f      	subs	r7, r5, r1
 8007584:	6965      	ldr	r5, [r4, #20]
 8007586:	2302      	movs	r3, #2
 8007588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800758c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007590:	1c7b      	adds	r3, r7, #1
 8007592:	444b      	add	r3, r9
 8007594:	429d      	cmp	r5, r3
 8007596:	bf38      	it	cc
 8007598:	461d      	movcc	r5, r3
 800759a:	0553      	lsls	r3, r2, #21
 800759c:	d50f      	bpl.n	80075be <__ssputs_r+0x5a>
 800759e:	4629      	mov	r1, r5
 80075a0:	f7ff ff8a 	bl	80074b8 <_malloc_r>
 80075a4:	4606      	mov	r6, r0
 80075a6:	b198      	cbz	r0, 80075d0 <__ssputs_r+0x6c>
 80075a8:	6921      	ldr	r1, [r4, #16]
 80075aa:	463a      	mov	r2, r7
 80075ac:	f7fd fe16 	bl	80051dc <memcpy>
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ba:	81a3      	strh	r3, [r4, #12]
 80075bc:	e013      	b.n	80075e6 <__ssputs_r+0x82>
 80075be:	462a      	mov	r2, r5
 80075c0:	f000 f9e1 	bl	8007986 <_realloc_r>
 80075c4:	4606      	mov	r6, r0
 80075c6:	b970      	cbnz	r0, 80075e6 <__ssputs_r+0x82>
 80075c8:	4650      	mov	r0, sl
 80075ca:	6921      	ldr	r1, [r4, #16]
 80075cc:	f7ff ff30 	bl	8007430 <_free_r>
 80075d0:	230c      	movs	r3, #12
 80075d2:	f8ca 3000 	str.w	r3, [sl]
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	f04f 30ff 	mov.w	r0, #4294967295
 80075e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e6:	6126      	str	r6, [r4, #16]
 80075e8:	6165      	str	r5, [r4, #20]
 80075ea:	443e      	add	r6, r7
 80075ec:	1bed      	subs	r5, r5, r7
 80075ee:	6026      	str	r6, [r4, #0]
 80075f0:	60a5      	str	r5, [r4, #8]
 80075f2:	464e      	mov	r6, r9
 80075f4:	45b1      	cmp	r9, r6
 80075f6:	d200      	bcs.n	80075fa <__ssputs_r+0x96>
 80075f8:	464e      	mov	r6, r9
 80075fa:	4632      	mov	r2, r6
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	4641      	mov	r1, r8
 8007600:	f000 f9a6 	bl	8007950 <memmove>
 8007604:	68a3      	ldr	r3, [r4, #8]
 8007606:	1b9b      	subs	r3, r3, r6
 8007608:	60a3      	str	r3, [r4, #8]
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	441e      	add	r6, r3
 800760e:	6026      	str	r6, [r4, #0]
 8007610:	2000      	movs	r0, #0
 8007612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007618 <_svfiprintf_r>:
 8007618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800761c:	b09d      	sub	sp, #116	; 0x74
 800761e:	4606      	mov	r6, r0
 8007620:	9303      	str	r3, [sp, #12]
 8007622:	898b      	ldrh	r3, [r1, #12]
 8007624:	061c      	lsls	r4, r3, #24
 8007626:	460d      	mov	r5, r1
 8007628:	4690      	mov	r8, r2
 800762a:	d50c      	bpl.n	8007646 <_svfiprintf_r+0x2e>
 800762c:	690b      	ldr	r3, [r1, #16]
 800762e:	b953      	cbnz	r3, 8007646 <_svfiprintf_r+0x2e>
 8007630:	2140      	movs	r1, #64	; 0x40
 8007632:	f7ff ff41 	bl	80074b8 <_malloc_r>
 8007636:	6028      	str	r0, [r5, #0]
 8007638:	6128      	str	r0, [r5, #16]
 800763a:	b910      	cbnz	r0, 8007642 <_svfiprintf_r+0x2a>
 800763c:	230c      	movs	r3, #12
 800763e:	6033      	str	r3, [r6, #0]
 8007640:	e0cc      	b.n	80077dc <_svfiprintf_r+0x1c4>
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	616b      	str	r3, [r5, #20]
 8007646:	2300      	movs	r3, #0
 8007648:	9309      	str	r3, [sp, #36]	; 0x24
 800764a:	2320      	movs	r3, #32
 800764c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007650:	2330      	movs	r3, #48	; 0x30
 8007652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007656:	4643      	mov	r3, r8
 8007658:	461c      	mov	r4, r3
 800765a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800765e:	b91a      	cbnz	r2, 8007668 <_svfiprintf_r+0x50>
 8007660:	ebb4 0908 	subs.w	r9, r4, r8
 8007664:	d00f      	beq.n	8007686 <_svfiprintf_r+0x6e>
 8007666:	e002      	b.n	800766e <_svfiprintf_r+0x56>
 8007668:	2a25      	cmp	r2, #37	; 0x25
 800766a:	d1f5      	bne.n	8007658 <_svfiprintf_r+0x40>
 800766c:	e7f8      	b.n	8007660 <_svfiprintf_r+0x48>
 800766e:	4630      	mov	r0, r6
 8007670:	4629      	mov	r1, r5
 8007672:	4642      	mov	r2, r8
 8007674:	464b      	mov	r3, r9
 8007676:	f7ff ff75 	bl	8007564 <__ssputs_r>
 800767a:	3001      	adds	r0, #1
 800767c:	f000 80a9 	beq.w	80077d2 <_svfiprintf_r+0x1ba>
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	444b      	add	r3, r9
 8007684:	9309      	str	r3, [sp, #36]	; 0x24
 8007686:	7823      	ldrb	r3, [r4, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80a2 	beq.w	80077d2 <_svfiprintf_r+0x1ba>
 800768e:	2300      	movs	r3, #0
 8007690:	f04f 32ff 	mov.w	r2, #4294967295
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	9205      	str	r2, [sp, #20]
 800769a:	9306      	str	r3, [sp, #24]
 800769c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a0:	931a      	str	r3, [sp, #104]	; 0x68
 80076a2:	f104 0801 	add.w	r8, r4, #1
 80076a6:	4644      	mov	r4, r8
 80076a8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80077f4 <_svfiprintf_r+0x1dc>
 80076ac:	7821      	ldrb	r1, [r4, #0]
 80076ae:	4648      	mov	r0, r9
 80076b0:	2205      	movs	r2, #5
 80076b2:	f7ff fbc1 	bl	8006e38 <memchr>
 80076b6:	f108 0801 	add.w	r8, r8, #1
 80076ba:	9b04      	ldr	r3, [sp, #16]
 80076bc:	b130      	cbz	r0, 80076cc <_svfiprintf_r+0xb4>
 80076be:	ebc9 0000 	rsb	r0, r9, r0
 80076c2:	2201      	movs	r2, #1
 80076c4:	4082      	lsls	r2, r0
 80076c6:	4313      	orrs	r3, r2
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	e7ec      	b.n	80076a6 <_svfiprintf_r+0x8e>
 80076cc:	06d8      	lsls	r0, r3, #27
 80076ce:	bf44      	itt	mi
 80076d0:	2220      	movmi	r2, #32
 80076d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076d6:	0719      	lsls	r1, r3, #28
 80076d8:	bf44      	itt	mi
 80076da:	222b      	movmi	r2, #43	; 0x2b
 80076dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076e0:	7822      	ldrb	r2, [r4, #0]
 80076e2:	2a2a      	cmp	r2, #42	; 0x2a
 80076e4:	d002      	beq.n	80076ec <_svfiprintf_r+0xd4>
 80076e6:	9907      	ldr	r1, [sp, #28]
 80076e8:	4623      	mov	r3, r4
 80076ea:	e00e      	b.n	800770a <_svfiprintf_r+0xf2>
 80076ec:	9a03      	ldr	r2, [sp, #12]
 80076ee:	1d11      	adds	r1, r2, #4
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	9103      	str	r1, [sp, #12]
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	bfbb      	ittet	lt
 80076f8:	4252      	neglt	r2, r2
 80076fa:	f043 0302 	orrlt.w	r3, r3, #2
 80076fe:	9207      	strge	r2, [sp, #28]
 8007700:	9207      	strlt	r2, [sp, #28]
 8007702:	bfb8      	it	lt
 8007704:	9304      	strlt	r3, [sp, #16]
 8007706:	3401      	adds	r4, #1
 8007708:	e00a      	b.n	8007720 <_svfiprintf_r+0x108>
 800770a:	461c      	mov	r4, r3
 800770c:	3301      	adds	r3, #1
 800770e:	7822      	ldrb	r2, [r4, #0]
 8007710:	3a30      	subs	r2, #48	; 0x30
 8007712:	2a09      	cmp	r2, #9
 8007714:	d803      	bhi.n	800771e <_svfiprintf_r+0x106>
 8007716:	200a      	movs	r0, #10
 8007718:	fb00 2101 	mla	r1, r0, r1, r2
 800771c:	e7f5      	b.n	800770a <_svfiprintf_r+0xf2>
 800771e:	9107      	str	r1, [sp, #28]
 8007720:	7823      	ldrb	r3, [r4, #0]
 8007722:	2b2e      	cmp	r3, #46	; 0x2e
 8007724:	d11a      	bne.n	800775c <_svfiprintf_r+0x144>
 8007726:	7863      	ldrb	r3, [r4, #1]
 8007728:	2b2a      	cmp	r3, #42	; 0x2a
 800772a:	d10a      	bne.n	8007742 <_svfiprintf_r+0x12a>
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	1d1a      	adds	r2, r3, #4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	9203      	str	r2, [sp, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	bfb8      	it	lt
 8007738:	f04f 33ff 	movlt.w	r3, #4294967295
 800773c:	3402      	adds	r4, #2
 800773e:	9305      	str	r3, [sp, #20]
 8007740:	e00c      	b.n	800775c <_svfiprintf_r+0x144>
 8007742:	1c61      	adds	r1, r4, #1
 8007744:	2200      	movs	r2, #0
 8007746:	460c      	mov	r4, r1
 8007748:	3101      	adds	r1, #1
 800774a:	7823      	ldrb	r3, [r4, #0]
 800774c:	3b30      	subs	r3, #48	; 0x30
 800774e:	2b09      	cmp	r3, #9
 8007750:	d803      	bhi.n	800775a <_svfiprintf_r+0x142>
 8007752:	200a      	movs	r0, #10
 8007754:	fb00 3202 	mla	r2, r0, r2, r3
 8007758:	e7f5      	b.n	8007746 <_svfiprintf_r+0x12e>
 800775a:	9205      	str	r2, [sp, #20]
 800775c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80077f8 <_svfiprintf_r+0x1e0>
 8007760:	7821      	ldrb	r1, [r4, #0]
 8007762:	4640      	mov	r0, r8
 8007764:	2203      	movs	r2, #3
 8007766:	f7ff fb67 	bl	8006e38 <memchr>
 800776a:	b138      	cbz	r0, 800777c <_svfiprintf_r+0x164>
 800776c:	9a04      	ldr	r2, [sp, #16]
 800776e:	ebc8 0000 	rsb	r0, r8, r0
 8007772:	2340      	movs	r3, #64	; 0x40
 8007774:	4083      	lsls	r3, r0
 8007776:	4313      	orrs	r3, r2
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	3401      	adds	r4, #1
 800777c:	7821      	ldrb	r1, [r4, #0]
 800777e:	481a      	ldr	r0, [pc, #104]	; (80077e8 <_svfiprintf_r+0x1d0>)
 8007780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007784:	2206      	movs	r2, #6
 8007786:	f104 0801 	add.w	r8, r4, #1
 800778a:	f7ff fb55 	bl	8006e38 <memchr>
 800778e:	b188      	cbz	r0, 80077b4 <_svfiprintf_r+0x19c>
 8007790:	4b16      	ldr	r3, [pc, #88]	; (80077ec <_svfiprintf_r+0x1d4>)
 8007792:	b933      	cbnz	r3, 80077a2 <_svfiprintf_r+0x18a>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	3307      	adds	r3, #7
 8007798:	f023 0307 	bic.w	r3, r3, #7
 800779c:	3308      	adds	r3, #8
 800779e:	9303      	str	r3, [sp, #12]
 80077a0:	e013      	b.n	80077ca <_svfiprintf_r+0x1b2>
 80077a2:	ab03      	add	r3, sp, #12
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	4630      	mov	r0, r6
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	462a      	mov	r2, r5
 80077ac:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <_svfiprintf_r+0x1d8>)
 80077ae:	f7fd fdb9 	bl	8005324 <_printf_float>
 80077b2:	e007      	b.n	80077c4 <_svfiprintf_r+0x1ac>
 80077b4:	ab03      	add	r3, sp, #12
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4630      	mov	r0, r6
 80077ba:	a904      	add	r1, sp, #16
 80077bc:	462a      	mov	r2, r5
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <_svfiprintf_r+0x1d8>)
 80077c0:	f7fe f86a 	bl	8005898 <_printf_i>
 80077c4:	1c42      	adds	r2, r0, #1
 80077c6:	4607      	mov	r7, r0
 80077c8:	d003      	beq.n	80077d2 <_svfiprintf_r+0x1ba>
 80077ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077cc:	443b      	add	r3, r7
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	e741      	b.n	8007656 <_svfiprintf_r+0x3e>
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	065b      	lsls	r3, r3, #25
 80077d6:	d401      	bmi.n	80077dc <_svfiprintf_r+0x1c4>
 80077d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077da:	e001      	b.n	80077e0 <_svfiprintf_r+0x1c8>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	b01d      	add	sp, #116	; 0x74
 80077e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077e6:	bf00      	nop
 80077e8:	080089de 	.word	0x080089de
 80077ec:	08005325 	.word	0x08005325
 80077f0:	08007565 	.word	0x08007565
 80077f4:	080089d4 	.word	0x080089d4
 80077f8:	080089da 	.word	0x080089da

080077fc <_sbrk_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4c06      	ldr	r4, [pc, #24]	; (8007818 <_sbrk_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4605      	mov	r5, r0
 8007804:	4608      	mov	r0, r1
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	f7fb f96e 	bl	8002ae8 <_sbrk>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_sbrk_r+0x1a>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	b103      	cbz	r3, 8007816 <_sbrk_r+0x1a>
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	1ffe9094 	.word	0x1ffe9094

0800781c <__sread>:
 800781c:	b510      	push	{r4, lr}
 800781e:	460c      	mov	r4, r1
 8007820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007824:	f000 f8d6 	bl	80079d4 <_read_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	bfab      	itete	ge
 800782c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800782e:	89a3      	ldrhlt	r3, [r4, #12]
 8007830:	181b      	addge	r3, r3, r0
 8007832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007836:	bfac      	ite	ge
 8007838:	6563      	strge	r3, [r4, #84]	; 0x54
 800783a:	81a3      	strhlt	r3, [r4, #12]
 800783c:	bd10      	pop	{r4, pc}

0800783e <__swrite>:
 800783e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007842:	461d      	mov	r5, r3
 8007844:	898b      	ldrh	r3, [r1, #12]
 8007846:	05db      	lsls	r3, r3, #23
 8007848:	4607      	mov	r7, r0
 800784a:	460c      	mov	r4, r1
 800784c:	4616      	mov	r6, r2
 800784e:	d505      	bpl.n	800785c <__swrite+0x1e>
 8007850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007854:	2200      	movs	r2, #0
 8007856:	2302      	movs	r3, #2
 8007858:	f000 f868 	bl	800792c <_lseek_r>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007866:	81a3      	strh	r3, [r4, #12]
 8007868:	4638      	mov	r0, r7
 800786a:	4632      	mov	r2, r6
 800786c:	462b      	mov	r3, r5
 800786e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007872:	f000 b817 	b.w	80078a4 <_write_r>

08007876 <__sseek>:
 8007876:	b510      	push	{r4, lr}
 8007878:	460c      	mov	r4, r1
 800787a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787e:	f000 f855 	bl	800792c <_lseek_r>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	bf15      	itete	ne
 8007888:	6560      	strne	r0, [r4, #84]	; 0x54
 800788a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800788e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007892:	81a3      	strheq	r3, [r4, #12]
 8007894:	bf18      	it	ne
 8007896:	81a3      	strhne	r3, [r4, #12]
 8007898:	bd10      	pop	{r4, pc}

0800789a <__sclose>:
 800789a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789e:	f000 b813 	b.w	80078c8 <_close_r>
	...

080078a4 <_write_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4c07      	ldr	r4, [pc, #28]	; (80078c4 <_write_r+0x20>)
 80078a8:	4605      	mov	r5, r0
 80078aa:	2000      	movs	r0, #0
 80078ac:	6020      	str	r0, [r4, #0]
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	461a      	mov	r2, r3
 80078b4:	f000 fdca 	bl	800844c <_write>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_write_r+0x1e>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_write_r+0x1e>
 80078c0:	602b      	str	r3, [r5, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	1ffe9094 	.word	0x1ffe9094

080078c8 <_close_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4c06      	ldr	r4, [pc, #24]	; (80078e4 <_close_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4605      	mov	r5, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	f000 fdea 	bl	80084ac <_close>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_close_r+0x1a>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_close_r+0x1a>
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	1ffe9094 	.word	0x1ffe9094

080078e8 <_fstat_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4c07      	ldr	r4, [pc, #28]	; (8007908 <_fstat_r+0x20>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4605      	mov	r5, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	f000 fe1e 	bl	8008536 <_fstat>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	d102      	bne.n	8007904 <_fstat_r+0x1c>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	b103      	cbz	r3, 8007904 <_fstat_r+0x1c>
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	bd38      	pop	{r3, r4, r5, pc}
 8007906:	bf00      	nop
 8007908:	1ffe9094 	.word	0x1ffe9094

0800790c <_isatty_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4c06      	ldr	r4, [pc, #24]	; (8007928 <_isatty_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4605      	mov	r5, r0
 8007914:	4608      	mov	r0, r1
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	f000 fe1b 	bl	8008552 <_isatty>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_isatty_r+0x1a>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	b103      	cbz	r3, 8007926 <_isatty_r+0x1a>
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	1ffe9094 	.word	0x1ffe9094

0800792c <_lseek_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4c07      	ldr	r4, [pc, #28]	; (800794c <_lseek_r+0x20>)
 8007930:	4605      	mov	r5, r0
 8007932:	2000      	movs	r0, #0
 8007934:	6020      	str	r0, [r4, #0]
 8007936:	4608      	mov	r0, r1
 8007938:	4611      	mov	r1, r2
 800793a:	461a      	mov	r2, r3
 800793c:	f000 fd74 	bl	8008428 <_lseek>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_lseek_r+0x1e>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	b103      	cbz	r3, 800794a <_lseek_r+0x1e>
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	1ffe9094 	.word	0x1ffe9094

08007950 <memmove>:
 8007950:	4281      	cmp	r1, r0
 8007952:	b510      	push	{r4, lr}
 8007954:	eb01 0302 	add.w	r3, r1, r2
 8007958:	d301      	bcc.n	800795e <memmove+0xe>
 800795a:	1e42      	subs	r2, r0, #1
 800795c:	e00b      	b.n	8007976 <memmove+0x26>
 800795e:	4298      	cmp	r0, r3
 8007960:	d2fb      	bcs.n	800795a <memmove+0xa>
 8007962:	1881      	adds	r1, r0, r2
 8007964:	1ad2      	subs	r2, r2, r3
 8007966:	42d3      	cmn	r3, r2
 8007968:	d004      	beq.n	8007974 <memmove+0x24>
 800796a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007972:	e7f8      	b.n	8007966 <memmove+0x16>
 8007974:	bd10      	pop	{r4, pc}
 8007976:	4299      	cmp	r1, r3
 8007978:	d004      	beq.n	8007984 <memmove+0x34>
 800797a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800797e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007982:	e7f8      	b.n	8007976 <memmove+0x26>
 8007984:	bd10      	pop	{r4, pc}

08007986 <_realloc_r>:
 8007986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007988:	4607      	mov	r7, r0
 800798a:	4615      	mov	r5, r2
 800798c:	460e      	mov	r6, r1
 800798e:	b921      	cbnz	r1, 800799a <_realloc_r+0x14>
 8007990:	4611      	mov	r1, r2
 8007992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007996:	f7ff bd8f 	b.w	80074b8 <_malloc_r>
 800799a:	b91a      	cbnz	r2, 80079a4 <_realloc_r+0x1e>
 800799c:	f7ff fd48 	bl	8007430 <_free_r>
 80079a0:	4628      	mov	r0, r5
 80079a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a4:	f000 f828 	bl	80079f8 <_malloc_usable_size_r>
 80079a8:	42a8      	cmp	r0, r5
 80079aa:	d20e      	bcs.n	80079ca <_realloc_r+0x44>
 80079ac:	4638      	mov	r0, r7
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7ff fd82 	bl	80074b8 <_malloc_r>
 80079b4:	4604      	mov	r4, r0
 80079b6:	b150      	cbz	r0, 80079ce <_realloc_r+0x48>
 80079b8:	4631      	mov	r1, r6
 80079ba:	462a      	mov	r2, r5
 80079bc:	f7fd fc0e 	bl	80051dc <memcpy>
 80079c0:	4638      	mov	r0, r7
 80079c2:	4631      	mov	r1, r6
 80079c4:	f7ff fd34 	bl	8007430 <_free_r>
 80079c8:	e001      	b.n	80079ce <_realloc_r+0x48>
 80079ca:	4630      	mov	r0, r6
 80079cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ce:	4620      	mov	r0, r4
 80079d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079d4 <_read_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4c07      	ldr	r4, [pc, #28]	; (80079f4 <_read_r+0x20>)
 80079d8:	4605      	mov	r5, r0
 80079da:	2000      	movs	r0, #0
 80079dc:	6020      	str	r0, [r4, #0]
 80079de:	4608      	mov	r0, r1
 80079e0:	4611      	mov	r1, r2
 80079e2:	461a      	mov	r2, r3
 80079e4:	f000 fcc9 	bl	800837a <_read>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_read_r+0x1e>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_read_r+0x1e>
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	1ffe9094 	.word	0x1ffe9094

080079f8 <_malloc_usable_size_r>:
 80079f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80079fc:	2800      	cmp	r0, #0
 80079fe:	bfbe      	ittt	lt
 8007a00:	1809      	addlt	r1, r1, r0
 8007a02:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8007a06:	18c0      	addlt	r0, r0, r3
 8007a08:	3804      	subs	r0, #4
 8007a0a:	4770      	bx	lr

08007a0c <__aeabi_drsub>:
 8007a0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007a10:	e002      	b.n	8007a18 <__adddf3>
 8007a12:	bf00      	nop

08007a14 <__aeabi_dsub>:
 8007a14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007a18 <__adddf3>:
 8007a18:	b530      	push	{r4, r5, lr}
 8007a1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007a1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007a22:	ea94 0f05 	teq	r4, r5
 8007a26:	bf08      	it	eq
 8007a28:	ea90 0f02 	teqeq	r0, r2
 8007a2c:	bf1f      	itttt	ne
 8007a2e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007a32:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007a36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007a3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007a3e:	f000 80e2 	beq.w	8007c06 <__adddf3+0x1ee>
 8007a42:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007a46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007a4a:	bfb8      	it	lt
 8007a4c:	426d      	neglt	r5, r5
 8007a4e:	dd0c      	ble.n	8007a6a <__adddf3+0x52>
 8007a50:	442c      	add	r4, r5
 8007a52:	ea80 0202 	eor.w	r2, r0, r2
 8007a56:	ea81 0303 	eor.w	r3, r1, r3
 8007a5a:	ea82 0000 	eor.w	r0, r2, r0
 8007a5e:	ea83 0101 	eor.w	r1, r3, r1
 8007a62:	ea80 0202 	eor.w	r2, r0, r2
 8007a66:	ea81 0303 	eor.w	r3, r1, r3
 8007a6a:	2d36      	cmp	r5, #54	; 0x36
 8007a6c:	bf88      	it	hi
 8007a6e:	bd30      	pophi	{r4, r5, pc}
 8007a70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007a74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007a78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007a7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007a80:	d002      	beq.n	8007a88 <__adddf3+0x70>
 8007a82:	4240      	negs	r0, r0
 8007a84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007a88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007a8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007a90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007a94:	d002      	beq.n	8007a9c <__adddf3+0x84>
 8007a96:	4252      	negs	r2, r2
 8007a98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007a9c:	ea94 0f05 	teq	r4, r5
 8007aa0:	f000 80a7 	beq.w	8007bf2 <__adddf3+0x1da>
 8007aa4:	f1a4 0401 	sub.w	r4, r4, #1
 8007aa8:	f1d5 0e20 	rsbs	lr, r5, #32
 8007aac:	db0d      	blt.n	8007aca <__adddf3+0xb2>
 8007aae:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007ab2:	fa22 f205 	lsr.w	r2, r2, r5
 8007ab6:	1880      	adds	r0, r0, r2
 8007ab8:	f141 0100 	adc.w	r1, r1, #0
 8007abc:	fa03 f20e 	lsl.w	r2, r3, lr
 8007ac0:	1880      	adds	r0, r0, r2
 8007ac2:	fa43 f305 	asr.w	r3, r3, r5
 8007ac6:	4159      	adcs	r1, r3
 8007ac8:	e00e      	b.n	8007ae8 <__adddf3+0xd0>
 8007aca:	f1a5 0520 	sub.w	r5, r5, #32
 8007ace:	f10e 0e20 	add.w	lr, lr, #32
 8007ad2:	2a01      	cmp	r2, #1
 8007ad4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007ad8:	bf28      	it	cs
 8007ada:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007ade:	fa43 f305 	asr.w	r3, r3, r5
 8007ae2:	18c0      	adds	r0, r0, r3
 8007ae4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007ae8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007aec:	d507      	bpl.n	8007afe <__adddf3+0xe6>
 8007aee:	f04f 0e00 	mov.w	lr, #0
 8007af2:	f1dc 0c00 	rsbs	ip, ip, #0
 8007af6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007afa:	eb6e 0101 	sbc.w	r1, lr, r1
 8007afe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007b02:	d31b      	bcc.n	8007b3c <__adddf3+0x124>
 8007b04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007b08:	d30c      	bcc.n	8007b24 <__adddf3+0x10c>
 8007b0a:	0849      	lsrs	r1, r1, #1
 8007b0c:	ea5f 0030 	movs.w	r0, r0, rrx
 8007b10:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007b14:	f104 0401 	add.w	r4, r4, #1
 8007b18:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007b1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007b20:	f080 809a 	bcs.w	8007c58 <__adddf3+0x240>
 8007b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007b28:	bf08      	it	eq
 8007b2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007b2e:	f150 0000 	adcs.w	r0, r0, #0
 8007b32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007b36:	ea41 0105 	orr.w	r1, r1, r5
 8007b3a:	bd30      	pop	{r4, r5, pc}
 8007b3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007b40:	4140      	adcs	r0, r0
 8007b42:	eb41 0101 	adc.w	r1, r1, r1
 8007b46:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007b4a:	f1a4 0401 	sub.w	r4, r4, #1
 8007b4e:	d1e9      	bne.n	8007b24 <__adddf3+0x10c>
 8007b50:	f091 0f00 	teq	r1, #0
 8007b54:	bf04      	itt	eq
 8007b56:	4601      	moveq	r1, r0
 8007b58:	2000      	moveq	r0, #0
 8007b5a:	fab1 f381 	clz	r3, r1
 8007b5e:	bf08      	it	eq
 8007b60:	3320      	addeq	r3, #32
 8007b62:	f1a3 030b 	sub.w	r3, r3, #11
 8007b66:	f1b3 0220 	subs.w	r2, r3, #32
 8007b6a:	da0c      	bge.n	8007b86 <__adddf3+0x16e>
 8007b6c:	320c      	adds	r2, #12
 8007b6e:	dd08      	ble.n	8007b82 <__adddf3+0x16a>
 8007b70:	f102 0c14 	add.w	ip, r2, #20
 8007b74:	f1c2 020c 	rsb	r2, r2, #12
 8007b78:	fa01 f00c 	lsl.w	r0, r1, ip
 8007b7c:	fa21 f102 	lsr.w	r1, r1, r2
 8007b80:	e00c      	b.n	8007b9c <__adddf3+0x184>
 8007b82:	f102 0214 	add.w	r2, r2, #20
 8007b86:	bfd8      	it	le
 8007b88:	f1c2 0c20 	rsble	ip, r2, #32
 8007b8c:	fa01 f102 	lsl.w	r1, r1, r2
 8007b90:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007b94:	bfdc      	itt	le
 8007b96:	ea41 010c 	orrle.w	r1, r1, ip
 8007b9a:	4090      	lslle	r0, r2
 8007b9c:	1ae4      	subs	r4, r4, r3
 8007b9e:	bfa2      	ittt	ge
 8007ba0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007ba4:	4329      	orrge	r1, r5
 8007ba6:	bd30      	popge	{r4, r5, pc}
 8007ba8:	ea6f 0404 	mvn.w	r4, r4
 8007bac:	3c1f      	subs	r4, #31
 8007bae:	da1c      	bge.n	8007bea <__adddf3+0x1d2>
 8007bb0:	340c      	adds	r4, #12
 8007bb2:	dc0e      	bgt.n	8007bd2 <__adddf3+0x1ba>
 8007bb4:	f104 0414 	add.w	r4, r4, #20
 8007bb8:	f1c4 0220 	rsb	r2, r4, #32
 8007bbc:	fa20 f004 	lsr.w	r0, r0, r4
 8007bc0:	fa01 f302 	lsl.w	r3, r1, r2
 8007bc4:	ea40 0003 	orr.w	r0, r0, r3
 8007bc8:	fa21 f304 	lsr.w	r3, r1, r4
 8007bcc:	ea45 0103 	orr.w	r1, r5, r3
 8007bd0:	bd30      	pop	{r4, r5, pc}
 8007bd2:	f1c4 040c 	rsb	r4, r4, #12
 8007bd6:	f1c4 0220 	rsb	r2, r4, #32
 8007bda:	fa20 f002 	lsr.w	r0, r0, r2
 8007bde:	fa01 f304 	lsl.w	r3, r1, r4
 8007be2:	ea40 0003 	orr.w	r0, r0, r3
 8007be6:	4629      	mov	r1, r5
 8007be8:	bd30      	pop	{r4, r5, pc}
 8007bea:	fa21 f004 	lsr.w	r0, r1, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	bd30      	pop	{r4, r5, pc}
 8007bf2:	f094 0f00 	teq	r4, #0
 8007bf6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007bfa:	bf06      	itte	eq
 8007bfc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007c00:	3401      	addeq	r4, #1
 8007c02:	3d01      	subne	r5, #1
 8007c04:	e74e      	b.n	8007aa4 <__adddf3+0x8c>
 8007c06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007c0a:	bf18      	it	ne
 8007c0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007c10:	d029      	beq.n	8007c66 <__adddf3+0x24e>
 8007c12:	ea94 0f05 	teq	r4, r5
 8007c16:	bf08      	it	eq
 8007c18:	ea90 0f02 	teqeq	r0, r2
 8007c1c:	d005      	beq.n	8007c2a <__adddf3+0x212>
 8007c1e:	ea54 0c00 	orrs.w	ip, r4, r0
 8007c22:	bf04      	itt	eq
 8007c24:	4619      	moveq	r1, r3
 8007c26:	4610      	moveq	r0, r2
 8007c28:	bd30      	pop	{r4, r5, pc}
 8007c2a:	ea91 0f03 	teq	r1, r3
 8007c2e:	bf1e      	ittt	ne
 8007c30:	2100      	movne	r1, #0
 8007c32:	2000      	movne	r0, #0
 8007c34:	bd30      	popne	{r4, r5, pc}
 8007c36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007c3a:	d105      	bne.n	8007c48 <__adddf3+0x230>
 8007c3c:	0040      	lsls	r0, r0, #1
 8007c3e:	4149      	adcs	r1, r1
 8007c40:	bf28      	it	cs
 8007c42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007c46:	bd30      	pop	{r4, r5, pc}
 8007c48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007c4c:	bf3c      	itt	cc
 8007c4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007c52:	bd30      	popcc	{r4, r5, pc}
 8007c54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007c58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007c5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c60:	f04f 0000 	mov.w	r0, #0
 8007c64:	bd30      	pop	{r4, r5, pc}
 8007c66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007c6a:	bf1a      	itte	ne
 8007c6c:	4619      	movne	r1, r3
 8007c6e:	4610      	movne	r0, r2
 8007c70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007c74:	bf1c      	itt	ne
 8007c76:	460b      	movne	r3, r1
 8007c78:	4602      	movne	r2, r0
 8007c7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007c7e:	bf06      	itte	eq
 8007c80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007c84:	ea91 0f03 	teqeq	r1, r3
 8007c88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007c8c:	bd30      	pop	{r4, r5, pc}
 8007c8e:	bf00      	nop

08007c90 <__aeabi_ui2d>:
 8007c90:	f090 0f00 	teq	r0, #0
 8007c94:	bf04      	itt	eq
 8007c96:	2100      	moveq	r1, #0
 8007c98:	4770      	bxeq	lr
 8007c9a:	b530      	push	{r4, r5, lr}
 8007c9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007ca0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007ca4:	f04f 0500 	mov.w	r5, #0
 8007ca8:	f04f 0100 	mov.w	r1, #0
 8007cac:	e750      	b.n	8007b50 <__adddf3+0x138>
 8007cae:	bf00      	nop

08007cb0 <__aeabi_i2d>:
 8007cb0:	f090 0f00 	teq	r0, #0
 8007cb4:	bf04      	itt	eq
 8007cb6:	2100      	moveq	r1, #0
 8007cb8:	4770      	bxeq	lr
 8007cba:	b530      	push	{r4, r5, lr}
 8007cbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007cc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007cc4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007cc8:	bf48      	it	mi
 8007cca:	4240      	negmi	r0, r0
 8007ccc:	f04f 0100 	mov.w	r1, #0
 8007cd0:	e73e      	b.n	8007b50 <__adddf3+0x138>
 8007cd2:	bf00      	nop

08007cd4 <__aeabi_f2d>:
 8007cd4:	0042      	lsls	r2, r0, #1
 8007cd6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8007cde:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007ce2:	bf1f      	itttt	ne
 8007ce4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007ce8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007cec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007cf0:	4770      	bxne	lr
 8007cf2:	f092 0f00 	teq	r2, #0
 8007cf6:	bf14      	ite	ne
 8007cf8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007cfc:	4770      	bxeq	lr
 8007cfe:	b530      	push	{r4, r5, lr}
 8007d00:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007d04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007d08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007d0c:	e720      	b.n	8007b50 <__adddf3+0x138>
 8007d0e:	bf00      	nop

08007d10 <__aeabi_ul2d>:
 8007d10:	ea50 0201 	orrs.w	r2, r0, r1
 8007d14:	bf08      	it	eq
 8007d16:	4770      	bxeq	lr
 8007d18:	b530      	push	{r4, r5, lr}
 8007d1a:	f04f 0500 	mov.w	r5, #0
 8007d1e:	e00a      	b.n	8007d36 <__aeabi_l2d+0x16>

08007d20 <__aeabi_l2d>:
 8007d20:	ea50 0201 	orrs.w	r2, r0, r1
 8007d24:	bf08      	it	eq
 8007d26:	4770      	bxeq	lr
 8007d28:	b530      	push	{r4, r5, lr}
 8007d2a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007d2e:	d502      	bpl.n	8007d36 <__aeabi_l2d+0x16>
 8007d30:	4240      	negs	r0, r0
 8007d32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d36:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007d3a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007d3e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007d42:	f43f aedc 	beq.w	8007afe <__adddf3+0xe6>
 8007d46:	f04f 0203 	mov.w	r2, #3
 8007d4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007d4e:	bf18      	it	ne
 8007d50:	3203      	addne	r2, #3
 8007d52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007d56:	bf18      	it	ne
 8007d58:	3203      	addne	r2, #3
 8007d5a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007d5e:	f1c2 0320 	rsb	r3, r2, #32
 8007d62:	fa00 fc03 	lsl.w	ip, r0, r3
 8007d66:	fa20 f002 	lsr.w	r0, r0, r2
 8007d6a:	fa01 fe03 	lsl.w	lr, r1, r3
 8007d6e:	ea40 000e 	orr.w	r0, r0, lr
 8007d72:	fa21 f102 	lsr.w	r1, r1, r2
 8007d76:	4414      	add	r4, r2
 8007d78:	e6c1      	b.n	8007afe <__adddf3+0xe6>
 8007d7a:	bf00      	nop

08007d7c <__aeabi_dmul>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007d82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007d86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007d8a:	bf1d      	ittte	ne
 8007d8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007d90:	ea94 0f0c 	teqne	r4, ip
 8007d94:	ea95 0f0c 	teqne	r5, ip
 8007d98:	f000 f8de 	bleq	8007f58 <__aeabi_dmul+0x1dc>
 8007d9c:	442c      	add	r4, r5
 8007d9e:	ea81 0603 	eor.w	r6, r1, r3
 8007da2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007da6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007daa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007dae:	bf18      	it	ne
 8007db0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007db4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dbc:	d038      	beq.n	8007e30 <__aeabi_dmul+0xb4>
 8007dbe:	fba0 ce02 	umull	ip, lr, r0, r2
 8007dc2:	f04f 0500 	mov.w	r5, #0
 8007dc6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007dca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007dce:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007dd2:	f04f 0600 	mov.w	r6, #0
 8007dd6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007dda:	f09c 0f00 	teq	ip, #0
 8007dde:	bf18      	it	ne
 8007de0:	f04e 0e01 	orrne.w	lr, lr, #1
 8007de4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007de8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007dec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007df0:	d204      	bcs.n	8007dfc <__aeabi_dmul+0x80>
 8007df2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007df6:	416d      	adcs	r5, r5
 8007df8:	eb46 0606 	adc.w	r6, r6, r6
 8007dfc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007e00:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007e04:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007e08:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007e0c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007e10:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007e14:	bf88      	it	hi
 8007e16:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007e1a:	d81e      	bhi.n	8007e5a <__aeabi_dmul+0xde>
 8007e1c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007e20:	bf08      	it	eq
 8007e22:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007e26:	f150 0000 	adcs.w	r0, r0, #0
 8007e2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007e34:	ea46 0101 	orr.w	r1, r6, r1
 8007e38:	ea40 0002 	orr.w	r0, r0, r2
 8007e3c:	ea81 0103 	eor.w	r1, r1, r3
 8007e40:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007e44:	bfc2      	ittt	gt
 8007e46:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007e4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007e4e:	bd70      	popgt	{r4, r5, r6, pc}
 8007e50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007e54:	f04f 0e00 	mov.w	lr, #0
 8007e58:	3c01      	subs	r4, #1
 8007e5a:	f300 80ab 	bgt.w	8007fb4 <__aeabi_dmul+0x238>
 8007e5e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007e62:	bfde      	ittt	le
 8007e64:	2000      	movle	r0, #0
 8007e66:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007e6a:	bd70      	pople	{r4, r5, r6, pc}
 8007e6c:	f1c4 0400 	rsb	r4, r4, #0
 8007e70:	3c20      	subs	r4, #32
 8007e72:	da35      	bge.n	8007ee0 <__aeabi_dmul+0x164>
 8007e74:	340c      	adds	r4, #12
 8007e76:	dc1b      	bgt.n	8007eb0 <__aeabi_dmul+0x134>
 8007e78:	f104 0414 	add.w	r4, r4, #20
 8007e7c:	f1c4 0520 	rsb	r5, r4, #32
 8007e80:	fa00 f305 	lsl.w	r3, r0, r5
 8007e84:	fa20 f004 	lsr.w	r0, r0, r4
 8007e88:	fa01 f205 	lsl.w	r2, r1, r5
 8007e8c:	ea40 0002 	orr.w	r0, r0, r2
 8007e90:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007e94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007e98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007e9c:	fa21 f604 	lsr.w	r6, r1, r4
 8007ea0:	eb42 0106 	adc.w	r1, r2, r6
 8007ea4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007ea8:	bf08      	it	eq
 8007eaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	f1c4 040c 	rsb	r4, r4, #12
 8007eb4:	f1c4 0520 	rsb	r5, r4, #32
 8007eb8:	fa00 f304 	lsl.w	r3, r0, r4
 8007ebc:	fa20 f005 	lsr.w	r0, r0, r5
 8007ec0:	fa01 f204 	lsl.w	r2, r1, r4
 8007ec4:	ea40 0002 	orr.w	r0, r0, r2
 8007ec8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007ecc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007ed0:	f141 0100 	adc.w	r1, r1, #0
 8007ed4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007ed8:	bf08      	it	eq
 8007eda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	f1c4 0520 	rsb	r5, r4, #32
 8007ee4:	fa00 f205 	lsl.w	r2, r0, r5
 8007ee8:	ea4e 0e02 	orr.w	lr, lr, r2
 8007eec:	fa20 f304 	lsr.w	r3, r0, r4
 8007ef0:	fa01 f205 	lsl.w	r2, r1, r5
 8007ef4:	ea43 0302 	orr.w	r3, r3, r2
 8007ef8:	fa21 f004 	lsr.w	r0, r1, r4
 8007efc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007f00:	fa21 f204 	lsr.w	r2, r1, r4
 8007f04:	ea20 0002 	bic.w	r0, r0, r2
 8007f08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007f0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007f10:	bf08      	it	eq
 8007f12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	f094 0f00 	teq	r4, #0
 8007f1c:	d10f      	bne.n	8007f3e <__aeabi_dmul+0x1c2>
 8007f1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007f22:	0040      	lsls	r0, r0, #1
 8007f24:	eb41 0101 	adc.w	r1, r1, r1
 8007f28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007f2c:	bf08      	it	eq
 8007f2e:	3c01      	subeq	r4, #1
 8007f30:	d0f7      	beq.n	8007f22 <__aeabi_dmul+0x1a6>
 8007f32:	ea41 0106 	orr.w	r1, r1, r6
 8007f36:	f095 0f00 	teq	r5, #0
 8007f3a:	bf18      	it	ne
 8007f3c:	4770      	bxne	lr
 8007f3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007f42:	0052      	lsls	r2, r2, #1
 8007f44:	eb43 0303 	adc.w	r3, r3, r3
 8007f48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007f4c:	bf08      	it	eq
 8007f4e:	3d01      	subeq	r5, #1
 8007f50:	d0f7      	beq.n	8007f42 <__aeabi_dmul+0x1c6>
 8007f52:	ea43 0306 	orr.w	r3, r3, r6
 8007f56:	4770      	bx	lr
 8007f58:	ea94 0f0c 	teq	r4, ip
 8007f5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007f60:	bf18      	it	ne
 8007f62:	ea95 0f0c 	teqne	r5, ip
 8007f66:	d00c      	beq.n	8007f82 <__aeabi_dmul+0x206>
 8007f68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007f6c:	bf18      	it	ne
 8007f6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007f72:	d1d1      	bne.n	8007f18 <__aeabi_dmul+0x19c>
 8007f74:	ea81 0103 	eor.w	r1, r1, r3
 8007f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007f7c:	f04f 0000 	mov.w	r0, #0
 8007f80:	bd70      	pop	{r4, r5, r6, pc}
 8007f82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007f86:	bf06      	itte	eq
 8007f88:	4610      	moveq	r0, r2
 8007f8a:	4619      	moveq	r1, r3
 8007f8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007f90:	d019      	beq.n	8007fc6 <__aeabi_dmul+0x24a>
 8007f92:	ea94 0f0c 	teq	r4, ip
 8007f96:	d102      	bne.n	8007f9e <__aeabi_dmul+0x222>
 8007f98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007f9c:	d113      	bne.n	8007fc6 <__aeabi_dmul+0x24a>
 8007f9e:	ea95 0f0c 	teq	r5, ip
 8007fa2:	d105      	bne.n	8007fb0 <__aeabi_dmul+0x234>
 8007fa4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007fa8:	bf1c      	itt	ne
 8007faa:	4610      	movne	r0, r2
 8007fac:	4619      	movne	r1, r3
 8007fae:	d10a      	bne.n	8007fc6 <__aeabi_dmul+0x24a>
 8007fb0:	ea81 0103 	eor.w	r1, r1, r3
 8007fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007fb8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007fbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fc0:	f04f 0000 	mov.w	r0, #0
 8007fc4:	bd70      	pop	{r4, r5, r6, pc}
 8007fc6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007fca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__aeabi_ddiv>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007fd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007fda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007fde:	bf1d      	ittte	ne
 8007fe0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007fe4:	ea94 0f0c 	teqne	r4, ip
 8007fe8:	ea95 0f0c 	teqne	r5, ip
 8007fec:	f000 f8a7 	bleq	800813e <__aeabi_ddiv+0x16e>
 8007ff0:	eba4 0405 	sub.w	r4, r4, r5
 8007ff4:	ea81 0e03 	eor.w	lr, r1, r3
 8007ff8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007ffc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008000:	f000 8088 	beq.w	8008114 <__aeabi_ddiv+0x144>
 8008004:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008008:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800800c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008010:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008014:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008018:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800801c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008020:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008024:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008028:	429d      	cmp	r5, r3
 800802a:	bf08      	it	eq
 800802c:	4296      	cmpeq	r6, r2
 800802e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008032:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008036:	d202      	bcs.n	800803e <__aeabi_ddiv+0x6e>
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	ea4f 0232 	mov.w	r2, r2, rrx
 800803e:	1ab6      	subs	r6, r6, r2
 8008040:	eb65 0503 	sbc.w	r5, r5, r3
 8008044:	085b      	lsrs	r3, r3, #1
 8008046:	ea4f 0232 	mov.w	r2, r2, rrx
 800804a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800804e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008052:	ebb6 0e02 	subs.w	lr, r6, r2
 8008056:	eb75 0e03 	sbcs.w	lr, r5, r3
 800805a:	bf22      	ittt	cs
 800805c:	1ab6      	subcs	r6, r6, r2
 800805e:	4675      	movcs	r5, lr
 8008060:	ea40 000c 	orrcs.w	r0, r0, ip
 8008064:	085b      	lsrs	r3, r3, #1
 8008066:	ea4f 0232 	mov.w	r2, r2, rrx
 800806a:	ebb6 0e02 	subs.w	lr, r6, r2
 800806e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008072:	bf22      	ittt	cs
 8008074:	1ab6      	subcs	r6, r6, r2
 8008076:	4675      	movcs	r5, lr
 8008078:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008082:	ebb6 0e02 	subs.w	lr, r6, r2
 8008086:	eb75 0e03 	sbcs.w	lr, r5, r3
 800808a:	bf22      	ittt	cs
 800808c:	1ab6      	subcs	r6, r6, r2
 800808e:	4675      	movcs	r5, lr
 8008090:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	ea4f 0232 	mov.w	r2, r2, rrx
 800809a:	ebb6 0e02 	subs.w	lr, r6, r2
 800809e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80080a2:	bf22      	ittt	cs
 80080a4:	1ab6      	subcs	r6, r6, r2
 80080a6:	4675      	movcs	r5, lr
 80080a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80080ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80080b0:	d018      	beq.n	80080e4 <__aeabi_ddiv+0x114>
 80080b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80080b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80080ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80080be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80080c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80080c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80080ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80080ce:	d1c0      	bne.n	8008052 <__aeabi_ddiv+0x82>
 80080d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80080d4:	d10b      	bne.n	80080ee <__aeabi_ddiv+0x11e>
 80080d6:	ea41 0100 	orr.w	r1, r1, r0
 80080da:	f04f 0000 	mov.w	r0, #0
 80080de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80080e2:	e7b6      	b.n	8008052 <__aeabi_ddiv+0x82>
 80080e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80080e8:	bf04      	itt	eq
 80080ea:	4301      	orreq	r1, r0
 80080ec:	2000      	moveq	r0, #0
 80080ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80080f2:	bf88      	it	hi
 80080f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80080f8:	f63f aeaf 	bhi.w	8007e5a <__aeabi_dmul+0xde>
 80080fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8008100:	bf04      	itt	eq
 8008102:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008106:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800810a:	f150 0000 	adcs.w	r0, r0, #0
 800810e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008118:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800811c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008120:	bfc2      	ittt	gt
 8008122:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008126:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800812a:	bd70      	popgt	{r4, r5, r6, pc}
 800812c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008130:	f04f 0e00 	mov.w	lr, #0
 8008134:	3c01      	subs	r4, #1
 8008136:	e690      	b.n	8007e5a <__aeabi_dmul+0xde>
 8008138:	ea45 0e06 	orr.w	lr, r5, r6
 800813c:	e68d      	b.n	8007e5a <__aeabi_dmul+0xde>
 800813e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008142:	ea94 0f0c 	teq	r4, ip
 8008146:	bf08      	it	eq
 8008148:	ea95 0f0c 	teqeq	r5, ip
 800814c:	f43f af3b 	beq.w	8007fc6 <__aeabi_dmul+0x24a>
 8008150:	ea94 0f0c 	teq	r4, ip
 8008154:	d10a      	bne.n	800816c <__aeabi_ddiv+0x19c>
 8008156:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800815a:	f47f af34 	bne.w	8007fc6 <__aeabi_dmul+0x24a>
 800815e:	ea95 0f0c 	teq	r5, ip
 8008162:	f47f af25 	bne.w	8007fb0 <__aeabi_dmul+0x234>
 8008166:	4610      	mov	r0, r2
 8008168:	4619      	mov	r1, r3
 800816a:	e72c      	b.n	8007fc6 <__aeabi_dmul+0x24a>
 800816c:	ea95 0f0c 	teq	r5, ip
 8008170:	d106      	bne.n	8008180 <__aeabi_ddiv+0x1b0>
 8008172:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008176:	f43f aefd 	beq.w	8007f74 <__aeabi_dmul+0x1f8>
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	e722      	b.n	8007fc6 <__aeabi_dmul+0x24a>
 8008180:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008184:	bf18      	it	ne
 8008186:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800818a:	f47f aec5 	bne.w	8007f18 <__aeabi_dmul+0x19c>
 800818e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008192:	f47f af0d 	bne.w	8007fb0 <__aeabi_dmul+0x234>
 8008196:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800819a:	f47f aeeb 	bne.w	8007f74 <__aeabi_dmul+0x1f8>
 800819e:	e712      	b.n	8007fc6 <__aeabi_dmul+0x24a>

080081a0 <__gedf2>:
 80081a0:	f04f 3cff 	mov.w	ip, #4294967295
 80081a4:	e006      	b.n	80081b4 <__cmpdf2+0x4>
 80081a6:	bf00      	nop

080081a8 <__ledf2>:
 80081a8:	f04f 0c01 	mov.w	ip, #1
 80081ac:	e002      	b.n	80081b4 <__cmpdf2+0x4>
 80081ae:	bf00      	nop

080081b0 <__cmpdf2>:
 80081b0:	f04f 0c01 	mov.w	ip, #1
 80081b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80081b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80081bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80081c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80081c4:	bf18      	it	ne
 80081c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80081ca:	d01b      	beq.n	8008204 <__cmpdf2+0x54>
 80081cc:	b001      	add	sp, #4
 80081ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80081d2:	bf0c      	ite	eq
 80081d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80081d8:	ea91 0f03 	teqne	r1, r3
 80081dc:	bf02      	ittt	eq
 80081de:	ea90 0f02 	teqeq	r0, r2
 80081e2:	2000      	moveq	r0, #0
 80081e4:	4770      	bxeq	lr
 80081e6:	f110 0f00 	cmn.w	r0, #0
 80081ea:	ea91 0f03 	teq	r1, r3
 80081ee:	bf58      	it	pl
 80081f0:	4299      	cmppl	r1, r3
 80081f2:	bf08      	it	eq
 80081f4:	4290      	cmpeq	r0, r2
 80081f6:	bf2c      	ite	cs
 80081f8:	17d8      	asrcs	r0, r3, #31
 80081fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80081fe:	f040 0001 	orr.w	r0, r0, #1
 8008202:	4770      	bx	lr
 8008204:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800820c:	d102      	bne.n	8008214 <__cmpdf2+0x64>
 800820e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008212:	d107      	bne.n	8008224 <__cmpdf2+0x74>
 8008214:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800821c:	d1d6      	bne.n	80081cc <__cmpdf2+0x1c>
 800821e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008222:	d0d3      	beq.n	80081cc <__cmpdf2+0x1c>
 8008224:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop

0800822c <__aeabi_cdrcmple>:
 800822c:	4684      	mov	ip, r0
 800822e:	4610      	mov	r0, r2
 8008230:	4662      	mov	r2, ip
 8008232:	468c      	mov	ip, r1
 8008234:	4619      	mov	r1, r3
 8008236:	4663      	mov	r3, ip
 8008238:	e000      	b.n	800823c <__aeabi_cdcmpeq>
 800823a:	bf00      	nop

0800823c <__aeabi_cdcmpeq>:
 800823c:	b501      	push	{r0, lr}
 800823e:	f7ff ffb7 	bl	80081b0 <__cmpdf2>
 8008242:	2800      	cmp	r0, #0
 8008244:	bf48      	it	mi
 8008246:	f110 0f00 	cmnmi.w	r0, #0
 800824a:	bd01      	pop	{r0, pc}

0800824c <__aeabi_dcmpeq>:
 800824c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008250:	f7ff fff4 	bl	800823c <__aeabi_cdcmpeq>
 8008254:	bf0c      	ite	eq
 8008256:	2001      	moveq	r0, #1
 8008258:	2000      	movne	r0, #0
 800825a:	f85d fb08 	ldr.w	pc, [sp], #8
 800825e:	bf00      	nop

08008260 <__aeabi_dcmplt>:
 8008260:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008264:	f7ff ffea 	bl	800823c <__aeabi_cdcmpeq>
 8008268:	bf34      	ite	cc
 800826a:	2001      	movcc	r0, #1
 800826c:	2000      	movcs	r0, #0
 800826e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008272:	bf00      	nop

08008274 <__aeabi_dcmple>:
 8008274:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008278:	f7ff ffe0 	bl	800823c <__aeabi_cdcmpeq>
 800827c:	bf94      	ite	ls
 800827e:	2001      	movls	r0, #1
 8008280:	2000      	movhi	r0, #0
 8008282:	f85d fb08 	ldr.w	pc, [sp], #8
 8008286:	bf00      	nop

08008288 <__aeabi_dcmpge>:
 8008288:	f84d ed08 	str.w	lr, [sp, #-8]!
 800828c:	f7ff ffce 	bl	800822c <__aeabi_cdrcmple>
 8008290:	bf94      	ite	ls
 8008292:	2001      	movls	r0, #1
 8008294:	2000      	movhi	r0, #0
 8008296:	f85d fb08 	ldr.w	pc, [sp], #8
 800829a:	bf00      	nop

0800829c <__aeabi_dcmpgt>:
 800829c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80082a0:	f7ff ffc4 	bl	800822c <__aeabi_cdrcmple>
 80082a4:	bf34      	ite	cc
 80082a6:	2001      	movcc	r0, #1
 80082a8:	2000      	movcs	r0, #0
 80082aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80082ae:	bf00      	nop

080082b0 <__aeabi_d2iz>:
 80082b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80082b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80082b8:	d215      	bcs.n	80082e6 <__aeabi_d2iz+0x36>
 80082ba:	d511      	bpl.n	80082e0 <__aeabi_d2iz+0x30>
 80082bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80082c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80082c4:	d912      	bls.n	80082ec <__aeabi_d2iz+0x3c>
 80082c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80082ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80082d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80082d6:	fa23 f002 	lsr.w	r0, r3, r2
 80082da:	bf18      	it	ne
 80082dc:	4240      	negne	r0, r0
 80082de:	4770      	bx	lr
 80082e0:	f04f 0000 	mov.w	r0, #0
 80082e4:	4770      	bx	lr
 80082e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80082ea:	d105      	bne.n	80082f8 <__aeabi_d2iz+0x48>
 80082ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80082f0:	bf08      	it	eq
 80082f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80082f6:	4770      	bx	lr
 80082f8:	f04f 0000 	mov.w	r0, #0
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop

08008300 <findslot>:
 8008300:	4b0a      	ldr	r3, [pc, #40]	; (800832c <findslot+0x2c>)
 8008302:	b510      	push	{r4, lr}
 8008304:	4604      	mov	r4, r0
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	b118      	cbz	r0, 8008312 <findslot+0x12>
 800830a:	6983      	ldr	r3, [r0, #24]
 800830c:	b90b      	cbnz	r3, 8008312 <findslot+0x12>
 800830e:	f7fe fcb1 	bl	8006c74 <__sinit>
 8008312:	2c13      	cmp	r4, #19
 8008314:	d807      	bhi.n	8008326 <findslot+0x26>
 8008316:	4806      	ldr	r0, [pc, #24]	; (8008330 <findslot+0x30>)
 8008318:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 800831c:	3301      	adds	r3, #1
 800831e:	d002      	beq.n	8008326 <findslot+0x26>
 8008320:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8008324:	bd10      	pop	{r4, pc}
 8008326:	2000      	movs	r0, #0
 8008328:	bd10      	pop	{r4, pc}
 800832a:	bf00      	nop
 800832c:	1ffe88c4 	.word	0x1ffe88c4
 8008330:	1ffe89b8 	.word	0x1ffe89b8

08008334 <error>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	4605      	mov	r5, r0
 8008338:	f7fc ff24 	bl	8005184 <__errno>
 800833c:	2700      	movs	r7, #0
 800833e:	4606      	mov	r6, r0
 8008340:	2413      	movs	r4, #19
 8008342:	4620      	mov	r0, r4
 8008344:	4639      	mov	r1, r7
 8008346:	beab      	bkpt	0x00ab
 8008348:	4604      	mov	r4, r0
 800834a:	6034      	str	r4, [r6, #0]
 800834c:	4628      	mov	r0, r5
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008350 <checkerror>:
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d101      	bne.n	8008358 <checkerror+0x8>
 8008354:	f7ff bfee 	b.w	8008334 <error>
 8008358:	4770      	bx	lr

0800835a <_swiread>:
 800835a:	b530      	push	{r4, r5, lr}
 800835c:	b085      	sub	sp, #20
 800835e:	ad01      	add	r5, sp, #4
 8008360:	9001      	str	r0, [sp, #4]
 8008362:	9102      	str	r1, [sp, #8]
 8008364:	9203      	str	r2, [sp, #12]
 8008366:	2406      	movs	r4, #6
 8008368:	4620      	mov	r0, r4
 800836a:	4629      	mov	r1, r5
 800836c:	beab      	bkpt	0x00ab
 800836e:	4604      	mov	r4, r0
 8008370:	4620      	mov	r0, r4
 8008372:	f7ff ffed 	bl	8008350 <checkerror>
 8008376:	b005      	add	sp, #20
 8008378:	bd30      	pop	{r4, r5, pc}

0800837a <_read>:
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	460e      	mov	r6, r1
 800837e:	4615      	mov	r5, r2
 8008380:	f7ff ffbe 	bl	8008300 <findslot>
 8008384:	4604      	mov	r4, r0
 8008386:	b930      	cbnz	r0, 8008396 <_read+0x1c>
 8008388:	f7fc fefc 	bl	8005184 <__errno>
 800838c:	2309      	movs	r3, #9
 800838e:	6003      	str	r3, [r0, #0]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	bd70      	pop	{r4, r5, r6, pc}
 8008396:	4631      	mov	r1, r6
 8008398:	462a      	mov	r2, r5
 800839a:	6800      	ldr	r0, [r0, #0]
 800839c:	f7ff ffdd 	bl	800835a <_swiread>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	bf1f      	itttt	ne
 80083a4:	6863      	ldrne	r3, [r4, #4]
 80083a6:	1a28      	subne	r0, r5, r0
 80083a8:	181b      	addne	r3, r3, r0
 80083aa:	6063      	strne	r3, [r4, #4]
 80083ac:	bd70      	pop	{r4, r5, r6, pc}

080083ae <_swilseek>:
 80083ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083b0:	460c      	mov	r4, r1
 80083b2:	4616      	mov	r6, r2
 80083b4:	f7ff ffa4 	bl	8008300 <findslot>
 80083b8:	4605      	mov	r5, r0
 80083ba:	b918      	cbnz	r0, 80083c4 <_swilseek+0x16>
 80083bc:	f7fc fee2 	bl	8005184 <__errno>
 80083c0:	2309      	movs	r3, #9
 80083c2:	e004      	b.n	80083ce <_swilseek+0x20>
 80083c4:	2e02      	cmp	r6, #2
 80083c6:	d906      	bls.n	80083d6 <_swilseek+0x28>
 80083c8:	f7fc fedc 	bl	8005184 <__errno>
 80083cc:	2316      	movs	r3, #22
 80083ce:	6003      	str	r3, [r0, #0]
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	e026      	b.n	8008424 <_swilseek+0x76>
 80083d6:	2e01      	cmp	r6, #1
 80083d8:	d103      	bne.n	80083e2 <_swilseek+0x34>
 80083da:	6843      	ldr	r3, [r0, #4]
 80083dc:	18e4      	adds	r4, r4, r3
 80083de:	d511      	bpl.n	8008404 <_swilseek+0x56>
 80083e0:	e7f2      	b.n	80083c8 <_swilseek+0x1a>
 80083e2:	2e02      	cmp	r6, #2
 80083e4:	d10e      	bne.n	8008404 <_swilseek+0x56>
 80083e6:	af02      	add	r7, sp, #8
 80083e8:	6803      	ldr	r3, [r0, #0]
 80083ea:	f847 3d08 	str.w	r3, [r7, #-8]!
 80083ee:	260c      	movs	r6, #12
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	beab      	bkpt	0x00ab
 80083f6:	4606      	mov	r6, r0
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff ffa9 	bl	8008350 <checkerror>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d0e6      	beq.n	80083d0 <_swilseek+0x22>
 8008402:	4404      	add	r4, r0
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	466f      	mov	r7, sp
 8008408:	e88d 0018 	stmia.w	sp, {r3, r4}
 800840c:	260a      	movs	r6, #10
 800840e:	4630      	mov	r0, r6
 8008410:	4639      	mov	r1, r7
 8008412:	beab      	bkpt	0x00ab
 8008414:	4606      	mov	r6, r0
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff ff9a 	bl	8008350 <checkerror>
 800841c:	2800      	cmp	r0, #0
 800841e:	dbd7      	blt.n	80083d0 <_swilseek+0x22>
 8008420:	606c      	str	r4, [r5, #4]
 8008422:	4620      	mov	r0, r4
 8008424:	b003      	add	sp, #12
 8008426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008428 <_lseek>:
 8008428:	f7ff bfc1 	b.w	80083ae <_swilseek>

0800842c <_swiwrite>:
 800842c:	b530      	push	{r4, r5, lr}
 800842e:	b085      	sub	sp, #20
 8008430:	ad01      	add	r5, sp, #4
 8008432:	9001      	str	r0, [sp, #4]
 8008434:	9102      	str	r1, [sp, #8]
 8008436:	9203      	str	r2, [sp, #12]
 8008438:	2405      	movs	r4, #5
 800843a:	4620      	mov	r0, r4
 800843c:	4629      	mov	r1, r5
 800843e:	beab      	bkpt	0x00ab
 8008440:	4604      	mov	r4, r0
 8008442:	4620      	mov	r0, r4
 8008444:	f7ff ff84 	bl	8008350 <checkerror>
 8008448:	b005      	add	sp, #20
 800844a:	bd30      	pop	{r4, r5, pc}

0800844c <_write>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	460e      	mov	r6, r1
 8008450:	4615      	mov	r5, r2
 8008452:	f7ff ff55 	bl	8008300 <findslot>
 8008456:	4604      	mov	r4, r0
 8008458:	b920      	cbnz	r0, 8008464 <_write+0x18>
 800845a:	f7fc fe93 	bl	8005184 <__errno>
 800845e:	2309      	movs	r3, #9
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	e011      	b.n	8008488 <_write+0x3c>
 8008464:	462a      	mov	r2, r5
 8008466:	6800      	ldr	r0, [r0, #0]
 8008468:	4631      	mov	r1, r6
 800846a:	f7ff ffdf 	bl	800842c <_swiwrite>
 800846e:	1e02      	subs	r2, r0, #0
 8008470:	db0a      	blt.n	8008488 <_write+0x3c>
 8008472:	6863      	ldr	r3, [r4, #4]
 8008474:	1aa8      	subs	r0, r5, r2
 8008476:	4403      	add	r3, r0
 8008478:	4295      	cmp	r5, r2
 800847a:	6063      	str	r3, [r4, #4]
 800847c:	d106      	bne.n	800848c <_write+0x40>
 800847e:	2000      	movs	r0, #0
 8008480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008484:	f7ff bf56 	b.w	8008334 <error>
 8008488:	f04f 30ff 	mov.w	r0, #4294967295
 800848c:	bd70      	pop	{r4, r5, r6, pc}

0800848e <_swiclose>:
 800848e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008490:	ad02      	add	r5, sp, #8
 8008492:	2402      	movs	r4, #2
 8008494:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008498:	4620      	mov	r0, r4
 800849a:	4629      	mov	r1, r5
 800849c:	beab      	bkpt	0x00ab
 800849e:	4604      	mov	r4, r0
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff ff55 	bl	8008350 <checkerror>
 80084a6:	b003      	add	sp, #12
 80084a8:	bd30      	pop	{r4, r5, pc}
	...

080084ac <_close>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4605      	mov	r5, r0
 80084b0:	f7ff ff26 	bl	8008300 <findslot>
 80084b4:	4604      	mov	r4, r0
 80084b6:	b930      	cbnz	r0, 80084c6 <_close+0x1a>
 80084b8:	f7fc fe64 	bl	8005184 <__errno>
 80084bc:	2309      	movs	r3, #9
 80084be:	6003      	str	r3, [r0, #0]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	3d01      	subs	r5, #1
 80084c8:	2d01      	cmp	r5, #1
 80084ca:	d809      	bhi.n	80084e0 <_close+0x34>
 80084cc:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <_close+0x44>)
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d104      	bne.n	80084e0 <_close+0x34>
 80084d6:	f04f 33ff 	mov.w	r3, #4294967295
 80084da:	6003      	str	r3, [r0, #0]
 80084dc:	2000      	movs	r0, #0
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	f7ff ffd4 	bl	800848e <_swiclose>
 80084e6:	b910      	cbnz	r0, 80084ee <_close+0x42>
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	1ffe89b8 	.word	0x1ffe89b8

080084f4 <_swistat>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	460c      	mov	r4, r1
 80084f8:	f7ff ff02 	bl	8008300 <findslot>
 80084fc:	4606      	mov	r6, r0
 80084fe:	b930      	cbnz	r0, 800850e <_swistat+0x1a>
 8008500:	f7fc fe40 	bl	8005184 <__errno>
 8008504:	2309      	movs	r3, #9
 8008506:	6003      	str	r3, [r0, #0]
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	6863      	ldr	r3, [r4, #4]
 8008510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008514:	6063      	str	r3, [r4, #4]
 8008516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800851c:	250c      	movs	r5, #12
 800851e:	4628      	mov	r0, r5
 8008520:	4631      	mov	r1, r6
 8008522:	beab      	bkpt	0x00ab
 8008524:	4605      	mov	r5, r0
 8008526:	4628      	mov	r0, r5
 8008528:	f7ff ff12 	bl	8008350 <checkerror>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	bf1c      	itt	ne
 8008530:	6120      	strne	r0, [r4, #16]
 8008532:	2000      	movne	r0, #0
 8008534:	bd70      	pop	{r4, r5, r6, pc}

08008536 <_fstat>:
 8008536:	b538      	push	{r3, r4, r5, lr}
 8008538:	223c      	movs	r2, #60	; 0x3c
 800853a:	4605      	mov	r5, r0
 800853c:	460c      	mov	r4, r1
 800853e:	4608      	mov	r0, r1
 8008540:	2100      	movs	r1, #0
 8008542:	f7fc fe56 	bl	80051f2 <memset>
 8008546:	4628      	mov	r0, r5
 8008548:	4621      	mov	r1, r4
 800854a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800854e:	f7ff bfd1 	b.w	80084f4 <_swistat>

08008552 <_isatty>:
 8008552:	b570      	push	{r4, r5, r6, lr}
 8008554:	f7ff fed4 	bl	8008300 <findslot>
 8008558:	2509      	movs	r5, #9
 800855a:	4604      	mov	r4, r0
 800855c:	b918      	cbnz	r0, 8008566 <_isatty+0x14>
 800855e:	f7fc fe11 	bl	8005184 <__errno>
 8008562:	6005      	str	r5, [r0, #0]
 8008564:	e00f      	b.n	8008586 <_isatty+0x34>
 8008566:	4628      	mov	r0, r5
 8008568:	4621      	mov	r1, r4
 800856a:	beab      	bkpt	0x00ab
 800856c:	4604      	mov	r4, r0
 800856e:	2c01      	cmp	r4, #1
 8008570:	d009      	beq.n	8008586 <_isatty+0x34>
 8008572:	f7fc fe07 	bl	8005184 <__errno>
 8008576:	2400      	movs	r4, #0
 8008578:	4606      	mov	r6, r0
 800857a:	2513      	movs	r5, #19
 800857c:	4628      	mov	r0, r5
 800857e:	4621      	mov	r1, r4
 8008580:	beab      	bkpt	0x00ab
 8008582:	4605      	mov	r5, r0
 8008584:	6035      	str	r5, [r6, #0]
 8008586:	4620      	mov	r0, r4
 8008588:	bd70      	pop	{r4, r5, r6, pc}
	...

0800858c <Driver_USBD0>:
 800858c:	1ea9 0800 1f11 0800 214d 0800 2189 0800     ........M!...!..
 800859c:	21bd 0800 21f1 0800 2401 0800 2621 0800     .!...!...$..!&..
 80085ac:	2915 0800 244d 0800 2255 0800 22e1 0800     .)..M$..U"..."..
 80085bc:	2359 0800 2599 0800 2a85 0800 2ab1 0800     Y#...%...*...*..

080085cc <device_descriptor>:
 80085cc:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 80085dc:	0100 0000                                   ....

080085e0 <configuration_descriptor>:
 80085e0:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 80085f0:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 8008600:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 8008610:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....

08008620 <language_string>:
 8008620:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

08008688 <manufacturer_string>:
 8008688:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 8008698:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

080086f0 <product_string>:
 80086f0:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...

08008758 <DIGITAL_IO_0>:
 8008758:	8400 4802 0080 0000 0000 0001 0000 0000     ...H............
 8008768:	0000 0000                                   ....

0800876c <button>:
 800876c:	8300 4802 0010 0000 0000 0000 0000 0000     ...H............
 800877c:	0004 0000                                   ....

08008780 <mpu_table>:
 8008780:	0010 0000 0023 0305 0011 0000 0020 0302     ....#....... ...
 8008790:	0012 0000 0020 0302 0013 0000 0020 0302     .... ....... ...
 80087a0:	0014 0000 0020 0302 0015 0000 0020 0302     .... ....... ...
 80087b0:	0016 0000 0020 0302 0017 0000 0020 0302     .... ....... ...
 80087c0:	0230 0101 0000 0001 0001 0000 0000 0001     0...............
 80087d0:	0102 0101                                   ....

080087d4 <BUS_IO_0_pin_list>:
 80087d4:	8500 4802 0000 0000 8500 4802 0001 0000     ...H.......H....
 80087e4:	8500 4802 0002 0000 8500 4802 0007 0000     ...H.......H....
 80087f4:	4144 4556 4120 5050 2073 6e69 7469 6169     DAVE APPs initia
 8008804:	696c 617a 6974 6e6f 6620 6961 656c 0064     lization failed.
 8008814:	6473 6461 7361 0000 616a 6f6c 0000 0000     sdadas..jalo....
 8008824:	0043 0000                                   C...

08008828 <_global_impure_ptr>:
 8008828:	8864 1ffe 4e49 0046 6e69 0066 414e 004e     d...INF.inf.NAN.
 8008838:	616e 006e 0030 3130 3332 3534 3736 3938     nan.0.0123456789
 8008848:	4241 4443 4645 3000 3231 3433 3635 3837     ABCDEF.012345678
 8008858:	6139 6362 6564 0066 6e49 6966 696e 7974     9abcdef.Infinity
 8008868:	4e00 4e61 0000 0000                         .NaN....

08008870 <__sf_fake_stdin>:
	...

08008890 <__sf_fake_stdout>:
	...

080088b0 <__sf_fake_stderr>:
	...
 80088d0:	4f50 4953 0058 002e                         POSIX...

080088d8 <__mprec_tens>:
 80088d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80088e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80088f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008908:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008918:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008928:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008938:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008948:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008958:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008968:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008978:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008988:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008998:	9db4 79d9 7843 44ea                         ...yCx.D

080089a0 <__mprec_bigtens>:
 80089a0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80089b0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80089c0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080089c8 <p05.5277>:
 80089c8:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
 80089d8:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....
