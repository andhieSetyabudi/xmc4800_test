   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "syscalls.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .weak __dso_handle
  20              	 .section .bss.__dso_handle,"aw",%nobits
  21              	 .align 2
  24              	__dso_handle:
  25 0000 00000000 	 .space 4
  26              	 .section .text._sbrk,"ax",%progbits
  27              	 .align 2
  28              	 .global _sbrk
  29              	 .thumb
  30              	 .thumb_func
  32              	_sbrk:
  33              	.LFB0:
  34              	 .file 1 "../Libraries/Newlib/syscalls.c"
   1:../Libraries/Newlib/syscalls.c **** /**
   2:../Libraries/Newlib/syscalls.c ****  * @file syscalls.c
   3:../Libraries/Newlib/syscalls.c ****  * @brief    Newlib stubs
   4:../Libraries/Newlib/syscalls.c ****  * @version  V1.8
   5:../Libraries/Newlib/syscalls.c ****  * @date 2019-09-21
   6:../Libraries/Newlib/syscalls.c ****  *
   7:../Libraries/Newlib/syscalls.c ****  * @cond
   8:../Libraries/Newlib/syscalls.c ****  *****************************************************************************
   9:../Libraries/Newlib/syscalls.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:../Libraries/Newlib/syscalls.c ****  * All rights reserved.
  11:../Libraries/Newlib/syscalls.c ****  *
  12:../Libraries/Newlib/syscalls.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:../Libraries/Newlib/syscalls.c ****  *
  14:../Libraries/Newlib/syscalls.c ****  * Permission is hereby granted, free of charge, to any person or organization
  15:../Libraries/Newlib/syscalls.c ****  * obtaining a copy of the software and accompanying documentation covered by
  16:../Libraries/Newlib/syscalls.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:../Libraries/Newlib/syscalls.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:../Libraries/Newlib/syscalls.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:../Libraries/Newlib/syscalls.c ****  * do so, all subject to the following:
  20:../Libraries/Newlib/syscalls.c ****  *
  21:../Libraries/Newlib/syscalls.c ****  * The copyright notices in the Software and this entire statement, including
  22:../Libraries/Newlib/syscalls.c ****  * the above license grant, this restriction and the following disclaimer,
  23:../Libraries/Newlib/syscalls.c ****  * must be included in all copies of the Software, in whole or in part, and
  24:../Libraries/Newlib/syscalls.c ****  * all derivative works of the Software, unless such copies or derivative
  25:../Libraries/Newlib/syscalls.c ****  * works are solely in the form of machine-executable object code generated by
  26:../Libraries/Newlib/syscalls.c ****  * a source language processor.
  27:../Libraries/Newlib/syscalls.c ****  *
  28:../Libraries/Newlib/syscalls.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:../Libraries/Newlib/syscalls.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:../Libraries/Newlib/syscalls.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:../Libraries/Newlib/syscalls.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:../Libraries/Newlib/syscalls.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:../Libraries/Newlib/syscalls.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:../Libraries/Newlib/syscalls.c ****  * DEALINGS IN THE SOFTWARE.
  35:../Libraries/Newlib/syscalls.c ****  *
  36:../Libraries/Newlib/syscalls.c ****  * To improve the quality of the software, users are encouraged to share
  37:../Libraries/Newlib/syscalls.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:../Libraries/Newlib/syscalls.c ****  * at XMCSupport@infineon.com.
  39:../Libraries/Newlib/syscalls.c ****  *****************************************************************************
  40:../Libraries/Newlib/syscalls.c ****  *
  41:../Libraries/Newlib/syscalls.c ****  * *************************** Change history ********************************
  42:../Libraries/Newlib/syscalls.c ****  * V0.1                  : Initial version
  43:../Libraries/Newlib/syscalls.c ****  * V0.2                  : Label updates
  44:../Libraries/Newlib/syscalls.c ****  * V1.0                  : Made _sbrk device agnostic
  45:../Libraries/Newlib/syscalls.c ****  * V1.1                  : C++ support
  46:../Libraries/Newlib/syscalls.c ****  * V1.2                  : Restored compatibility with old project files
  47:../Libraries/Newlib/syscalls.c ****  * V1.3    Jan 2014, PKB : Encapsulating everything in this file for use only with GCC
  48:../Libraries/Newlib/syscalls.c ****  * V1.4 11 Dec 2015, JFT : Fix heap overflow
  49:../Libraries/Newlib/syscalls.c ****  * V1.5 09 Mar 2016, JFT : Add dso_handle to support destructors call at exit 
  50:../Libraries/Newlib/syscalls.c ****  * V1.6 20 Apr 2017, JFT : Foward declaration of __sbrk to fix link time optimization (-flto) compi
  51:../Libraries/Newlib/syscalls.c ****  * V1.7 21 Sep 2019, JFT : Fixed C++ compilation issues
  52:../Libraries/Newlib/syscalls.c ****  * V1.8 11 Nov 2020, JFT : Fix compilation with ARMCC
  53:../Libraries/Newlib/syscalls.c ****  * @endcond
  54:../Libraries/Newlib/syscalls.c ****  */
  55:../Libraries/Newlib/syscalls.c **** 
  56:../Libraries/Newlib/syscalls.c **** /*
  57:../Libraries/Newlib/syscalls.c ****  * This file contains stubs for standard C library functionality that must
  58:../Libraries/Newlib/syscalls.c ****  * typically be provided for the underlying platform.
  59:../Libraries/Newlib/syscalls.c ****  *
  60:../Libraries/Newlib/syscalls.c ****  */
  61:../Libraries/Newlib/syscalls.c **** #if defined ( __GNUC__ ) && !defined (__ARMCC_VERSION)
  62:../Libraries/Newlib/syscalls.c **** 
  63:../Libraries/Newlib/syscalls.c **** #include <stdint.h>
  64:../Libraries/Newlib/syscalls.c **** #include <errno.h>
  65:../Libraries/Newlib/syscalls.c **** #include <sys/types.h>
  66:../Libraries/Newlib/syscalls.c **** 
  67:../Libraries/Newlib/syscalls.c **** #ifdef __cplusplus
  68:../Libraries/Newlib/syscalls.c **** extern "C" {
  69:../Libraries/Newlib/syscalls.c **** #endif
  70:../Libraries/Newlib/syscalls.c **** 
  71:../Libraries/Newlib/syscalls.c **** /* Forward prototypes.  */
  72:../Libraries/Newlib/syscalls.c **** caddr_t _sbrk(int nbytes) __attribute__((externally_visible));
  73:../Libraries/Newlib/syscalls.c **** void _init(void) __attribute__((externally_visible));
  74:../Libraries/Newlib/syscalls.c **** 
  75:../Libraries/Newlib/syscalls.c **** #ifdef __cplusplus
  76:../Libraries/Newlib/syscalls.c **** }
  77:../Libraries/Newlib/syscalls.c **** #endif
  78:../Libraries/Newlib/syscalls.c **** 
  79:../Libraries/Newlib/syscalls.c **** /* c++ destructor dynamic shared object needed if -fuse-cxa-atexit is used*/
  80:../Libraries/Newlib/syscalls.c **** void *__dso_handle __attribute__ ((weak));
  81:../Libraries/Newlib/syscalls.c **** 
  82:../Libraries/Newlib/syscalls.c **** // defined in linker script
  83:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_Start;
  84:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_End;
  85:../Libraries/Newlib/syscalls.c **** caddr_t _sbrk(int nbytes)
  86:../Libraries/Newlib/syscalls.c **** {
  35              	 .loc 1 86 0
  36              	 .cfi_startproc
  37              	 
  38              	 
  39 0000 80B5     	 push {r7,lr}
  40              	 .cfi_def_cfa_offset 8
  41              	 .cfi_offset 7,-8
  42              	 .cfi_offset 14,-4
  43 0002 84B0     	 sub sp,sp,#16
  44              	 .cfi_def_cfa_offset 24
  45 0004 00AF     	 add r7,sp,#0
  46              	 .cfi_def_cfa_register 7
  47 0006 7860     	 str r0,[r7,#4]
  87:../Libraries/Newlib/syscalls.c ****   static caddr_t heap_ptr = NULL;
  88:../Libraries/Newlib/syscalls.c ****   caddr_t base;
  89:../Libraries/Newlib/syscalls.c **** 
  90:../Libraries/Newlib/syscalls.c ****   if (heap_ptr == NULL) {
  48              	 .loc 1 90 0
  49 0008 144B     	 ldr r3,.L5
  50 000a 1B68     	 ldr r3,[r3]
  51 000c 002B     	 cmp r3,#0
  52 000e 02D1     	 bne .L2
  91:../Libraries/Newlib/syscalls.c ****     heap_ptr = (caddr_t)&Heap_Bank1_Start;
  53              	 .loc 1 91 0
  54 0010 124B     	 ldr r3,.L5
  55 0012 134A     	 ldr r2,.L5+4
  56 0014 1A60     	 str r2,[r3]
  57              	.L2:
  92:../Libraries/Newlib/syscalls.c ****   }
  93:../Libraries/Newlib/syscalls.c **** 
  94:../Libraries/Newlib/syscalls.c ****   base = heap_ptr;
  58              	 .loc 1 94 0
  59 0016 114B     	 ldr r3,.L5
  60 0018 1B68     	 ldr r3,[r3]
  61 001a FB60     	 str r3,[r7,#12]
  95:../Libraries/Newlib/syscalls.c **** 
  96:../Libraries/Newlib/syscalls.c ****   /* heap word alignment */
  97:../Libraries/Newlib/syscalls.c ****   nbytes = (nbytes + 3) & ~0x3U;
  62              	 .loc 1 97 0
  63 001c 7B68     	 ldr r3,[r7,#4]
  64 001e 0333     	 adds r3,r3,#3
  65 0020 23F00303 	 bic r3,r3,#3
  66 0024 7B60     	 str r3,[r7,#4]
  98:../Libraries/Newlib/syscalls.c ****   if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
  67              	 .loc 1 98 0
  68 0026 0D4B     	 ldr r3,.L5
  69 0028 1A68     	 ldr r2,[r3]
  70 002a 7B68     	 ldr r3,[r7,#4]
  71 002c 1344     	 add r3,r3,r2
  72 002e 0D4A     	 ldr r2,.L5+8
  73 0030 9342     	 cmp r3,r2
  74 0032 07D2     	 bcs .L3
  99:../Libraries/Newlib/syscalls.c ****   {
 100:../Libraries/Newlib/syscalls.c ****     heap_ptr += nbytes;
  75              	 .loc 1 100 0
  76 0034 094B     	 ldr r3,.L5
  77 0036 1A68     	 ldr r2,[r3]
  78 0038 7B68     	 ldr r3,[r7,#4]
  79 003a 1344     	 add r3,r3,r2
  80 003c 074A     	 ldr r2,.L5
  81 003e 1360     	 str r3,[r2]
 101:../Libraries/Newlib/syscalls.c ****     return (base);
  82              	 .loc 1 101 0
  83 0040 FB68     	 ldr r3,[r7,#12]
  84 0042 06E0     	 b .L4
  85              	.L3:
 102:../Libraries/Newlib/syscalls.c ****   }
 103:../Libraries/Newlib/syscalls.c ****   else
 104:../Libraries/Newlib/syscalls.c ****   {
 105:../Libraries/Newlib/syscalls.c ****     /* Heap overflow */
 106:../Libraries/Newlib/syscalls.c ****     errno = ENOMEM;
  86              	 .loc 1 106 0
  87 0044 FFF7FEFF 	 bl __errno
  88 0048 0246     	 mov r2,r0
  89 004a 0C23     	 movs r3,#12
  90 004c 1360     	 str r3,[r2]
 107:../Libraries/Newlib/syscalls.c ****     return ((caddr_t)-1);
  91              	 .loc 1 107 0
  92 004e 4FF0FF33 	 mov r3,#-1
  93              	.L4:
 108:../Libraries/Newlib/syscalls.c ****   }
 109:../Libraries/Newlib/syscalls.c **** }
  94              	 .loc 1 109 0
  95 0052 1846     	 mov r0,r3
  96 0054 1037     	 adds r7,r7,#16
  97              	 .cfi_def_cfa_offset 8
  98 0056 BD46     	 mov sp,r7
  99              	 .cfi_def_cfa_register 13
 100              	 
 101 0058 80BD     	 pop {r7,pc}
 102              	.L6:
 103 005a 00BF     	 .align 2
 104              	.L5:
 105 005c 00000000 	 .word heap_ptr.4331
 106 0060 00000000 	 .word Heap_Bank1_Start
 107 0064 00000000 	 .word Heap_Bank1_End
 108              	 .cfi_endproc
 109              	.LFE0:
 111              	 .section .text._init,"ax",%progbits
 112              	 .align 2
 113              	 .global _init
 114              	 .thumb
 115              	 .thumb_func
 117              	_init:
 118              	.LFB1:
 110:../Libraries/Newlib/syscalls.c **** 
 111:../Libraries/Newlib/syscalls.c **** /* Init */
 112:../Libraries/Newlib/syscalls.c **** void _init(void)
 113:../Libraries/Newlib/syscalls.c **** {}
 119              	 .loc 1 113 0
 120              	 .cfi_startproc
 121              	 
 122              	 
 123              	 
 124 0000 80B4     	 push {r7}
 125              	 .cfi_def_cfa_offset 4
 126              	 .cfi_offset 7,-4
 127 0002 00AF     	 add r7,sp,#0
 128              	 .cfi_def_cfa_register 7
 129              	 .loc 1 113 0
 130 0004 BD46     	 mov sp,r7
 131              	 .cfi_def_cfa_register 13
 132              	 
 133 0006 5DF8047B 	 ldr r7,[sp],#4
 134              	 .cfi_restore 7
 135              	 .cfi_def_cfa_offset 0
 136 000a 7047     	 bx lr
 137              	 .cfi_endproc
 138              	.LFE1:
 140              	 .section .bss.heap_ptr.4331,"aw",%nobits
 141              	 .align 2
 144              	heap_ptr.4331:
 145 0000 00000000 	 .space 4
 146              	 .text
 147              	.Letext0:
 148              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\sys\\types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
    {standard input}:24     .bss.__dso_handle:00000000 __dso_handle
    {standard input}:21     .bss.__dso_handle:00000000 $d
    {standard input}:27     .text._sbrk:00000000 $t
    {standard input}:32     .text._sbrk:00000000 _sbrk
    {standard input}:105    .text._sbrk:0000005c $d
    {standard input}:144    .bss.heap_ptr.4331:00000000 heap_ptr.4331
    {standard input}:112    .text._init:00000000 $t
    {standard input}:117    .text._init:00000000 _init
    {standard input}:141    .bss.heap_ptr.4331:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__errno
Heap_Bank1_Start
Heap_Bank1_End
