   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_sdmmc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_SDMMC_GetPowerStatus
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_SDMMC_GetPowerStatus:
  26              	.LFB218:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *****************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Permission is hereby granted, free of charge, to any person or organization
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * obtaining a copy of the software and accompanying documentation covered by
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * do so, all subject to the following:
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The copyright notices in the Software and this entire statement, including
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the above license grant, this restriction and the following disclaimer,
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * must be included in all copies of the Software, in whole or in part, and
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * all derivative works of the Software, unless such copies or derivative
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * works are solely in the form of machine-executable object code generated by
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * a source language processor.
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DEALINGS IN THE SOFTWARE.
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * at XMCSupport@infineon.com.
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *****************************************************************************
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  53:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-07-11:
  56:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - XMC_SDMMC_SetDataTransferMode() shall not invoke SetDateLineTimeout() <br>
  57:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  58:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2019-05-07:
  59:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Fixed compilation warnings
  60:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  61:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  63:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  64:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  67:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  68:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  69:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  70:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  71:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  72:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  73:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  74:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  75:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  76:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  77:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  78:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  79:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  80:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  82:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  83:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  84:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  85:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  86:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  87:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  88:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  89:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  90:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  92:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  93:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  98:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  99:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
 101:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
 102:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
 104:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
 105:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
 107:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
 109:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 110:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 113:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 114:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 115:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 116:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 117:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 119:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 120:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 122:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 123:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 124:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 125:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 126:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 128:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 129:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 130:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 131:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 132:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 133:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 134:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 135:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 136:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 138:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 139:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 141:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 142:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 143:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 144:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 145:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 146:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 148:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 149:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 151:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 153:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 154:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 155:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 156:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 157:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 158:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 159:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 160:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 161:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 162:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 163:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 164:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 165:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 167:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 168:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 169:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 170:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 171:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 172:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  28              	 .loc 1 172 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	 .cfi_def_cfa_register 7
  40 0006 7860     	 str r0,[r7,#4]
 173:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 174:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 175:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  41              	 .loc 1 175 0
  42 0008 7B68     	 ldr r3,[r7,#4]
  43 000a 93F82930 	 ldrb r3,[r3,#41]
  44 000e DBB2     	 uxtb r3,r3
  45 0010 03F00103 	 and r3,r3,#1
  46 0014 002B     	 cmp r3,#0
  47 0016 14BF     	 ite ne
  48 0018 0123     	 movne r3,#1
  49 001a 0023     	 moveq r3,#0
  50 001c DBB2     	 uxtb r3,r3
 176:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  51              	 .loc 1 176 0
  52 001e 1846     	 mov r0,r3
  53 0020 0C37     	 adds r7,r7,#12
  54              	 .cfi_def_cfa_offset 4
  55 0022 BD46     	 mov sp,r7
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 0024 5DF8047B 	 ldr r7,[sp],#4
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 0028 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE218:
  65 002a 00BF     	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
  66              	 .align 2
  67              	 .global XMC_SDMMC_Enable
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_SDMMC_Enable:
  72              	.LFB219:
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 180:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 181:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 183:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  73              	 .loc 1 183 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77 0000 80B5     	 push {r7,lr}
  78              	 .cfi_def_cfa_offset 8
  79              	 .cfi_offset 7,-8
  80              	 .cfi_offset 14,-4
  81 0002 82B0     	 sub sp,sp,#8
  82              	 .cfi_def_cfa_offset 16
  83 0004 00AF     	 add r7,sp,#0
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 184:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 185:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 186:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 188:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
  86              	 .loc 1 188 0
  87 0008 0448     	 ldr r0,.L4
  88 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 189:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 191:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
  89              	 .loc 1 191 0
  90 000e 0348     	 ldr r0,.L4
  91 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 192:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 193:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  92              	 .loc 1 193 0
  93 0014 0837     	 adds r7,r7,#8
  94              	 .cfi_def_cfa_offset 8
  95 0016 BD46     	 mov sp,r7
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0018 80BD     	 pop {r7,pc}
  99              	.L5:
 100 001a 00BF     	 .align 2
 101              	.L4:
 102 001c 40000010 	 .word 268435520
 103              	 .cfi_endproc
 104              	.LFE219:
 106              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
 107              	 .align 2
 108              	 .global XMC_SDMMC_Disable
 109              	 .thumb
 110              	 .thumb_func
 112              	XMC_SDMMC_Disable:
 113              	.LFB220:
 194:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 195:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 197:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 114              	 .loc 1 197 0
 115              	 .cfi_startproc
 116              	 
 117              	 
 118 0000 80B5     	 push {r7,lr}
 119              	 .cfi_def_cfa_offset 8
 120              	 .cfi_offset 7,-8
 121              	 .cfi_offset 14,-4
 122 0002 82B0     	 sub sp,sp,#8
 123              	 .cfi_def_cfa_offset 16
 124 0004 00AF     	 add r7,sp,#0
 125              	 .cfi_def_cfa_register 7
 126 0006 7860     	 str r0,[r7,#4]
 198:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 199:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 200:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 201:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 202:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 127              	 .loc 1 202 0
 128 0008 0448     	 ldr r0,.L7
 129 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 203:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 204:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 205:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 130              	 .loc 1 205 0
 131 000e 0348     	 ldr r0,.L7
 132 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 206:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 207:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 133              	 .loc 1 207 0
 134 0014 0837     	 adds r7,r7,#8
 135              	 .cfi_def_cfa_offset 8
 136 0016 BD46     	 mov sp,r7
 137              	 .cfi_def_cfa_register 13
 138              	 
 139 0018 80BD     	 pop {r7,pc}
 140              	.L8:
 141 001a 00BF     	 .align 2
 142              	.L7:
 143 001c 40000010 	 .word 268435520
 144              	 .cfi_endproc
 145              	.LFE220:
 147              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
 148              	 .align 2
 149              	 .global XMC_SDMMC_Init
 150              	 .thumb
 151              	 .thumb_func
 153              	XMC_SDMMC_Init:
 154              	.LFB221:
 208:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 209:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 210:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 211:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 155              	 .loc 1 211 0
 156              	 .cfi_startproc
 157              	 
 158              	 
 159 0000 80B5     	 push {r7,lr}
 160              	 .cfi_def_cfa_offset 8
 161              	 .cfi_offset 7,-8
 162              	 .cfi_offset 14,-4
 163 0002 82B0     	 sub sp,sp,#8
 164              	 .cfi_def_cfa_offset 16
 165 0004 00AF     	 add r7,sp,#0
 166              	 .cfi_def_cfa_register 7
 167 0006 7860     	 str r0,[r7,#4]
 168 0008 3960     	 str r1,[r7]
 212:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 214:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 215:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 216:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 217:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 169              	 .loc 1 217 0
 170 000a 7868     	 ldr r0,[r7,#4]
 171 000c FFF7FEFF 	 bl XMC_SDMMC_Enable
 218:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 219:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 220:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 172              	 .loc 1 220 0
 173 0010 7B68     	 ldr r3,[r7,#4]
 174 0012 9B8D     	 ldrh r3,[r3,#44]
 175 0014 9AB2     	 uxth r2,r3
 176 0016 3B68     	 ldr r3,[r7]
 177 0018 5B78     	 ldrb r3,[r3,#1]
 178 001a 9BB2     	 uxth r3,r3
 179 001c 1B02     	 lsls r3,r3,#8
 180 001e 9BB2     	 uxth r3,r3
 181 0020 1343     	 orrs r3,r3,r2
 182 0022 9AB2     	 uxth r2,r3
 183 0024 7B68     	 ldr r3,[r7,#4]
 184 0026 9A85     	 strh r2,[r3,#44]
 221:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 222:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 185              	 .loc 1 223 0
 186 0028 7B68     	 ldr r3,[r7,#4]
 187 002a 93F82830 	 ldrb r3,[r3,#40]
 188 002e DBB2     	 uxtb r3,r3
 189 0030 DBB2     	 uxtb r3,r3
 190 0032 23F00203 	 bic r3,r3,#2
 191 0036 DAB2     	 uxtb r2,r3
 224:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 192              	 .loc 1 224 0
 193 0038 3B68     	 ldr r3,[r7]
 194 003a 1B78     	 ldrb r3,[r3]
 195 003c 5B00     	 lsls r3,r3,#1
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 196              	 .loc 1 223 0
 197 003e DBB2     	 uxtb r3,r3
 198 0040 1343     	 orrs r3,r3,r2
 199 0042 DBB2     	 uxtb r3,r3
 200 0044 DAB2     	 uxtb r2,r3
 201 0046 7B68     	 ldr r3,[r7,#4]
 202 0048 83F82820 	 strb r2,[r3,#40]
 225:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 226:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 203              	 .loc 1 226 0
 204 004c 0023     	 movs r3,#0
 227:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 205              	 .loc 1 227 0
 206 004e 1846     	 mov r0,r3
 207 0050 0837     	 adds r7,r7,#8
 208              	 .cfi_def_cfa_offset 8
 209 0052 BD46     	 mov sp,r7
 210              	 .cfi_def_cfa_register 13
 211              	 
 212 0054 80BD     	 pop {r7,pc}
 213              	 .cfi_endproc
 214              	.LFE221:
 216 0056 00BF     	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 217              	 .align 2
 218              	 .global XMC_SDMMC_EnableEventStatus
 219              	 .thumb
 220              	 .thumb_func
 222              	XMC_SDMMC_EnableEventStatus:
 223              	.LFB222:
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 229:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 230:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 231:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 224              	 .loc 1 231 0
 225              	 .cfi_startproc
 226              	 
 227              	 
 228              	 
 229 0000 80B4     	 push {r7}
 230              	 .cfi_def_cfa_offset 4
 231              	 .cfi_offset 7,-4
 232 0002 83B0     	 sub sp,sp,#12
 233              	 .cfi_def_cfa_offset 16
 234 0004 00AF     	 add r7,sp,#0
 235              	 .cfi_def_cfa_register 7
 236 0006 7860     	 str r0,[r7,#4]
 237 0008 3960     	 str r1,[r7]
 232:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 233:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 234:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 235:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 238              	 .loc 1 235 0
 239 000a 7B68     	 ldr r3,[r7,#4]
 240 000c 9B8E     	 ldrh r3,[r3,#52]
 241 000e 9AB2     	 uxth r2,r3
 242 0010 3B68     	 ldr r3,[r7]
 243 0012 9BB2     	 uxth r3,r3
 244 0014 1343     	 orrs r3,r3,r2
 245 0016 9AB2     	 uxth r2,r3
 246 0018 7B68     	 ldr r3,[r7,#4]
 247 001a 9A86     	 strh r2,[r3,#52]
 236:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 248              	 .loc 1 236 0
 249 001c 7B68     	 ldr r3,[r7,#4]
 250 001e DB8E     	 ldrh r3,[r3,#54]
 251 0020 9AB2     	 uxth r2,r3
 252 0022 3B68     	 ldr r3,[r7]
 253 0024 1B0C     	 lsrs r3,r3,#16
 254 0026 9BB2     	 uxth r3,r3
 255 0028 1343     	 orrs r3,r3,r2
 256 002a 9AB2     	 uxth r2,r3
 257 002c 7B68     	 ldr r3,[r7,#4]
 258 002e DA86     	 strh r2,[r3,#54]
 237:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 259              	 .loc 1 237 0
 260 0030 0C37     	 adds r7,r7,#12
 261              	 .cfi_def_cfa_offset 4
 262 0032 BD46     	 mov sp,r7
 263              	 .cfi_def_cfa_register 13
 264              	 
 265 0034 5DF8047B 	 ldr r7,[sp],#4
 266              	 .cfi_restore 7
 267              	 .cfi_def_cfa_offset 0
 268 0038 7047     	 bx lr
 269              	 .cfi_endproc
 270              	.LFE222:
 272 003a 00BF     	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 273              	 .align 2
 274              	 .global XMC_SDMMC_DisableEventStatus
 275              	 .thumb
 276              	 .thumb_func
 278              	XMC_SDMMC_DisableEventStatus:
 279              	.LFB223:
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 239:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 240:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 241:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 280              	 .loc 1 241 0
 281              	 .cfi_startproc
 282              	 
 283              	 
 284              	 
 285 0000 80B4     	 push {r7}
 286              	 .cfi_def_cfa_offset 4
 287              	 .cfi_offset 7,-4
 288 0002 83B0     	 sub sp,sp,#12
 289              	 .cfi_def_cfa_offset 16
 290 0004 00AF     	 add r7,sp,#0
 291              	 .cfi_def_cfa_register 7
 292 0006 7860     	 str r0,[r7,#4]
 293 0008 3960     	 str r1,[r7]
 242:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 243:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 244:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 245:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 294              	 .loc 1 245 0
 295 000a 7B68     	 ldr r3,[r7,#4]
 296 000c 9B8E     	 ldrh r3,[r3,#52]
 297 000e 9AB2     	 uxth r2,r3
 298 0010 3B68     	 ldr r3,[r7]
 299 0012 9BB2     	 uxth r3,r3
 300 0014 DB43     	 mvns r3,r3
 301 0016 9BB2     	 uxth r3,r3
 302 0018 1340     	 ands r3,r3,r2
 303 001a 9AB2     	 uxth r2,r3
 304 001c 7B68     	 ldr r3,[r7,#4]
 305 001e 9A86     	 strh r2,[r3,#52]
 246:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 306              	 .loc 1 246 0
 307 0020 7B68     	 ldr r3,[r7,#4]
 308 0022 DB8E     	 ldrh r3,[r3,#54]
 309 0024 9AB2     	 uxth r2,r3
 310 0026 3B68     	 ldr r3,[r7]
 311 0028 1B0C     	 lsrs r3,r3,#16
 312 002a 9BB2     	 uxth r3,r3
 313 002c DB43     	 mvns r3,r3
 314 002e 9BB2     	 uxth r3,r3
 315 0030 1340     	 ands r3,r3,r2
 316 0032 9AB2     	 uxth r2,r3
 317 0034 7B68     	 ldr r3,[r7,#4]
 318 0036 DA86     	 strh r2,[r3,#54]
 247:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 319              	 .loc 1 247 0
 320 0038 0C37     	 adds r7,r7,#12
 321              	 .cfi_def_cfa_offset 4
 322 003a BD46     	 mov sp,r7
 323              	 .cfi_def_cfa_register 13
 324              	 
 325 003c 5DF8047B 	 ldr r7,[sp],#4
 326              	 .cfi_restore 7
 327              	 .cfi_def_cfa_offset 0
 328 0040 7047     	 bx lr
 329              	 .cfi_endproc
 330              	.LFE223:
 332 0042 00BF     	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 333              	 .align 2
 334              	 .global XMC_SDMMC_EnableEvent
 335              	 .thumb
 336              	 .thumb_func
 338              	XMC_SDMMC_EnableEvent:
 339              	.LFB224:
 248:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 249:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 250:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 251:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 340              	 .loc 1 251 0
 341              	 .cfi_startproc
 342              	 
 343              	 
 344 0000 80B5     	 push {r7,lr}
 345              	 .cfi_def_cfa_offset 8
 346              	 .cfi_offset 7,-8
 347              	 .cfi_offset 14,-4
 348 0002 82B0     	 sub sp,sp,#8
 349              	 .cfi_def_cfa_offset 16
 350 0004 00AF     	 add r7,sp,#0
 351              	 .cfi_def_cfa_register 7
 352 0006 7860     	 str r0,[r7,#4]
 353 0008 3960     	 str r1,[r7]
 252:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 253:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 254:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 354              	 .loc 1 254 0
 355 000a 7868     	 ldr r0,[r7,#4]
 356 000c 3968     	 ldr r1,[r7]
 357 000e FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 255:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 256:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 358              	 .loc 1 256 0
 359 0012 7B68     	 ldr r3,[r7,#4]
 360 0014 1B8F     	 ldrh r3,[r3,#56]
 361 0016 9AB2     	 uxth r2,r3
 362 0018 3B68     	 ldr r3,[r7]
 363 001a 9BB2     	 uxth r3,r3
 364 001c 1343     	 orrs r3,r3,r2
 365 001e 9AB2     	 uxth r2,r3
 366 0020 7B68     	 ldr r3,[r7,#4]
 367 0022 1A87     	 strh r2,[r3,#56]
 257:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 368              	 .loc 1 257 0
 369 0024 7B68     	 ldr r3,[r7,#4]
 370 0026 5B8F     	 ldrh r3,[r3,#58]
 371 0028 9AB2     	 uxth r2,r3
 372 002a 3B68     	 ldr r3,[r7]
 373 002c 1B0C     	 lsrs r3,r3,#16
 374 002e 9BB2     	 uxth r3,r3
 375 0030 1343     	 orrs r3,r3,r2
 376 0032 9AB2     	 uxth r2,r3
 377 0034 7B68     	 ldr r3,[r7,#4]
 378 0036 5A87     	 strh r2,[r3,#58]
 258:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 379              	 .loc 1 258 0
 380 0038 0837     	 adds r7,r7,#8
 381              	 .cfi_def_cfa_offset 8
 382 003a BD46     	 mov sp,r7
 383              	 .cfi_def_cfa_register 13
 384              	 
 385 003c 80BD     	 pop {r7,pc}
 386              	 .cfi_endproc
 387              	.LFE224:
 389 003e 00BF     	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 390              	 .align 2
 391              	 .global XMC_SDMMC_DisableEvent
 392              	 .thumb
 393              	 .thumb_func
 395              	XMC_SDMMC_DisableEvent:
 396              	.LFB225:
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 260:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 261:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 262:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 397              	 .loc 1 262 0
 398              	 .cfi_startproc
 399              	 
 400              	 
 401              	 
 402 0000 80B4     	 push {r7}
 403              	 .cfi_def_cfa_offset 4
 404              	 .cfi_offset 7,-4
 405 0002 83B0     	 sub sp,sp,#12
 406              	 .cfi_def_cfa_offset 16
 407 0004 00AF     	 add r7,sp,#0
 408              	 .cfi_def_cfa_register 7
 409 0006 7860     	 str r0,[r7,#4]
 410 0008 3960     	 str r1,[r7]
 263:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 264:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 265:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 266:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 411              	 .loc 1 266 0
 412 000a 7B68     	 ldr r3,[r7,#4]
 413 000c 1B8F     	 ldrh r3,[r3,#56]
 414 000e 9AB2     	 uxth r2,r3
 415 0010 3B68     	 ldr r3,[r7]
 416 0012 9BB2     	 uxth r3,r3
 417 0014 DB43     	 mvns r3,r3
 418 0016 9BB2     	 uxth r3,r3
 419 0018 1340     	 ands r3,r3,r2
 420 001a 9AB2     	 uxth r2,r3
 421 001c 7B68     	 ldr r3,[r7,#4]
 422 001e 1A87     	 strh r2,[r3,#56]
 267:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 423              	 .loc 1 267 0
 424 0020 7B68     	 ldr r3,[r7,#4]
 425 0022 5B8F     	 ldrh r3,[r3,#58]
 426 0024 9AB2     	 uxth r2,r3
 427 0026 3B68     	 ldr r3,[r7]
 428 0028 1B0C     	 lsrs r3,r3,#16
 429 002a 9BB2     	 uxth r3,r3
 430 002c DB43     	 mvns r3,r3
 431 002e 9BB2     	 uxth r3,r3
 432 0030 1340     	 ands r3,r3,r2
 433 0032 9AB2     	 uxth r2,r3
 434 0034 7B68     	 ldr r3,[r7,#4]
 435 0036 5A87     	 strh r2,[r3,#58]
 268:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 436              	 .loc 1 268 0
 437 0038 0C37     	 adds r7,r7,#12
 438              	 .cfi_def_cfa_offset 4
 439 003a BD46     	 mov sp,r7
 440              	 .cfi_def_cfa_register 13
 441              	 
 442 003c 5DF8047B 	 ldr r7,[sp],#4
 443              	 .cfi_restore 7
 444              	 .cfi_def_cfa_offset 0
 445 0040 7047     	 bx lr
 446              	 .cfi_endproc
 447              	.LFE225:
 449 0042 00BF     	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 450              	 .align 2
 451              	 .global XMC_SDMMC_ClearEvent
 452              	 .thumb
 453              	 .thumb_func
 455              	XMC_SDMMC_ClearEvent:
 456              	.LFB226:
 269:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 270:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 271:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 272:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 457              	 .loc 1 272 0
 458              	 .cfi_startproc
 459              	 
 460              	 
 461              	 
 462 0000 80B4     	 push {r7}
 463              	 .cfi_def_cfa_offset 4
 464              	 .cfi_offset 7,-4
 465 0002 83B0     	 sub sp,sp,#12
 466              	 .cfi_def_cfa_offset 16
 467 0004 00AF     	 add r7,sp,#0
 468              	 .cfi_def_cfa_register 7
 469 0006 7860     	 str r0,[r7,#4]
 470 0008 3960     	 str r1,[r7]
 273:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 274:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 275:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 276:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 471              	 .loc 1 276 0
 472 000a 3B68     	 ldr r3,[r7]
 473 000c 9AB2     	 uxth r2,r3
 474 000e 7B68     	 ldr r3,[r7,#4]
 475 0010 1A86     	 strh r2,[r3,#48]
 277:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 476              	 .loc 1 277 0
 477 0012 3B68     	 ldr r3,[r7]
 478 0014 1B0C     	 lsrs r3,r3,#16
 479 0016 9AB2     	 uxth r2,r3
 480 0018 7B68     	 ldr r3,[r7,#4]
 481 001a 5A86     	 strh r2,[r3,#50]
 278:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 482              	 .loc 1 278 0
 483 001c 0C37     	 adds r7,r7,#12
 484              	 .cfi_def_cfa_offset 4
 485 001e BD46     	 mov sp,r7
 486              	 .cfi_def_cfa_register 13
 487              	 
 488 0020 5DF8047B 	 ldr r7,[sp],#4
 489              	 .cfi_restore 7
 490              	 .cfi_def_cfa_offset 0
 491 0024 7047     	 bx lr
 492              	 .cfi_endproc
 493              	.LFE226:
 495 0026 00BF     	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 496              	 .align 2
 497              	 .global XMC_SDMMC_GetEvent
 498              	 .thumb
 499              	 .thumb_func
 501              	XMC_SDMMC_GetEvent:
 502              	.LFB227:
 279:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 280:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 281:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 282:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 503              	 .loc 1 282 0
 504              	 .cfi_startproc
 505              	 
 506              	 
 507              	 
 508 0000 80B4     	 push {r7}
 509              	 .cfi_def_cfa_offset 4
 510              	 .cfi_offset 7,-4
 511 0002 85B0     	 sub sp,sp,#20
 512              	 .cfi_def_cfa_offset 24
 513 0004 00AF     	 add r7,sp,#0
 514              	 .cfi_def_cfa_register 7
 515 0006 7860     	 str r0,[r7,#4]
 516 0008 3960     	 str r1,[r7]
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 284:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 285:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 286:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 287:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 288:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 517              	 .loc 1 288 0
 518 000a 3B68     	 ldr r3,[r7]
 519 000c B3F5803F 	 cmp r3,#65536
 520 0010 0CD2     	 bcs .L17
 289:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 290:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 521              	 .loc 1 290 0
 522 0012 7B68     	 ldr r3,[r7,#4]
 523 0014 1B8E     	 ldrh r3,[r3,#48]
 524 0016 9AB2     	 uxth r2,r3
 525 0018 3B68     	 ldr r3,[r7]
 526 001a 9BB2     	 uxth r3,r3
 527 001c 1340     	 ands r3,r3,r2
 528 001e 9BB2     	 uxth r3,r3
 529 0020 002B     	 cmp r3,#0
 530 0022 14BF     	 ite ne
 531 0024 0123     	 movne r3,#1
 532 0026 0023     	 moveq r3,#0
 533 0028 FB73     	 strb r3,[r7,#15]
 534 002a 0CE0     	 b .L18
 535              	.L17:
 291:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 292:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 293:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 294:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 536              	 .loc 1 294 0
 537 002c 7B68     	 ldr r3,[r7,#4]
 538 002e 5B8E     	 ldrh r3,[r3,#50]
 539 0030 9AB2     	 uxth r2,r3
 540 0032 3B68     	 ldr r3,[r7]
 541 0034 1B0C     	 lsrs r3,r3,#16
 542 0036 9BB2     	 uxth r3,r3
 543 0038 1340     	 ands r3,r3,r2
 544 003a 9BB2     	 uxth r3,r3
 545 003c 002B     	 cmp r3,#0
 546 003e 14BF     	 ite ne
 547 0040 0123     	 movne r3,#1
 548 0042 0023     	 moveq r3,#0
 549 0044 FB73     	 strb r3,[r7,#15]
 550              	.L18:
 295:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 296:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 297:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 551              	 .loc 1 297 0
 552 0046 FB7B     	 ldrb r3,[r7,#15]
 298:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 553              	 .loc 1 298 0
 554 0048 1846     	 mov r0,r3
 555 004a 1437     	 adds r7,r7,#20
 556              	 .cfi_def_cfa_offset 4
 557 004c BD46     	 mov sp,r7
 558              	 .cfi_def_cfa_register 13
 559              	 
 560 004e 5DF8047B 	 ldr r7,[sp],#4
 561              	 .cfi_restore 7
 562              	 .cfi_def_cfa_offset 0
 563 0052 7047     	 bx lr
 564              	 .cfi_endproc
 565              	.LFE227:
 567              	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 568              	 .align 2
 569              	 .global XMC_SDMMC_GetR2Response
 570              	 .thumb
 571              	 .thumb_func
 573              	XMC_SDMMC_GetR2Response:
 574              	.LFB228:
 299:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 300:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 301:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 302:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 575              	 .loc 1 302 0
 576              	 .cfi_startproc
 577              	 
 578              	 
 579              	 
 580 0000 80B4     	 push {r7}
 581              	 .cfi_def_cfa_offset 4
 582              	 .cfi_offset 7,-4
 583 0002 83B0     	 sub sp,sp,#12
 584              	 .cfi_def_cfa_offset 16
 585 0004 00AF     	 add r7,sp,#0
 586              	 .cfi_def_cfa_register 7
 587 0006 7860     	 str r0,[r7,#4]
 588 0008 3960     	 str r1,[r7]
 303:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 304:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 305:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 589              	 .loc 1 305 0
 590 000a 7B68     	 ldr r3,[r7,#4]
 591 000c 1A69     	 ldr r2,[r3,#16]
 592 000e 3B68     	 ldr r3,[r7]
 593 0010 1A60     	 str r2,[r3]
 306:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 594              	 .loc 1 306 0
 595 0012 7B68     	 ldr r3,[r7,#4]
 596 0014 5A69     	 ldr r2,[r3,#20]
 597 0016 3B68     	 ldr r3,[r7]
 598 0018 5A60     	 str r2,[r3,#4]
 307:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 599              	 .loc 1 307 0
 600 001a 7B68     	 ldr r3,[r7,#4]
 601 001c 9A69     	 ldr r2,[r3,#24]
 602 001e 3B68     	 ldr r3,[r7]
 603 0020 9A60     	 str r2,[r3,#8]
 308:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 604              	 .loc 1 308 0
 605 0022 7B68     	 ldr r3,[r7,#4]
 606 0024 DA69     	 ldr r2,[r3,#28]
 607 0026 3B68     	 ldr r3,[r7]
 608 0028 DA60     	 str r2,[r3,#12]
 309:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 609              	 .loc 1 309 0
 610 002a 0C37     	 adds r7,r7,#12
 611              	 .cfi_def_cfa_offset 4
 612 002c BD46     	 mov sp,r7
 613              	 .cfi_def_cfa_register 13
 614              	 
 615 002e 5DF8047B 	 ldr r7,[sp],#4
 616              	 .cfi_restore 7
 617              	 .cfi_def_cfa_offset 0
 618 0032 7047     	 bx lr
 619              	 .cfi_endproc
 620              	.LFE228:
 622              	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 623              	 .align 2
 624              	 .global XMC_SDMMC_SendCommand
 625              	 .thumb
 626              	 .thumb_func
 628              	XMC_SDMMC_SendCommand:
 629              	.LFB229:
 310:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 311:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 312:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 313:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 630              	 .loc 1 313 0
 631              	 .cfi_startproc
 632              	 
 633              	 
 634              	 
 635 0000 80B4     	 push {r7}
 636              	 .cfi_def_cfa_offset 4
 637              	 .cfi_offset 7,-4
 638 0002 85B0     	 sub sp,sp,#20
 639              	 .cfi_def_cfa_offset 24
 640 0004 00AF     	 add r7,sp,#0
 641              	 .cfi_def_cfa_register 7
 642 0006 F860     	 str r0,[r7,#12]
 643 0008 B960     	 str r1,[r7,#8]
 644 000a 7A60     	 str r2,[r7,#4]
 314:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 315:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 316:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 645              	 .loc 1 316 0
 646 000c FB68     	 ldr r3,[r7,#12]
 647 000e 7A68     	 ldr r2,[r7,#4]
 648 0010 9A60     	 str r2,[r3,#8]
 317:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 649              	 .loc 1 317 0
 650 0012 BB68     	 ldr r3,[r7,#8]
 651 0014 1A88     	 ldrh r2,[r3]
 652 0016 FB68     	 ldr r3,[r7,#12]
 653 0018 DA81     	 strh r2,[r3,#14]
 318:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 319:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 654              	 .loc 1 319 0
 655 001a 0023     	 movs r3,#0
 320:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 656              	 .loc 1 320 0
 657 001c 1846     	 mov r0,r3
 658 001e 1437     	 adds r7,r7,#20
 659              	 .cfi_def_cfa_offset 4
 660 0020 BD46     	 mov sp,r7
 661              	 .cfi_def_cfa_register 13
 662              	 
 663 0022 5DF8047B 	 ldr r7,[sp],#4
 664              	 .cfi_restore 7
 665              	 .cfi_def_cfa_offset 0
 666 0026 7047     	 bx lr
 667              	 .cfi_endproc
 668              	.LFE229:
 670              	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 671              	 .align 2
 672              	 .global XMC_SDMMC_SetDataTransferMode
 673              	 .thumb
 674              	 .thumb_func
 676              	XMC_SDMMC_SetDataTransferMode:
 677              	.LFB230:
 321:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 322:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 323:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 324:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 678              	 .loc 1 324 0
 679              	 .cfi_startproc
 680              	 
 681              	 
 682              	 
 683 0000 80B4     	 push {r7}
 684              	 .cfi_def_cfa_offset 4
 685              	 .cfi_offset 7,-4
 686 0002 83B0     	 sub sp,sp,#12
 687              	 .cfi_def_cfa_offset 16
 688 0004 00AF     	 add r7,sp,#0
 689              	 .cfi_def_cfa_register 7
 690 0006 7860     	 str r0,[r7,#4]
 691 0008 3960     	 str r1,[r7]
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 327:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 328:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 692              	 .loc 1 329 0
 693 000a 3B68     	 ldr r3,[r7]
 694 000c 1B68     	 ldr r3,[r3]
 695 000e 9AB2     	 uxth r2,r3
 696 0010 7B68     	 ldr r3,[r7,#4]
 697 0012 9A80     	 strh r2,[r3,#4]
 330:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 332:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 698              	 .loc 1 332 0
 699 0014 3B68     	 ldr r3,[r7]
 700 0016 5B68     	 ldr r3,[r3,#4]
 701 0018 9AB2     	 uxth r2,r3
 702 001a 7B68     	 ldr r3,[r7,#4]
 703 001c DA80     	 strh r2,[r3,#6]
 333:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 704              	 .loc 1 335 0
 705 001e 7B68     	 ldr r3,[r7,#4]
 706 0020 9B89     	 ldrh r3,[r3,#12]
 707 0022 9BB2     	 uxth r3,r3
 708 0024 9BB2     	 uxth r3,r3
 709 0026 23F02003 	 bic r3,r3,#32
 710 002a 9AB2     	 uxth r2,r3
 336:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 711              	 .loc 1 336 0
 712 002c 3B68     	 ldr r3,[r7]
 713 002e 1B7A     	 ldrb r3,[r3,#8]
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 714              	 .loc 1 335 0
 715 0030 9BB2     	 uxth r3,r3
 716 0032 1343     	 orrs r3,r3,r2
 717 0034 9BB2     	 uxth r3,r3
 718 0036 9AB2     	 uxth r2,r3
 719 0038 7B68     	 ldr r3,[r7,#4]
 720 003a 9A81     	 strh r2,[r3,#12]
 337:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 340:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 341:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 342:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 721              	 .loc 1 342 0
 722 003c 3B68     	 ldr r3,[r7]
 723 003e 1B7A     	 ldrb r3,[r3,#8]
 724 0040 002B     	 cmp r3,#0
 725 0042 07D1     	 bne .L24
 343:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 344:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 726              	 .loc 1 344 0
 727 0044 7B68     	 ldr r3,[r7,#4]
 728 0046 9B89     	 ldrh r3,[r3,#12]
 729 0048 9BB2     	 uxth r3,r3
 730 004a 23F00203 	 bic r3,r3,#2
 731 004e 9AB2     	 uxth r2,r3
 732 0050 7B68     	 ldr r3,[r7,#4]
 733 0052 9A81     	 strh r2,[r3,#12]
 734              	.L24:
 345:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 346:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 347:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 735              	 .loc 1 348 0
 736 0054 7B68     	 ldr r3,[r7,#4]
 737 0056 9B89     	 ldrh r3,[r3,#12]
 738 0058 9BB2     	 uxth r3,r3
 739 005a 9BB2     	 uxth r3,r3
 740 005c 23F00C03 	 bic r3,r3,#12
 741 0060 9AB2     	 uxth r2,r3
 349:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 742              	 .loc 1 349 0
 743 0062 3B68     	 ldr r3,[r7]
 744 0064 5B7A     	 ldrb r3,[r3,#9]
 745 0066 9B00     	 lsls r3,r3,#2
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 746              	 .loc 1 348 0
 747 0068 9BB2     	 uxth r3,r3
 748 006a 1343     	 orrs r3,r3,r2
 749 006c 9BB2     	 uxth r3,r3
 750 006e 9AB2     	 uxth r2,r3
 751 0070 7B68     	 ldr r3,[r7,#4]
 752 0072 9A81     	 strh r2,[r3,#12]
 350:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 753              	 .loc 1 350 0
 754 0074 0C37     	 adds r7,r7,#12
 755              	 .cfi_def_cfa_offset 4
 756 0076 BD46     	 mov sp,r7
 757              	 .cfi_def_cfa_register 13
 758              	 
 759 0078 5DF8047B 	 ldr r7,[sp],#4
 760              	 .cfi_restore 7
 761              	 .cfi_def_cfa_offset 0
 762 007c 7047     	 bx lr
 763              	 .cfi_endproc
 764              	.LFE230:
 766 007e 00BF     	 .text
 767              	.Letext0:
 768              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 769              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 770              	 .file 4 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Libraries/XMCLib/inc/xmc_sdmmc.h"
 771              	 .file 5 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Libraries/XMCLib/inc/xmc4_scu.h"
 772              	 .file 6 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Libraries/CMSIS/Include/cmsis_gcc.h"
 773              	 .file 7 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Libraries/CMSIS/Include/core_cm4.h"
 774              	 .file 8 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:20     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:25     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:66     .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:71     .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:102    .text.XMC_SDMMC_Enable:0000001c $d
    {standard input}:107    .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:112    .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:143    .text.XMC_SDMMC_Disable:0000001c $d
    {standard input}:148    .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:153    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:217    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:222    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:273    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:278    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:333    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:338    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:390    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:395    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:450    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:455    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:496    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:501    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:568    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:573    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:623    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:628    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:671    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:676    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
