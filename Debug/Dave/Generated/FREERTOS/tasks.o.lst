   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "tasks.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global pxCurrentTCB
  20              	 .section .bss.pxCurrentTCB,"aw",%nobits
  21              	 .align 2
  24              	pxCurrentTCB:
  25 0000 00000000 	 .space 4
  26              	 .section .bss.pxReadyTasksLists,"aw",%nobits
  27              	 .align 2
  30              	pxReadyTasksLists:
  31 0000 00000000 	 .space 1120
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .bss.xDelayedTaskList1,"aw",%nobits
  33              	 .align 2
  36              	xDelayedTaskList1:
  37 0000 00000000 	 .space 20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              	 .section .bss.xDelayedTaskList2,"aw",%nobits
  39              	 .align 2
  42              	xDelayedTaskList2:
  43 0000 00000000 	 .space 20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              	 .section .bss.pxDelayedTaskList,"aw",%nobits
  45              	 .align 2
  48              	pxDelayedTaskList:
  49 0000 00000000 	 .space 4
  50              	 .section .bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              	 .align 2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 	 .space 4
  56              	 .section .bss.xPendingReadyList,"aw",%nobits
  57              	 .align 2
  60              	xPendingReadyList:
  61 0000 00000000 	 .space 20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              	 .section .bss.xTasksWaitingTermination,"aw",%nobits
  63              	 .align 2
  66              	xTasksWaitingTermination:
  67 0000 00000000 	 .space 20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              	 .section .bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              	 .align 2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 	 .space 4
  74              	 .section .bss.xSuspendedTaskList,"aw",%nobits
  75              	 .align 2
  78              	xSuspendedTaskList:
  79 0000 00000000 	 .space 20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              	 .section .bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              	 .align 2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 	 .space 4
  86              	 .section .bss.xTickCount,"aw",%nobits
  87              	 .align 2
  90              	xTickCount:
  91 0000 00000000 	 .space 4
  92              	 .section .bss.uxTopReadyPriority,"aw",%nobits
  93              	 .align 2
  96              	uxTopReadyPriority:
  97 0000 00000000 	 .space 4
  98              	 .section .bss.xSchedulerRunning,"aw",%nobits
  99              	 .align 2
 102              	xSchedulerRunning:
 103 0000 00000000 	 .space 4
 104              	 .section .bss.xPendedTicks,"aw",%nobits
 105              	 .align 2
 108              	xPendedTicks:
 109 0000 00000000 	 .space 4
 110              	 .section .bss.xYieldPending,"aw",%nobits
 111              	 .align 2
 114              	xYieldPending:
 115 0000 00000000 	 .space 4
 116              	 .section .bss.xNumOfOverflows,"aw",%nobits
 117              	 .align 2
 120              	xNumOfOverflows:
 121 0000 00000000 	 .space 4
 122              	 .section .bss.uxTaskNumber,"aw",%nobits
 123              	 .align 2
 126              	uxTaskNumber:
 127 0000 00000000 	 .space 4
 128              	 .section .bss.xNextTaskUnblockTime,"aw",%nobits
 129              	 .align 2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 	 .space 4
 134              	 .section .bss.xIdleTaskHandle,"aw",%nobits
 135              	 .align 2
 138              	xIdleTaskHandle:
 139 0000 00000000 	 .space 4
 140              	 .global uxTopUsedPriority
 141              	 .section .data.uxTopUsedPriority,"aw",%progbits
 142              	 .align 2
 145              	uxTopUsedPriority:
 146 0000 37000000 	 .word 55
 147              	 .section .bss.uxSchedulerSuspended,"aw",%nobits
 148              	 .align 2
 151              	uxSchedulerSuspended:
 152 0000 00000000 	 .space 4
 153              	 .section .text.xTaskCreateStatic,"ax",%progbits
 154              	 .align 2
 155              	 .global xTaskCreateStatic
 156              	 .thumb
 157              	 .thumb_func
 159              	xTaskCreateStatic:
 160              	.LFB137:
 161              	 .file 1 "../Dave/Generated/FREERTOS/tasks.c"
   1:../Dave/Generated/FREERTOS/tasks.c **** /*
   2:../Dave/Generated/FREERTOS/tasks.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/tasks.c ****  *
   5:../Dave/Generated/FREERTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/tasks.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/tasks.c ****  *
  12:../Dave/Generated/FREERTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/tasks.c ****  *
  15:../Dave/Generated/FREERTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/tasks.c ****  *
  22:../Dave/Generated/FREERTOS/tasks.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/tasks.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/tasks.c ****  *
  25:../Dave/Generated/FREERTOS/tasks.c ****  */
  26:../Dave/Generated/FREERTOS/tasks.c **** 
  27:../Dave/Generated/FREERTOS/tasks.c **** /* Standard includes. */
  28:../Dave/Generated/FREERTOS/tasks.c **** #include <stdlib.h>
  29:../Dave/Generated/FREERTOS/tasks.c **** #include <string.h>
  30:../Dave/Generated/FREERTOS/tasks.c **** 
  31:../Dave/Generated/FREERTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../Dave/Generated/FREERTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:../Dave/Generated/FREERTOS/tasks.c ****  * task.h is included from an application file. */
  34:../Dave/Generated/FREERTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../Dave/Generated/FREERTOS/tasks.c **** 
  36:../Dave/Generated/FREERTOS/tasks.c **** /* FreeRTOS includes. */
  37:../Dave/Generated/FREERTOS/tasks.c **** #include "FreeRTOS.h"
  38:../Dave/Generated/FREERTOS/tasks.c **** #include "task.h"
  39:../Dave/Generated/FREERTOS/tasks.c **** #include "timers.h"
  40:../Dave/Generated/FREERTOS/tasks.c **** #include "stack_macros.h"
  41:../Dave/Generated/FREERTOS/tasks.c **** 
  42:../Dave/Generated/FREERTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:../Dave/Generated/FREERTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:../Dave/Generated/FREERTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  45:../Dave/Generated/FREERTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:../Dave/Generated/FREERTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:../Dave/Generated/FREERTOS/tasks.c **** 
  48:../Dave/Generated/FREERTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:../Dave/Generated/FREERTOS/tasks.c ****  * functions but without including stdio.h here. */
  50:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:../Dave/Generated/FREERTOS/tasks.c **** 
  52:../Dave/Generated/FREERTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  53:../Dave/Generated/FREERTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  54:../Dave/Generated/FREERTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../Dave/Generated/FREERTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  56:../Dave/Generated/FREERTOS/tasks.c ****     #include <stdio.h>
  57:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../Dave/Generated/FREERTOS/tasks.c **** 
  59:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  60:../Dave/Generated/FREERTOS/tasks.c **** 
  61:../Dave/Generated/FREERTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  62:../Dave/Generated/FREERTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  63:../Dave/Generated/FREERTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:../Dave/Generated/FREERTOS/tasks.c **** #else
  65:../Dave/Generated/FREERTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:../Dave/Generated/FREERTOS/tasks.c **** #endif
  67:../Dave/Generated/FREERTOS/tasks.c **** 
  68:../Dave/Generated/FREERTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:../Dave/Generated/FREERTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:../Dave/Generated/FREERTOS/tasks.c **** 
  73:../Dave/Generated/FREERTOS/tasks.c **** /*
  74:../Dave/Generated/FREERTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:../Dave/Generated/FREERTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:../Dave/Generated/FREERTOS/tasks.c ****  */
  77:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:../Dave/Generated/FREERTOS/tasks.c **** 
  79:../Dave/Generated/FREERTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  80:../Dave/Generated/FREERTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:../Dave/Generated/FREERTOS/tasks.c **** 
  84:../Dave/Generated/FREERTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  85:../Dave/Generated/FREERTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  86:../Dave/Generated/FREERTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  88:../Dave/Generated/FREERTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  89:../Dave/Generated/FREERTOS/tasks.c **** #else
  90:../Dave/Generated/FREERTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:../Dave/Generated/FREERTOS/tasks.c **** #endif
  92:../Dave/Generated/FREERTOS/tasks.c **** 
  93:../Dave/Generated/FREERTOS/tasks.c **** /*
  94:../Dave/Generated/FREERTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  95:../Dave/Generated/FREERTOS/tasks.c ****  */
  96:../Dave/Generated/FREERTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  97:../Dave/Generated/FREERTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
  98:../Dave/Generated/FREERTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
  99:../Dave/Generated/FREERTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 100:../Dave/Generated/FREERTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:../Dave/Generated/FREERTOS/tasks.c **** 
 102:../Dave/Generated/FREERTOS/tasks.c **** /*
 103:../Dave/Generated/FREERTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 104:../Dave/Generated/FREERTOS/tasks.c ****  * global, rather than file scope.
 105:../Dave/Generated/FREERTOS/tasks.c ****  */
 106:../Dave/Generated/FREERTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:../Dave/Generated/FREERTOS/tasks.c ****     #define static
 108:../Dave/Generated/FREERTOS/tasks.c **** #endif
 109:../Dave/Generated/FREERTOS/tasks.c **** 
 110:../Dave/Generated/FREERTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:../Dave/Generated/FREERTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:../Dave/Generated/FREERTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 113:../Dave/Generated/FREERTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 114:../Dave/Generated/FREERTOS/tasks.c **** #endif
 115:../Dave/Generated/FREERTOS/tasks.c **** 
 116:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:../Dave/Generated/FREERTOS/tasks.c **** 
 118:../Dave/Generated/FREERTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:../Dave/Generated/FREERTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 120:../Dave/Generated/FREERTOS/tasks.c ****  * microcontroller architecture. */
 121:../Dave/Generated/FREERTOS/tasks.c **** 
 122:../Dave/Generated/FREERTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:../Dave/Generated/FREERTOS/tasks.c ****  * state task. */
 124:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:../Dave/Generated/FREERTOS/tasks.c ****     {                                               \
 126:../Dave/Generated/FREERTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:../Dave/Generated/FREERTOS/tasks.c ****         {                                           \
 128:../Dave/Generated/FREERTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 129:../Dave/Generated/FREERTOS/tasks.c ****         }                                           \
 130:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 131:../Dave/Generated/FREERTOS/tasks.c **** 
 132:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 133:../Dave/Generated/FREERTOS/tasks.c **** 
 134:../Dave/Generated/FREERTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                         \
 136:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:../Dave/Generated/FREERTOS/tasks.c ****                                                                               \
 138:../Dave/Generated/FREERTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:../Dave/Generated/FREERTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:../Dave/Generated/FREERTOS/tasks.c ****         {                                                                     \
 141:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 142:../Dave/Generated/FREERTOS/tasks.c ****             --uxTopPriority;                                                  \
 143:../Dave/Generated/FREERTOS/tasks.c ****         }                                                                     \
 144:../Dave/Generated/FREERTOS/tasks.c ****                                                                               \
 145:../Dave/Generated/FREERTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 146:../Dave/Generated/FREERTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 147:../Dave/Generated/FREERTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:../Dave/Generated/FREERTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:../Dave/Generated/FREERTOS/tasks.c **** 
 151:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 152:../Dave/Generated/FREERTOS/tasks.c **** 
 153:../Dave/Generated/FREERTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:../Dave/Generated/FREERTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 155:../Dave/Generated/FREERTOS/tasks.c ****  * being used. */
 156:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:../Dave/Generated/FREERTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:../Dave/Generated/FREERTOS/tasks.c **** 
 159:../Dave/Generated/FREERTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:../Dave/Generated/FREERTOS/tasks.c **** 
 161:../Dave/Generated/FREERTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:../Dave/Generated/FREERTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 163:../Dave/Generated/FREERTOS/tasks.c ****  * architecture being used. */
 164:../Dave/Generated/FREERTOS/tasks.c **** 
 165:../Dave/Generated/FREERTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 166:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:../Dave/Generated/FREERTOS/tasks.c **** 
 168:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 169:../Dave/Generated/FREERTOS/tasks.c **** 
 170:../Dave/Generated/FREERTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                                           \
 172:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 173:../Dave/Generated/FREERTOS/tasks.c ****                                                                                                 \
 174:../Dave/Generated/FREERTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:../Dave/Generated/FREERTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:../Dave/Generated/FREERTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:../Dave/Generated/FREERTOS/tasks.c **** 
 180:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 181:../Dave/Generated/FREERTOS/tasks.c **** 
 182:../Dave/Generated/FREERTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 183:../Dave/Generated/FREERTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:../Dave/Generated/FREERTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 185:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                                              
 187:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:../Dave/Generated/FREERTOS/tasks.c ****         {                                                                                          
 189:../Dave/Generated/FREERTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:../Dave/Generated/FREERTOS/tasks.c ****         }                                                                                          
 191:../Dave/Generated/FREERTOS/tasks.c ****     }
 192:../Dave/Generated/FREERTOS/tasks.c **** 
 193:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Dave/Generated/FREERTOS/tasks.c **** 
 195:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 196:../Dave/Generated/FREERTOS/tasks.c **** 
 197:../Dave/Generated/FREERTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:../Dave/Generated/FREERTOS/tasks.c ****  * count overflows. */
 199:../Dave/Generated/FREERTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                             \
 201:../Dave/Generated/FREERTOS/tasks.c ****         List_t * pxTemp;                                                          \
 202:../Dave/Generated/FREERTOS/tasks.c ****                                                                                   \
 203:../Dave/Generated/FREERTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:../Dave/Generated/FREERTOS/tasks.c ****                                                                                   \
 206:../Dave/Generated/FREERTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 207:../Dave/Generated/FREERTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:../Dave/Generated/FREERTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:../Dave/Generated/FREERTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 210:../Dave/Generated/FREERTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 211:../Dave/Generated/FREERTOS/tasks.c ****     }
 212:../Dave/Generated/FREERTOS/tasks.c **** 
 213:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 214:../Dave/Generated/FREERTOS/tasks.c **** 
 215:../Dave/Generated/FREERTOS/tasks.c **** /*
 216:../Dave/Generated/FREERTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:../Dave/Generated/FREERTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 218:../Dave/Generated/FREERTOS/tasks.c ****  */
 219:../Dave/Generated/FREERTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:../Dave/Generated/FREERTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:../Dave/Generated/FREERTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:../Dave/Generated/FREERTOS/tasks.c ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:../Dave/Generated/FREERTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 225:../Dave/Generated/FREERTOS/tasks.c **** 
 226:../Dave/Generated/FREERTOS/tasks.c **** /*
 227:../Dave/Generated/FREERTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 228:../Dave/Generated/FREERTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 229:../Dave/Generated/FREERTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 230:../Dave/Generated/FREERTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:../Dave/Generated/FREERTOS/tasks.c ****  */
 232:../Dave/Generated/FREERTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:../Dave/Generated/FREERTOS/tasks.c **** 
 234:../Dave/Generated/FREERTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 235:../Dave/Generated/FREERTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:../Dave/Generated/FREERTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:../Dave/Generated/FREERTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 238:../Dave/Generated/FREERTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 239:../Dave/Generated/FREERTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 240:../Dave/Generated/FREERTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:../Dave/Generated/FREERTOS/tasks.c ****  * to its original value when it is released. */
 242:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:../Dave/Generated/FREERTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:../Dave/Generated/FREERTOS/tasks.c **** #else
 245:../Dave/Generated/FREERTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:../Dave/Generated/FREERTOS/tasks.c **** #endif
 247:../Dave/Generated/FREERTOS/tasks.c **** 
 248:../Dave/Generated/FREERTOS/tasks.c **** /*
 249:../Dave/Generated/FREERTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:../Dave/Generated/FREERTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 251:../Dave/Generated/FREERTOS/tasks.c ****  * (the task's run time environment, including register values)
 252:../Dave/Generated/FREERTOS/tasks.c ****  */
 253:../Dave/Generated/FREERTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:../Dave/Generated/FREERTOS/tasks.c **** {
 255:../Dave/Generated/FREERTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:../Dave/Generated/FREERTOS/tasks.c **** 
 257:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:../Dave/Generated/FREERTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 259:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 260:../Dave/Generated/FREERTOS/tasks.c **** 
 261:../Dave/Generated/FREERTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:../Dave/Generated/FREERTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:../Dave/Generated/FREERTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:../Dave/Generated/FREERTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:../Dave/Generated/FREERTOS/tasks.c **** 
 267:../Dave/Generated/FREERTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:../Dave/Generated/FREERTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 270:../Dave/Generated/FREERTOS/tasks.c **** 
 271:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 273:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 274:../Dave/Generated/FREERTOS/tasks.c **** 
 275:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 279:../Dave/Generated/FREERTOS/tasks.c **** 
 280:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 281:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 283:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 284:../Dave/Generated/FREERTOS/tasks.c **** 
 285:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 287:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 288:../Dave/Generated/FREERTOS/tasks.c **** 
 289:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:../Dave/Generated/FREERTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 292:../Dave/Generated/FREERTOS/tasks.c **** 
 293:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 296:../Dave/Generated/FREERTOS/tasks.c **** 
 297:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:../Dave/Generated/FREERTOS/tasks.c **** 
 299:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:../Dave/Generated/FREERTOS/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 301:../Dave/Generated/FREERTOS/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:../Dave/Generated/FREERTOS/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 303:../Dave/Generated/FREERTOS/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 304:../Dave/Generated/FREERTOS/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:../Dave/Generated/FREERTOS/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 306:../Dave/Generated/FREERTOS/tasks.c ****          *
 307:../Dave/Generated/FREERTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:../Dave/Generated/FREERTOS/tasks.c ****          * for additional information. */
 309:../Dave/Generated/FREERTOS/tasks.c ****         struct  _reent xNewLib_reent;
 310:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 311:../Dave/Generated/FREERTOS/tasks.c **** 
 312:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:../Dave/Generated/FREERTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:../Dave/Generated/FREERTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 316:../Dave/Generated/FREERTOS/tasks.c **** 
 317:../Dave/Generated/FREERTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 318:../Dave/Generated/FREERTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:../Dave/Generated/FREERTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 322:../Dave/Generated/FREERTOS/tasks.c **** 
 323:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucDelayAborted;
 325:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 326:../Dave/Generated/FREERTOS/tasks.c **** 
 327:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:../Dave/Generated/FREERTOS/tasks.c ****         int iTaskErrno;
 329:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 330:../Dave/Generated/FREERTOS/tasks.c **** } tskTCB;
 331:../Dave/Generated/FREERTOS/tasks.c **** 
 332:../Dave/Generated/FREERTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:../Dave/Generated/FREERTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 334:../Dave/Generated/FREERTOS/tasks.c **** typedef tskTCB TCB_t;
 335:../Dave/Generated/FREERTOS/tasks.c **** 
 336:../Dave/Generated/FREERTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:../Dave/Generated/FREERTOS/tasks.c ****  * which static variables must be declared volatile. */
 338:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:../Dave/Generated/FREERTOS/tasks.c **** 
 340:../Dave/Generated/FREERTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 341:../Dave/Generated/FREERTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 342:../Dave/Generated/FREERTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:../Dave/Generated/FREERTOS/tasks.c ****  * the static qualifier. */
 344:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:../Dave/Generated/FREERTOS/tasks.c **** 
 351:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 352:../Dave/Generated/FREERTOS/tasks.c **** 
 353:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:../Dave/Generated/FREERTOS/tasks.c **** 
 356:../Dave/Generated/FREERTOS/tasks.c **** #endif
 357:../Dave/Generated/FREERTOS/tasks.c **** 
 358:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:../Dave/Generated/FREERTOS/tasks.c **** 
 360:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:../Dave/Generated/FREERTOS/tasks.c **** 
 362:../Dave/Generated/FREERTOS/tasks.c **** #endif
 363:../Dave/Generated/FREERTOS/tasks.c **** 
 364:../Dave/Generated/FREERTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:../Dave/Generated/FREERTOS/tasks.c ****  * the errno of the currently running task. */
 366:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:../Dave/Generated/FREERTOS/tasks.c ****     int FreeRTOS_errno = 0;
 368:../Dave/Generated/FREERTOS/tasks.c **** #endif
 369:../Dave/Generated/FREERTOS/tasks.c **** 
 370:../Dave/Generated/FREERTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 371:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 373:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 374:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:../Dave/Generated/FREERTOS/tasks.c **** 
 382:../Dave/Generated/FREERTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 383:../Dave/Generated/FREERTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 384:../Dave/Generated/FREERTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 385:../Dave/Generated/FREERTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 386:../Dave/Generated/FREERTOS/tasks.c **** 
 387:../Dave/Generated/FREERTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:../Dave/Generated/FREERTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:../Dave/Generated/FREERTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:../Dave/Generated/FREERTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:../Dave/Generated/FREERTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 392:../Dave/Generated/FREERTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 393:../Dave/Generated/FREERTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 394:../Dave/Generated/FREERTOS/tasks.c ****  * accessed from a critical section. */
 395:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 396:../Dave/Generated/FREERTOS/tasks.c **** 
 397:../Dave/Generated/FREERTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:../Dave/Generated/FREERTOS/tasks.c **** 
 399:../Dave/Generated/FREERTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 400:../Dave/Generated/FREERTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 401:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 402:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 403:../Dave/Generated/FREERTOS/tasks.c **** 
 404:../Dave/Generated/FREERTOS/tasks.c **** #endif
 405:../Dave/Generated/FREERTOS/tasks.c **** 
 406:../Dave/Generated/FREERTOS/tasks.c **** /*lint -restore */
 407:../Dave/Generated/FREERTOS/tasks.c **** 
 408:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 409:../Dave/Generated/FREERTOS/tasks.c **** 
 410:../Dave/Generated/FREERTOS/tasks.c **** /* File private functions. --------------------------------*/
 411:../Dave/Generated/FREERTOS/tasks.c **** 
 412:../Dave/Generated/FREERTOS/tasks.c **** /**
 413:../Dave/Generated/FREERTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 414:../Dave/Generated/FREERTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 415:../Dave/Generated/FREERTOS/tasks.c ****  * is in any other state.
 416:../Dave/Generated/FREERTOS/tasks.c ****  */
 417:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 418:../Dave/Generated/FREERTOS/tasks.c **** 
 419:../Dave/Generated/FREERTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 420:../Dave/Generated/FREERTOS/tasks.c **** 
 421:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 422:../Dave/Generated/FREERTOS/tasks.c **** 
 423:../Dave/Generated/FREERTOS/tasks.c **** /*
 424:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 425:../Dave/Generated/FREERTOS/tasks.c ****  * automatically upon the creation of the first task.
 426:../Dave/Generated/FREERTOS/tasks.c ****  */
 427:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 428:../Dave/Generated/FREERTOS/tasks.c **** 
 429:../Dave/Generated/FREERTOS/tasks.c **** /*
 430:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 431:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 432:../Dave/Generated/FREERTOS/tasks.c ****  * creation of the first user task.
 433:../Dave/Generated/FREERTOS/tasks.c ****  *
 434:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 435:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 436:../Dave/Generated/FREERTOS/tasks.c ****  *
 437:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 438:../Dave/Generated/FREERTOS/tasks.c ****  *
 439:../Dave/Generated/FREERTOS/tasks.c ****  */
 440:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 441:../Dave/Generated/FREERTOS/tasks.c **** 
 442:../Dave/Generated/FREERTOS/tasks.c **** /*
 443:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 444:../Dave/Generated/FREERTOS/tasks.c ****  * including the stack pointed to by the TCB.
 445:../Dave/Generated/FREERTOS/tasks.c ****  *
 446:../Dave/Generated/FREERTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 447:../Dave/Generated/FREERTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 448:../Dave/Generated/FREERTOS/tasks.c ****  */
 449:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 450:../Dave/Generated/FREERTOS/tasks.c **** 
 451:../Dave/Generated/FREERTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 452:../Dave/Generated/FREERTOS/tasks.c **** 
 453:../Dave/Generated/FREERTOS/tasks.c **** #endif
 454:../Dave/Generated/FREERTOS/tasks.c **** 
 455:../Dave/Generated/FREERTOS/tasks.c **** /*
 456:../Dave/Generated/FREERTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 457:../Dave/Generated/FREERTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 458:../Dave/Generated/FREERTOS/tasks.c ****  * and its TCB deleted.
 459:../Dave/Generated/FREERTOS/tasks.c ****  */
 460:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 461:../Dave/Generated/FREERTOS/tasks.c **** 
 462:../Dave/Generated/FREERTOS/tasks.c **** /*
 463:../Dave/Generated/FREERTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 464:../Dave/Generated/FREERTOS/tasks.c ****  * either the current or the overflow delayed task list.
 465:../Dave/Generated/FREERTOS/tasks.c ****  */
 466:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 467:../Dave/Generated/FREERTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 468:../Dave/Generated/FREERTOS/tasks.c **** 
 469:../Dave/Generated/FREERTOS/tasks.c **** /*
 470:../Dave/Generated/FREERTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 471:../Dave/Generated/FREERTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 472:../Dave/Generated/FREERTOS/tasks.c ****  * a suspended list, etc.).
 473:../Dave/Generated/FREERTOS/tasks.c ****  *
 474:../Dave/Generated/FREERTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 475:../Dave/Generated/FREERTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 476:../Dave/Generated/FREERTOS/tasks.c ****  */
 477:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 478:../Dave/Generated/FREERTOS/tasks.c **** 
 479:../Dave/Generated/FREERTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 480:../Dave/Generated/FREERTOS/tasks.c ****                                                      List_t * pxList,
 481:../Dave/Generated/FREERTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 482:../Dave/Generated/FREERTOS/tasks.c **** 
 483:../Dave/Generated/FREERTOS/tasks.c **** #endif
 484:../Dave/Generated/FREERTOS/tasks.c **** 
 485:../Dave/Generated/FREERTOS/tasks.c **** /*
 486:../Dave/Generated/FREERTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:../Dave/Generated/FREERTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:../Dave/Generated/FREERTOS/tasks.c ****  */
 489:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:../Dave/Generated/FREERTOS/tasks.c **** 
 491:../Dave/Generated/FREERTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 492:../Dave/Generated/FREERTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 493:../Dave/Generated/FREERTOS/tasks.c **** 
 494:../Dave/Generated/FREERTOS/tasks.c **** #endif
 495:../Dave/Generated/FREERTOS/tasks.c **** 
 496:../Dave/Generated/FREERTOS/tasks.c **** /*
 497:../Dave/Generated/FREERTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 498:../Dave/Generated/FREERTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 499:../Dave/Generated/FREERTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 500:../Dave/Generated/FREERTOS/tasks.c ****  */
 501:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 502:../Dave/Generated/FREERTOS/tasks.c **** 
 503:../Dave/Generated/FREERTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 504:../Dave/Generated/FREERTOS/tasks.c **** 
 505:../Dave/Generated/FREERTOS/tasks.c **** #endif
 506:../Dave/Generated/FREERTOS/tasks.c **** 
 507:../Dave/Generated/FREERTOS/tasks.c **** /*
 508:../Dave/Generated/FREERTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 509:../Dave/Generated/FREERTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 510:../Dave/Generated/FREERTOS/tasks.c ****  *
 511:../Dave/Generated/FREERTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 512:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 513:../Dave/Generated/FREERTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 514:../Dave/Generated/FREERTOS/tasks.c ****  * set to a value other than 1.
 515:../Dave/Generated/FREERTOS/tasks.c ****  */
 516:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 517:../Dave/Generated/FREERTOS/tasks.c **** 
 518:../Dave/Generated/FREERTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 519:../Dave/Generated/FREERTOS/tasks.c **** 
 520:../Dave/Generated/FREERTOS/tasks.c **** #endif
 521:../Dave/Generated/FREERTOS/tasks.c **** 
 522:../Dave/Generated/FREERTOS/tasks.c **** /*
 523:../Dave/Generated/FREERTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 524:../Dave/Generated/FREERTOS/tasks.c ****  * will exit the Blocked state.
 525:../Dave/Generated/FREERTOS/tasks.c ****  */
 526:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 527:../Dave/Generated/FREERTOS/tasks.c **** 
 528:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 529:../Dave/Generated/FREERTOS/tasks.c **** 
 530:../Dave/Generated/FREERTOS/tasks.c **** /*
 531:../Dave/Generated/FREERTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 532:../Dave/Generated/FREERTOS/tasks.c ****  * human readable tables of task information.
 533:../Dave/Generated/FREERTOS/tasks.c ****  */
 534:../Dave/Generated/FREERTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 535:../Dave/Generated/FREERTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 536:../Dave/Generated/FREERTOS/tasks.c **** 
 537:../Dave/Generated/FREERTOS/tasks.c **** #endif
 538:../Dave/Generated/FREERTOS/tasks.c **** 
 539:../Dave/Generated/FREERTOS/tasks.c **** /*
 540:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 541:../Dave/Generated/FREERTOS/tasks.c ****  * dynamically to fill in the structure's members.
 542:../Dave/Generated/FREERTOS/tasks.c ****  */
 543:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 544:../Dave/Generated/FREERTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 545:../Dave/Generated/FREERTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 546:../Dave/Generated/FREERTOS/tasks.c ****                                   void * const pvParameters,
 547:../Dave/Generated/FREERTOS/tasks.c ****                                   UBaseType_t uxPriority,
 548:../Dave/Generated/FREERTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 549:../Dave/Generated/FREERTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 550:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 551:../Dave/Generated/FREERTOS/tasks.c **** 
 552:../Dave/Generated/FREERTOS/tasks.c **** /*
 553:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 554:../Dave/Generated/FREERTOS/tasks.c ****  * under the control of the scheduler.
 555:../Dave/Generated/FREERTOS/tasks.c ****  */
 556:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 557:../Dave/Generated/FREERTOS/tasks.c **** 
 558:../Dave/Generated/FREERTOS/tasks.c **** /*
 559:../Dave/Generated/FREERTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 560:../Dave/Generated/FREERTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 561:../Dave/Generated/FREERTOS/tasks.c ****  * called by the function.
 562:../Dave/Generated/FREERTOS/tasks.c ****  */
 563:../Dave/Generated/FREERTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 564:../Dave/Generated/FREERTOS/tasks.c **** 
 565:../Dave/Generated/FREERTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 566:../Dave/Generated/FREERTOS/tasks.c **** 
 567:../Dave/Generated/FREERTOS/tasks.c **** #endif
 568:../Dave/Generated/FREERTOS/tasks.c **** 
 569:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 570:../Dave/Generated/FREERTOS/tasks.c **** 
 571:../Dave/Generated/FREERTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 572:../Dave/Generated/FREERTOS/tasks.c **** 
 573:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 574:../Dave/Generated/FREERTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 575:../Dave/Generated/FREERTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 576:../Dave/Generated/FREERTOS/tasks.c ****                                     void * const pvParameters,
 577:../Dave/Generated/FREERTOS/tasks.c ****                                     UBaseType_t uxPriority,
 578:../Dave/Generated/FREERTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 579:../Dave/Generated/FREERTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 580:../Dave/Generated/FREERTOS/tasks.c ****     {
 162              	 .loc 1 580 0
 163              	 .cfi_startproc
 164              	 
 165              	 
 166 0000 80B5     	 push {r7,lr}
 167              	.LCFI0:
 168              	 .cfi_def_cfa_offset 8
 169              	 .cfi_offset 7,-8
 170              	 .cfi_offset 14,-4
 171 0002 8EB0     	 sub sp,sp,#56
 172              	.LCFI1:
 173              	 .cfi_def_cfa_offset 64
 174 0004 04AF     	 add r7,sp,#16
 175              	.LCFI2:
 176              	 .cfi_def_cfa 7,48
 177 0006 F860     	 str r0,[r7,#12]
 178 0008 B960     	 str r1,[r7,#8]
 179 000a 7A60     	 str r2,[r7,#4]
 180 000c 3B60     	 str r3,[r7]
 581:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 582:../Dave/Generated/FREERTOS/tasks.c ****         TaskHandle_t xReturn;
 583:../Dave/Generated/FREERTOS/tasks.c **** 
 584:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 181              	 .loc 1 584 0
 182 000e 7B6B     	 ldr r3,[r7,#52]
 183 0010 002B     	 cmp r3,#0
 184 0012 09D1     	 bne .L2
 185              	.LBB141:
 186              	.LBB142:
 187              	 .file 2 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*
   2:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
   5:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * subject to the following conditions:
  11:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  12:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * copies or substantial portions of the Software.
  14:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  15:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  22:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://www.FreeRTOS.org
  23:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * https://github.com/FreeRTOS
  24:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  25:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * 1 tab == 4 spaces!
  26:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  27:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  28:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  29:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** #ifndef PORTMACRO_H
  30:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define PORTMACRO_H
  31:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  32:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef __cplusplus
  33:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern "C" {
  34:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  35:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  36:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------
  37:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * Port specific definitions.
  38:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  39:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * given hardware and compiler.
  41:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *
  42:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * These settings should not be altered.
  43:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  *-----------------------------------------------------------
  44:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  */
  45:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  46:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Type definitions. */
  47:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCHAR          char
  48:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portFLOAT         float
  49:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDOUBLE        double
  50:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portLONG          long
  51:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSHORT         short
  52:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBASE_TYPE     long
  54:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  55:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef long             BaseType_t;
  57:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  59:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint16_t     TickType_t;
  61:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #else
  63:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         typedef uint32_t     TickType_t;
  64:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  66:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not need to be guarded with a critical section. */
  68:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
  70:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  71:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  72:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specifics. */
  73:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  78:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  79:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Scheduler utilities. */
  80:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD()                                 \
  81:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {                                                   \
  82:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****                                                         \
  85:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
  90:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  91:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
  96:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
  97:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Critical section management. */
  98:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortEnterCritical( void );
  99:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     extern void vPortExitCritical( void );
 100:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 107:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 108:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 109:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****  * (which build with all the ports) will build. */
 112:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 115:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 116:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Tickless idle/low power functionality. */
 117:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 121:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 122:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 123:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Architecture specific optimisations. */
 124:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 127:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 128:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 130:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Generic helper function. */
 131:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 133:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             uint8_t ucReturn;
 134:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 135:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 137:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             return ucReturn;
 138:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 139:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 140:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Check the configuration. */
 141:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #endif
 144:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 145:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 149:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 150:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 151:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 153:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 155:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 157:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifdef configASSERT
 158:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 161:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 162:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /* portNOP() is not required by this port. */
 163:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portNOP()
 164:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 165:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #define portINLINE              __inline
 166:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 167:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #ifndef portFORCE_INLINE
 168:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     #endif
 170:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 171:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 173:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         BaseType_t xReturn;
 175:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 176:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 179:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 181:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdFALSE;
 182:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 183:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         else
 184:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         {
 185:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             xReturn = pdTRUE;
 186:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         }
 187:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 188:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return xReturn;
 189:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 190:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 191:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 192:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 193:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 195:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulNewBASEPRI;
 196:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 188              	 .loc 2 197 0 discriminator 1
 189              	
 190 0014 4FF0FC03 	 mov r3,#252
 191 0018 83F31188 	 msr basepri,r3
 192 001c BFF36F8F 	 isb 
 193 0020 BFF34F8F 	 dsb 
 194              	
 195              	
 196              	 .thumb
 197 0024 3B62     	 str r3,[r7,#32]
 198              	.L3:
 199              	.LBE142:
 200              	.LBE141:
 201              	 .loc 1 584 0 discriminator 1
 202 0026 FEE7     	 b .L3
 203              	.L2:
 585:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 204              	 .loc 1 585 0
 205 0028 BB6B     	 ldr r3,[r7,#56]
 206 002a 002B     	 cmp r3,#0
 207 002c 09D1     	 bne .L4
 208              	.LBB143:
 209              	.LBB144:
 210              	 .loc 2 197 0 discriminator 1
 211              	
 212 002e 4FF0FC03 	 mov r3,#252
 213 0032 83F31188 	 msr basepri,r3
 214 0036 BFF36F8F 	 isb 
 215 003a BFF34F8F 	 dsb 
 216              	
 217              	
 218              	 .thumb
 219 003e FB61     	 str r3,[r7,#28]
 220              	.L5:
 221              	.LBE144:
 222              	.LBE143:
 223              	 .loc 1 585 0 discriminator 2
 224 0040 FEE7     	 b .L5
 225              	.L4:
 226              	.LBB145:
 586:../Dave/Generated/FREERTOS/tasks.c **** 
 587:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 588:../Dave/Generated/FREERTOS/tasks.c ****             {
 589:../Dave/Generated/FREERTOS/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 590:../Dave/Generated/FREERTOS/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 591:../Dave/Generated/FREERTOS/tasks.c ****                  * structure. */
 592:../Dave/Generated/FREERTOS/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 227              	 .loc 1 592 0
 228 0042 7023     	 movs r3,#112
 229 0044 3B61     	 str r3,[r7,#16]
 593:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 230              	 .loc 1 593 0
 231 0046 3B69     	 ldr r3,[r7,#16]
 232 0048 702B     	 cmp r3,#112
 233 004a 09D0     	 beq .L6
 234              	.LBB146:
 235              	.LBB147:
 236              	 .loc 2 197 0 discriminator 1
 237              	
 238 004c 4FF0FC03 	 mov r3,#252
 239 0050 83F31188 	 msr basepri,r3
 240 0054 BFF36F8F 	 isb 
 241 0058 BFF34F8F 	 dsb 
 242              	
 243              	
 244              	 .thumb
 245 005c BB61     	 str r3,[r7,#24]
 246              	.L7:
 247              	.LBE147:
 248              	.LBE146:
 249              	 .loc 1 593 0 discriminator 3
 250 005e FEE7     	 b .L7
 251              	.L6:
 594:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 252              	 .loc 1 594 0
 253 0060 3B69     	 ldr r3,[r7,#16]
 254              	.LBE145:
 595:../Dave/Generated/FREERTOS/tasks.c ****             }
 596:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 597:../Dave/Generated/FREERTOS/tasks.c **** 
 598:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 255              	 .loc 1 598 0
 256 0062 BB6B     	 ldr r3,[r7,#56]
 257 0064 002B     	 cmp r3,#0
 258 0066 1ED0     	 beq .L8
 259              	 .loc 1 598 0 is_stmt 0 discriminator 1
 260 0068 7B6B     	 ldr r3,[r7,#52]
 261 006a 002B     	 cmp r3,#0
 262 006c 1BD0     	 beq .L8
 599:../Dave/Generated/FREERTOS/tasks.c ****         {
 600:../Dave/Generated/FREERTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 601:../Dave/Generated/FREERTOS/tasks.c ****              * function - use them. */
 602:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 263              	 .loc 1 602 0 is_stmt 1
 264 006e BB6B     	 ldr r3,[r7,#56]
 265 0070 7B62     	 str r3,[r7,#36]
 603:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 266              	 .loc 1 603 0
 267 0072 7B6A     	 ldr r3,[r7,#36]
 268 0074 7A6B     	 ldr r2,[r7,#52]
 269 0076 1A63     	 str r2,[r3,#48]
 604:../Dave/Generated/FREERTOS/tasks.c **** 
 605:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 606:../Dave/Generated/FREERTOS/tasks.c ****                 {
 607:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 608:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 609:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 270              	 .loc 1 609 0
 271 0078 7B6A     	 ldr r3,[r7,#36]
 272 007a 0222     	 movs r2,#2
 273 007c 83F86D20 	 strb r2,[r3,#109]
 610:../Dave/Generated/FREERTOS/tasks.c ****                 }
 611:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 612:../Dave/Generated/FREERTOS/tasks.c **** 
 613:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 274              	 .loc 1 613 0
 275 0080 3B6B     	 ldr r3,[r7,#48]
 276 0082 0093     	 str r3,[sp]
 277 0084 07F11403 	 add r3,r7,#20
 278 0088 0193     	 str r3,[sp,#4]
 279 008a 7B6A     	 ldr r3,[r7,#36]
 280 008c 0293     	 str r3,[sp,#8]
 281 008e 0023     	 movs r3,#0
 282 0090 0393     	 str r3,[sp,#12]
 283 0092 F868     	 ldr r0,[r7,#12]
 284 0094 B968     	 ldr r1,[r7,#8]
 285 0096 7A68     	 ldr r2,[r7,#4]
 286 0098 3B68     	 ldr r3,[r7]
 287 009a FFF7FEFF 	 bl prvInitialiseNewTask
 614:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 288              	 .loc 1 614 0
 289 009e 786A     	 ldr r0,[r7,#36]
 290 00a0 FFF7FEFF 	 bl prvAddNewTaskToReadyList
 291 00a4 01E0     	 b .L9
 292              	.L8:
 615:../Dave/Generated/FREERTOS/tasks.c ****         }
 616:../Dave/Generated/FREERTOS/tasks.c ****         else
 617:../Dave/Generated/FREERTOS/tasks.c ****         {
 618:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = NULL;
 293              	 .loc 1 618 0
 294 00a6 0023     	 movs r3,#0
 295 00a8 7B61     	 str r3,[r7,#20]
 296              	.L9:
 619:../Dave/Generated/FREERTOS/tasks.c ****         }
 620:../Dave/Generated/FREERTOS/tasks.c **** 
 621:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 297              	 .loc 1 621 0
 298 00aa 7B69     	 ldr r3,[r7,#20]
 622:../Dave/Generated/FREERTOS/tasks.c ****     }
 299              	 .loc 1 622 0
 300 00ac 1846     	 mov r0,r3
 301 00ae 2837     	 adds r7,r7,#40
 302              	.LCFI3:
 303              	 .cfi_def_cfa_offset 8
 304 00b0 BD46     	 mov sp,r7
 305              	.LCFI4:
 306              	 .cfi_def_cfa_register 13
 307              	 
 308 00b2 80BD     	 pop {r7,pc}
 309              	 .cfi_endproc
 310              	.LFE137:
 312              	 .section .text.xTaskCreate,"ax",%progbits
 313              	 .align 2
 314              	 .global xTaskCreate
 315              	 .thumb
 316              	 .thumb_func
 318              	xTaskCreate:
 319              	.LFB138:
 623:../Dave/Generated/FREERTOS/tasks.c **** 
 624:../Dave/Generated/FREERTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 625:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 626:../Dave/Generated/FREERTOS/tasks.c **** 
 627:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 628:../Dave/Generated/FREERTOS/tasks.c **** 
 629:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 630:../Dave/Generated/FREERTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 631:../Dave/Generated/FREERTOS/tasks.c ****     {
 632:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 633:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 634:../Dave/Generated/FREERTOS/tasks.c **** 
 635:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 636:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 637:../Dave/Generated/FREERTOS/tasks.c **** 
 638:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 639:../Dave/Generated/FREERTOS/tasks.c ****         {
 640:../Dave/Generated/FREERTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 641:../Dave/Generated/FREERTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 642:../Dave/Generated/FREERTOS/tasks.c ****              * not static allocation is being used. */
 643:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 644:../Dave/Generated/FREERTOS/tasks.c **** 
 645:../Dave/Generated/FREERTOS/tasks.c ****             /* Store the stack location in the TCB. */
 646:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 647:../Dave/Generated/FREERTOS/tasks.c **** 
 648:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 649:../Dave/Generated/FREERTOS/tasks.c ****                 {
 650:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 651:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 652:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 653:../Dave/Generated/FREERTOS/tasks.c ****                 }
 654:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 655:../Dave/Generated/FREERTOS/tasks.c **** 
 656:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 657:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 658:../Dave/Generated/FREERTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 659:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 660:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 661:../Dave/Generated/FREERTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 662:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 663:../Dave/Generated/FREERTOS/tasks.c **** 
 664:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 665:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdPASS;
 666:../Dave/Generated/FREERTOS/tasks.c ****         }
 667:../Dave/Generated/FREERTOS/tasks.c **** 
 668:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 669:../Dave/Generated/FREERTOS/tasks.c ****     }
 670:../Dave/Generated/FREERTOS/tasks.c **** 
 671:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 672:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:../Dave/Generated/FREERTOS/tasks.c **** 
 674:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 675:../Dave/Generated/FREERTOS/tasks.c **** 
 676:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 677:../Dave/Generated/FREERTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 678:../Dave/Generated/FREERTOS/tasks.c ****     {
 679:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 680:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:../Dave/Generated/FREERTOS/tasks.c **** 
 682:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 683:../Dave/Generated/FREERTOS/tasks.c **** 
 684:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 685:../Dave/Generated/FREERTOS/tasks.c ****         {
 686:../Dave/Generated/FREERTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 687:../Dave/Generated/FREERTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 688:../Dave/Generated/FREERTOS/tasks.c ****              * not static allocation is being used. */
 689:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:../Dave/Generated/FREERTOS/tasks.c **** 
 691:../Dave/Generated/FREERTOS/tasks.c ****             if( pxNewTCB != NULL )
 692:../Dave/Generated/FREERTOS/tasks.c ****             {
 693:../Dave/Generated/FREERTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 694:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:../Dave/Generated/FREERTOS/tasks.c **** 
 696:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 697:../Dave/Generated/FREERTOS/tasks.c ****                     {
 698:../Dave/Generated/FREERTOS/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 699:../Dave/Generated/FREERTOS/tasks.c ****                          * this task had a statically allocated stack in case it is
 700:../Dave/Generated/FREERTOS/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 701:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:../Dave/Generated/FREERTOS/tasks.c ****                     }
 703:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 704:../Dave/Generated/FREERTOS/tasks.c **** 
 705:../Dave/Generated/FREERTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 706:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 707:../Dave/Generated/FREERTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 708:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 709:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 710:../Dave/Generated/FREERTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 711:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 712:../Dave/Generated/FREERTOS/tasks.c **** 
 713:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 714:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 715:../Dave/Generated/FREERTOS/tasks.c ****             }
 716:../Dave/Generated/FREERTOS/tasks.c ****         }
 717:../Dave/Generated/FREERTOS/tasks.c **** 
 718:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 719:../Dave/Generated/FREERTOS/tasks.c ****     }
 720:../Dave/Generated/FREERTOS/tasks.c **** 
 721:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 723:../Dave/Generated/FREERTOS/tasks.c **** 
 724:../Dave/Generated/FREERTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:../Dave/Generated/FREERTOS/tasks.c **** 
 726:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 727:../Dave/Generated/FREERTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 728:../Dave/Generated/FREERTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 729:../Dave/Generated/FREERTOS/tasks.c ****                             void * const pvParameters,
 730:../Dave/Generated/FREERTOS/tasks.c ****                             UBaseType_t uxPriority,
 731:../Dave/Generated/FREERTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 732:../Dave/Generated/FREERTOS/tasks.c ****     {
 320              	 .loc 1 732 0
 321              	 .cfi_startproc
 322              	 
 323              	 
 324 0000 80B5     	 push {r7,lr}
 325              	.LCFI5:
 326              	 .cfi_def_cfa_offset 8
 327              	 .cfi_offset 7,-8
 328              	 .cfi_offset 14,-4
 329 0002 8CB0     	 sub sp,sp,#48
 330              	.LCFI6:
 331              	 .cfi_def_cfa_offset 56
 332 0004 04AF     	 add r7,sp,#16
 333              	.LCFI7:
 334              	 .cfi_def_cfa 7,40
 335 0006 F860     	 str r0,[r7,#12]
 336 0008 B960     	 str r1,[r7,#8]
 337 000a 3B60     	 str r3,[r7]
 338 000c 1346     	 mov r3,r2
 339 000e FB80     	 strh r3,[r7,#6]
 340              	.LBB148:
 733:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 734:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
 735:../Dave/Generated/FREERTOS/tasks.c **** 
 736:../Dave/Generated/FREERTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 737:../Dave/Generated/FREERTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:../Dave/Generated/FREERTOS/tasks.c ****          * the TCB then the stack. */
 739:../Dave/Generated/FREERTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 740:../Dave/Generated/FREERTOS/tasks.c ****             {
 741:../Dave/Generated/FREERTOS/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 742:../Dave/Generated/FREERTOS/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 743:../Dave/Generated/FREERTOS/tasks.c ****                  * allocation is being used. */
 744:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:../Dave/Generated/FREERTOS/tasks.c **** 
 746:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxNewTCB != NULL )
 747:../Dave/Generated/FREERTOS/tasks.c ****                 {
 748:../Dave/Generated/FREERTOS/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 749:../Dave/Generated/FREERTOS/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 750:../Dave/Generated/FREERTOS/tasks.c ****                      * be deleted later if required. */
 751:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth
 752:../Dave/Generated/FREERTOS/tasks.c **** 
 753:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 754:../Dave/Generated/FREERTOS/tasks.c ****                     {
 755:../Dave/Generated/FREERTOS/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 756:../Dave/Generated/FREERTOS/tasks.c ****                         vPortFree( pxNewTCB );
 757:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB = NULL;
 758:../Dave/Generated/FREERTOS/tasks.c ****                     }
 759:../Dave/Generated/FREERTOS/tasks.c ****                 }
 760:../Dave/Generated/FREERTOS/tasks.c ****             }
 761:../Dave/Generated/FREERTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 762:../Dave/Generated/FREERTOS/tasks.c ****             {
 763:../Dave/Generated/FREERTOS/tasks.c ****                 StackType_t * pxStack;
 764:../Dave/Generated/FREERTOS/tasks.c **** 
 765:../Dave/Generated/FREERTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 766:../Dave/Generated/FREERTOS/tasks.c ****                 pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); 
 341              	 .loc 1 766 0
 342 0010 FB88     	 ldrh r3,[r7,#6]
 343 0012 9B00     	 lsls r3,r3,#2
 344 0014 1846     	 mov r0,r3
 345 0016 FFF7FEFF 	 bl pvPortMalloc
 346 001a 7861     	 str r0,[r7,#20]
 767:../Dave/Generated/FREERTOS/tasks.c **** 
 768:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxStack != NULL )
 347              	 .loc 1 768 0
 348 001c 7B69     	 ldr r3,[r7,#20]
 349 001e 002B     	 cmp r3,#0
 350 0020 0ED0     	 beq .L12
 769:../Dave/Generated/FREERTOS/tasks.c ****                 {
 770:../Dave/Generated/FREERTOS/tasks.c ****                     /* Allocate space for the TCB. */
 771:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 351              	 .loc 1 771 0
 352 0022 7020     	 movs r0,#112
 353 0024 FFF7FEFF 	 bl pvPortMalloc
 354 0028 F861     	 str r0,[r7,#28]
 772:../Dave/Generated/FREERTOS/tasks.c **** 
 773:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxNewTCB != NULL )
 355              	 .loc 1 773 0
 356 002a FB69     	 ldr r3,[r7,#28]
 357 002c 002B     	 cmp r3,#0
 358 002e 03D0     	 beq .L13
 774:../Dave/Generated/FREERTOS/tasks.c ****                     {
 775:../Dave/Generated/FREERTOS/tasks.c ****                         /* Store the stack location in the TCB. */
 776:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 359              	 .loc 1 776 0
 360 0030 FB69     	 ldr r3,[r7,#28]
 361 0032 7A69     	 ldr r2,[r7,#20]
 362 0034 1A63     	 str r2,[r3,#48]
 363 0036 05E0     	 b .L15
 364              	.L13:
 777:../Dave/Generated/FREERTOS/tasks.c ****                     }
 778:../Dave/Generated/FREERTOS/tasks.c ****                     else
 779:../Dave/Generated/FREERTOS/tasks.c ****                     {
 780:../Dave/Generated/FREERTOS/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 781:../Dave/Generated/FREERTOS/tasks.c ****                          * it again. */
 782:../Dave/Generated/FREERTOS/tasks.c ****                         vPortFree( pxStack );
 365              	 .loc 1 782 0
 366 0038 7869     	 ldr r0,[r7,#20]
 367 003a FFF7FEFF 	 bl vPortFree
 368 003e 01E0     	 b .L15
 369              	.L12:
 783:../Dave/Generated/FREERTOS/tasks.c ****                     }
 784:../Dave/Generated/FREERTOS/tasks.c ****                 }
 785:../Dave/Generated/FREERTOS/tasks.c ****                 else
 786:../Dave/Generated/FREERTOS/tasks.c ****                 {
 787:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB = NULL;
 370              	 .loc 1 787 0
 371 0040 0023     	 movs r3,#0
 372 0042 FB61     	 str r3,[r7,#28]
 373              	.L15:
 374              	.LBE148:
 788:../Dave/Generated/FREERTOS/tasks.c ****                 }
 789:../Dave/Generated/FREERTOS/tasks.c ****             }
 790:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 791:../Dave/Generated/FREERTOS/tasks.c **** 
 792:../Dave/Generated/FREERTOS/tasks.c ****         if( pxNewTCB != NULL )
 375              	 .loc 1 792 0
 376 0044 FB69     	 ldr r3,[r7,#28]
 377 0046 002B     	 cmp r3,#0
 378 0048 17D0     	 beq .L16
 793:../Dave/Generated/FREERTOS/tasks.c ****         {
 794:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 795:../Dave/Generated/FREERTOS/tasks.c ****                 {
 796:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 797:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 798:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 379              	 .loc 1 798 0
 380 004a FB69     	 ldr r3,[r7,#28]
 381 004c 0022     	 movs r2,#0
 382 004e 83F86D20 	 strb r2,[r3,#109]
 799:../Dave/Generated/FREERTOS/tasks.c ****                 }
 800:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 801:../Dave/Generated/FREERTOS/tasks.c **** 
 802:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 383              	 .loc 1 802 0
 384 0052 FA88     	 ldrh r2,[r7,#6]
 385 0054 BB6A     	 ldr r3,[r7,#40]
 386 0056 0093     	 str r3,[sp]
 387 0058 FB6A     	 ldr r3,[r7,#44]
 388 005a 0193     	 str r3,[sp,#4]
 389 005c FB69     	 ldr r3,[r7,#28]
 390 005e 0293     	 str r3,[sp,#8]
 391 0060 0023     	 movs r3,#0
 392 0062 0393     	 str r3,[sp,#12]
 393 0064 F868     	 ldr r0,[r7,#12]
 394 0066 B968     	 ldr r1,[r7,#8]
 395 0068 3B68     	 ldr r3,[r7]
 396 006a FFF7FEFF 	 bl prvInitialiseNewTask
 803:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 397              	 .loc 1 803 0
 398 006e F869     	 ldr r0,[r7,#28]
 399 0070 FFF7FEFF 	 bl prvAddNewTaskToReadyList
 804:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdPASS;
 400              	 .loc 1 804 0
 401 0074 0123     	 movs r3,#1
 402 0076 BB61     	 str r3,[r7,#24]
 403 0078 02E0     	 b .L17
 404              	.L16:
 805:../Dave/Generated/FREERTOS/tasks.c ****         }
 806:../Dave/Generated/FREERTOS/tasks.c ****         else
 807:../Dave/Generated/FREERTOS/tasks.c ****         {
 808:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 405              	 .loc 1 808 0
 406 007a 4FF0FF33 	 mov r3,#-1
 407 007e BB61     	 str r3,[r7,#24]
 408              	.L17:
 809:../Dave/Generated/FREERTOS/tasks.c ****         }
 810:../Dave/Generated/FREERTOS/tasks.c **** 
 811:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 409              	 .loc 1 811 0
 410 0080 BB69     	 ldr r3,[r7,#24]
 812:../Dave/Generated/FREERTOS/tasks.c ****     }
 411              	 .loc 1 812 0
 412 0082 1846     	 mov r0,r3
 413 0084 2037     	 adds r7,r7,#32
 414              	.LCFI8:
 415              	 .cfi_def_cfa_offset 8
 416 0086 BD46     	 mov sp,r7
 417              	.LCFI9:
 418              	 .cfi_def_cfa_register 13
 419              	 
 420 0088 80BD     	 pop {r7,pc}
 421              	 .cfi_endproc
 422              	.LFE138:
 424 008a 00BF     	 .section .text.prvInitialiseNewTask,"ax",%progbits
 425              	 .align 2
 426              	 .thumb
 427              	 .thumb_func
 429              	prvInitialiseNewTask:
 430              	.LFB139:
 813:../Dave/Generated/FREERTOS/tasks.c **** 
 814:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 816:../Dave/Generated/FREERTOS/tasks.c **** 
 817:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 818:../Dave/Generated/FREERTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 819:../Dave/Generated/FREERTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 820:../Dave/Generated/FREERTOS/tasks.c ****                                   void * const pvParameters,
 821:../Dave/Generated/FREERTOS/tasks.c ****                                   UBaseType_t uxPriority,
 822:../Dave/Generated/FREERTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 823:../Dave/Generated/FREERTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 824:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 825:../Dave/Generated/FREERTOS/tasks.c **** {
 431              	 .loc 1 825 0
 432              	 .cfi_startproc
 433              	 
 434              	 
 435 0000 80B5     	 push {r7,lr}
 436              	.LCFI10:
 437              	 .cfi_def_cfa_offset 8
 438              	 .cfi_offset 7,-8
 439              	 .cfi_offset 14,-4
 440 0002 88B0     	 sub sp,sp,#32
 441              	.LCFI11:
 442              	 .cfi_def_cfa_offset 40
 443 0004 00AF     	 add r7,sp,#0
 444              	.LCFI12:
 445              	 .cfi_def_cfa_register 7
 446 0006 F860     	 str r0,[r7,#12]
 447 0008 B960     	 str r1,[r7,#8]
 448 000a 7A60     	 str r2,[r7,#4]
 449 000c 3B60     	 str r3,[r7]
 826:../Dave/Generated/FREERTOS/tasks.c ****     StackType_t * pxTopOfStack;
 827:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t x;
 828:../Dave/Generated/FREERTOS/tasks.c **** 
 829:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 830:../Dave/Generated/FREERTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 831:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xRunPrivileged;
 832:../Dave/Generated/FREERTOS/tasks.c **** 
 833:../Dave/Generated/FREERTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 834:../Dave/Generated/FREERTOS/tasks.c ****         {
 835:../Dave/Generated/FREERTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 836:../Dave/Generated/FREERTOS/tasks.c ****         }
 837:../Dave/Generated/FREERTOS/tasks.c ****         else
 838:../Dave/Generated/FREERTOS/tasks.c ****         {
 839:../Dave/Generated/FREERTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 840:../Dave/Generated/FREERTOS/tasks.c ****         }
 841:../Dave/Generated/FREERTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 842:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 843:../Dave/Generated/FREERTOS/tasks.c **** 
 844:../Dave/Generated/FREERTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 845:../Dave/Generated/FREERTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 846:../Dave/Generated/FREERTOS/tasks.c ****         {
 847:../Dave/Generated/FREERTOS/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 848:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 450              	 .loc 1 848 0
 451 000e 3B6B     	 ldr r3,[r7,#48]
 452 0010 1A6B     	 ldr r2,[r3,#48]
 453 0012 7B68     	 ldr r3,[r7,#4]
 454 0014 9B00     	 lsls r3,r3,#2
 455 0016 1046     	 mov r0,r2
 456 0018 A521     	 movs r1,#165
 457 001a 1A46     	 mov r2,r3
 458 001c FFF7FEFF 	 bl memset
 849:../Dave/Generated/FREERTOS/tasks.c ****         }
 850:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 851:../Dave/Generated/FREERTOS/tasks.c **** 
 852:../Dave/Generated/FREERTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 853:../Dave/Generated/FREERTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 854:../Dave/Generated/FREERTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 855:../Dave/Generated/FREERTOS/tasks.c ****      * by the port. */
 856:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 857:../Dave/Generated/FREERTOS/tasks.c ****         {
 858:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 459              	 .loc 1 858 0
 460 0020 3B6B     	 ldr r3,[r7,#48]
 461 0022 1A6B     	 ldr r2,[r3,#48]
 462 0024 7B68     	 ldr r3,[r7,#4]
 463 0026 03F18043 	 add r3,r3,#1073741824
 464 002a 013B     	 subs r3,r3,#1
 465 002c 9B00     	 lsls r3,r3,#2
 466 002e 1344     	 add r3,r3,r2
 467 0030 BB61     	 str r3,[r7,#24]
 859:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 468              	 .loc 1 859 0
 469 0032 BB69     	 ldr r3,[r7,#24]
 470 0034 23F00703 	 bic r3,r3,#7
 471 0038 BB61     	 str r3,[r7,#24]
 860:../Dave/Generated/FREERTOS/tasks.c **** 
 861:../Dave/Generated/FREERTOS/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 862:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 472              	 .loc 1 862 0
 473 003a BB69     	 ldr r3,[r7,#24]
 474 003c 03F00703 	 and r3,r3,#7
 475 0040 002B     	 cmp r3,#0
 476 0042 09D0     	 beq .L20
 477              	.LBB149:
 478              	.LBB150:
 479              	 .loc 2 197 0 discriminator 1
 480              	
 481 0044 4FF0FC03 	 mov r3,#252
 482 0048 83F31188 	 msr basepri,r3
 483 004c BFF36F8F 	 isb 
 484 0050 BFF34F8F 	 dsb 
 485              	
 486              	
 487              	 .thumb
 488 0054 7B61     	 str r3,[r7,#20]
 489              	.L21:
 490              	.LBE150:
 491              	.LBE149:
 492              	 .loc 1 862 0 discriminator 1
 493 0056 FEE7     	 b .L21
 494              	.L20:
 863:../Dave/Generated/FREERTOS/tasks.c **** 
 864:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 865:../Dave/Generated/FREERTOS/tasks.c ****                 {
 866:../Dave/Generated/FREERTOS/tasks.c ****                     /* Also record the stack's high address, which may assist
 867:../Dave/Generated/FREERTOS/tasks.c ****                      * debugging. */
 868:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 869:../Dave/Generated/FREERTOS/tasks.c ****                 }
 870:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 871:../Dave/Generated/FREERTOS/tasks.c ****         }
 872:../Dave/Generated/FREERTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 873:../Dave/Generated/FREERTOS/tasks.c ****         {
 874:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 875:../Dave/Generated/FREERTOS/tasks.c **** 
 876:../Dave/Generated/FREERTOS/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 877:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 878:../Dave/Generated/FREERTOS/tasks.c **** 
 879:../Dave/Generated/FREERTOS/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 880:../Dave/Generated/FREERTOS/tasks.c ****              * performed. */
 881:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 882:../Dave/Generated/FREERTOS/tasks.c ****         }
 883:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 884:../Dave/Generated/FREERTOS/tasks.c **** 
 885:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the task name in the TCB. */
 886:../Dave/Generated/FREERTOS/tasks.c ****     if( pcName != NULL )
 495              	 .loc 1 886 0
 496 0058 BB68     	 ldr r3,[r7,#8]
 497 005a 002B     	 cmp r3,#0
 498 005c 1ED0     	 beq .L22
 887:../Dave/Generated/FREERTOS/tasks.c ****     {
 888:../Dave/Generated/FREERTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 499              	 .loc 1 888 0
 500 005e 0023     	 movs r3,#0
 501 0060 FB61     	 str r3,[r7,#28]
 502 0062 13E0     	 b .L23
 503              	.L26:
 889:../Dave/Generated/FREERTOS/tasks.c ****         {
 890:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 504              	 .loc 1 890 0
 505 0064 BA68     	 ldr r2,[r7,#8]
 506 0066 FB69     	 ldr r3,[r7,#28]
 507 0068 1344     	 add r3,r3,r2
 508 006a 1978     	 ldrb r1,[r3]
 509 006c 3A6B     	 ldr r2,[r7,#48]
 510 006e FB69     	 ldr r3,[r7,#28]
 511 0070 1344     	 add r3,r3,r2
 512 0072 3033     	 adds r3,r3,#48
 513 0074 0A46     	 mov r2,r1
 514 0076 1A71     	 strb r2,[r3,#4]
 891:../Dave/Generated/FREERTOS/tasks.c **** 
 892:../Dave/Generated/FREERTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 893:../Dave/Generated/FREERTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 894:../Dave/Generated/FREERTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 895:../Dave/Generated/FREERTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 515              	 .loc 1 895 0
 516 0078 BA68     	 ldr r2,[r7,#8]
 517 007a FB69     	 ldr r3,[r7,#28]
 518 007c 1344     	 add r3,r3,r2
 519 007e 1B78     	 ldrb r3,[r3]
 520 0080 002B     	 cmp r3,#0
 521 0082 00D1     	 bne .L24
 896:../Dave/Generated/FREERTOS/tasks.c ****             {
 897:../Dave/Generated/FREERTOS/tasks.c ****                 break;
 522              	 .loc 1 897 0
 523 0084 05E0     	 b .L25
 524              	.L24:
 888:../Dave/Generated/FREERTOS/tasks.c ****         {
 525              	 .loc 1 888 0 discriminator 2
 526 0086 FB69     	 ldr r3,[r7,#28]
 527 0088 0133     	 adds r3,r3,#1
 528 008a FB61     	 str r3,[r7,#28]
 529              	.L23:
 888:../Dave/Generated/FREERTOS/tasks.c ****         {
 530              	 .loc 1 888 0 is_stmt 0 discriminator 1
 531 008c FB69     	 ldr r3,[r7,#28]
 532 008e 0F2B     	 cmp r3,#15
 533 0090 E8D9     	 bls .L26
 534              	.L25:
 898:../Dave/Generated/FREERTOS/tasks.c ****             }
 899:../Dave/Generated/FREERTOS/tasks.c ****             else
 900:../Dave/Generated/FREERTOS/tasks.c ****             {
 901:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 902:../Dave/Generated/FREERTOS/tasks.c ****             }
 903:../Dave/Generated/FREERTOS/tasks.c ****         }
 904:../Dave/Generated/FREERTOS/tasks.c **** 
 905:../Dave/Generated/FREERTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 906:../Dave/Generated/FREERTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 907:../Dave/Generated/FREERTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 535              	 .loc 1 907 0 is_stmt 1
 536 0092 3B6B     	 ldr r3,[r7,#48]
 537 0094 0022     	 movs r2,#0
 538 0096 83F84320 	 strb r2,[r3,#67]
 539 009a 03E0     	 b .L27
 540              	.L22:
 908:../Dave/Generated/FREERTOS/tasks.c ****     }
 909:../Dave/Generated/FREERTOS/tasks.c ****     else
 910:../Dave/Generated/FREERTOS/tasks.c ****     {
 911:../Dave/Generated/FREERTOS/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 912:../Dave/Generated/FREERTOS/tasks.c ****          * terminator when it is read out. */
 913:../Dave/Generated/FREERTOS/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 541              	 .loc 1 913 0
 542 009c 3B6B     	 ldr r3,[r7,#48]
 543 009e 0022     	 movs r2,#0
 544 00a0 83F83420 	 strb r2,[r3,#52]
 545              	.L27:
 914:../Dave/Generated/FREERTOS/tasks.c ****     }
 915:../Dave/Generated/FREERTOS/tasks.c **** 
 916:../Dave/Generated/FREERTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large.  First
 917:../Dave/Generated/FREERTOS/tasks.c ****      * remove the privilege bit if one is present. */
 918:../Dave/Generated/FREERTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 546              	 .loc 1 918 0
 547 00a4 BB6A     	 ldr r3,[r7,#40]
 548 00a6 372B     	 cmp r3,#55
 549 00a8 01D9     	 bls .L28
 919:../Dave/Generated/FREERTOS/tasks.c ****     {
 920:../Dave/Generated/FREERTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 550              	 .loc 1 920 0
 551 00aa 3723     	 movs r3,#55
 552 00ac BB62     	 str r3,[r7,#40]
 553              	.L28:
 921:../Dave/Generated/FREERTOS/tasks.c ****     }
 922:../Dave/Generated/FREERTOS/tasks.c ****     else
 923:../Dave/Generated/FREERTOS/tasks.c ****     {
 924:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 925:../Dave/Generated/FREERTOS/tasks.c ****     }
 926:../Dave/Generated/FREERTOS/tasks.c **** 
 927:../Dave/Generated/FREERTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 554              	 .loc 1 927 0
 555 00ae 3B6B     	 ldr r3,[r7,#48]
 556 00b0 BA6A     	 ldr r2,[r7,#40]
 557 00b2 DA62     	 str r2,[r3,#44]
 928:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 929:../Dave/Generated/FREERTOS/tasks.c ****         {
 930:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 558              	 .loc 1 930 0
 559 00b4 3B6B     	 ldr r3,[r7,#48]
 560 00b6 BA6A     	 ldr r2,[r7,#40]
 561 00b8 DA64     	 str r2,[r3,#76]
 931:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 562              	 .loc 1 931 0
 563 00ba 3B6B     	 ldr r3,[r7,#48]
 564 00bc 0022     	 movs r2,#0
 565 00be 1A65     	 str r2,[r3,#80]
 932:../Dave/Generated/FREERTOS/tasks.c ****         }
 933:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 934:../Dave/Generated/FREERTOS/tasks.c **** 
 935:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 566              	 .loc 1 935 0
 567 00c0 3B6B     	 ldr r3,[r7,#48]
 568 00c2 0433     	 adds r3,r3,#4
 569 00c4 1846     	 mov r0,r3
 570 00c6 FFF7FEFF 	 bl vListInitialiseItem
 936:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 571              	 .loc 1 936 0
 572 00ca 3B6B     	 ldr r3,[r7,#48]
 573 00cc 1833     	 adds r3,r3,#24
 574 00ce 1846     	 mov r0,r3
 575 00d0 FFF7FEFF 	 bl vListInitialiseItem
 937:../Dave/Generated/FREERTOS/tasks.c **** 
 938:../Dave/Generated/FREERTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 939:../Dave/Generated/FREERTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 940:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 576              	 .loc 1 940 0
 577 00d4 3B6B     	 ldr r3,[r7,#48]
 578 00d6 3A6B     	 ldr r2,[r7,#48]
 579 00d8 1A61     	 str r2,[r3,#16]
 941:../Dave/Generated/FREERTOS/tasks.c **** 
 942:../Dave/Generated/FREERTOS/tasks.c ****     /* Event lists are always in priority order. */
 943:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 580              	 .loc 1 943 0
 581 00da BB6A     	 ldr r3,[r7,#40]
 582 00dc C3F13802 	 rsb r2,r3,#56
 583 00e0 3B6B     	 ldr r3,[r7,#48]
 584 00e2 9A61     	 str r2,[r3,#24]
 944:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 585              	 .loc 1 944 0
 586 00e4 3B6B     	 ldr r3,[r7,#48]
 587 00e6 3A6B     	 ldr r2,[r7,#48]
 588 00e8 5A62     	 str r2,[r3,#36]
 945:../Dave/Generated/FREERTOS/tasks.c **** 
 946:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 947:../Dave/Generated/FREERTOS/tasks.c ****         {
 948:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 949:../Dave/Generated/FREERTOS/tasks.c ****         }
 950:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 951:../Dave/Generated/FREERTOS/tasks.c **** 
 952:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 953:../Dave/Generated/FREERTOS/tasks.c ****         {
 954:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 955:../Dave/Generated/FREERTOS/tasks.c ****         }
 956:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 957:../Dave/Generated/FREERTOS/tasks.c **** 
 958:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 959:../Dave/Generated/FREERTOS/tasks.c ****         {
 960:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->ulRunTimeCounter = 0UL;
 961:../Dave/Generated/FREERTOS/tasks.c ****         }
 962:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 963:../Dave/Generated/FREERTOS/tasks.c **** 
 964:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 965:../Dave/Generated/FREERTOS/tasks.c ****         {
 966:../Dave/Generated/FREERTOS/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 967:../Dave/Generated/FREERTOS/tasks.c ****         }
 968:../Dave/Generated/FREERTOS/tasks.c ****     #else
 969:../Dave/Generated/FREERTOS/tasks.c ****         {
 970:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 971:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) xRegions;
 972:../Dave/Generated/FREERTOS/tasks.c ****         }
 973:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 974:../Dave/Generated/FREERTOS/tasks.c **** 
 975:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 976:../Dave/Generated/FREERTOS/tasks.c ****         {
 977:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 589              	 .loc 1 977 0
 590 00ea 3B6B     	 ldr r3,[r7,#48]
 591 00ec 5433     	 adds r3,r3,#84
 592 00ee 1846     	 mov r0,r3
 593 00f0 0021     	 movs r1,#0
 594 00f2 1422     	 movs r2,#20
 595 00f4 FFF7FEFF 	 bl memset
 978:../Dave/Generated/FREERTOS/tasks.c ****         }
 979:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 980:../Dave/Generated/FREERTOS/tasks.c **** 
 981:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 982:../Dave/Generated/FREERTOS/tasks.c ****         {
 983:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 596              	 .loc 1 983 0
 597 00f8 3B6B     	 ldr r3,[r7,#48]
 598 00fa 6833     	 adds r3,r3,#104
 599 00fc 1846     	 mov r0,r3
 600 00fe 0021     	 movs r1,#0
 601 0100 0422     	 movs r2,#4
 602 0102 FFF7FEFF 	 bl memset
 984:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 603              	 .loc 1 984 0
 604 0106 3B6B     	 ldr r3,[r7,#48]
 605 0108 6C33     	 adds r3,r3,#108
 606 010a 1846     	 mov r0,r3
 607 010c 0021     	 movs r1,#0
 608 010e 0122     	 movs r2,#1
 609 0110 FFF7FEFF 	 bl memset
 985:../Dave/Generated/FREERTOS/tasks.c ****         }
 986:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 987:../Dave/Generated/FREERTOS/tasks.c **** 
 988:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 989:../Dave/Generated/FREERTOS/tasks.c ****         {
 990:../Dave/Generated/FREERTOS/tasks.c ****             /* Initialise this task's Newlib reent structure.
 991:../Dave/Generated/FREERTOS/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 992:../Dave/Generated/FREERTOS/tasks.c ****              * for additional information. */
 993:../Dave/Generated/FREERTOS/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:../Dave/Generated/FREERTOS/tasks.c ****         }
 995:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 996:../Dave/Generated/FREERTOS/tasks.c **** 
 997:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 998:../Dave/Generated/FREERTOS/tasks.c ****         {
 999:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
 610              	 .loc 1 999 0
 611 0114 3B6B     	 ldr r3,[r7,#48]
 612 0116 0022     	 movs r2,#0
 613 0118 83F86E20 	 strb r2,[r3,#110]
1000:../Dave/Generated/FREERTOS/tasks.c ****         }
1001:../Dave/Generated/FREERTOS/tasks.c ****     #endif
1002:../Dave/Generated/FREERTOS/tasks.c **** 
1003:../Dave/Generated/FREERTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1004:../Dave/Generated/FREERTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1005:../Dave/Generated/FREERTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1006:../Dave/Generated/FREERTOS/tasks.c ****      * the top of stack variable is updated. */
1007:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1008:../Dave/Generated/FREERTOS/tasks.c ****         {
1009:../Dave/Generated/FREERTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1010:../Dave/Generated/FREERTOS/tasks.c ****              * pass the stack end address to the stack initialization
1011:../Dave/Generated/FREERTOS/tasks.c ****              * function as well. */
1012:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1013:../Dave/Generated/FREERTOS/tasks.c ****                 {
1014:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1015:../Dave/Generated/FREERTOS/tasks.c ****                         {
1016:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1017:../Dave/Generated/FREERTOS/tasks.c ****                         }
1018:../Dave/Generated/FREERTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1019:../Dave/Generated/FREERTOS/tasks.c ****                         {
1020:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1021:../Dave/Generated/FREERTOS/tasks.c ****                         }
1022:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1023:../Dave/Generated/FREERTOS/tasks.c ****                 }
1024:../Dave/Generated/FREERTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1025:../Dave/Generated/FREERTOS/tasks.c ****                 {
1026:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1027:../Dave/Generated/FREERTOS/tasks.c ****                 }
1028:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1029:../Dave/Generated/FREERTOS/tasks.c ****         }
1030:../Dave/Generated/FREERTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1031:../Dave/Generated/FREERTOS/tasks.c ****         {
1032:../Dave/Generated/FREERTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1033:../Dave/Generated/FREERTOS/tasks.c ****              * pass the stack end address to the stack initialization
1034:../Dave/Generated/FREERTOS/tasks.c ****              * function as well. */
1035:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1036:../Dave/Generated/FREERTOS/tasks.c ****                 {
1037:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1038:../Dave/Generated/FREERTOS/tasks.c ****                         {
1039:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1040:../Dave/Generated/FREERTOS/tasks.c ****                         }
1041:../Dave/Generated/FREERTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1042:../Dave/Generated/FREERTOS/tasks.c ****                         {
1043:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1044:../Dave/Generated/FREERTOS/tasks.c ****                         }
1045:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1046:../Dave/Generated/FREERTOS/tasks.c ****                 }
1047:../Dave/Generated/FREERTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1048:../Dave/Generated/FREERTOS/tasks.c ****                 {
1049:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
 614              	 .loc 1 1049 0
 615 011c B869     	 ldr r0,[r7,#24]
 616 011e F968     	 ldr r1,[r7,#12]
 617 0120 3A68     	 ldr r2,[r7]
 618 0122 FFF7FEFF 	 bl pxPortInitialiseStack
 619 0126 0246     	 mov r2,r0
 620 0128 3B6B     	 ldr r3,[r7,#48]
 621 012a 1A60     	 str r2,[r3]
1050:../Dave/Generated/FREERTOS/tasks.c ****                 }
1051:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1052:../Dave/Generated/FREERTOS/tasks.c ****         }
1053:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1054:../Dave/Generated/FREERTOS/tasks.c **** 
1055:../Dave/Generated/FREERTOS/tasks.c ****     if( pxCreatedTask != NULL )
 622              	 .loc 1 1055 0
 623 012c FB6A     	 ldr r3,[r7,#44]
 624 012e 002B     	 cmp r3,#0
 625 0130 02D0     	 beq .L19
1056:../Dave/Generated/FREERTOS/tasks.c ****     {
1057:../Dave/Generated/FREERTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1058:../Dave/Generated/FREERTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1059:../Dave/Generated/FREERTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 626              	 .loc 1 1059 0
 627 0132 FB6A     	 ldr r3,[r7,#44]
 628 0134 3A6B     	 ldr r2,[r7,#48]
 629 0136 1A60     	 str r2,[r3]
 630              	.L19:
1060:../Dave/Generated/FREERTOS/tasks.c ****     }
1061:../Dave/Generated/FREERTOS/tasks.c ****     else
1062:../Dave/Generated/FREERTOS/tasks.c ****     {
1063:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1064:../Dave/Generated/FREERTOS/tasks.c ****     }
1065:../Dave/Generated/FREERTOS/tasks.c **** }
 631              	 .loc 1 1065 0
 632 0138 2037     	 adds r7,r7,#32
 633              	.LCFI13:
 634              	 .cfi_def_cfa_offset 8
 635 013a BD46     	 mov sp,r7
 636              	.LCFI14:
 637              	 .cfi_def_cfa_register 13
 638              	 
 639 013c 80BD     	 pop {r7,pc}
 640              	 .cfi_endproc
 641              	.LFE139:
 643 013e 00BF     	 .section .text.prvAddNewTaskToReadyList,"ax",%progbits
 644              	 .align 2
 645              	 .thumb
 646              	 .thumb_func
 648              	prvAddNewTaskToReadyList:
 649              	.LFB140:
1066:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1067:../Dave/Generated/FREERTOS/tasks.c **** 
1068:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1069:../Dave/Generated/FREERTOS/tasks.c **** {
 650              	 .loc 1 1069 0
 651              	 .cfi_startproc
 652              	 
 653              	 
 654 0000 80B5     	 push {r7,lr}
 655              	.LCFI15:
 656              	 .cfi_def_cfa_offset 8
 657              	 .cfi_offset 7,-8
 658              	 .cfi_offset 14,-4
 659 0002 82B0     	 sub sp,sp,#8
 660              	.LCFI16:
 661              	 .cfi_def_cfa_offset 16
 662 0004 00AF     	 add r7,sp,#0
 663              	.LCFI17:
 664              	 .cfi_def_cfa_register 7
 665 0006 7860     	 str r0,[r7,#4]
1070:../Dave/Generated/FREERTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1071:../Dave/Generated/FREERTOS/tasks.c ****      * updated. */
1072:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 666              	 .loc 1 1072 0
 667 0008 FFF7FEFF 	 bl vPortEnterCritical
1073:../Dave/Generated/FREERTOS/tasks.c ****     {
1074:../Dave/Generated/FREERTOS/tasks.c ****         uxCurrentNumberOfTasks++;
 668              	 .loc 1 1074 0
 669 000c 2C4B     	 ldr r3,.L35
 670 000e 1B68     	 ldr r3,[r3]
 671 0010 0133     	 adds r3,r3,#1
 672 0012 2B4A     	 ldr r2,.L35
 673 0014 1360     	 str r3,[r2]
1075:../Dave/Generated/FREERTOS/tasks.c **** 
1076:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB == NULL )
 674              	 .loc 1 1076 0
 675 0016 2B4B     	 ldr r3,.L35+4
 676 0018 1B68     	 ldr r3,[r3]
 677 001a 002B     	 cmp r3,#0
 678 001c 09D1     	 bne .L31
1077:../Dave/Generated/FREERTOS/tasks.c ****         {
1078:../Dave/Generated/FREERTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1079:../Dave/Generated/FREERTOS/tasks.c ****              * the suspended state - make this the current task. */
1080:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
 679              	 .loc 1 1080 0
 680 001e 294A     	 ldr r2,.L35+4
 681 0020 7B68     	 ldr r3,[r7,#4]
 682 0022 1360     	 str r3,[r2]
1081:../Dave/Generated/FREERTOS/tasks.c **** 
1082:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 683              	 .loc 1 1082 0
 684 0024 264B     	 ldr r3,.L35
 685 0026 1B68     	 ldr r3,[r3]
 686 0028 012B     	 cmp r3,#1
 687 002a 10D1     	 bne .L32
1083:../Dave/Generated/FREERTOS/tasks.c ****             {
1084:../Dave/Generated/FREERTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1085:../Dave/Generated/FREERTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1086:../Dave/Generated/FREERTOS/tasks.c ****                  * fails, but we will report the failure. */
1087:../Dave/Generated/FREERTOS/tasks.c ****                 prvInitialiseTaskLists();
 688              	 .loc 1 1087 0
 689 002c FFF7FEFF 	 bl prvInitialiseTaskLists
 690 0030 0DE0     	 b .L32
 691              	.L31:
1088:../Dave/Generated/FREERTOS/tasks.c ****             }
1089:../Dave/Generated/FREERTOS/tasks.c ****             else
1090:../Dave/Generated/FREERTOS/tasks.c ****             {
1091:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1092:../Dave/Generated/FREERTOS/tasks.c ****             }
1093:../Dave/Generated/FREERTOS/tasks.c ****         }
1094:../Dave/Generated/FREERTOS/tasks.c ****         else
1095:../Dave/Generated/FREERTOS/tasks.c ****         {
1096:../Dave/Generated/FREERTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1097:../Dave/Generated/FREERTOS/tasks.c ****              * current task if it is the highest priority task to be created
1098:../Dave/Generated/FREERTOS/tasks.c ****              * so far. */
1099:../Dave/Generated/FREERTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
 692              	 .loc 1 1099 0
 693 0032 254B     	 ldr r3,.L35+8
 694 0034 1B68     	 ldr r3,[r3]
 695 0036 002B     	 cmp r3,#0
 696 0038 09D1     	 bne .L32
1100:../Dave/Generated/FREERTOS/tasks.c ****             {
1101:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 697              	 .loc 1 1101 0
 698 003a 224B     	 ldr r3,.L35+4
 699 003c 1B68     	 ldr r3,[r3]
 700 003e DA6A     	 ldr r2,[r3,#44]
 701 0040 7B68     	 ldr r3,[r7,#4]
 702 0042 DB6A     	 ldr r3,[r3,#44]
 703 0044 9A42     	 cmp r2,r3
 704 0046 02D8     	 bhi .L32
1102:../Dave/Generated/FREERTOS/tasks.c ****                 {
1103:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
 705              	 .loc 1 1103 0
 706 0048 1E4A     	 ldr r2,.L35+4
 707 004a 7B68     	 ldr r3,[r7,#4]
 708 004c 1360     	 str r3,[r2]
 709              	.L32:
1104:../Dave/Generated/FREERTOS/tasks.c ****                 }
1105:../Dave/Generated/FREERTOS/tasks.c ****                 else
1106:../Dave/Generated/FREERTOS/tasks.c ****                 {
1107:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1108:../Dave/Generated/FREERTOS/tasks.c ****                 }
1109:../Dave/Generated/FREERTOS/tasks.c ****             }
1110:../Dave/Generated/FREERTOS/tasks.c ****             else
1111:../Dave/Generated/FREERTOS/tasks.c ****             {
1112:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1113:../Dave/Generated/FREERTOS/tasks.c ****             }
1114:../Dave/Generated/FREERTOS/tasks.c ****         }
1115:../Dave/Generated/FREERTOS/tasks.c **** 
1116:../Dave/Generated/FREERTOS/tasks.c ****         uxTaskNumber++;
 710              	 .loc 1 1116 0
 711 004e 1F4B     	 ldr r3,.L35+12
 712 0050 1B68     	 ldr r3,[r3]
 713 0052 0133     	 adds r3,r3,#1
 714 0054 1D4A     	 ldr r2,.L35+12
 715 0056 1360     	 str r3,[r2]
1117:../Dave/Generated/FREERTOS/tasks.c **** 
1118:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1119:../Dave/Generated/FREERTOS/tasks.c ****             {
1120:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1121:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
 716              	 .loc 1 1121 0
 717 0058 1C4B     	 ldr r3,.L35+12
 718 005a 1A68     	 ldr r2,[r3]
 719 005c 7B68     	 ldr r3,[r7,#4]
 720 005e 5A64     	 str r2,[r3,#68]
1122:../Dave/Generated/FREERTOS/tasks.c ****             }
1123:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1124:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1125:../Dave/Generated/FREERTOS/tasks.c **** 
1126:../Dave/Generated/FREERTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
 721              	 .loc 1 1126 0
 722 0060 7B68     	 ldr r3,[r7,#4]
 723 0062 DA6A     	 ldr r2,[r3,#44]
 724 0064 1A4B     	 ldr r3,.L35+16
 725 0066 1B68     	 ldr r3,[r3]
 726 0068 9A42     	 cmp r2,r3
 727 006a 03D9     	 bls .L33
 728              	 .loc 1 1126 0 is_stmt 0 discriminator 1
 729 006c 7B68     	 ldr r3,[r7,#4]
 730 006e DB6A     	 ldr r3,[r3,#44]
 731 0070 174A     	 ldr r2,.L35+16
 732 0072 1360     	 str r3,[r2]
 733              	.L33:
 734              	 .loc 1 1126 0 discriminator 3
 735 0074 7B68     	 ldr r3,[r7,#4]
 736 0076 DA6A     	 ldr r2,[r3,#44]
 737 0078 1346     	 mov r3,r2
 738 007a 9B00     	 lsls r3,r3,#2
 739 007c 1344     	 add r3,r3,r2
 740 007e 9B00     	 lsls r3,r3,#2
 741 0080 144A     	 ldr r2,.L35+20
 742 0082 1A44     	 add r2,r2,r3
 743 0084 7B68     	 ldr r3,[r7,#4]
 744 0086 0433     	 adds r3,r3,#4
 745 0088 1046     	 mov r0,r2
 746 008a 1946     	 mov r1,r3
 747 008c FFF7FEFF 	 bl vListInsertEnd
1127:../Dave/Generated/FREERTOS/tasks.c **** 
1128:../Dave/Generated/FREERTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1129:../Dave/Generated/FREERTOS/tasks.c ****     }
1130:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 748              	 .loc 1 1130 0 is_stmt 1 discriminator 3
 749 0090 FFF7FEFF 	 bl vPortExitCritical
1131:../Dave/Generated/FREERTOS/tasks.c **** 
1132:../Dave/Generated/FREERTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
 750              	 .loc 1 1132 0 discriminator 3
 751 0094 0C4B     	 ldr r3,.L35+8
 752 0096 1B68     	 ldr r3,[r3]
 753 0098 002B     	 cmp r3,#0
 754 009a 0ED0     	 beq .L30
1133:../Dave/Generated/FREERTOS/tasks.c ****     {
1134:../Dave/Generated/FREERTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1135:../Dave/Generated/FREERTOS/tasks.c ****          * then it should run now. */
1136:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 755              	 .loc 1 1136 0
 756 009c 094B     	 ldr r3,.L35+4
 757 009e 1B68     	 ldr r3,[r3]
 758 00a0 DA6A     	 ldr r2,[r3,#44]
 759 00a2 7B68     	 ldr r3,[r7,#4]
 760 00a4 DB6A     	 ldr r3,[r3,#44]
 761 00a6 9A42     	 cmp r2,r3
 762 00a8 07D2     	 bcs .L30
1137:../Dave/Generated/FREERTOS/tasks.c ****         {
1138:../Dave/Generated/FREERTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
 763              	 .loc 1 1138 0
 764 00aa 0B4B     	 ldr r3,.L35+24
 765 00ac 4FF08052 	 mov r2,#268435456
 766 00b0 1A60     	 str r2,[r3]
 767              	
 768 00b2 BFF34F8F 	 dsb
 769              	
 770              	
 771 00b6 BFF36F8F 	 isb
 772              	
 773              	 .thumb
 774              	.L30:
1139:../Dave/Generated/FREERTOS/tasks.c ****         }
1140:../Dave/Generated/FREERTOS/tasks.c ****         else
1141:../Dave/Generated/FREERTOS/tasks.c ****         {
1142:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1143:../Dave/Generated/FREERTOS/tasks.c ****         }
1144:../Dave/Generated/FREERTOS/tasks.c ****     }
1145:../Dave/Generated/FREERTOS/tasks.c ****     else
1146:../Dave/Generated/FREERTOS/tasks.c ****     {
1147:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1148:../Dave/Generated/FREERTOS/tasks.c ****     }
1149:../Dave/Generated/FREERTOS/tasks.c **** }
 775              	 .loc 1 1149 0
 776 00ba 0837     	 adds r7,r7,#8
 777              	.LCFI18:
 778              	 .cfi_def_cfa_offset 8
 779 00bc BD46     	 mov sp,r7
 780              	.LCFI19:
 781              	 .cfi_def_cfa_register 13
 782              	 
 783 00be 80BD     	 pop {r7,pc}
 784              	.L36:
 785              	 .align 2
 786              	.L35:
 787 00c0 00000000 	 .word uxCurrentNumberOfTasks
 788 00c4 00000000 	 .word pxCurrentTCB
 789 00c8 00000000 	 .word xSchedulerRunning
 790 00cc 00000000 	 .word uxTaskNumber
 791 00d0 00000000 	 .word uxTopReadyPriority
 792 00d4 00000000 	 .word pxReadyTasksLists
 793 00d8 04ED00E0 	 .word -536810236
 794              	 .cfi_endproc
 795              	.LFE140:
 797              	 .section .text.vTaskDelete,"ax",%progbits
 798              	 .align 2
 799              	 .global vTaskDelete
 800              	 .thumb
 801              	 .thumb_func
 803              	vTaskDelete:
 804              	.LFB141:
1150:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1151:../Dave/Generated/FREERTOS/tasks.c **** 
1152:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1153:../Dave/Generated/FREERTOS/tasks.c **** 
1154:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1155:../Dave/Generated/FREERTOS/tasks.c ****     {
 805              	 .loc 1 1155 0
 806              	 .cfi_startproc
 807              	 
 808              	 
 809 0000 80B5     	 push {r7,lr}
 810              	.LCFI20:
 811              	 .cfi_def_cfa_offset 8
 812              	 .cfi_offset 7,-8
 813              	 .cfi_offset 14,-4
 814 0002 84B0     	 sub sp,sp,#16
 815              	.LCFI21:
 816              	 .cfi_def_cfa_offset 24
 817 0004 00AF     	 add r7,sp,#0
 818              	.LCFI22:
 819              	 .cfi_def_cfa_register 7
 820 0006 7860     	 str r0,[r7,#4]
1156:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1157:../Dave/Generated/FREERTOS/tasks.c **** 
1158:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 821              	 .loc 1 1158 0
 822 0008 FFF7FEFF 	 bl vPortEnterCritical
1159:../Dave/Generated/FREERTOS/tasks.c ****         {
1160:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1161:../Dave/Generated/FREERTOS/tasks.c ****              * being deleted. */
1162:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 823              	 .loc 1 1162 0
 824 000c 7B68     	 ldr r3,[r7,#4]
 825 000e 002B     	 cmp r3,#0
 826 0010 02D1     	 bne .L38
 827              	 .loc 1 1162 0 is_stmt 0 discriminator 1
 828 0012 2B4B     	 ldr r3,.L46
 829 0014 1B68     	 ldr r3,[r3]
 830 0016 00E0     	 b .L39
 831              	.L38:
 832              	 .loc 1 1162 0 discriminator 2
 833 0018 7B68     	 ldr r3,[r7,#4]
 834              	.L39:
 835              	 .loc 1 1162 0 discriminator 4
 836 001a FB60     	 str r3,[r7,#12]
1163:../Dave/Generated/FREERTOS/tasks.c **** 
1164:../Dave/Generated/FREERTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1165:../Dave/Generated/FREERTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 837              	 .loc 1 1165 0 is_stmt 1 discriminator 4
 838 001c FB68     	 ldr r3,[r7,#12]
 839 001e 0433     	 adds r3,r3,#4
 840 0020 1846     	 mov r0,r3
 841 0022 FFF7FEFF 	 bl uxListRemove
1166:../Dave/Generated/FREERTOS/tasks.c ****             {
1167:../Dave/Generated/FREERTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1168:../Dave/Generated/FREERTOS/tasks.c ****             }
1169:../Dave/Generated/FREERTOS/tasks.c ****             else
1170:../Dave/Generated/FREERTOS/tasks.c ****             {
1171:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1172:../Dave/Generated/FREERTOS/tasks.c ****             }
1173:../Dave/Generated/FREERTOS/tasks.c **** 
1174:../Dave/Generated/FREERTOS/tasks.c ****             /* Is the task waiting on an event also? */
1175:../Dave/Generated/FREERTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 842              	 .loc 1 1175 0 discriminator 4
 843 0026 FB68     	 ldr r3,[r7,#12]
 844 0028 9B6A     	 ldr r3,[r3,#40]
 845 002a 002B     	 cmp r3,#0
 846 002c 04D0     	 beq .L40
1176:../Dave/Generated/FREERTOS/tasks.c ****             {
1177:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 847              	 .loc 1 1177 0
 848 002e FB68     	 ldr r3,[r7,#12]
 849 0030 1833     	 adds r3,r3,#24
 850 0032 1846     	 mov r0,r3
 851 0034 FFF7FEFF 	 bl uxListRemove
 852              	.L40:
1178:../Dave/Generated/FREERTOS/tasks.c ****             }
1179:../Dave/Generated/FREERTOS/tasks.c ****             else
1180:../Dave/Generated/FREERTOS/tasks.c ****             {
1181:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1182:../Dave/Generated/FREERTOS/tasks.c ****             }
1183:../Dave/Generated/FREERTOS/tasks.c **** 
1184:../Dave/Generated/FREERTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1185:../Dave/Generated/FREERTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1186:../Dave/Generated/FREERTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1187:../Dave/Generated/FREERTOS/tasks.c ****              * not return. */
1188:../Dave/Generated/FREERTOS/tasks.c ****             uxTaskNumber++;
 853              	 .loc 1 1188 0
 854 0038 224B     	 ldr r3,.L46+4
 855 003a 1B68     	 ldr r3,[r3]
 856 003c 0133     	 adds r3,r3,#1
 857 003e 214A     	 ldr r2,.L46+4
 858 0040 1360     	 str r3,[r2]
1189:../Dave/Generated/FREERTOS/tasks.c **** 
1190:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 859              	 .loc 1 1190 0
 860 0042 1F4B     	 ldr r3,.L46
 861 0044 1B68     	 ldr r3,[r3]
 862 0046 FA68     	 ldr r2,[r7,#12]
 863 0048 9A42     	 cmp r2,r3
 864 004a 0BD1     	 bne .L41
1191:../Dave/Generated/FREERTOS/tasks.c ****             {
1192:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1193:../Dave/Generated/FREERTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1194:../Dave/Generated/FREERTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1195:../Dave/Generated/FREERTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1196:../Dave/Generated/FREERTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1197:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 865              	 .loc 1 1197 0
 866 004c FB68     	 ldr r3,[r7,#12]
 867 004e 0433     	 adds r3,r3,#4
 868 0050 1D48     	 ldr r0,.L46+8
 869 0052 1946     	 mov r1,r3
 870 0054 FFF7FEFF 	 bl vListInsertEnd
1198:../Dave/Generated/FREERTOS/tasks.c **** 
1199:../Dave/Generated/FREERTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1200:../Dave/Generated/FREERTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1201:../Dave/Generated/FREERTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1202:../Dave/Generated/FREERTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
 871              	 .loc 1 1202 0
 872 0058 1C4B     	 ldr r3,.L46+12
 873 005a 1B68     	 ldr r3,[r3]
 874 005c 0133     	 adds r3,r3,#1
 875 005e 1B4A     	 ldr r2,.L46+12
 876 0060 1360     	 str r3,[r2]
 877 0062 09E0     	 b .L42
 878              	.L41:
1203:../Dave/Generated/FREERTOS/tasks.c **** 
1204:../Dave/Generated/FREERTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1205:../Dave/Generated/FREERTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1206:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1207:../Dave/Generated/FREERTOS/tasks.c **** 
1208:../Dave/Generated/FREERTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1209:../Dave/Generated/FREERTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1210:../Dave/Generated/FREERTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1211:../Dave/Generated/FREERTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1212:../Dave/Generated/FREERTOS/tasks.c ****                  * required. */
1213:../Dave/Generated/FREERTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1214:../Dave/Generated/FREERTOS/tasks.c ****             }
1215:../Dave/Generated/FREERTOS/tasks.c ****             else
1216:../Dave/Generated/FREERTOS/tasks.c ****             {
1217:../Dave/Generated/FREERTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 879              	 .loc 1 1217 0
 880 0064 1A4B     	 ldr r3,.L46+16
 881 0066 1B68     	 ldr r3,[r3]
 882 0068 013B     	 subs r3,r3,#1
 883 006a 194A     	 ldr r2,.L46+16
 884 006c 1360     	 str r3,[r2]
1218:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1219:../Dave/Generated/FREERTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
 885              	 .loc 1 1219 0
 886 006e F868     	 ldr r0,[r7,#12]
 887 0070 FFF7FEFF 	 bl prvDeleteTCB
1220:../Dave/Generated/FREERTOS/tasks.c **** 
1221:../Dave/Generated/FREERTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1222:../Dave/Generated/FREERTOS/tasks.c ****                  * the task that has just been deleted. */
1223:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 888              	 .loc 1 1223 0
 889 0074 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 890              	.L42:
1224:../Dave/Generated/FREERTOS/tasks.c ****             }
1225:../Dave/Generated/FREERTOS/tasks.c ****         }
1226:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 891              	 .loc 1 1226 0
 892 0078 FFF7FEFF 	 bl vPortExitCritical
1227:../Dave/Generated/FREERTOS/tasks.c **** 
1228:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1229:../Dave/Generated/FREERTOS/tasks.c ****          * been deleted. */
1230:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 893              	 .loc 1 1230 0
 894 007c 154B     	 ldr r3,.L46+20
 895 007e 1B68     	 ldr r3,[r3]
 896 0080 002B     	 cmp r3,#0
 897 0082 1AD0     	 beq .L37
1231:../Dave/Generated/FREERTOS/tasks.c ****         {
1232:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 898              	 .loc 1 1232 0
 899 0084 0E4B     	 ldr r3,.L46
 900 0086 1B68     	 ldr r3,[r3]
 901 0088 FA68     	 ldr r2,[r7,#12]
 902 008a 9A42     	 cmp r2,r3
 903 008c 15D1     	 bne .L37
1233:../Dave/Generated/FREERTOS/tasks.c ****             {
1234:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 904              	 .loc 1 1234 0
 905 008e 124B     	 ldr r3,.L46+24
 906 0090 1B68     	 ldr r3,[r3]
 907 0092 002B     	 cmp r3,#0
 908 0094 09D0     	 beq .L44
 909              	.LBB151:
 910              	.LBB152:
 911              	 .loc 2 197 0 discriminator 1
 912              	
 913 0096 4FF0FC03 	 mov r3,#252
 914 009a 83F31188 	 msr basepri,r3
 915 009e BFF36F8F 	 isb 
 916 00a2 BFF34F8F 	 dsb 
 917              	
 918              	
 919              	 .thumb
 920 00a6 BB60     	 str r3,[r7,#8]
 921              	.L45:
 922              	.LBE152:
 923              	.LBE151:
 924              	 .loc 1 1234 0 discriminator 1
 925 00a8 FEE7     	 b .L45
 926              	.L44:
1235:../Dave/Generated/FREERTOS/tasks.c ****                 portYIELD_WITHIN_API();
 927              	 .loc 1 1235 0
 928 00aa 0C4B     	 ldr r3,.L46+28
 929 00ac 4FF08052 	 mov r2,#268435456
 930 00b0 1A60     	 str r2,[r3]
 931              	
 932 00b2 BFF34F8F 	 dsb
 933              	
 934              	
 935 00b6 BFF36F8F 	 isb
 936              	
 937              	 .thumb
 938              	.L37:
1236:../Dave/Generated/FREERTOS/tasks.c ****             }
1237:../Dave/Generated/FREERTOS/tasks.c ****             else
1238:../Dave/Generated/FREERTOS/tasks.c ****             {
1239:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1240:../Dave/Generated/FREERTOS/tasks.c ****             }
1241:../Dave/Generated/FREERTOS/tasks.c ****         }
1242:../Dave/Generated/FREERTOS/tasks.c ****     }
 939              	 .loc 1 1242 0
 940 00ba 1037     	 adds r7,r7,#16
 941              	.LCFI23:
 942              	 .cfi_def_cfa_offset 8
 943 00bc BD46     	 mov sp,r7
 944              	.LCFI24:
 945              	 .cfi_def_cfa_register 13
 946              	 
 947 00be 80BD     	 pop {r7,pc}
 948              	.L47:
 949              	 .align 2
 950              	.L46:
 951 00c0 00000000 	 .word pxCurrentTCB
 952 00c4 00000000 	 .word uxTaskNumber
 953 00c8 00000000 	 .word xTasksWaitingTermination
 954 00cc 00000000 	 .word uxDeletedTasksWaitingCleanUp
 955 00d0 00000000 	 .word uxCurrentNumberOfTasks
 956 00d4 00000000 	 .word xSchedulerRunning
 957 00d8 00000000 	 .word uxSchedulerSuspended
 958 00dc 04ED00E0 	 .word -536810236
 959              	 .cfi_endproc
 960              	.LFE141:
 962              	 .section .text.xTaskDelayUntil,"ax",%progbits
 963              	 .align 2
 964              	 .global xTaskDelayUntil
 965              	 .thumb
 966              	 .thumb_func
 968              	xTaskDelayUntil:
 969              	.LFB142:
1243:../Dave/Generated/FREERTOS/tasks.c **** 
1244:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1246:../Dave/Generated/FREERTOS/tasks.c **** 
1247:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1248:../Dave/Generated/FREERTOS/tasks.c **** 
1249:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1250:../Dave/Generated/FREERTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1251:../Dave/Generated/FREERTOS/tasks.c ****     {
 970              	 .loc 1 1251 0
 971              	 .cfi_startproc
 972              	 
 973              	 
 974 0000 80B5     	 push {r7,lr}
 975              	.LCFI25:
 976              	 .cfi_def_cfa_offset 8
 977              	 .cfi_offset 7,-8
 978              	 .cfi_offset 14,-4
 979 0002 8AB0     	 sub sp,sp,#40
 980              	.LCFI26:
 981              	 .cfi_def_cfa_offset 48
 982 0004 00AF     	 add r7,sp,#0
 983              	.LCFI27:
 984              	 .cfi_def_cfa_register 7
 985 0006 7860     	 str r0,[r7,#4]
 986 0008 3960     	 str r1,[r7]
1252:../Dave/Generated/FREERTOS/tasks.c ****         TickType_t xTimeToWake;
1253:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 987              	 .loc 1 1253 0
 988 000a 0023     	 movs r3,#0
 989 000c 7B62     	 str r3,[r7,#36]
1254:../Dave/Generated/FREERTOS/tasks.c **** 
1255:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
 990              	 .loc 1 1255 0
 991 000e 7B68     	 ldr r3,[r7,#4]
 992 0010 002B     	 cmp r3,#0
 993 0012 09D1     	 bne .L49
 994              	.LBB153:
 995              	.LBB154:
 996              	 .loc 2 197 0 discriminator 1
 997              	
 998 0014 4FF0FC03 	 mov r3,#252
 999 0018 83F31188 	 msr basepri,r3
 1000 001c BFF36F8F 	 isb 
 1001 0020 BFF34F8F 	 dsb 
 1002              	
 1003              	
 1004              	 .thumb
 1005 0024 7B61     	 str r3,[r7,#20]
 1006              	.L50:
 1007              	.LBE154:
 1008              	.LBE153:
 1009              	 .loc 1 1255 0 discriminator 1
 1010 0026 FEE7     	 b .L50
 1011              	.L49:
1256:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 1012              	 .loc 1 1256 0
 1013 0028 3B68     	 ldr r3,[r7]
 1014 002a 002B     	 cmp r3,#0
 1015 002c 09D1     	 bne .L51
 1016              	.LBB155:
 1017              	.LBB156:
 1018              	 .loc 2 197 0 discriminator 1
 1019              	
 1020 002e 4FF0FC03 	 mov r3,#252
 1021 0032 83F31188 	 msr basepri,r3
 1022 0036 BFF36F8F 	 isb 
 1023 003a BFF34F8F 	 dsb 
 1024              	
 1025              	
 1026              	 .thumb
 1027 003e 3B61     	 str r3,[r7,#16]
 1028              	.L52:
 1029              	.LBE156:
 1030              	.LBE155:
 1031              	 .loc 1 1256 0 discriminator 2
 1032 0040 FEE7     	 b .L52
 1033              	.L51:
1257:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 1034              	 .loc 1 1257 0
 1035 0042 2A4B     	 ldr r3,.L61
 1036 0044 1B68     	 ldr r3,[r3]
 1037 0046 002B     	 cmp r3,#0
 1038 0048 09D0     	 beq .L53
 1039              	.LBB157:
 1040              	.LBB158:
 1041              	 .loc 2 197 0 discriminator 1
 1042              	
 1043 004a 4FF0FC03 	 mov r3,#252
 1044 004e 83F31188 	 msr basepri,r3
 1045 0052 BFF36F8F 	 isb 
 1046 0056 BFF34F8F 	 dsb 
 1047              	
 1048              	
 1049              	 .thumb
 1050 005a FB60     	 str r3,[r7,#12]
 1051              	.L54:
 1052              	.LBE158:
 1053              	.LBE157:
 1054              	 .loc 1 1257 0 discriminator 3
 1055 005c FEE7     	 b .L54
 1056              	.L53:
1258:../Dave/Generated/FREERTOS/tasks.c **** 
1259:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 1057              	 .loc 1 1259 0
 1058 005e FFF7FEFF 	 bl vTaskSuspendAll
 1059              	.LBB159:
1260:../Dave/Generated/FREERTOS/tasks.c ****         {
1261:../Dave/Generated/FREERTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1262:../Dave/Generated/FREERTOS/tasks.c ****              * block. */
1263:../Dave/Generated/FREERTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
 1060              	 .loc 1 1263 0
 1061 0062 234B     	 ldr r3,.L61+4
 1062 0064 1B68     	 ldr r3,[r3]
 1063 0066 3B62     	 str r3,[r7,#32]
1264:../Dave/Generated/FREERTOS/tasks.c **** 
1265:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1266:../Dave/Generated/FREERTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1064              	 .loc 1 1266 0
 1065 0068 7B68     	 ldr r3,[r7,#4]
 1066 006a 1A68     	 ldr r2,[r3]
 1067 006c 3B68     	 ldr r3,[r7]
 1068 006e 1344     	 add r3,r3,r2
 1069 0070 FB61     	 str r3,[r7,#28]
1267:../Dave/Generated/FREERTOS/tasks.c **** 
1268:../Dave/Generated/FREERTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
 1070              	 .loc 1 1268 0
 1071 0072 7B68     	 ldr r3,[r7,#4]
 1072 0074 1A68     	 ldr r2,[r3]
 1073 0076 3B6A     	 ldr r3,[r7,#32]
 1074 0078 9A42     	 cmp r2,r3
 1075 007a 0BD9     	 bls .L55
1269:../Dave/Generated/FREERTOS/tasks.c ****             {
1270:../Dave/Generated/FREERTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1271:../Dave/Generated/FREERTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1272:../Dave/Generated/FREERTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1273:../Dave/Generated/FREERTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1274:../Dave/Generated/FREERTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1275:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1076              	 .loc 1 1275 0
 1077 007c 7B68     	 ldr r3,[r7,#4]
 1078 007e 1A68     	 ldr r2,[r3]
 1079 0080 FB69     	 ldr r3,[r7,#28]
 1080 0082 9A42     	 cmp r2,r3
 1081 0084 11D9     	 bls .L56
 1082              	 .loc 1 1275 0 is_stmt 0 discriminator 1
 1083 0086 FA69     	 ldr r2,[r7,#28]
 1084 0088 3B6A     	 ldr r3,[r7,#32]
 1085 008a 9A42     	 cmp r2,r3
 1086 008c 0DD9     	 bls .L56
1276:../Dave/Generated/FREERTOS/tasks.c ****                 {
1277:../Dave/Generated/FREERTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 1087              	 .loc 1 1277 0 is_stmt 1
 1088 008e 0123     	 movs r3,#1
 1089 0090 7B62     	 str r3,[r7,#36]
 1090 0092 0AE0     	 b .L56
 1091              	.L55:
1278:../Dave/Generated/FREERTOS/tasks.c ****                 }
1279:../Dave/Generated/FREERTOS/tasks.c ****                 else
1280:../Dave/Generated/FREERTOS/tasks.c ****                 {
1281:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1282:../Dave/Generated/FREERTOS/tasks.c ****                 }
1283:../Dave/Generated/FREERTOS/tasks.c ****             }
1284:../Dave/Generated/FREERTOS/tasks.c ****             else
1285:../Dave/Generated/FREERTOS/tasks.c ****             {
1286:../Dave/Generated/FREERTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1287:../Dave/Generated/FREERTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1288:../Dave/Generated/FREERTOS/tasks.c ****                  * tick time is less than the wake time. */
1289:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1092              	 .loc 1 1289 0
 1093 0094 7B68     	 ldr r3,[r7,#4]
 1094 0096 1A68     	 ldr r2,[r3]
 1095 0098 FB69     	 ldr r3,[r7,#28]
 1096 009a 9A42     	 cmp r2,r3
 1097 009c 03D8     	 bhi .L57
 1098              	 .loc 1 1289 0 is_stmt 0 discriminator 1
 1099 009e FA69     	 ldr r2,[r7,#28]
 1100 00a0 3B6A     	 ldr r3,[r7,#32]
 1101 00a2 9A42     	 cmp r2,r3
 1102 00a4 01D9     	 bls .L56
 1103              	.L57:
1290:../Dave/Generated/FREERTOS/tasks.c ****                 {
1291:../Dave/Generated/FREERTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 1104              	 .loc 1 1291 0 is_stmt 1
 1105 00a6 0123     	 movs r3,#1
 1106 00a8 7B62     	 str r3,[r7,#36]
 1107              	.L56:
1292:../Dave/Generated/FREERTOS/tasks.c ****                 }
1293:../Dave/Generated/FREERTOS/tasks.c ****                 else
1294:../Dave/Generated/FREERTOS/tasks.c ****                 {
1295:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1296:../Dave/Generated/FREERTOS/tasks.c ****                 }
1297:../Dave/Generated/FREERTOS/tasks.c ****             }
1298:../Dave/Generated/FREERTOS/tasks.c **** 
1299:../Dave/Generated/FREERTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1300:../Dave/Generated/FREERTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
 1108              	 .loc 1 1300 0
 1109 00aa 7B68     	 ldr r3,[r7,#4]
 1110 00ac FA69     	 ldr r2,[r7,#28]
 1111 00ae 1A60     	 str r2,[r3]
1301:../Dave/Generated/FREERTOS/tasks.c **** 
1302:../Dave/Generated/FREERTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
 1112              	 .loc 1 1302 0
 1113 00b0 7B6A     	 ldr r3,[r7,#36]
 1114 00b2 002B     	 cmp r3,#0
 1115 00b4 06D0     	 beq .L58
1303:../Dave/Generated/FREERTOS/tasks.c ****             {
1304:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1305:../Dave/Generated/FREERTOS/tasks.c **** 
1306:../Dave/Generated/FREERTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1307:../Dave/Generated/FREERTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1308:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1116              	 .loc 1 1308 0
 1117 00b6 FA69     	 ldr r2,[r7,#28]
 1118 00b8 3B6A     	 ldr r3,[r7,#32]
 1119 00ba D31A     	 subs r3,r2,r3
 1120 00bc 1846     	 mov r0,r3
 1121 00be 0021     	 movs r1,#0
 1122 00c0 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 1123              	.L58:
 1124              	.LBE159:
1309:../Dave/Generated/FREERTOS/tasks.c ****             }
1310:../Dave/Generated/FREERTOS/tasks.c ****             else
1311:../Dave/Generated/FREERTOS/tasks.c ****             {
1312:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1313:../Dave/Generated/FREERTOS/tasks.c ****             }
1314:../Dave/Generated/FREERTOS/tasks.c ****         }
1315:../Dave/Generated/FREERTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
 1125              	 .loc 1 1315 0
 1126 00c4 FFF7FEFF 	 bl xTaskResumeAll
 1127 00c8 B861     	 str r0,[r7,#24]
1316:../Dave/Generated/FREERTOS/tasks.c **** 
1317:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1318:../Dave/Generated/FREERTOS/tasks.c ****          * have put ourselves to sleep. */
1319:../Dave/Generated/FREERTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1128              	 .loc 1 1319 0
 1129 00ca BB69     	 ldr r3,[r7,#24]
 1130 00cc 002B     	 cmp r3,#0
 1131 00ce 07D1     	 bne .L59
1320:../Dave/Generated/FREERTOS/tasks.c ****         {
1321:../Dave/Generated/FREERTOS/tasks.c ****             portYIELD_WITHIN_API();
 1132              	 .loc 1 1321 0
 1133 00d0 084B     	 ldr r3,.L61+8
 1134 00d2 4FF08052 	 mov r2,#268435456
 1135 00d6 1A60     	 str r2,[r3]
 1136              	
 1137 00d8 BFF34F8F 	 dsb
 1138              	
 1139              	
 1140 00dc BFF36F8F 	 isb
 1141              	
 1142              	 .thumb
 1143              	.L59:
1322:../Dave/Generated/FREERTOS/tasks.c ****         }
1323:../Dave/Generated/FREERTOS/tasks.c ****         else
1324:../Dave/Generated/FREERTOS/tasks.c ****         {
1325:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1326:../Dave/Generated/FREERTOS/tasks.c ****         }
1327:../Dave/Generated/FREERTOS/tasks.c **** 
1328:../Dave/Generated/FREERTOS/tasks.c ****         return xShouldDelay;
 1144              	 .loc 1 1328 0
 1145 00e0 7B6A     	 ldr r3,[r7,#36]
1329:../Dave/Generated/FREERTOS/tasks.c ****     }
 1146              	 .loc 1 1329 0
 1147 00e2 1846     	 mov r0,r3
 1148 00e4 2837     	 adds r7,r7,#40
 1149              	.LCFI28:
 1150              	 .cfi_def_cfa_offset 8
 1151 00e6 BD46     	 mov sp,r7
 1152              	.LCFI29:
 1153              	 .cfi_def_cfa_register 13
 1154              	 
 1155 00e8 80BD     	 pop {r7,pc}
 1156              	.L62:
 1157 00ea 00BF     	 .align 2
 1158              	.L61:
 1159 00ec 00000000 	 .word uxSchedulerSuspended
 1160 00f0 00000000 	 .word xTickCount
 1161 00f4 04ED00E0 	 .word -536810236
 1162              	 .cfi_endproc
 1163              	.LFE142:
 1165              	 .section .text.vTaskDelay,"ax",%progbits
 1166              	 .align 2
 1167              	 .global vTaskDelay
 1168              	 .thumb
 1169              	 .thumb_func
 1171              	vTaskDelay:
 1172              	.LFB143:
1330:../Dave/Generated/FREERTOS/tasks.c **** 
1331:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1332:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1333:../Dave/Generated/FREERTOS/tasks.c **** 
1334:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1335:../Dave/Generated/FREERTOS/tasks.c **** 
1336:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1337:../Dave/Generated/FREERTOS/tasks.c ****     {
 1173              	 .loc 1 1337 0
 1174              	 .cfi_startproc
 1175              	 
 1176              	 
 1177 0000 80B5     	 push {r7,lr}
 1178              	.LCFI30:
 1179              	 .cfi_def_cfa_offset 8
 1180              	 .cfi_offset 7,-8
 1181              	 .cfi_offset 14,-4
 1182 0002 84B0     	 sub sp,sp,#16
 1183              	.LCFI31:
 1184              	 .cfi_def_cfa_offset 24
 1185 0004 00AF     	 add r7,sp,#0
 1186              	.LCFI32:
 1187              	 .cfi_def_cfa_register 7
 1188 0006 7860     	 str r0,[r7,#4]
1338:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 1189              	 .loc 1 1338 0
 1190 0008 0023     	 movs r3,#0
 1191 000a FB60     	 str r3,[r7,#12]
1339:../Dave/Generated/FREERTOS/tasks.c **** 
1340:../Dave/Generated/FREERTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1341:../Dave/Generated/FREERTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
 1192              	 .loc 1 1341 0
 1193 000c 7B68     	 ldr r3,[r7,#4]
 1194 000e 002B     	 cmp r3,#0
 1195 0010 16D0     	 beq .L64
1342:../Dave/Generated/FREERTOS/tasks.c ****         {
1343:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
 1196              	 .loc 1 1343 0
 1197 0012 124B     	 ldr r3,.L68
 1198 0014 1B68     	 ldr r3,[r3]
 1199 0016 002B     	 cmp r3,#0
 1200 0018 09D0     	 beq .L65
 1201              	.LBB160:
 1202              	.LBB161:
 1203              	 .loc 2 197 0 discriminator 1
 1204              	
 1205 001a 4FF0FC03 	 mov r3,#252
 1206 001e 83F31188 	 msr basepri,r3
 1207 0022 BFF36F8F 	 isb 
 1208 0026 BFF34F8F 	 dsb 
 1209              	
 1210              	
 1211              	 .thumb
 1212 002a BB60     	 str r3,[r7,#8]
 1213              	.L66:
 1214              	.LBE161:
 1215              	.LBE160:
 1216              	 .loc 1 1343 0 discriminator 1
 1217 002c FEE7     	 b .L66
 1218              	.L65:
1344:../Dave/Generated/FREERTOS/tasks.c ****             vTaskSuspendAll();
 1219              	 .loc 1 1344 0
 1220 002e FFF7FEFF 	 bl vTaskSuspendAll
1345:../Dave/Generated/FREERTOS/tasks.c ****             {
1346:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELAY();
1347:../Dave/Generated/FREERTOS/tasks.c **** 
1348:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task that is removed from the event list while the
1349:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1350:../Dave/Generated/FREERTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1351:../Dave/Generated/FREERTOS/tasks.c ****                  * is resumed.
1352:../Dave/Generated/FREERTOS/tasks.c ****                  *
1353:../Dave/Generated/FREERTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1354:../Dave/Generated/FREERTOS/tasks.c ****                  * executing task. */
1355:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1221              	 .loc 1 1355 0
 1222 0032 7868     	 ldr r0,[r7,#4]
 1223 0034 0021     	 movs r1,#0
 1224 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
1356:../Dave/Generated/FREERTOS/tasks.c ****             }
1357:../Dave/Generated/FREERTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
 1225              	 .loc 1 1357 0
 1226 003a FFF7FEFF 	 bl xTaskResumeAll
 1227 003e F860     	 str r0,[r7,#12]
 1228              	.L64:
1358:../Dave/Generated/FREERTOS/tasks.c ****         }
1359:../Dave/Generated/FREERTOS/tasks.c ****         else
1360:../Dave/Generated/FREERTOS/tasks.c ****         {
1361:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1362:../Dave/Generated/FREERTOS/tasks.c ****         }
1363:../Dave/Generated/FREERTOS/tasks.c **** 
1364:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1365:../Dave/Generated/FREERTOS/tasks.c ****          * have put ourselves to sleep. */
1366:../Dave/Generated/FREERTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1229              	 .loc 1 1366 0
 1230 0040 FB68     	 ldr r3,[r7,#12]
 1231 0042 002B     	 cmp r3,#0
 1232 0044 07D1     	 bne .L63
1367:../Dave/Generated/FREERTOS/tasks.c ****         {
1368:../Dave/Generated/FREERTOS/tasks.c ****             portYIELD_WITHIN_API();
 1233              	 .loc 1 1368 0
 1234 0046 064B     	 ldr r3,.L68+4
 1235 0048 4FF08052 	 mov r2,#268435456
 1236 004c 1A60     	 str r2,[r3]
 1237              	
 1238 004e BFF34F8F 	 dsb
 1239              	
 1240              	
 1241 0052 BFF36F8F 	 isb
 1242              	
 1243              	 .thumb
 1244              	.L63:
1369:../Dave/Generated/FREERTOS/tasks.c ****         }
1370:../Dave/Generated/FREERTOS/tasks.c ****         else
1371:../Dave/Generated/FREERTOS/tasks.c ****         {
1372:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1373:../Dave/Generated/FREERTOS/tasks.c ****         }
1374:../Dave/Generated/FREERTOS/tasks.c ****     }
 1245              	 .loc 1 1374 0
 1246 0056 1037     	 adds r7,r7,#16
 1247              	.LCFI33:
 1248              	 .cfi_def_cfa_offset 8
 1249 0058 BD46     	 mov sp,r7
 1250              	.LCFI34:
 1251              	 .cfi_def_cfa_register 13
 1252              	 
 1253 005a 80BD     	 pop {r7,pc}
 1254              	.L69:
 1255              	 .align 2
 1256              	.L68:
 1257 005c 00000000 	 .word uxSchedulerSuspended
 1258 0060 04ED00E0 	 .word -536810236
 1259              	 .cfi_endproc
 1260              	.LFE143:
 1262              	 .section .text.eTaskGetState,"ax",%progbits
 1263              	 .align 2
 1264              	 .global eTaskGetState
 1265              	 .thumb
 1266              	 .thumb_func
 1268              	eTaskGetState:
 1269              	.LFB144:
1375:../Dave/Generated/FREERTOS/tasks.c **** 
1376:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1377:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1378:../Dave/Generated/FREERTOS/tasks.c **** 
1379:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1380:../Dave/Generated/FREERTOS/tasks.c **** 
1381:../Dave/Generated/FREERTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1382:../Dave/Generated/FREERTOS/tasks.c ****     {
 1270              	 .loc 1 1382 0
 1271              	 .cfi_startproc
 1272              	 
 1273              	 
 1274 0000 80B5     	 push {r7,lr}
 1275              	.LCFI35:
 1276              	 .cfi_def_cfa_offset 8
 1277              	 .cfi_offset 7,-8
 1278              	 .cfi_offset 14,-4
 1279 0002 8AB0     	 sub sp,sp,#40
 1280              	.LCFI36:
 1281              	 .cfi_def_cfa_offset 48
 1282 0004 00AF     	 add r7,sp,#0
 1283              	.LCFI37:
 1284              	 .cfi_def_cfa_register 7
 1285 0006 7860     	 str r0,[r7,#4]
1383:../Dave/Generated/FREERTOS/tasks.c ****         eTaskState eReturn;
1384:../Dave/Generated/FREERTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1385:../Dave/Generated/FREERTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1286              	 .loc 1 1385 0
 1287 0008 7B68     	 ldr r3,[r7,#4]
 1288 000a FB61     	 str r3,[r7,#28]
1386:../Dave/Generated/FREERTOS/tasks.c **** 
1387:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTCB );
 1289              	 .loc 1 1387 0
 1290 000c FB69     	 ldr r3,[r7,#28]
 1291 000e 002B     	 cmp r3,#0
 1292 0010 09D1     	 bne .L71
 1293              	.LBB162:
 1294              	.LBB163:
 1295              	 .loc 2 197 0 discriminator 1
 1296              	
 1297 0012 4FF0FC03 	 mov r3,#252
 1298 0016 83F31188 	 msr basepri,r3
 1299 001a BFF36F8F 	 isb 
 1300 001e BFF34F8F 	 dsb 
 1301              	
 1302              	
 1303              	 .thumb
 1304 0022 FB60     	 str r3,[r7,#12]
 1305              	.L72:
 1306              	.LBE163:
 1307              	.LBE162:
 1308              	 .loc 1 1387 0 discriminator 1
 1309 0024 FEE7     	 b .L72
 1310              	.L71:
1388:../Dave/Generated/FREERTOS/tasks.c **** 
1389:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1311              	 .loc 1 1389 0
 1312 0026 2D4B     	 ldr r3,.L87
 1313 0028 1B68     	 ldr r3,[r3]
 1314 002a FA69     	 ldr r2,[r7,#28]
 1315 002c 9A42     	 cmp r2,r3
 1316 002e 03D1     	 bne .L73
1390:../Dave/Generated/FREERTOS/tasks.c ****         {
1391:../Dave/Generated/FREERTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1392:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eRunning;
 1317              	 .loc 1 1392 0
 1318 0030 0023     	 movs r3,#0
 1319 0032 87F82730 	 strb r3,[r7,#39]
 1320 0036 4BE0     	 b .L74
 1321              	.L73:
1393:../Dave/Generated/FREERTOS/tasks.c ****         }
1394:../Dave/Generated/FREERTOS/tasks.c ****         else
1395:../Dave/Generated/FREERTOS/tasks.c ****         {
1396:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 1322              	 .loc 1 1396 0
 1323 0038 FFF7FEFF 	 bl vPortEnterCritical
1397:../Dave/Generated/FREERTOS/tasks.c ****             {
1398:../Dave/Generated/FREERTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1324              	 .loc 1 1398 0
 1325 003c FB69     	 ldr r3,[r7,#28]
 1326 003e 5B69     	 ldr r3,[r3,#20]
 1327 0040 BB61     	 str r3,[r7,#24]
1399:../Dave/Generated/FREERTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1328              	 .loc 1 1399 0
 1329 0042 274B     	 ldr r3,.L87+4
 1330 0044 1B68     	 ldr r3,[r3]
 1331 0046 7B61     	 str r3,[r7,#20]
1400:../Dave/Generated/FREERTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1332              	 .loc 1 1400 0
 1333 0048 264B     	 ldr r3,.L87+8
 1334 004a 1B68     	 ldr r3,[r3]
 1335 004c 3B61     	 str r3,[r7,#16]
1401:../Dave/Generated/FREERTOS/tasks.c ****             }
1402:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 1336              	 .loc 1 1402 0
 1337 004e FFF7FEFF 	 bl vPortExitCritical
1403:../Dave/Generated/FREERTOS/tasks.c **** 
1404:../Dave/Generated/FREERTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1338              	 .loc 1 1404 0
 1339 0052 BA69     	 ldr r2,[r7,#24]
 1340 0054 7B69     	 ldr r3,[r7,#20]
 1341 0056 9A42     	 cmp r2,r3
 1342 0058 03D0     	 beq .L75
 1343              	 .loc 1 1404 0 is_stmt 0 discriminator 1
 1344 005a BA69     	 ldr r2,[r7,#24]
 1345 005c 3B69     	 ldr r3,[r7,#16]
 1346 005e 9A42     	 cmp r2,r3
 1347 0060 03D1     	 bne .L76
 1348              	.L75:
1405:../Dave/Generated/FREERTOS/tasks.c ****             {
1406:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1407:../Dave/Generated/FREERTOS/tasks.c ****                  * lists. */
1408:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eBlocked;
 1349              	 .loc 1 1408 0 is_stmt 1
 1350 0062 0223     	 movs r3,#2
 1351 0064 87F82730 	 strb r3,[r7,#39]
 1352 0068 32E0     	 b .L74
 1353              	.L76:
1409:../Dave/Generated/FREERTOS/tasks.c ****             }
1410:../Dave/Generated/FREERTOS/tasks.c **** 
1411:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1412:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
 1354              	 .loc 1 1412 0
 1355 006a BB69     	 ldr r3,[r7,#24]
 1356 006c 1E4A     	 ldr r2,.L87+12
 1357 006e 9342     	 cmp r3,r2
 1358 0070 20D1     	 bne .L77
1413:../Dave/Generated/FREERTOS/tasks.c ****                 {
1414:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1415:../Dave/Generated/FREERTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1416:../Dave/Generated/FREERTOS/tasks.c ****                      * indefinitely? */
1417:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1359              	 .loc 1 1417 0
 1360 0072 FB69     	 ldr r3,[r7,#28]
 1361 0074 9B6A     	 ldr r3,[r3,#40]
 1362 0076 002B     	 cmp r3,#0
 1363 0078 18D1     	 bne .L78
 1364              	.LBB164:
1418:../Dave/Generated/FREERTOS/tasks.c ****                     {
1419:../Dave/Generated/FREERTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1420:../Dave/Generated/FREERTOS/tasks.c ****                             {
1421:../Dave/Generated/FREERTOS/tasks.c ****                                 BaseType_t x;
1422:../Dave/Generated/FREERTOS/tasks.c **** 
1423:../Dave/Generated/FREERTOS/tasks.c ****                                 /* The task does not appear on the event list item of
1424:../Dave/Generated/FREERTOS/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1425:../Dave/Generated/FREERTOS/tasks.c ****                                  * blocked state if it is waiting on its notification
1426:../Dave/Generated/FREERTOS/tasks.c ****                                  * rather than waiting on an object.  If not, is
1427:../Dave/Generated/FREERTOS/tasks.c ****                                  * suspended. */
1428:../Dave/Generated/FREERTOS/tasks.c ****                                 eReturn = eSuspended;
 1365              	 .loc 1 1428 0
 1366 007a 0323     	 movs r3,#3
 1367 007c 87F82730 	 strb r3,[r7,#39]
1429:../Dave/Generated/FREERTOS/tasks.c **** 
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1368              	 .loc 1 1430 0
 1369 0080 0023     	 movs r3,#0
 1370 0082 3B62     	 str r3,[r7,#32]
 1371 0084 0EE0     	 b .L79
 1372              	.L82:
1431:../Dave/Generated/FREERTOS/tasks.c ****                                 {
1432:../Dave/Generated/FREERTOS/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1373              	 .loc 1 1432 0
 1374 0086 FA69     	 ldr r2,[r7,#28]
 1375 0088 3B6A     	 ldr r3,[r7,#32]
 1376 008a 1344     	 add r3,r3,r2
 1377 008c 6833     	 adds r3,r3,#104
 1378 008e 1B79     	 ldrb r3,[r3,#4]
 1379 0090 DBB2     	 uxtb r3,r3
 1380 0092 012B     	 cmp r3,#1
 1381 0094 03D1     	 bne .L80
1433:../Dave/Generated/FREERTOS/tasks.c ****                                     {
1434:../Dave/Generated/FREERTOS/tasks.c ****                                         eReturn = eBlocked;
 1382              	 .loc 1 1434 0
 1383 0096 0223     	 movs r3,#2
 1384 0098 87F82730 	 strb r3,[r7,#39]
1435:../Dave/Generated/FREERTOS/tasks.c ****                                         break;
 1385              	 .loc 1 1435 0
 1386 009c 05E0     	 b .L81
 1387              	.L80:
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 {
 1388              	 .loc 1 1430 0 discriminator 2
 1389 009e 3B6A     	 ldr r3,[r7,#32]
 1390 00a0 0133     	 adds r3,r3,#1
 1391 00a2 3B62     	 str r3,[r7,#32]
 1392              	.L79:
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 {
 1393              	 .loc 1 1430 0 is_stmt 0 discriminator 1
 1394 00a4 3B6A     	 ldr r3,[r7,#32]
 1395 00a6 002B     	 cmp r3,#0
 1396 00a8 EDDD     	 ble .L82
 1397              	.L81:
 1398              	.LBE164:
 1399 00aa 11E0     	 b .L74
 1400              	.L78:
1436:../Dave/Generated/FREERTOS/tasks.c ****                                     }
1437:../Dave/Generated/FREERTOS/tasks.c ****                                 }
1438:../Dave/Generated/FREERTOS/tasks.c ****                             }
1439:../Dave/Generated/FREERTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1440:../Dave/Generated/FREERTOS/tasks.c ****                             {
1441:../Dave/Generated/FREERTOS/tasks.c ****                                 eReturn = eSuspended;
1442:../Dave/Generated/FREERTOS/tasks.c ****                             }
1443:../Dave/Generated/FREERTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1444:../Dave/Generated/FREERTOS/tasks.c ****                     }
1445:../Dave/Generated/FREERTOS/tasks.c ****                     else
1446:../Dave/Generated/FREERTOS/tasks.c ****                     {
1447:../Dave/Generated/FREERTOS/tasks.c ****                         eReturn = eBlocked;
 1401              	 .loc 1 1447 0 is_stmt 1
 1402 00ac 0223     	 movs r3,#2
 1403 00ae 87F82730 	 strb r3,[r7,#39]
 1404 00b2 0DE0     	 b .L74
 1405              	.L77:
1448:../Dave/Generated/FREERTOS/tasks.c ****                     }
1449:../Dave/Generated/FREERTOS/tasks.c ****                 }
1450:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1451:../Dave/Generated/FREERTOS/tasks.c **** 
1452:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1453:../Dave/Generated/FREERTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1406              	 .loc 1 1453 0
 1407 00b4 BB69     	 ldr r3,[r7,#24]
 1408 00b6 0D4A     	 ldr r2,.L87+16
 1409 00b8 9342     	 cmp r3,r2
 1410 00ba 02D0     	 beq .L84
 1411              	 .loc 1 1453 0 is_stmt 0 discriminator 1
 1412 00bc BB69     	 ldr r3,[r7,#24]
 1413 00be 002B     	 cmp r3,#0
 1414 00c0 03D1     	 bne .L85
 1415              	.L84:
1454:../Dave/Generated/FREERTOS/tasks.c ****                 {
1455:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1456:../Dave/Generated/FREERTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1457:../Dave/Generated/FREERTOS/tasks.c ****                      * all. */
1458:../Dave/Generated/FREERTOS/tasks.c ****                     eReturn = eDeleted;
 1416              	 .loc 1 1458 0 is_stmt 1
 1417 00c2 0423     	 movs r3,#4
 1418 00c4 87F82730 	 strb r3,[r7,#39]
 1419 00c8 02E0     	 b .L74
 1420              	.L85:
1459:../Dave/Generated/FREERTOS/tasks.c ****                 }
1460:../Dave/Generated/FREERTOS/tasks.c ****             #endif
1461:../Dave/Generated/FREERTOS/tasks.c **** 
1462:../Dave/Generated/FREERTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1463:../Dave/Generated/FREERTOS/tasks.c ****             {
1464:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1465:../Dave/Generated/FREERTOS/tasks.c ****                  * Ready (including pending ready) state. */
1466:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eReady;
 1421              	 .loc 1 1466 0
 1422 00ca 0123     	 movs r3,#1
 1423 00cc 87F82730 	 strb r3,[r7,#39]
 1424              	.L74:
1467:../Dave/Generated/FREERTOS/tasks.c ****             }
1468:../Dave/Generated/FREERTOS/tasks.c ****         }
1469:../Dave/Generated/FREERTOS/tasks.c **** 
1470:../Dave/Generated/FREERTOS/tasks.c ****         return eReturn;
 1425              	 .loc 1 1470 0
 1426 00d0 97F82730 	 ldrb r3,[r7,#39]
1471:../Dave/Generated/FREERTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1427              	 .loc 1 1471 0
 1428 00d4 1846     	 mov r0,r3
 1429 00d6 2837     	 adds r7,r7,#40
 1430              	.LCFI38:
 1431              	 .cfi_def_cfa_offset 8
 1432 00d8 BD46     	 mov sp,r7
 1433              	.LCFI39:
 1434              	 .cfi_def_cfa_register 13
 1435              	 
 1436 00da 80BD     	 pop {r7,pc}
 1437              	.L88:
 1438              	 .align 2
 1439              	.L87:
 1440 00dc 00000000 	 .word pxCurrentTCB
 1441 00e0 00000000 	 .word pxDelayedTaskList
 1442 00e4 00000000 	 .word pxOverflowDelayedTaskList
 1443 00e8 00000000 	 .word xSuspendedTaskList
 1444 00ec 00000000 	 .word xTasksWaitingTermination
 1445              	 .cfi_endproc
 1446              	.LFE144:
 1448              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 1449              	 .align 2
 1450              	 .global uxTaskPriorityGet
 1451              	 .thumb
 1452              	 .thumb_func
 1454              	uxTaskPriorityGet:
 1455              	.LFB145:
1472:../Dave/Generated/FREERTOS/tasks.c **** 
1473:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1475:../Dave/Generated/FREERTOS/tasks.c **** 
1476:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:../Dave/Generated/FREERTOS/tasks.c **** 
1478:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:../Dave/Generated/FREERTOS/tasks.c ****     {
 1456              	 .loc 1 1479 0
 1457              	 .cfi_startproc
 1458              	 
 1459              	 
 1460 0000 80B5     	 push {r7,lr}
 1461              	.LCFI40:
 1462              	 .cfi_def_cfa_offset 8
 1463              	 .cfi_offset 7,-8
 1464              	 .cfi_offset 14,-4
 1465 0002 84B0     	 sub sp,sp,#16
 1466              	.LCFI41:
 1467              	 .cfi_def_cfa_offset 24
 1468 0004 00AF     	 add r7,sp,#0
 1469              	.LCFI42:
 1470              	 .cfi_def_cfa_register 7
 1471 0006 7860     	 str r0,[r7,#4]
1480:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
1481:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
1482:../Dave/Generated/FREERTOS/tasks.c **** 
1483:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1472              	 .loc 1 1483 0
 1473 0008 FFF7FEFF 	 bl vPortEnterCritical
1484:../Dave/Generated/FREERTOS/tasks.c ****         {
1485:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1486:../Dave/Generated/FREERTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1487:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1474              	 .loc 1 1487 0
 1475 000c 7B68     	 ldr r3,[r7,#4]
 1476 000e 002B     	 cmp r3,#0
 1477 0010 02D1     	 bne .L90
 1478              	 .loc 1 1487 0 is_stmt 0 discriminator 1
 1479 0012 074B     	 ldr r3,.L93
 1480 0014 1B68     	 ldr r3,[r3]
 1481 0016 00E0     	 b .L91
 1482              	.L90:
 1483              	 .loc 1 1487 0 discriminator 2
 1484 0018 7B68     	 ldr r3,[r7,#4]
 1485              	.L91:
 1486              	 .loc 1 1487 0 discriminator 4
 1487 001a FB60     	 str r3,[r7,#12]
1488:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1488              	 .loc 1 1488 0 is_stmt 1 discriminator 4
 1489 001c FB68     	 ldr r3,[r7,#12]
 1490 001e DB6A     	 ldr r3,[r3,#44]
 1491 0020 BB60     	 str r3,[r7,#8]
1489:../Dave/Generated/FREERTOS/tasks.c ****         }
1490:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1492              	 .loc 1 1490 0 discriminator 4
 1493 0022 FFF7FEFF 	 bl vPortExitCritical
1491:../Dave/Generated/FREERTOS/tasks.c **** 
1492:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 1494              	 .loc 1 1492 0 discriminator 4
 1495 0026 BB68     	 ldr r3,[r7,#8]
1493:../Dave/Generated/FREERTOS/tasks.c ****     }
 1496              	 .loc 1 1493 0 discriminator 4
 1497 0028 1846     	 mov r0,r3
 1498 002a 1037     	 adds r7,r7,#16
 1499              	.LCFI43:
 1500              	 .cfi_def_cfa_offset 8
 1501 002c BD46     	 mov sp,r7
 1502              	.LCFI44:
 1503              	 .cfi_def_cfa_register 13
 1504              	 
 1505 002e 80BD     	 pop {r7,pc}
 1506              	.L94:
 1507              	 .align 2
 1508              	.L93:
 1509 0030 00000000 	 .word pxCurrentTCB
 1510              	 .cfi_endproc
 1511              	.LFE145:
 1513              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 1514              	 .align 2
 1515              	 .global uxTaskPriorityGetFromISR
 1516              	 .thumb
 1517              	 .thumb_func
 1519              	uxTaskPriorityGetFromISR:
 1520              	.LFB146:
1494:../Dave/Generated/FREERTOS/tasks.c **** 
1495:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1497:../Dave/Generated/FREERTOS/tasks.c **** 
1498:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:../Dave/Generated/FREERTOS/tasks.c **** 
1500:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:../Dave/Generated/FREERTOS/tasks.c ****     {
 1521              	 .loc 1 1501 0
 1522              	 .cfi_startproc
 1523              	 
 1524              	 
 1525 0000 80B5     	 push {r7,lr}
 1526              	.LCFI45:
 1527              	 .cfi_def_cfa_offset 8
 1528              	 .cfi_offset 7,-8
 1529              	 .cfi_offset 14,-4
 1530 0002 88B0     	 sub sp,sp,#32
 1531              	.LCFI46:
 1532              	 .cfi_def_cfa_offset 40
 1533 0004 00AF     	 add r7,sp,#0
 1534              	.LCFI47:
 1535              	 .cfi_def_cfa_register 7
 1536 0006 7860     	 str r0,[r7,#4]
1502:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
1503:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1504:../Dave/Generated/FREERTOS/tasks.c **** 
1505:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1506:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1507:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1508:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1509:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1511:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1513:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1514:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1515:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1516:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1518:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1519:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
1520:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1521:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1537              	 .loc 1 1521 0
 1538 0008 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1539              	.LBB165:
 1540              	.LBB166:
 198:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 199:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %0, %1												\n"\
 200:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %0											\n"\
 201:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 202:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 203:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 205:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 206:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 207:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 208:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 209:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 211:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 213:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 1541              	 .loc 2 213 0
 1542              	
 1543 000c EFF31182 	 mrs r2,basepri
 1544 0010 4FF0FC03 	 mov r3,#252
 1545 0014 83F31188 	 msr basepri,r3
 1546 0018 BFF36F8F 	 isb 
 1547 001c BFF34F8F 	 dsb 
 1548              	
 1549              	
 1550              	 .thumb
 1551 0020 3A61     	 str r2,[r7,#16]
 1552 0022 FB60     	 str r3,[r7,#12]
 214:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 215:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mrs %0, basepri											\n"\
 216:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	mov %1, %2												\n"\
 217:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	msr basepri, %1											\n"\
 218:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	isb														\n"\
 219:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             "	dsb														\n"\
 220:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 221:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         );
 222:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 223:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 224:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****          * warnings. */
 225:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         return ulOriginalBASEPRI;
 1553              	 .loc 2 225 0
 1554 0024 3B69     	 ldr r3,[r7,#16]
 1555              	.LBE166:
 1556              	.LBE165:
1522:../Dave/Generated/FREERTOS/tasks.c **** 
1523:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1557              	 .loc 1 1523 0
 1558 0026 FB61     	 str r3,[r7,#28]
1524:../Dave/Generated/FREERTOS/tasks.c ****         {
1525:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1526:../Dave/Generated/FREERTOS/tasks.c ****              * task that is being queried. */
1527:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1559              	 .loc 1 1527 0
 1560 0028 7B68     	 ldr r3,[r7,#4]
 1561 002a 002B     	 cmp r3,#0
 1562 002c 02D1     	 bne .L97
 1563              	 .loc 1 1527 0 is_stmt 0 discriminator 1
 1564 002e 094B     	 ldr r3,.L100
 1565 0030 1B68     	 ldr r3,[r3]
 1566 0032 00E0     	 b .L98
 1567              	.L97:
 1568              	 .loc 1 1527 0 discriminator 2
 1569 0034 7B68     	 ldr r3,[r7,#4]
 1570              	.L98:
 1571              	 .loc 1 1527 0 discriminator 4
 1572 0036 BB61     	 str r3,[r7,#24]
1528:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1573              	 .loc 1 1528 0 is_stmt 1 discriminator 4
 1574 0038 BB69     	 ldr r3,[r7,#24]
 1575 003a DB6A     	 ldr r3,[r3,#44]
 1576 003c 7B61     	 str r3,[r7,#20]
 1577 003e FB69     	 ldr r3,[r7,#28]
 1578 0040 BB60     	 str r3,[r7,#8]
 1579              	.LBB167:
 1580              	.LBB168:
 226:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 227:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** /*-----------------------------------------------------------*/
 228:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h **** 
 229:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     {
 231:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         __asm volatile
 1581              	 .loc 2 231 0 discriminator 4
 1582 0042 BB68     	 ldr r3,[r7,#8]
 1583              	
 1584 0044 83F31188 	 msr basepri,r3
 1585              	
 1586              	 .thumb
 1587              	.LBE168:
 1588              	.LBE167:
1529:../Dave/Generated/FREERTOS/tasks.c ****         }
1530:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:../Dave/Generated/FREERTOS/tasks.c **** 
1532:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 1589              	 .loc 1 1532 0 discriminator 4
 1590 0048 7B69     	 ldr r3,[r7,#20]
1533:../Dave/Generated/FREERTOS/tasks.c ****     }
 1591              	 .loc 1 1533 0 discriminator 4
 1592 004a 1846     	 mov r0,r3
 1593 004c 2037     	 adds r7,r7,#32
 1594              	.LCFI48:
 1595              	 .cfi_def_cfa_offset 8
 1596 004e BD46     	 mov sp,r7
 1597              	.LCFI49:
 1598              	 .cfi_def_cfa_register 13
 1599              	 
 1600 0050 80BD     	 pop {r7,pc}
 1601              	.L101:
 1602 0052 00BF     	 .align 2
 1603              	.L100:
 1604 0054 00000000 	 .word pxCurrentTCB
 1605              	 .cfi_endproc
 1606              	.LFE146:
 1608              	 .section .text.vTaskPrioritySet,"ax",%progbits
 1609              	 .align 2
 1610              	 .global vTaskPrioritySet
 1611              	 .thumb
 1612              	 .thumb_func
 1614              	vTaskPrioritySet:
 1615              	.LFB147:
1534:../Dave/Generated/FREERTOS/tasks.c **** 
1535:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1537:../Dave/Generated/FREERTOS/tasks.c **** 
1538:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:../Dave/Generated/FREERTOS/tasks.c **** 
1540:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1541:../Dave/Generated/FREERTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1542:../Dave/Generated/FREERTOS/tasks.c ****     {
 1616              	 .loc 1 1542 0
 1617              	 .cfi_startproc
 1618              	 
 1619              	 
 1620 0000 80B5     	 push {r7,lr}
 1621              	.LCFI50:
 1622              	 .cfi_def_cfa_offset 8
 1623              	 .cfi_offset 7,-8
 1624              	 .cfi_offset 14,-4
 1625 0002 88B0     	 sub sp,sp,#32
 1626              	.LCFI51:
 1627              	 .cfi_def_cfa_offset 40
 1628 0004 00AF     	 add r7,sp,#0
 1629              	.LCFI52:
 1630              	 .cfi_def_cfa_register 7
 1631 0006 7860     	 str r0,[r7,#4]
 1632 0008 3960     	 str r1,[r7]
1543:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1544:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1545:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1633              	 .loc 1 1545 0
 1634 000a 0023     	 movs r3,#0
 1635 000c FB61     	 str r3,[r7,#28]
1546:../Dave/Generated/FREERTOS/tasks.c **** 
1547:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1636              	 .loc 1 1547 0
 1637 000e 3B68     	 ldr r3,[r7]
 1638 0010 372B     	 cmp r3,#55
 1639 0012 09D9     	 bls .L103
 1640              	.LBB169:
 1641              	.LBB170:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1642              	 .loc 2 197 0 discriminator 1
 1643              	
 1644 0014 4FF0FC03 	 mov r3,#252
 1645 0018 83F31188 	 msr basepri,r3
 1646 001c BFF36F8F 	 isb 
 1647 0020 BFF34F8F 	 dsb 
 1648              	
 1649              	
 1650              	 .thumb
 1651 0024 FB60     	 str r3,[r7,#12]
 1652              	.L104:
 1653              	.LBE170:
 1654              	.LBE169:
 1655              	 .loc 1 1547 0 discriminator 1
 1656 0026 FEE7     	 b .L104
 1657              	.L103:
1548:../Dave/Generated/FREERTOS/tasks.c **** 
1549:../Dave/Generated/FREERTOS/tasks.c ****         /* Ensure the new priority is valid. */
1550:../Dave/Generated/FREERTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1658              	 .loc 1 1550 0
 1659 0028 3B68     	 ldr r3,[r7]
 1660 002a 372B     	 cmp r3,#55
 1661 002c 01D9     	 bls .L105
1551:../Dave/Generated/FREERTOS/tasks.c ****         {
1552:../Dave/Generated/FREERTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1662              	 .loc 1 1552 0
 1663 002e 3723     	 movs r3,#55
 1664 0030 3B60     	 str r3,[r7]
 1665              	.L105:
1553:../Dave/Generated/FREERTOS/tasks.c ****         }
1554:../Dave/Generated/FREERTOS/tasks.c ****         else
1555:../Dave/Generated/FREERTOS/tasks.c ****         {
1556:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1557:../Dave/Generated/FREERTOS/tasks.c ****         }
1558:../Dave/Generated/FREERTOS/tasks.c **** 
1559:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1666              	 .loc 1 1559 0
 1667 0032 FFF7FEFF 	 bl vPortEnterCritical
1560:../Dave/Generated/FREERTOS/tasks.c ****         {
1561:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1562:../Dave/Generated/FREERTOS/tasks.c ****              * task that is being changed. */
1563:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1668              	 .loc 1 1563 0
 1669 0036 7B68     	 ldr r3,[r7,#4]
 1670 0038 002B     	 cmp r3,#0
 1671 003a 02D1     	 bne .L106
 1672              	 .loc 1 1563 0 is_stmt 0 discriminator 1
 1673 003c 3A4B     	 ldr r3,.L115
 1674 003e 1B68     	 ldr r3,[r3]
 1675 0040 00E0     	 b .L107
 1676              	.L106:
 1677              	 .loc 1 1563 0 discriminator 2
 1678 0042 7B68     	 ldr r3,[r7,#4]
 1679              	.L107:
 1680              	 .loc 1 1563 0 discriminator 4
 1681 0044 BB61     	 str r3,[r7,#24]
1564:../Dave/Generated/FREERTOS/tasks.c **** 
1565:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1566:../Dave/Generated/FREERTOS/tasks.c **** 
1567:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1568:../Dave/Generated/FREERTOS/tasks.c ****                 {
1569:../Dave/Generated/FREERTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
 1682              	 .loc 1 1569 0 is_stmt 1 discriminator 4
 1683 0046 BB69     	 ldr r3,[r7,#24]
 1684 0048 DB6C     	 ldr r3,[r3,#76]
 1685 004a 7B61     	 str r3,[r7,#20]
1570:../Dave/Generated/FREERTOS/tasks.c ****                 }
1571:../Dave/Generated/FREERTOS/tasks.c ****             #else
1572:../Dave/Generated/FREERTOS/tasks.c ****                 {
1573:../Dave/Generated/FREERTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1574:../Dave/Generated/FREERTOS/tasks.c ****                 }
1575:../Dave/Generated/FREERTOS/tasks.c ****             #endif
1576:../Dave/Generated/FREERTOS/tasks.c **** 
1577:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
 1686              	 .loc 1 1577 0 discriminator 4
 1687 004c 7A69     	 ldr r2,[r7,#20]
 1688 004e 3B68     	 ldr r3,[r7]
 1689 0050 9A42     	 cmp r2,r3
 1690 0052 63D0     	 beq .L108
1578:../Dave/Generated/FREERTOS/tasks.c ****             {
1579:../Dave/Generated/FREERTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1580:../Dave/Generated/FREERTOS/tasks.c ****                  * priority than the calling task. */
1581:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
 1691              	 .loc 1 1581 0
 1692 0054 3A68     	 ldr r2,[r7]
 1693 0056 7B69     	 ldr r3,[r7,#20]
 1694 0058 9A42     	 cmp r2,r3
 1695 005a 0DD9     	 bls .L109
1582:../Dave/Generated/FREERTOS/tasks.c ****                 {
1583:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
 1696              	 .loc 1 1583 0
 1697 005c 324B     	 ldr r3,.L115
 1698 005e 1B68     	 ldr r3,[r3]
 1699 0060 BA69     	 ldr r2,[r7,#24]
 1700 0062 9A42     	 cmp r2,r3
 1701 0064 0FD0     	 beq .L110
1584:../Dave/Generated/FREERTOS/tasks.c ****                     {
1585:../Dave/Generated/FREERTOS/tasks.c ****                         /* The priority of a task other than the currently
1586:../Dave/Generated/FREERTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1587:../Dave/Generated/FREERTOS/tasks.c ****                          * raised above that of the running task? */
1588:../Dave/Generated/FREERTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1702              	 .loc 1 1588 0
 1703 0066 304B     	 ldr r3,.L115
 1704 0068 1B68     	 ldr r3,[r3]
 1705 006a DA6A     	 ldr r2,[r3,#44]
 1706 006c 3B68     	 ldr r3,[r7]
 1707 006e 9A42     	 cmp r2,r3
 1708 0070 09D8     	 bhi .L110
1589:../Dave/Generated/FREERTOS/tasks.c ****                         {
1590:../Dave/Generated/FREERTOS/tasks.c ****                             xYieldRequired = pdTRUE;
 1709              	 .loc 1 1590 0
 1710 0072 0123     	 movs r3,#1
 1711 0074 FB61     	 str r3,[r7,#28]
 1712 0076 06E0     	 b .L110
 1713              	.L109:
1591:../Dave/Generated/FREERTOS/tasks.c ****                         }
1592:../Dave/Generated/FREERTOS/tasks.c ****                         else
1593:../Dave/Generated/FREERTOS/tasks.c ****                         {
1594:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1595:../Dave/Generated/FREERTOS/tasks.c ****                         }
1596:../Dave/Generated/FREERTOS/tasks.c ****                     }
1597:../Dave/Generated/FREERTOS/tasks.c ****                     else
1598:../Dave/Generated/FREERTOS/tasks.c ****                     {
1599:../Dave/Generated/FREERTOS/tasks.c ****                         /* The priority of the running task is being raised,
1600:../Dave/Generated/FREERTOS/tasks.c ****                          * but the running task must already be the highest
1601:../Dave/Generated/FREERTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1602:../Dave/Generated/FREERTOS/tasks.c ****                     }
1603:../Dave/Generated/FREERTOS/tasks.c ****                 }
1604:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
 1714              	 .loc 1 1604 0
 1715 0078 2B4B     	 ldr r3,.L115
 1716 007a 1B68     	 ldr r3,[r3]
 1717 007c BA69     	 ldr r2,[r7,#24]
 1718 007e 9A42     	 cmp r2,r3
 1719 0080 01D1     	 bne .L110
1605:../Dave/Generated/FREERTOS/tasks.c ****                 {
1606:../Dave/Generated/FREERTOS/tasks.c ****                     /* Setting the priority of the running task down means
1607:../Dave/Generated/FREERTOS/tasks.c ****                      * there may now be another task of higher priority that
1608:../Dave/Generated/FREERTOS/tasks.c ****                      * is ready to execute. */
1609:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldRequired = pdTRUE;
 1720              	 .loc 1 1609 0
 1721 0082 0123     	 movs r3,#1
 1722 0084 FB61     	 str r3,[r7,#28]
 1723              	.L110:
1610:../Dave/Generated/FREERTOS/tasks.c ****                 }
1611:../Dave/Generated/FREERTOS/tasks.c ****                 else
1612:../Dave/Generated/FREERTOS/tasks.c ****                 {
1613:../Dave/Generated/FREERTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1614:../Dave/Generated/FREERTOS/tasks.c ****                      * require a yield as the running task must be above the
1615:../Dave/Generated/FREERTOS/tasks.c ****                      * new priority of the task being modified. */
1616:../Dave/Generated/FREERTOS/tasks.c ****                 }
1617:../Dave/Generated/FREERTOS/tasks.c **** 
1618:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1619:../Dave/Generated/FREERTOS/tasks.c ****                  * before its uxPriority member is changed so the
1620:../Dave/Generated/FREERTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1621:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1724              	 .loc 1 1621 0
 1725 0086 BB69     	 ldr r3,[r7,#24]
 1726 0088 DB6A     	 ldr r3,[r3,#44]
 1727 008a 3B61     	 str r3,[r7,#16]
1622:../Dave/Generated/FREERTOS/tasks.c **** 
1623:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1624:../Dave/Generated/FREERTOS/tasks.c ****                     {
1625:../Dave/Generated/FREERTOS/tasks.c ****                         /* Only change the priority being used if the task is not
1626:../Dave/Generated/FREERTOS/tasks.c ****                          * currently using an inherited priority. */
1627:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1728              	 .loc 1 1627 0
 1729 008c BB69     	 ldr r3,[r7,#24]
 1730 008e DA6C     	 ldr r2,[r3,#76]
 1731 0090 BB69     	 ldr r3,[r7,#24]
 1732 0092 DB6A     	 ldr r3,[r3,#44]
 1733 0094 9A42     	 cmp r2,r3
 1734 0096 02D1     	 bne .L111
1628:../Dave/Generated/FREERTOS/tasks.c ****                         {
1629:../Dave/Generated/FREERTOS/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
 1735              	 .loc 1 1629 0
 1736 0098 BB69     	 ldr r3,[r7,#24]
 1737 009a 3A68     	 ldr r2,[r7]
 1738 009c DA62     	 str r2,[r3,#44]
 1739              	.L111:
1630:../Dave/Generated/FREERTOS/tasks.c ****                         }
1631:../Dave/Generated/FREERTOS/tasks.c ****                         else
1632:../Dave/Generated/FREERTOS/tasks.c ****                         {
1633:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1634:../Dave/Generated/FREERTOS/tasks.c ****                         }
1635:../Dave/Generated/FREERTOS/tasks.c **** 
1636:../Dave/Generated/FREERTOS/tasks.c ****                         /* The base priority gets set whatever. */
1637:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
 1740              	 .loc 1 1637 0
 1741 009e BB69     	 ldr r3,[r7,#24]
 1742 00a0 3A68     	 ldr r2,[r7]
 1743 00a2 DA64     	 str r2,[r3,#76]
1638:../Dave/Generated/FREERTOS/tasks.c ****                     }
1639:../Dave/Generated/FREERTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1640:../Dave/Generated/FREERTOS/tasks.c ****                     {
1641:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1642:../Dave/Generated/FREERTOS/tasks.c ****                     }
1643:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1644:../Dave/Generated/FREERTOS/tasks.c **** 
1645:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1646:../Dave/Generated/FREERTOS/tasks.c ****                  * being used for anything else. */
1647:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
 1744              	 .loc 1 1647 0
 1745 00a4 BB69     	 ldr r3,[r7,#24]
 1746 00a6 9B69     	 ldr r3,[r3,#24]
 1747 00a8 002B     	 cmp r3,#0
 1748 00aa 04DB     	 blt .L112
1648:../Dave/Generated/FREERTOS/tasks.c ****                 {
1649:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
 1749              	 .loc 1 1649 0
 1750 00ac 3B68     	 ldr r3,[r7]
 1751 00ae C3F13802 	 rsb r2,r3,#56
 1752 00b2 BB69     	 ldr r3,[r7,#24]
 1753 00b4 9A61     	 str r2,[r3,#24]
 1754              	.L112:
1650:../Dave/Generated/FREERTOS/tasks.c ****                 }
1651:../Dave/Generated/FREERTOS/tasks.c ****                 else
1652:../Dave/Generated/FREERTOS/tasks.c ****                 {
1653:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1654:../Dave/Generated/FREERTOS/tasks.c ****                 }
1655:../Dave/Generated/FREERTOS/tasks.c **** 
1656:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1657:../Dave/Generated/FREERTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1658:../Dave/Generated/FREERTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1659:../Dave/Generated/FREERTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1660:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
 1755              	 .loc 1 1660 0
 1756 00b6 BB69     	 ldr r3,[r7,#24]
 1757 00b8 5969     	 ldr r1,[r3,#20]
 1758 00ba 3A69     	 ldr r2,[r7,#16]
 1759 00bc 1346     	 mov r3,r2
 1760 00be 9B00     	 lsls r3,r3,#2
 1761 00c0 1344     	 add r3,r3,r2
 1762 00c2 9B00     	 lsls r3,r3,#2
 1763 00c4 194A     	 ldr r2,.L115+4
 1764 00c6 1344     	 add r3,r3,r2
 1765 00c8 9942     	 cmp r1,r3
 1766 00ca 1CD1     	 bne .L113
1661:../Dave/Generated/FREERTOS/tasks.c ****                 {
1662:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1663:../Dave/Generated/FREERTOS/tasks.c ****                      * adding it to it's new ready list.  As we are in a critical
1664:../Dave/Generated/FREERTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1665:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1767              	 .loc 1 1665 0
 1768 00cc BB69     	 ldr r3,[r7,#24]
 1769 00ce 0433     	 adds r3,r3,#4
 1770 00d0 1846     	 mov r0,r3
 1771 00d2 FFF7FEFF 	 bl uxListRemove
1666:../Dave/Generated/FREERTOS/tasks.c ****                     {
1667:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1668:../Dave/Generated/FREERTOS/tasks.c ****                          * there is no need to check again and the port level
1669:../Dave/Generated/FREERTOS/tasks.c ****                          * reset macro can be called directly. */
1670:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1671:../Dave/Generated/FREERTOS/tasks.c ****                     }
1672:../Dave/Generated/FREERTOS/tasks.c ****                     else
1673:../Dave/Generated/FREERTOS/tasks.c ****                     {
1674:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1675:../Dave/Generated/FREERTOS/tasks.c ****                     }
1676:../Dave/Generated/FREERTOS/tasks.c **** 
1677:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1772              	 .loc 1 1677 0
 1773 00d6 BB69     	 ldr r3,[r7,#24]
 1774 00d8 DA6A     	 ldr r2,[r3,#44]
 1775 00da 154B     	 ldr r3,.L115+8
 1776 00dc 1B68     	 ldr r3,[r3]
 1777 00de 9A42     	 cmp r2,r3
 1778 00e0 03D9     	 bls .L114
 1779              	 .loc 1 1677 0 is_stmt 0 discriminator 1
 1780 00e2 BB69     	 ldr r3,[r7,#24]
 1781 00e4 DB6A     	 ldr r3,[r3,#44]
 1782 00e6 124A     	 ldr r2,.L115+8
 1783 00e8 1360     	 str r3,[r2]
 1784              	.L114:
 1785              	 .loc 1 1677 0 discriminator 3
 1786 00ea BB69     	 ldr r3,[r7,#24]
 1787 00ec DA6A     	 ldr r2,[r3,#44]
 1788 00ee 1346     	 mov r3,r2
 1789 00f0 9B00     	 lsls r3,r3,#2
 1790 00f2 1344     	 add r3,r3,r2
 1791 00f4 9B00     	 lsls r3,r3,#2
 1792 00f6 0D4A     	 ldr r2,.L115+4
 1793 00f8 1A44     	 add r2,r2,r3
 1794 00fa BB69     	 ldr r3,[r7,#24]
 1795 00fc 0433     	 adds r3,r3,#4
 1796 00fe 1046     	 mov r0,r2
 1797 0100 1946     	 mov r1,r3
 1798 0102 FFF7FEFF 	 bl vListInsertEnd
 1799              	.L113:
1678:../Dave/Generated/FREERTOS/tasks.c ****                 }
1679:../Dave/Generated/FREERTOS/tasks.c ****                 else
1680:../Dave/Generated/FREERTOS/tasks.c ****                 {
1681:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1682:../Dave/Generated/FREERTOS/tasks.c ****                 }
1683:../Dave/Generated/FREERTOS/tasks.c **** 
1684:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
 1800              	 .loc 1 1684 0 is_stmt 1
 1801 0106 FB69     	 ldr r3,[r7,#28]
 1802 0108 002B     	 cmp r3,#0
 1803 010a 07D0     	 beq .L108
1685:../Dave/Generated/FREERTOS/tasks.c ****                 {
1686:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 1804              	 .loc 1 1686 0
 1805 010c 094B     	 ldr r3,.L115+12
 1806 010e 4FF08052 	 mov r2,#268435456
 1807 0112 1A60     	 str r2,[r3]
 1808              	
 1809 0114 BFF34F8F 	 dsb
 1810              	
 1811              	
 1812 0118 BFF36F8F 	 isb
 1813              	
 1814              	 .thumb
 1815              	.L108:
1687:../Dave/Generated/FREERTOS/tasks.c ****                 }
1688:../Dave/Generated/FREERTOS/tasks.c ****                 else
1689:../Dave/Generated/FREERTOS/tasks.c ****                 {
1690:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1691:../Dave/Generated/FREERTOS/tasks.c ****                 }
1692:../Dave/Generated/FREERTOS/tasks.c **** 
1693:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1694:../Dave/Generated/FREERTOS/tasks.c ****                  * optimised task selection is not being used. */
1695:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1696:../Dave/Generated/FREERTOS/tasks.c ****             }
1697:../Dave/Generated/FREERTOS/tasks.c ****         }
1698:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1816              	 .loc 1 1698 0
 1817 011c FFF7FEFF 	 bl vPortExitCritical
1699:../Dave/Generated/FREERTOS/tasks.c ****     }
 1818              	 .loc 1 1699 0
 1819 0120 2037     	 adds r7,r7,#32
 1820              	.LCFI53:
 1821              	 .cfi_def_cfa_offset 8
 1822 0122 BD46     	 mov sp,r7
 1823              	.LCFI54:
 1824              	 .cfi_def_cfa_register 13
 1825              	 
 1826 0124 80BD     	 pop {r7,pc}
 1827              	.L116:
 1828 0126 00BF     	 .align 2
 1829              	.L115:
 1830 0128 00000000 	 .word pxCurrentTCB
 1831 012c 00000000 	 .word pxReadyTasksLists
 1832 0130 00000000 	 .word uxTopReadyPriority
 1833 0134 04ED00E0 	 .word -536810236
 1834              	 .cfi_endproc
 1835              	.LFE147:
 1837              	 .section .text.vTaskSuspend,"ax",%progbits
 1838              	 .align 2
 1839              	 .global vTaskSuspend
 1840              	 .thumb
 1841              	 .thumb_func
 1843              	vTaskSuspend:
 1844              	.LFB148:
1700:../Dave/Generated/FREERTOS/tasks.c **** 
1701:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1702:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1703:../Dave/Generated/FREERTOS/tasks.c **** 
1704:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1705:../Dave/Generated/FREERTOS/tasks.c **** 
1706:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1707:../Dave/Generated/FREERTOS/tasks.c ****     {
 1845              	 .loc 1 1707 0
 1846              	 .cfi_startproc
 1847              	 
 1848              	 
 1849 0000 80B5     	 push {r7,lr}
 1850              	.LCFI55:
 1851              	 .cfi_def_cfa_offset 8
 1852              	 .cfi_offset 7,-8
 1853              	 .cfi_offset 14,-4
 1854 0002 86B0     	 sub sp,sp,#24
 1855              	.LCFI56:
 1856              	 .cfi_def_cfa_offset 32
 1857 0004 00AF     	 add r7,sp,#0
 1858              	.LCFI57:
 1859              	 .cfi_def_cfa_register 7
 1860 0006 7860     	 str r0,[r7,#4]
1708:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1709:../Dave/Generated/FREERTOS/tasks.c **** 
1710:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1861              	 .loc 1 1710 0
 1862 0008 FFF7FEFF 	 bl vPortEnterCritical
1711:../Dave/Generated/FREERTOS/tasks.c ****         {
1712:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1713:../Dave/Generated/FREERTOS/tasks.c ****              * being suspended. */
1714:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1863              	 .loc 1 1714 0
 1864 000c 7B68     	 ldr r3,[r7,#4]
 1865 000e 002B     	 cmp r3,#0
 1866 0010 02D1     	 bne .L118
 1867              	 .loc 1 1714 0 is_stmt 0 discriminator 1
 1868 0012 354B     	 ldr r3,.L131
 1869 0014 1B68     	 ldr r3,[r3]
 1870 0016 00E0     	 b .L119
 1871              	.L118:
 1872              	 .loc 1 1714 0 discriminator 2
 1873 0018 7B68     	 ldr r3,[r7,#4]
 1874              	.L119:
 1875              	 .loc 1 1714 0 discriminator 4
 1876 001a 3B61     	 str r3,[r7,#16]
1715:../Dave/Generated/FREERTOS/tasks.c **** 
1716:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1717:../Dave/Generated/FREERTOS/tasks.c **** 
1718:../Dave/Generated/FREERTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1719:../Dave/Generated/FREERTOS/tasks.c ****              * suspended list. */
1720:../Dave/Generated/FREERTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1877              	 .loc 1 1720 0 is_stmt 1 discriminator 4
 1878 001c 3B69     	 ldr r3,[r7,#16]
 1879 001e 0433     	 adds r3,r3,#4
 1880 0020 1846     	 mov r0,r3
 1881 0022 FFF7FEFF 	 bl uxListRemove
1721:../Dave/Generated/FREERTOS/tasks.c ****             {
1722:../Dave/Generated/FREERTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1723:../Dave/Generated/FREERTOS/tasks.c ****             }
1724:../Dave/Generated/FREERTOS/tasks.c ****             else
1725:../Dave/Generated/FREERTOS/tasks.c ****             {
1726:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1727:../Dave/Generated/FREERTOS/tasks.c ****             }
1728:../Dave/Generated/FREERTOS/tasks.c **** 
1729:../Dave/Generated/FREERTOS/tasks.c ****             /* Is the task waiting on an event also? */
1730:../Dave/Generated/FREERTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1882              	 .loc 1 1730 0 discriminator 4
 1883 0026 3B69     	 ldr r3,[r7,#16]
 1884 0028 9B6A     	 ldr r3,[r3,#40]
 1885 002a 002B     	 cmp r3,#0
 1886 002c 04D0     	 beq .L120
1731:../Dave/Generated/FREERTOS/tasks.c ****             {
1732:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1887              	 .loc 1 1732 0
 1888 002e 3B69     	 ldr r3,[r7,#16]
 1889 0030 1833     	 adds r3,r3,#24
 1890 0032 1846     	 mov r0,r3
 1891 0034 FFF7FEFF 	 bl uxListRemove
 1892              	.L120:
1733:../Dave/Generated/FREERTOS/tasks.c ****             }
1734:../Dave/Generated/FREERTOS/tasks.c ****             else
1735:../Dave/Generated/FREERTOS/tasks.c ****             {
1736:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1737:../Dave/Generated/FREERTOS/tasks.c ****             }
1738:../Dave/Generated/FREERTOS/tasks.c **** 
1739:../Dave/Generated/FREERTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1893              	 .loc 1 1739 0
 1894 0038 3B69     	 ldr r3,[r7,#16]
 1895 003a 0433     	 adds r3,r3,#4
 1896 003c 2B48     	 ldr r0,.L131+4
 1897 003e 1946     	 mov r1,r3
 1898 0040 FFF7FEFF 	 bl vListInsertEnd
 1899              	.LBB171:
1740:../Dave/Generated/FREERTOS/tasks.c **** 
1741:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1742:../Dave/Generated/FREERTOS/tasks.c ****                 {
1743:../Dave/Generated/FREERTOS/tasks.c ****                     BaseType_t x;
1744:../Dave/Generated/FREERTOS/tasks.c **** 
1745:../Dave/Generated/FREERTOS/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1900              	 .loc 1 1745 0
 1901 0044 0023     	 movs r3,#0
 1902 0046 7B61     	 str r3,[r7,#20]
 1903 0048 10E0     	 b .L121
 1904              	.L123:
1746:../Dave/Generated/FREERTOS/tasks.c ****                     {
1747:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1905              	 .loc 1 1747 0
 1906 004a 3A69     	 ldr r2,[r7,#16]
 1907 004c 7B69     	 ldr r3,[r7,#20]
 1908 004e 1344     	 add r3,r3,r2
 1909 0050 6833     	 adds r3,r3,#104
 1910 0052 1B79     	 ldrb r3,[r3,#4]
 1911 0054 DBB2     	 uxtb r3,r3
 1912 0056 012B     	 cmp r3,#1
 1913 0058 05D1     	 bne .L122
1748:../Dave/Generated/FREERTOS/tasks.c ****                         {
1749:../Dave/Generated/FREERTOS/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1750:../Dave/Generated/FREERTOS/tasks.c ****                              * now suspended, so no notification was received. */
1751:../Dave/Generated/FREERTOS/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 1914              	 .loc 1 1751 0
 1915 005a 3A69     	 ldr r2,[r7,#16]
 1916 005c 7B69     	 ldr r3,[r7,#20]
 1917 005e 1344     	 add r3,r3,r2
 1918 0060 6833     	 adds r3,r3,#104
 1919 0062 0022     	 movs r2,#0
 1920 0064 1A71     	 strb r2,[r3,#4]
 1921              	.L122:
1745:../Dave/Generated/FREERTOS/tasks.c ****                     {
 1922              	 .loc 1 1745 0 discriminator 2
 1923 0066 7B69     	 ldr r3,[r7,#20]
 1924 0068 0133     	 adds r3,r3,#1
 1925 006a 7B61     	 str r3,[r7,#20]
 1926              	.L121:
1745:../Dave/Generated/FREERTOS/tasks.c ****                     {
 1927              	 .loc 1 1745 0 is_stmt 0 discriminator 1
 1928 006c 7B69     	 ldr r3,[r7,#20]
 1929 006e 002B     	 cmp r3,#0
 1930 0070 EBDD     	 ble .L123
 1931              	.LBE171:
1752:../Dave/Generated/FREERTOS/tasks.c ****                         }
1753:../Dave/Generated/FREERTOS/tasks.c ****                     }
1754:../Dave/Generated/FREERTOS/tasks.c ****                 }
1755:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1756:../Dave/Generated/FREERTOS/tasks.c ****         }
1757:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1932              	 .loc 1 1757 0 is_stmt 1
 1933 0072 FFF7FEFF 	 bl vPortExitCritical
1758:../Dave/Generated/FREERTOS/tasks.c **** 
1759:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 1934              	 .loc 1 1759 0
 1935 0076 1E4B     	 ldr r3,.L131+8
 1936 0078 1B68     	 ldr r3,[r3]
 1937 007a 002B     	 cmp r3,#0
 1938 007c 05D0     	 beq .L124
1760:../Dave/Generated/FREERTOS/tasks.c ****         {
1761:../Dave/Generated/FREERTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1762:../Dave/Generated/FREERTOS/tasks.c ****              * task that is now in the Suspended state. */
1763:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 1939              	 .loc 1 1763 0
 1940 007e FFF7FEFF 	 bl vPortEnterCritical
1764:../Dave/Generated/FREERTOS/tasks.c ****             {
1765:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 1941              	 .loc 1 1765 0
 1942 0082 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
1766:../Dave/Generated/FREERTOS/tasks.c ****             }
1767:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 1943              	 .loc 1 1767 0
 1944 0086 FFF7FEFF 	 bl vPortExitCritical
 1945              	.L124:
1768:../Dave/Generated/FREERTOS/tasks.c ****         }
1769:../Dave/Generated/FREERTOS/tasks.c ****         else
1770:../Dave/Generated/FREERTOS/tasks.c ****         {
1771:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1772:../Dave/Generated/FREERTOS/tasks.c ****         }
1773:../Dave/Generated/FREERTOS/tasks.c **** 
1774:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1946              	 .loc 1 1774 0
 1947 008a 174B     	 ldr r3,.L131
 1948 008c 1B68     	 ldr r3,[r3]
 1949 008e 3A69     	 ldr r2,[r7,#16]
 1950 0090 9A42     	 cmp r2,r3
 1951 0092 26D1     	 bne .L117
1775:../Dave/Generated/FREERTOS/tasks.c ****         {
1776:../Dave/Generated/FREERTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
 1952              	 .loc 1 1776 0
 1953 0094 164B     	 ldr r3,.L131+8
 1954 0096 1B68     	 ldr r3,[r3]
 1955 0098 002B     	 cmp r3,#0
 1956 009a 16D0     	 beq .L126
1777:../Dave/Generated/FREERTOS/tasks.c ****             {
1778:../Dave/Generated/FREERTOS/tasks.c ****                 /* The current task has just been suspended. */
1779:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 1957              	 .loc 1 1779 0
 1958 009c 154B     	 ldr r3,.L131+12
 1959 009e 1B68     	 ldr r3,[r3]
 1960 00a0 002B     	 cmp r3,#0
 1961 00a2 09D0     	 beq .L127
 1962              	.LBB172:
 1963              	.LBB173:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 1964              	 .loc 2 197 0 discriminator 1
 1965              	
 1966 00a4 4FF0FC03 	 mov r3,#252
 1967 00a8 83F31188 	 msr basepri,r3
 1968 00ac BFF36F8F 	 isb 
 1969 00b0 BFF34F8F 	 dsb 
 1970              	
 1971              	
 1972              	 .thumb
 1973 00b4 FB60     	 str r3,[r7,#12]
 1974              	.L128:
 1975              	.LBE173:
 1976              	.LBE172:
 1977              	 .loc 1 1779 0 discriminator 1
 1978 00b6 FEE7     	 b .L128
 1979              	.L127:
1780:../Dave/Generated/FREERTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1980              	 .loc 1 1780 0
 1981 00b8 0F4B     	 ldr r3,.L131+16
 1982 00ba 4FF08052 	 mov r2,#268435456
 1983 00be 1A60     	 str r2,[r3]
 1984              	
 1985 00c0 BFF34F8F 	 dsb
 1986              	
 1987              	
 1988 00c4 BFF36F8F 	 isb
 1989              	
 1990              	 .thumb
 1991 00c8 0BE0     	 b .L117
 1992              	.L126:
1781:../Dave/Generated/FREERTOS/tasks.c ****             }
1782:../Dave/Generated/FREERTOS/tasks.c ****             else
1783:../Dave/Generated/FREERTOS/tasks.c ****             {
1784:../Dave/Generated/FREERTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1785:../Dave/Generated/FREERTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1786:../Dave/Generated/FREERTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1787:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
 1993              	 .loc 1 1787 0
 1994 00ca 084B     	 ldr r3,.L131+4
 1995 00cc 1A68     	 ldr r2,[r3]
 1996 00ce 0B4B     	 ldr r3,.L131+20
 1997 00d0 1B68     	 ldr r3,[r3]
 1998 00d2 9A42     	 cmp r2,r3
 1999 00d4 03D1     	 bne .L130
1788:../Dave/Generated/FREERTOS/tasks.c ****                 {
1789:../Dave/Generated/FREERTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1790:../Dave/Generated/FREERTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1791:../Dave/Generated/FREERTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1792:../Dave/Generated/FREERTOS/tasks.c ****                      * is. */
1793:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB = NULL;
 2000              	 .loc 1 1793 0
 2001 00d6 044B     	 ldr r3,.L131
 2002 00d8 0022     	 movs r2,#0
 2003 00da 1A60     	 str r2,[r3]
 2004 00dc 01E0     	 b .L117
 2005              	.L130:
1794:../Dave/Generated/FREERTOS/tasks.c ****                 }
1795:../Dave/Generated/FREERTOS/tasks.c ****                 else
1796:../Dave/Generated/FREERTOS/tasks.c ****                 {
1797:../Dave/Generated/FREERTOS/tasks.c ****                     vTaskSwitchContext();
 2006              	 .loc 1 1797 0
 2007 00de FFF7FEFF 	 bl vTaskSwitchContext
 2008              	.L117:
1798:../Dave/Generated/FREERTOS/tasks.c ****                 }
1799:../Dave/Generated/FREERTOS/tasks.c ****             }
1800:../Dave/Generated/FREERTOS/tasks.c ****         }
1801:../Dave/Generated/FREERTOS/tasks.c ****         else
1802:../Dave/Generated/FREERTOS/tasks.c ****         {
1803:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1804:../Dave/Generated/FREERTOS/tasks.c ****         }
1805:../Dave/Generated/FREERTOS/tasks.c ****     }
 2009              	 .loc 1 1805 0
 2010 00e2 1837     	 adds r7,r7,#24
 2011              	.LCFI58:
 2012              	 .cfi_def_cfa_offset 8
 2013 00e4 BD46     	 mov sp,r7
 2014              	.LCFI59:
 2015              	 .cfi_def_cfa_register 13
 2016              	 
 2017 00e6 80BD     	 pop {r7,pc}
 2018              	.L132:
 2019              	 .align 2
 2020              	.L131:
 2021 00e8 00000000 	 .word pxCurrentTCB
 2022 00ec 00000000 	 .word xSuspendedTaskList
 2023 00f0 00000000 	 .word xSchedulerRunning
 2024 00f4 00000000 	 .word uxSchedulerSuspended
 2025 00f8 04ED00E0 	 .word -536810236
 2026 00fc 00000000 	 .word uxCurrentNumberOfTasks
 2027              	 .cfi_endproc
 2028              	.LFE148:
 2030              	 .section .text.prvTaskIsTaskSuspended,"ax",%progbits
 2031              	 .align 2
 2032              	 .thumb
 2033              	 .thumb_func
 2035              	prvTaskIsTaskSuspended:
 2036              	.LFB149:
1806:../Dave/Generated/FREERTOS/tasks.c **** 
1807:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1808:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:../Dave/Generated/FREERTOS/tasks.c **** 
1810:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1811:../Dave/Generated/FREERTOS/tasks.c **** 
1812:../Dave/Generated/FREERTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1813:../Dave/Generated/FREERTOS/tasks.c ****     {
 2037              	 .loc 1 1813 0
 2038              	 .cfi_startproc
 2039              	 
 2040              	 
 2041              	 
 2042 0000 80B4     	 push {r7}
 2043              	.LCFI60:
 2044              	 .cfi_def_cfa_offset 4
 2045              	 .cfi_offset 7,-4
 2046 0002 87B0     	 sub sp,sp,#28
 2047              	.LCFI61:
 2048              	 .cfi_def_cfa_offset 32
 2049 0004 00AF     	 add r7,sp,#0
 2050              	.LCFI62:
 2051              	 .cfi_def_cfa_register 7
 2052 0006 7860     	 str r0,[r7,#4]
1814:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 2053              	 .loc 1 1814 0
 2054 0008 0023     	 movs r3,#0
 2055 000a 7B61     	 str r3,[r7,#20]
1815:../Dave/Generated/FREERTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 2056              	 .loc 1 1815 0
 2057 000c 7B68     	 ldr r3,[r7,#4]
 2058 000e 3B61     	 str r3,[r7,#16]
1816:../Dave/Generated/FREERTOS/tasks.c **** 
1817:../Dave/Generated/FREERTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1818:../Dave/Generated/FREERTOS/tasks.c ****          * section. */
1819:../Dave/Generated/FREERTOS/tasks.c **** 
1820:../Dave/Generated/FREERTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1821:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTask );
 2059              	 .loc 1 1821 0
 2060 0010 7B68     	 ldr r3,[r7,#4]
 2061 0012 002B     	 cmp r3,#0
 2062 0014 09D1     	 bne .L134
 2063              	.LBB174:
 2064              	.LBB175:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2065              	 .loc 2 197 0 discriminator 1
 2066              	
 2067 0016 4FF0FC03 	 mov r3,#252
 2068 001a 83F31188 	 msr basepri,r3
 2069 001e BFF36F8F 	 isb 
 2070 0022 BFF34F8F 	 dsb 
 2071              	
 2072              	
 2073              	 .thumb
 2074 0026 FB60     	 str r3,[r7,#12]
 2075              	.L135:
 2076              	.LBE175:
 2077              	.LBE174:
 2078              	 .loc 1 1821 0 discriminator 1
 2079 0028 FEE7     	 b .L135
 2080              	.L134:
1822:../Dave/Generated/FREERTOS/tasks.c **** 
1823:../Dave/Generated/FREERTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1824:../Dave/Generated/FREERTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2081              	 .loc 1 1824 0
 2082 002a 3B69     	 ldr r3,[r7,#16]
 2083 002c 5B69     	 ldr r3,[r3,#20]
 2084 002e 0A4A     	 ldr r2,.L138
 2085 0030 9342     	 cmp r3,r2
 2086 0032 0AD1     	 bne .L136
1825:../Dave/Generated/FREERTOS/tasks.c ****         {
1826:../Dave/Generated/FREERTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1827:../Dave/Generated/FREERTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
 2087              	 .loc 1 1827 0
 2088 0034 3B69     	 ldr r3,[r7,#16]
 2089 0036 9B6A     	 ldr r3,[r3,#40]
 2090 0038 084A     	 ldr r2,.L138+4
 2091 003a 9342     	 cmp r3,r2
 2092 003c 05D0     	 beq .L136
1828:../Dave/Generated/FREERTOS/tasks.c ****             {
1829:../Dave/Generated/FREERTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1830:../Dave/Generated/FREERTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1831:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
 2093              	 .loc 1 1831 0
 2094 003e 3B69     	 ldr r3,[r7,#16]
 2095 0040 9B6A     	 ldr r3,[r3,#40]
 2096 0042 002B     	 cmp r3,#0
 2097 0044 01D1     	 bne .L136
1832:../Dave/Generated/FREERTOS/tasks.c ****                 {
1833:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 2098              	 .loc 1 1833 0
 2099 0046 0123     	 movs r3,#1
 2100 0048 7B61     	 str r3,[r7,#20]
 2101              	.L136:
1834:../Dave/Generated/FREERTOS/tasks.c ****                 }
1835:../Dave/Generated/FREERTOS/tasks.c ****                 else
1836:../Dave/Generated/FREERTOS/tasks.c ****                 {
1837:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1838:../Dave/Generated/FREERTOS/tasks.c ****                 }
1839:../Dave/Generated/FREERTOS/tasks.c ****             }
1840:../Dave/Generated/FREERTOS/tasks.c ****             else
1841:../Dave/Generated/FREERTOS/tasks.c ****             {
1842:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1843:../Dave/Generated/FREERTOS/tasks.c ****             }
1844:../Dave/Generated/FREERTOS/tasks.c ****         }
1845:../Dave/Generated/FREERTOS/tasks.c ****         else
1846:../Dave/Generated/FREERTOS/tasks.c ****         {
1847:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1848:../Dave/Generated/FREERTOS/tasks.c ****         }
1849:../Dave/Generated/FREERTOS/tasks.c **** 
1850:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 2102              	 .loc 1 1850 0
 2103 004a 7B69     	 ldr r3,[r7,#20]
1851:../Dave/Generated/FREERTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2104              	 .loc 1 1851 0
 2105 004c 1846     	 mov r0,r3
 2106 004e 1C37     	 adds r7,r7,#28
 2107              	.LCFI63:
 2108              	 .cfi_def_cfa_offset 4
 2109 0050 BD46     	 mov sp,r7
 2110              	.LCFI64:
 2111              	 .cfi_def_cfa_register 13
 2112              	 
 2113 0052 5DF8047B 	 ldr r7,[sp],#4
 2114              	.LCFI65:
 2115              	 .cfi_restore 7
 2116              	 .cfi_def_cfa_offset 0
 2117 0056 7047     	 bx lr
 2118              	.L139:
 2119              	 .align 2
 2120              	.L138:
 2121 0058 00000000 	 .word xSuspendedTaskList
 2122 005c 00000000 	 .word xPendingReadyList
 2123              	 .cfi_endproc
 2124              	.LFE149:
 2126              	 .section .text.vTaskResume,"ax",%progbits
 2127              	 .align 2
 2128              	 .global vTaskResume
 2129              	 .thumb
 2130              	 .thumb_func
 2132              	vTaskResume:
 2133              	.LFB150:
1852:../Dave/Generated/FREERTOS/tasks.c **** 
1853:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1854:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1855:../Dave/Generated/FREERTOS/tasks.c **** 
1856:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1857:../Dave/Generated/FREERTOS/tasks.c **** 
1858:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1859:../Dave/Generated/FREERTOS/tasks.c ****     {
 2134              	 .loc 1 1859 0
 2135              	 .cfi_startproc
 2136              	 
 2137              	 
 2138 0000 80B5     	 push {r7,lr}
 2139              	.LCFI66:
 2140              	 .cfi_def_cfa_offset 8
 2141              	 .cfi_offset 7,-8
 2142              	 .cfi_offset 14,-4
 2143 0002 84B0     	 sub sp,sp,#16
 2144              	.LCFI67:
 2145              	 .cfi_def_cfa_offset 24
 2146 0004 00AF     	 add r7,sp,#0
 2147              	.LCFI68:
 2148              	 .cfi_def_cfa_register 7
 2149 0006 7860     	 str r0,[r7,#4]
1860:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2150              	 .loc 1 1860 0
 2151 0008 7B68     	 ldr r3,[r7,#4]
 2152 000a FB60     	 str r3,[r7,#12]
1861:../Dave/Generated/FREERTOS/tasks.c **** 
1862:../Dave/Generated/FREERTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1863:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToResume );
 2153              	 .loc 1 1863 0
 2154 000c 7B68     	 ldr r3,[r7,#4]
 2155 000e 002B     	 cmp r3,#0
 2156 0010 09D1     	 bne .L141
 2157              	.LBB176:
 2158              	.LBB177:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2159              	 .loc 2 197 0 discriminator 1
 2160              	
 2161 0012 4FF0FC03 	 mov r3,#252
 2162 0016 83F31188 	 msr basepri,r3
 2163 001a BFF36F8F 	 isb 
 2164 001e BFF34F8F 	 dsb 
 2165              	
 2166              	
 2167              	 .thumb
 2168 0022 BB60     	 str r3,[r7,#8]
 2169              	.L142:
 2170              	.LBE177:
 2171              	.LBE176:
 2172              	 .loc 1 1863 0 discriminator 1
 2173 0024 FEE7     	 b .L142
 2174              	.L141:
1864:../Dave/Generated/FREERTOS/tasks.c **** 
1865:../Dave/Generated/FREERTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1866:../Dave/Generated/FREERTOS/tasks.c ****          * currently executing task. */
1867:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2175              	 .loc 1 1867 0
 2176 0026 204B     	 ldr r3,.L146
 2177 0028 1B68     	 ldr r3,[r3]
 2178 002a FA68     	 ldr r2,[r7,#12]
 2179 002c 9A42     	 cmp r2,r3
 2180 002e 38D0     	 beq .L140
 2181              	 .loc 1 1867 0 is_stmt 0 discriminator 1
 2182 0030 FB68     	 ldr r3,[r7,#12]
 2183 0032 002B     	 cmp r3,#0
 2184 0034 35D0     	 beq .L140
1868:../Dave/Generated/FREERTOS/tasks.c ****         {
1869:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 2185              	 .loc 1 1869 0 is_stmt 1
 2186 0036 FFF7FEFF 	 bl vPortEnterCritical
1870:../Dave/Generated/FREERTOS/tasks.c ****             {
1871:../Dave/Generated/FREERTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2187              	 .loc 1 1871 0
 2188 003a F868     	 ldr r0,[r7,#12]
 2189 003c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2190 0040 0346     	 mov r3,r0
 2191 0042 002B     	 cmp r3,#0
 2192 0044 2BD0     	 beq .L144
1872:../Dave/Generated/FREERTOS/tasks.c ****                 {
1873:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1874:../Dave/Generated/FREERTOS/tasks.c **** 
1875:../Dave/Generated/FREERTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1876:../Dave/Generated/FREERTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1877:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2193              	 .loc 1 1877 0
 2194 0046 FB68     	 ldr r3,[r7,#12]
 2195 0048 0433     	 adds r3,r3,#4
 2196 004a 1846     	 mov r0,r3
 2197 004c FFF7FEFF 	 bl uxListRemove
1878:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2198              	 .loc 1 1878 0
 2199 0050 FB68     	 ldr r3,[r7,#12]
 2200 0052 DA6A     	 ldr r2,[r3,#44]
 2201 0054 154B     	 ldr r3,.L146+4
 2202 0056 1B68     	 ldr r3,[r3]
 2203 0058 9A42     	 cmp r2,r3
 2204 005a 03D9     	 bls .L145
 2205              	 .loc 1 1878 0 is_stmt 0 discriminator 1
 2206 005c FB68     	 ldr r3,[r7,#12]
 2207 005e DB6A     	 ldr r3,[r3,#44]
 2208 0060 124A     	 ldr r2,.L146+4
 2209 0062 1360     	 str r3,[r2]
 2210              	.L145:
 2211              	 .loc 1 1878 0 discriminator 3
 2212 0064 FB68     	 ldr r3,[r7,#12]
 2213 0066 DA6A     	 ldr r2,[r3,#44]
 2214 0068 1346     	 mov r3,r2
 2215 006a 9B00     	 lsls r3,r3,#2
 2216 006c 1344     	 add r3,r3,r2
 2217 006e 9B00     	 lsls r3,r3,#2
 2218 0070 0F4A     	 ldr r2,.L146+8
 2219 0072 1A44     	 add r2,r2,r3
 2220 0074 FB68     	 ldr r3,[r7,#12]
 2221 0076 0433     	 adds r3,r3,#4
 2222 0078 1046     	 mov r0,r2
 2223 007a 1946     	 mov r1,r3
 2224 007c FFF7FEFF 	 bl vListInsertEnd
1879:../Dave/Generated/FREERTOS/tasks.c **** 
1880:../Dave/Generated/FREERTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1881:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2225              	 .loc 1 1881 0 is_stmt 1 discriminator 3
 2226 0080 FB68     	 ldr r3,[r7,#12]
 2227 0082 DA6A     	 ldr r2,[r3,#44]
 2228 0084 084B     	 ldr r3,.L146
 2229 0086 1B68     	 ldr r3,[r3]
 2230 0088 DB6A     	 ldr r3,[r3,#44]
 2231 008a 9A42     	 cmp r2,r3
 2232 008c 07D3     	 bcc .L144
1882:../Dave/Generated/FREERTOS/tasks.c ****                     {
1883:../Dave/Generated/FREERTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1884:../Dave/Generated/FREERTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1885:../Dave/Generated/FREERTOS/tasks.c ****                          * next yield. */
1886:../Dave/Generated/FREERTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
 2233              	 .loc 1 1886 0
 2234 008e 094B     	 ldr r3,.L146+12
 2235 0090 4FF08052 	 mov r2,#268435456
 2236 0094 1A60     	 str r2,[r3]
 2237              	
 2238 0096 BFF34F8F 	 dsb
 2239              	
 2240              	
 2241 009a BFF36F8F 	 isb
 2242              	
 2243              	 .thumb
 2244              	.L144:
1887:../Dave/Generated/FREERTOS/tasks.c ****                     }
1888:../Dave/Generated/FREERTOS/tasks.c ****                     else
1889:../Dave/Generated/FREERTOS/tasks.c ****                     {
1890:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1891:../Dave/Generated/FREERTOS/tasks.c ****                     }
1892:../Dave/Generated/FREERTOS/tasks.c ****                 }
1893:../Dave/Generated/FREERTOS/tasks.c ****                 else
1894:../Dave/Generated/FREERTOS/tasks.c ****                 {
1895:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1896:../Dave/Generated/FREERTOS/tasks.c ****                 }
1897:../Dave/Generated/FREERTOS/tasks.c ****             }
1898:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 2245              	 .loc 1 1898 0
 2246 009e FFF7FEFF 	 bl vPortExitCritical
 2247              	.L140:
1899:../Dave/Generated/FREERTOS/tasks.c ****         }
1900:../Dave/Generated/FREERTOS/tasks.c ****         else
1901:../Dave/Generated/FREERTOS/tasks.c ****         {
1902:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1903:../Dave/Generated/FREERTOS/tasks.c ****         }
1904:../Dave/Generated/FREERTOS/tasks.c ****     }
 2248              	 .loc 1 1904 0
 2249 00a2 1037     	 adds r7,r7,#16
 2250              	.LCFI69:
 2251              	 .cfi_def_cfa_offset 8
 2252 00a4 BD46     	 mov sp,r7
 2253              	.LCFI70:
 2254              	 .cfi_def_cfa_register 13
 2255              	 
 2256 00a6 80BD     	 pop {r7,pc}
 2257              	.L147:
 2258              	 .align 2
 2259              	.L146:
 2260 00a8 00000000 	 .word pxCurrentTCB
 2261 00ac 00000000 	 .word uxTopReadyPriority
 2262 00b0 00000000 	 .word pxReadyTasksLists
 2263 00b4 04ED00E0 	 .word -536810236
 2264              	 .cfi_endproc
 2265              	.LFE150:
 2267              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 2268              	 .align 2
 2269              	 .global xTaskResumeFromISR
 2270              	 .thumb
 2271              	 .thumb_func
 2273              	xTaskResumeFromISR:
 2274              	.LFB151:
1905:../Dave/Generated/FREERTOS/tasks.c **** 
1906:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1907:../Dave/Generated/FREERTOS/tasks.c **** 
1908:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1909:../Dave/Generated/FREERTOS/tasks.c **** 
1910:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1911:../Dave/Generated/FREERTOS/tasks.c **** 
1912:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1913:../Dave/Generated/FREERTOS/tasks.c ****     {
 2275              	 .loc 1 1913 0
 2276              	 .cfi_startproc
 2277              	 
 2278              	 
 2279 0000 80B5     	 push {r7,lr}
 2280              	.LCFI71:
 2281              	 .cfi_def_cfa_offset 8
 2282              	 .cfi_offset 7,-8
 2283              	 .cfi_offset 14,-4
 2284 0002 8AB0     	 sub sp,sp,#40
 2285              	.LCFI72:
 2286              	 .cfi_def_cfa_offset 48
 2287 0004 00AF     	 add r7,sp,#0
 2288              	.LCFI73:
 2289              	 .cfi_def_cfa_register 7
 2290 0006 7860     	 str r0,[r7,#4]
1914:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2291              	 .loc 1 1914 0
 2292 0008 0023     	 movs r3,#0
 2293 000a 7B62     	 str r3,[r7,#36]
1915:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2294              	 .loc 1 1915 0
 2295 000c 7B68     	 ldr r3,[r7,#4]
 2296 000e 3B62     	 str r3,[r7,#32]
1916:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1917:../Dave/Generated/FREERTOS/tasks.c **** 
1918:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToResume );
 2297              	 .loc 1 1918 0
 2298 0010 7B68     	 ldr r3,[r7,#4]
 2299 0012 002B     	 cmp r3,#0
 2300 0014 09D1     	 bne .L149
 2301              	.LBB178:
 2302              	.LBB179:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2303              	 .loc 2 197 0 discriminator 1
 2304              	
 2305 0016 4FF0FC03 	 mov r3,#252
 2306 001a 83F31188 	 msr basepri,r3
 2307 001e BFF36F8F 	 isb 
 2308 0022 BFF34F8F 	 dsb 
 2309              	
 2310              	
 2311              	 .thumb
 2312 0026 BB61     	 str r3,[r7,#24]
 2313              	.L150:
 2314              	.LBE179:
 2315              	.LBE178:
 2316              	 .loc 1 1918 0 discriminator 1
 2317 0028 FEE7     	 b .L150
 2318              	.L149:
1919:../Dave/Generated/FREERTOS/tasks.c **** 
1920:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1921:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1922:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1923:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1924:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1925:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1926:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1927:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1928:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1929:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1930:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1931:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1932:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1933:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1934:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
1935:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1936:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2319              	 .loc 1 1936 0
 2320 002a FFF7FEFF 	 bl vPortValidateInterruptPriority
 2321              	.LBB180:
 2322              	.LBB181:
 213:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2323              	 .loc 2 213 0
 2324              	
 2325 002e EFF31182 	 mrs r2,basepri
 2326 0032 4FF0FC03 	 mov r3,#252
 2327 0036 83F31188 	 msr basepri,r3
 2328 003a BFF36F8F 	 isb 
 2329 003e BFF34F8F 	 dsb 
 2330              	
 2331              	
 2332              	 .thumb
 2333 0042 7A61     	 str r2,[r7,#20]
 2334 0044 3B61     	 str r3,[r7,#16]
 225:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 2335              	 .loc 2 225 0
 2336 0046 7B69     	 ldr r3,[r7,#20]
 2337              	.LBE181:
 2338              	.LBE180:
1937:../Dave/Generated/FREERTOS/tasks.c **** 
1938:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2339              	 .loc 1 1938 0
 2340 0048 FB61     	 str r3,[r7,#28]
1939:../Dave/Generated/FREERTOS/tasks.c ****         {
1940:../Dave/Generated/FREERTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2341              	 .loc 1 1940 0
 2342 004a 386A     	 ldr r0,[r7,#32]
 2343 004c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2344 0050 0346     	 mov r3,r0
 2345 0052 002B     	 cmp r3,#0
 2346 0054 33D0     	 beq .L152
1941:../Dave/Generated/FREERTOS/tasks.c ****             {
1942:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1943:../Dave/Generated/FREERTOS/tasks.c **** 
1944:../Dave/Generated/FREERTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1945:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2347              	 .loc 1 1945 0
 2348 0056 1F4B     	 ldr r3,.L158
 2349 0058 1B68     	 ldr r3,[r3]
 2350 005a 002B     	 cmp r3,#0
 2351 005c 29D1     	 bne .L153
1946:../Dave/Generated/FREERTOS/tasks.c ****                 {
1947:../Dave/Generated/FREERTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1948:../Dave/Generated/FREERTOS/tasks.c ****                      * suspended list to the ready list directly. */
1949:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2352              	 .loc 1 1949 0
 2353 005e 3B6A     	 ldr r3,[r7,#32]
 2354 0060 DA6A     	 ldr r2,[r3,#44]
 2355 0062 1D4B     	 ldr r3,.L158+4
 2356 0064 1B68     	 ldr r3,[r3]
 2357 0066 DB6A     	 ldr r3,[r3,#44]
 2358 0068 9A42     	 cmp r2,r3
 2359 006a 04D3     	 bcc .L154
1950:../Dave/Generated/FREERTOS/tasks.c ****                     {
1951:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldRequired = pdTRUE;
 2360              	 .loc 1 1951 0
 2361 006c 0123     	 movs r3,#1
 2362 006e 7B62     	 str r3,[r7,#36]
1952:../Dave/Generated/FREERTOS/tasks.c **** 
1953:../Dave/Generated/FREERTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1954:../Dave/Generated/FREERTOS/tasks.c ****                          * using the return value to initiate a context switch
1955:../Dave/Generated/FREERTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1956:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldPending = pdTRUE;
 2363              	 .loc 1 1956 0
 2364 0070 1A4B     	 ldr r3,.L158+8
 2365 0072 0122     	 movs r2,#1
 2366 0074 1A60     	 str r2,[r3]
 2367              	.L154:
1957:../Dave/Generated/FREERTOS/tasks.c ****                     }
1958:../Dave/Generated/FREERTOS/tasks.c ****                     else
1959:../Dave/Generated/FREERTOS/tasks.c ****                     {
1960:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1961:../Dave/Generated/FREERTOS/tasks.c ****                     }
1962:../Dave/Generated/FREERTOS/tasks.c **** 
1963:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2368              	 .loc 1 1963 0
 2369 0076 3B6A     	 ldr r3,[r7,#32]
 2370 0078 0433     	 adds r3,r3,#4
 2371 007a 1846     	 mov r0,r3
 2372 007c FFF7FEFF 	 bl uxListRemove
1964:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2373              	 .loc 1 1964 0
 2374 0080 3B6A     	 ldr r3,[r7,#32]
 2375 0082 DA6A     	 ldr r2,[r3,#44]
 2376 0084 164B     	 ldr r3,.L158+12
 2377 0086 1B68     	 ldr r3,[r3]
 2378 0088 9A42     	 cmp r2,r3
 2379 008a 03D9     	 bls .L155
 2380              	 .loc 1 1964 0 is_stmt 0 discriminator 1
 2381 008c 3B6A     	 ldr r3,[r7,#32]
 2382 008e DB6A     	 ldr r3,[r3,#44]
 2383 0090 134A     	 ldr r2,.L158+12
 2384 0092 1360     	 str r3,[r2]
 2385              	.L155:
 2386              	 .loc 1 1964 0 discriminator 3
 2387 0094 3B6A     	 ldr r3,[r7,#32]
 2388 0096 DA6A     	 ldr r2,[r3,#44]
 2389 0098 1346     	 mov r3,r2
 2390 009a 9B00     	 lsls r3,r3,#2
 2391 009c 1344     	 add r3,r3,r2
 2392 009e 9B00     	 lsls r3,r3,#2
 2393 00a0 104A     	 ldr r2,.L158+16
 2394 00a2 1A44     	 add r2,r2,r3
 2395 00a4 3B6A     	 ldr r3,[r7,#32]
 2396 00a6 0433     	 adds r3,r3,#4
 2397 00a8 1046     	 mov r0,r2
 2398 00aa 1946     	 mov r1,r3
 2399 00ac FFF7FEFF 	 bl vListInsertEnd
 2400 00b0 05E0     	 b .L152
 2401              	.L153:
1965:../Dave/Generated/FREERTOS/tasks.c ****                 }
1966:../Dave/Generated/FREERTOS/tasks.c ****                 else
1967:../Dave/Generated/FREERTOS/tasks.c ****                 {
1968:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1969:../Dave/Generated/FREERTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1970:../Dave/Generated/FREERTOS/tasks.c ****                      * unsuspended. */
1971:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2402              	 .loc 1 1971 0 is_stmt 1
 2403 00b2 3B6A     	 ldr r3,[r7,#32]
 2404 00b4 1833     	 adds r3,r3,#24
 2405 00b6 0C48     	 ldr r0,.L158+20
 2406 00b8 1946     	 mov r1,r3
 2407 00ba FFF7FEFF 	 bl vListInsertEnd
 2408              	.L152:
 2409 00be FB69     	 ldr r3,[r7,#28]
 2410 00c0 FB60     	 str r3,[r7,#12]
 2411              	.LBB182:
 2412              	.LBB183:
 2413              	 .loc 2 231 0
 2414 00c2 FB68     	 ldr r3,[r7,#12]
 2415              	
 2416 00c4 83F31188 	 msr basepri,r3
 2417              	
 2418              	 .thumb
 2419              	.LBE183:
 2420              	.LBE182:
1972:../Dave/Generated/FREERTOS/tasks.c ****                 }
1973:../Dave/Generated/FREERTOS/tasks.c ****             }
1974:../Dave/Generated/FREERTOS/tasks.c ****             else
1975:../Dave/Generated/FREERTOS/tasks.c ****             {
1976:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1977:../Dave/Generated/FREERTOS/tasks.c ****             }
1978:../Dave/Generated/FREERTOS/tasks.c ****         }
1979:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1980:../Dave/Generated/FREERTOS/tasks.c **** 
1981:../Dave/Generated/FREERTOS/tasks.c ****         return xYieldRequired;
 2421              	 .loc 1 1981 0
 2422 00c8 7B6A     	 ldr r3,[r7,#36]
1982:../Dave/Generated/FREERTOS/tasks.c ****     }
 2423              	 .loc 1 1982 0
 2424 00ca 1846     	 mov r0,r3
 2425 00cc 2837     	 adds r7,r7,#40
 2426              	.LCFI74:
 2427              	 .cfi_def_cfa_offset 8
 2428 00ce BD46     	 mov sp,r7
 2429              	.LCFI75:
 2430              	 .cfi_def_cfa_register 13
 2431              	 
 2432 00d0 80BD     	 pop {r7,pc}
 2433              	.L159:
 2434 00d2 00BF     	 .align 2
 2435              	.L158:
 2436 00d4 00000000 	 .word uxSchedulerSuspended
 2437 00d8 00000000 	 .word pxCurrentTCB
 2438 00dc 00000000 	 .word xYieldPending
 2439 00e0 00000000 	 .word uxTopReadyPriority
 2440 00e4 00000000 	 .word pxReadyTasksLists
 2441 00e8 00000000 	 .word xPendingReadyList
 2442              	 .cfi_endproc
 2443              	.LFE151:
 2445              	 .section .rodata
 2446              	 .align 2
 2447              	.LC0:
 2448 0000 49444C45 	 .ascii "IDLE\000"
 2448      00
 2449              	 .section .text.vTaskStartScheduler,"ax",%progbits
 2450              	 .align 2
 2451              	 .global vTaskStartScheduler
 2452              	 .thumb
 2453              	 .thumb_func
 2455              	vTaskStartScheduler:
 2456              	.LFB152:
1983:../Dave/Generated/FREERTOS/tasks.c **** 
1984:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1985:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1986:../Dave/Generated/FREERTOS/tasks.c **** 
1987:../Dave/Generated/FREERTOS/tasks.c **** void vTaskStartScheduler( void )
1988:../Dave/Generated/FREERTOS/tasks.c **** {
 2457              	 .loc 1 1988 0
 2458              	 .cfi_startproc
 2459              	 
 2460              	 
 2461 0000 90B5     	 push {r4,r7,lr}
 2462              	.LCFI76:
 2463              	 .cfi_def_cfa_offset 12
 2464              	 .cfi_offset 4,-12
 2465              	 .cfi_offset 7,-8
 2466              	 .cfi_offset 14,-4
 2467 0002 8BB0     	 sub sp,sp,#44
 2468              	.LCFI77:
 2469              	 .cfi_def_cfa_offset 56
 2470 0004 04AF     	 add r7,sp,#16
 2471              	.LCFI78:
 2472              	 .cfi_def_cfa 7,40
 2473              	.LBB184:
1989:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
1990:../Dave/Generated/FREERTOS/tasks.c **** 
1991:../Dave/Generated/FREERTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1992:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1993:../Dave/Generated/FREERTOS/tasks.c ****         {
1994:../Dave/Generated/FREERTOS/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 2474              	 .loc 1 1994 0
 2475 0006 0023     	 movs r3,#0
 2476 0008 BB60     	 str r3,[r7,#8]
1995:../Dave/Generated/FREERTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 2477              	 .loc 1 1995 0
 2478 000a 0023     	 movs r3,#0
 2479 000c 7B60     	 str r3,[r7,#4]
1996:../Dave/Generated/FREERTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
1997:../Dave/Generated/FREERTOS/tasks.c **** 
1998:../Dave/Generated/FREERTOS/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
1999:../Dave/Generated/FREERTOS/tasks.c ****              * address of the RAM then create the idle task. */
2000:../Dave/Generated/FREERTOS/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
 2480              	 .loc 1 2000 0
 2481 000e 07F10801 	 add r1,r7,#8
 2482 0012 3A1D     	 adds r2,r7,#4
 2483 0014 3B46     	 mov r3,r7
 2484 0016 0846     	 mov r0,r1
 2485 0018 1146     	 mov r1,r2
 2486 001a 1A46     	 mov r2,r3
 2487 001c FFF7FEFF 	 bl vApplicationGetIdleTaskMemory
2001:../Dave/Generated/FREERTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 2488              	 .loc 1 2001 0
 2489 0020 3C68     	 ldr r4,[r7]
 2490 0022 7A68     	 ldr r2,[r7,#4]
 2491 0024 BB68     	 ldr r3,[r7,#8]
 2492 0026 0021     	 movs r1,#0
 2493 0028 0091     	 str r1,[sp]
 2494 002a 0192     	 str r2,[sp,#4]
 2495 002c 0293     	 str r3,[sp,#8]
 2496 002e 2248     	 ldr r0,.L167
 2497 0030 2249     	 ldr r1,.L167+4
 2498 0032 2246     	 mov r2,r4
 2499 0034 0023     	 movs r3,#0
 2500 0036 FFF7FEFF 	 bl xTaskCreateStatic
 2501 003a 0246     	 mov r2,r0
 2502 003c 204B     	 ldr r3,.L167+8
 2503 003e 1A60     	 str r2,[r3]
2002:../Dave/Generated/FREERTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
2003:../Dave/Generated/FREERTOS/tasks.c ****                                                  ulIdleTaskStackSize,
2004:../Dave/Generated/FREERTOS/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2005:../Dave/Generated/FREERTOS/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2006:../Dave/Generated/FREERTOS/tasks.c ****                                                  pxIdleTaskStackBuffer,
2007:../Dave/Generated/FREERTOS/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2008:../Dave/Generated/FREERTOS/tasks.c **** 
2009:../Dave/Generated/FREERTOS/tasks.c ****             if( xIdleTaskHandle != NULL )
 2504              	 .loc 1 2009 0
 2505 0040 1F4B     	 ldr r3,.L167+8
 2506 0042 1B68     	 ldr r3,[r3]
 2507 0044 002B     	 cmp r3,#0
 2508 0046 02D0     	 beq .L161
2010:../Dave/Generated/FREERTOS/tasks.c ****             {
2011:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 2509              	 .loc 1 2011 0
 2510 0048 0123     	 movs r3,#1
 2511 004a 7B61     	 str r3,[r7,#20]
 2512 004c 01E0     	 b .L162
 2513              	.L161:
2012:../Dave/Generated/FREERTOS/tasks.c ****             }
2013:../Dave/Generated/FREERTOS/tasks.c ****             else
2014:../Dave/Generated/FREERTOS/tasks.c ****             {
2015:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
 2514              	 .loc 1 2015 0
 2515 004e 0023     	 movs r3,#0
 2516 0050 7B61     	 str r3,[r7,#20]
 2517              	.L162:
 2518              	.LBE184:
2016:../Dave/Generated/FREERTOS/tasks.c ****             }
2017:../Dave/Generated/FREERTOS/tasks.c ****         }
2018:../Dave/Generated/FREERTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2019:../Dave/Generated/FREERTOS/tasks.c ****         {
2020:../Dave/Generated/FREERTOS/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2021:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
2022:../Dave/Generated/FREERTOS/tasks.c ****                                    configIDLE_TASK_NAME,
2023:../Dave/Generated/FREERTOS/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2024:../Dave/Generated/FREERTOS/tasks.c ****                                    ( void * ) NULL,
2025:../Dave/Generated/FREERTOS/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2026:../Dave/Generated/FREERTOS/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2027:../Dave/Generated/FREERTOS/tasks.c ****         }
2028:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2029:../Dave/Generated/FREERTOS/tasks.c **** 
2030:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2031:../Dave/Generated/FREERTOS/tasks.c ****         {
2032:../Dave/Generated/FREERTOS/tasks.c ****             if( xReturn == pdPASS )
 2519              	 .loc 1 2032 0
 2520 0052 7B69     	 ldr r3,[r7,#20]
 2521 0054 012B     	 cmp r3,#1
 2522 0056 02D1     	 bne .L163
2033:../Dave/Generated/FREERTOS/tasks.c ****             {
2034:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = xTimerCreateTimerTask();
 2523              	 .loc 1 2034 0
 2524 0058 FFF7FEFF 	 bl xTimerCreateTimerTask
 2525 005c 7861     	 str r0,[r7,#20]
 2526              	.L163:
2035:../Dave/Generated/FREERTOS/tasks.c ****             }
2036:../Dave/Generated/FREERTOS/tasks.c ****             else
2037:../Dave/Generated/FREERTOS/tasks.c ****             {
2038:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2039:../Dave/Generated/FREERTOS/tasks.c ****             }
2040:../Dave/Generated/FREERTOS/tasks.c ****         }
2041:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2042:../Dave/Generated/FREERTOS/tasks.c **** 
2043:../Dave/Generated/FREERTOS/tasks.c ****     if( xReturn == pdPASS )
 2527              	 .loc 1 2043 0
 2528 005e 7B69     	 ldr r3,[r7,#20]
 2529 0060 012B     	 cmp r3,#1
 2530 0062 15D1     	 bne .L164
 2531              	.LBB185:
 2532              	.LBB186:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2533              	 .loc 2 197 0
 2534              	
 2535 0064 4FF0FC03 	 mov r3,#252
 2536 0068 83F31188 	 msr basepri,r3
 2537 006c BFF36F8F 	 isb 
 2538 0070 BFF34F8F 	 dsb 
 2539              	
 2540              	
 2541              	 .thumb
 2542 0074 3B61     	 str r3,[r7,#16]
 2543              	.LBE186:
 2544              	.LBE185:
2044:../Dave/Generated/FREERTOS/tasks.c ****     {
2045:../Dave/Generated/FREERTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2046:../Dave/Generated/FREERTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2047:../Dave/Generated/FREERTOS/tasks.c ****          * the only macro called by the function. */
2048:../Dave/Generated/FREERTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2049:../Dave/Generated/FREERTOS/tasks.c ****             {
2050:../Dave/Generated/FREERTOS/tasks.c ****                 freertos_tasks_c_additions_init();
2051:../Dave/Generated/FREERTOS/tasks.c ****             }
2052:../Dave/Generated/FREERTOS/tasks.c ****         #endif
2053:../Dave/Generated/FREERTOS/tasks.c **** 
2054:../Dave/Generated/FREERTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2055:../Dave/Generated/FREERTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2056:../Dave/Generated/FREERTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2057:../Dave/Generated/FREERTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2058:../Dave/Generated/FREERTOS/tasks.c ****          * starts to run. */
2059:../Dave/Generated/FREERTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2060:../Dave/Generated/FREERTOS/tasks.c **** 
2061:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2062:../Dave/Generated/FREERTOS/tasks.c ****             {
2063:../Dave/Generated/FREERTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2064:../Dave/Generated/FREERTOS/tasks.c ****                  * structure specific to the task that will run first.
2065:../Dave/Generated/FREERTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2066:../Dave/Generated/FREERTOS/tasks.c ****                  * for additional information. */
2067:../Dave/Generated/FREERTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2068:../Dave/Generated/FREERTOS/tasks.c ****             }
2069:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2070:../Dave/Generated/FREERTOS/tasks.c **** 
2071:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 2545              	 .loc 1 2071 0
 2546 0076 134B     	 ldr r3,.L167+12
 2547 0078 4FF0FF32 	 mov r2,#-1
 2548 007c 1A60     	 str r2,[r3]
2072:../Dave/Generated/FREERTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2549              	 .loc 1 2072 0
 2550 007e 124B     	 ldr r3,.L167+16
 2551 0080 0122     	 movs r2,#1
 2552 0082 1A60     	 str r2,[r3]
2073:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2553              	 .loc 1 2073 0
 2554 0084 114B     	 ldr r3,.L167+20
 2555 0086 0022     	 movs r2,#0
 2556 0088 1A60     	 str r2,[r3]
2074:../Dave/Generated/FREERTOS/tasks.c **** 
2075:../Dave/Generated/FREERTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2076:../Dave/Generated/FREERTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2077:../Dave/Generated/FREERTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2078:../Dave/Generated/FREERTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2079:../Dave/Generated/FREERTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2080:../Dave/Generated/FREERTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2081:../Dave/Generated/FREERTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2082:../Dave/Generated/FREERTOS/tasks.c **** 
2083:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2084:../Dave/Generated/FREERTOS/tasks.c **** 
2085:../Dave/Generated/FREERTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2086:../Dave/Generated/FREERTOS/tasks.c ****          * portable interface. */
2087:../Dave/Generated/FREERTOS/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
 2557              	 .loc 1 2087 0
 2558 008a FFF7FEFF 	 bl xPortStartScheduler
 2559 008e 0DE0     	 b .L165
 2560              	.L164:
2088:../Dave/Generated/FREERTOS/tasks.c ****         {
2089:../Dave/Generated/FREERTOS/tasks.c ****             /* Should not reach here as if the scheduler is running the
2090:../Dave/Generated/FREERTOS/tasks.c ****              * function will not return. */
2091:../Dave/Generated/FREERTOS/tasks.c ****         }
2092:../Dave/Generated/FREERTOS/tasks.c ****         else
2093:../Dave/Generated/FREERTOS/tasks.c ****         {
2094:../Dave/Generated/FREERTOS/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2095:../Dave/Generated/FREERTOS/tasks.c ****         }
2096:../Dave/Generated/FREERTOS/tasks.c ****     }
2097:../Dave/Generated/FREERTOS/tasks.c ****     else
2098:../Dave/Generated/FREERTOS/tasks.c ****     {
2099:../Dave/Generated/FREERTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2100:../Dave/Generated/FREERTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2101:../Dave/Generated/FREERTOS/tasks.c ****          * or the timer task. */
2102:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2561              	 .loc 1 2102 0
 2562 0090 7B69     	 ldr r3,[r7,#20]
 2563 0092 B3F1FF3F 	 cmp r3,#-1
 2564 0096 09D1     	 bne .L165
 2565              	.LBB187:
 2566              	.LBB188:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2567              	 .loc 2 197 0 discriminator 1
 2568              	
 2569 0098 4FF0FC03 	 mov r3,#252
 2570 009c 83F31188 	 msr basepri,r3
 2571 00a0 BFF36F8F 	 isb 
 2572 00a4 BFF34F8F 	 dsb 
 2573              	
 2574              	
 2575              	 .thumb
 2576 00a8 FB60     	 str r3,[r7,#12]
 2577              	.L166:
 2578              	.LBE188:
 2579              	.LBE187:
 2580              	 .loc 1 2102 0 discriminator 2
 2581 00aa FEE7     	 b .L166
 2582              	.L165:
2103:../Dave/Generated/FREERTOS/tasks.c ****     }
2104:../Dave/Generated/FREERTOS/tasks.c **** 
2105:../Dave/Generated/FREERTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2106:../Dave/Generated/FREERTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2107:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2108:../Dave/Generated/FREERTOS/tasks.c **** 
2109:../Dave/Generated/FREERTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2110:../Dave/Generated/FREERTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2111:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxTopUsedPriority;
 2583              	 .loc 1 2111 0
 2584 00ac 084B     	 ldr r3,.L167+24
 2585 00ae 1B68     	 ldr r3,[r3]
2112:../Dave/Generated/FREERTOS/tasks.c **** }
 2586              	 .loc 1 2112 0
 2587 00b0 1C37     	 adds r7,r7,#28
 2588              	.LCFI79:
 2589              	 .cfi_def_cfa_offset 12
 2590 00b2 BD46     	 mov sp,r7
 2591              	.LCFI80:
 2592              	 .cfi_def_cfa_register 13
 2593              	 
 2594 00b4 90BD     	 pop {r4,r7,pc}
 2595              	.L168:
 2596 00b6 00BF     	 .align 2
 2597              	.L167:
 2598 00b8 00000000 	 .word prvIdleTask
 2599 00bc 00000000 	 .word .LC0
 2600 00c0 00000000 	 .word xIdleTaskHandle
 2601 00c4 00000000 	 .word xNextTaskUnblockTime
 2602 00c8 00000000 	 .word xSchedulerRunning
 2603 00cc 00000000 	 .word xTickCount
 2604 00d0 00000000 	 .word uxTopUsedPriority
 2605              	 .cfi_endproc
 2606              	.LFE152:
 2608              	 .section .text.vTaskEndScheduler,"ax",%progbits
 2609              	 .align 2
 2610              	 .global vTaskEndScheduler
 2611              	 .thumb
 2612              	 .thumb_func
 2614              	vTaskEndScheduler:
 2615              	.LFB153:
2113:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2114:../Dave/Generated/FREERTOS/tasks.c **** 
2115:../Dave/Generated/FREERTOS/tasks.c **** void vTaskEndScheduler( void )
2116:../Dave/Generated/FREERTOS/tasks.c **** {
 2616              	 .loc 1 2116 0
 2617              	 .cfi_startproc
 2618              	 
 2619              	 
 2620 0000 80B5     	 push {r7,lr}
 2621              	.LCFI81:
 2622              	 .cfi_def_cfa_offset 8
 2623              	 .cfi_offset 7,-8
 2624              	 .cfi_offset 14,-4
 2625 0002 82B0     	 sub sp,sp,#8
 2626              	.LCFI82:
 2627              	 .cfi_def_cfa_offset 16
 2628 0004 00AF     	 add r7,sp,#0
 2629              	.LCFI83:
 2630              	 .cfi_def_cfa_register 7
 2631              	.LBB189:
 2632              	.LBB190:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2633              	 .loc 2 197 0
 2634              	
 2635 0006 4FF0FC03 	 mov r3,#252
 2636 000a 83F31188 	 msr basepri,r3
 2637 000e BFF36F8F 	 isb 
 2638 0012 BFF34F8F 	 dsb 
 2639              	
 2640              	
 2641              	 .thumb
 2642 0016 7B60     	 str r3,[r7,#4]
 2643              	.LBE190:
 2644              	.LBE189:
2117:../Dave/Generated/FREERTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2118:../Dave/Generated/FREERTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2119:../Dave/Generated/FREERTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2120:../Dave/Generated/FREERTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2121:../Dave/Generated/FREERTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2645              	 .loc 1 2121 0
 2646 0018 034B     	 ldr r3,.L170
 2647 001a 0022     	 movs r2,#0
 2648 001c 1A60     	 str r2,[r3]
2122:../Dave/Generated/FREERTOS/tasks.c ****     vPortEndScheduler();
 2649              	 .loc 1 2122 0
 2650 001e FFF7FEFF 	 bl vPortEndScheduler
2123:../Dave/Generated/FREERTOS/tasks.c **** }
 2651              	 .loc 1 2123 0
 2652 0022 0837     	 adds r7,r7,#8
 2653              	.LCFI84:
 2654              	 .cfi_def_cfa_offset 8
 2655 0024 BD46     	 mov sp,r7
 2656              	.LCFI85:
 2657              	 .cfi_def_cfa_register 13
 2658              	 
 2659 0026 80BD     	 pop {r7,pc}
 2660              	.L171:
 2661              	 .align 2
 2662              	.L170:
 2663 0028 00000000 	 .word xSchedulerRunning
 2664              	 .cfi_endproc
 2665              	.LFE153:
 2667              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2668              	 .align 2
 2669              	 .global vTaskSuspendAll
 2670              	 .thumb
 2671              	 .thumb_func
 2673              	vTaskSuspendAll:
 2674              	.LFB154:
2124:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2125:../Dave/Generated/FREERTOS/tasks.c **** 
2126:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSuspendAll( void )
2127:../Dave/Generated/FREERTOS/tasks.c **** {
 2675              	 .loc 1 2127 0
 2676              	 .cfi_startproc
 2677              	 
 2678              	 
 2679              	 
 2680 0000 80B4     	 push {r7}
 2681              	.LCFI86:
 2682              	 .cfi_def_cfa_offset 4
 2683              	 .cfi_offset 7,-4
 2684 0002 00AF     	 add r7,sp,#0
 2685              	.LCFI87:
 2686              	 .cfi_def_cfa_register 7
2128:../Dave/Generated/FREERTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2129:../Dave/Generated/FREERTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2130:../Dave/Generated/FREERTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2131:../Dave/Generated/FREERTOS/tasks.c ****      * https://goo.gl/wu4acr */
2132:../Dave/Generated/FREERTOS/tasks.c **** 
2133:../Dave/Generated/FREERTOS/tasks.c ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2134:../Dave/Generated/FREERTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2135:../Dave/Generated/FREERTOS/tasks.c ****     portSOFTWARE_BARRIER();
2136:../Dave/Generated/FREERTOS/tasks.c **** 
2137:../Dave/Generated/FREERTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2138:../Dave/Generated/FREERTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2139:../Dave/Generated/FREERTOS/tasks.c ****     ++uxSchedulerSuspended;
 2687              	 .loc 1 2139 0
 2688 0004 044B     	 ldr r3,.L173
 2689 0006 1B68     	 ldr r3,[r3]
 2690 0008 0133     	 adds r3,r3,#1
 2691 000a 034A     	 ldr r2,.L173
 2692 000c 1360     	 str r3,[r2]
2140:../Dave/Generated/FREERTOS/tasks.c **** 
2141:../Dave/Generated/FREERTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2142:../Dave/Generated/FREERTOS/tasks.c ****      * the above increment elsewhere. */
2143:../Dave/Generated/FREERTOS/tasks.c ****     portMEMORY_BARRIER();
 2693              	 .loc 1 2143 0
2144:../Dave/Generated/FREERTOS/tasks.c **** }
 2694              	 .loc 1 2144 0
 2695 000e BD46     	 mov sp,r7
 2696              	.LCFI88:
 2697              	 .cfi_def_cfa_register 13
 2698              	 
 2699 0010 5DF8047B 	 ldr r7,[sp],#4
 2700              	.LCFI89:
 2701              	 .cfi_restore 7
 2702              	 .cfi_def_cfa_offset 0
 2703 0014 7047     	 bx lr
 2704              	.L174:
 2705 0016 00BF     	 .align 2
 2706              	.L173:
 2707 0018 00000000 	 .word uxSchedulerSuspended
 2708              	 .cfi_endproc
 2709              	.LFE154:
 2711              	 .section .text.xTaskResumeAll,"ax",%progbits
 2712              	 .align 2
 2713              	 .global xTaskResumeAll
 2714              	 .thumb
 2715              	 .thumb_func
 2717              	xTaskResumeAll:
 2718              	.LFB155:
2145:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2146:../Dave/Generated/FREERTOS/tasks.c **** 
2147:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2148:../Dave/Generated/FREERTOS/tasks.c **** 
2149:../Dave/Generated/FREERTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2150:../Dave/Generated/FREERTOS/tasks.c ****     {
2151:../Dave/Generated/FREERTOS/tasks.c ****         TickType_t xReturn;
2152:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2153:../Dave/Generated/FREERTOS/tasks.c **** 
2154:../Dave/Generated/FREERTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2155:../Dave/Generated/FREERTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2156:../Dave/Generated/FREERTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2157:../Dave/Generated/FREERTOS/tasks.c ****          * running. */
2158:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2159:../Dave/Generated/FREERTOS/tasks.c ****             {
2160:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2161:../Dave/Generated/FREERTOS/tasks.c ****                 {
2162:../Dave/Generated/FREERTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2163:../Dave/Generated/FREERTOS/tasks.c ****                 }
2164:../Dave/Generated/FREERTOS/tasks.c ****             }
2165:../Dave/Generated/FREERTOS/tasks.c ****         #else
2166:../Dave/Generated/FREERTOS/tasks.c ****             {
2167:../Dave/Generated/FREERTOS/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2168:../Dave/Generated/FREERTOS/tasks.c **** 
2169:../Dave/Generated/FREERTOS/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2170:../Dave/Generated/FREERTOS/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2171:../Dave/Generated/FREERTOS/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2172:../Dave/Generated/FREERTOS/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2173:../Dave/Generated/FREERTOS/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2174:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2175:../Dave/Generated/FREERTOS/tasks.c ****                 {
2176:../Dave/Generated/FREERTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2177:../Dave/Generated/FREERTOS/tasks.c ****                 }
2178:../Dave/Generated/FREERTOS/tasks.c ****             }
2179:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2180:../Dave/Generated/FREERTOS/tasks.c **** 
2181:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2182:../Dave/Generated/FREERTOS/tasks.c ****         {
2183:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2184:../Dave/Generated/FREERTOS/tasks.c ****         }
2185:../Dave/Generated/FREERTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2186:../Dave/Generated/FREERTOS/tasks.c ****         {
2187:../Dave/Generated/FREERTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2188:../Dave/Generated/FREERTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2189:../Dave/Generated/FREERTOS/tasks.c ****              * processed. */
2190:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2191:../Dave/Generated/FREERTOS/tasks.c ****         }
2192:../Dave/Generated/FREERTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2193:../Dave/Generated/FREERTOS/tasks.c ****         {
2194:../Dave/Generated/FREERTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2195:../Dave/Generated/FREERTOS/tasks.c ****              * idle priority.  This path can only be reached if
2196:../Dave/Generated/FREERTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2197:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2198:../Dave/Generated/FREERTOS/tasks.c ****         }
2199:../Dave/Generated/FREERTOS/tasks.c ****         else
2200:../Dave/Generated/FREERTOS/tasks.c ****         {
2201:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2202:../Dave/Generated/FREERTOS/tasks.c ****         }
2203:../Dave/Generated/FREERTOS/tasks.c **** 
2204:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2205:../Dave/Generated/FREERTOS/tasks.c ****     }
2206:../Dave/Generated/FREERTOS/tasks.c **** 
2207:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2208:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2209:../Dave/Generated/FREERTOS/tasks.c **** 
2210:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2211:../Dave/Generated/FREERTOS/tasks.c **** {
 2719              	 .loc 1 2211 0
 2720              	 .cfi_startproc
 2721              	 
 2722              	 
 2723 0000 80B5     	 push {r7,lr}
 2724              	.LCFI90:
 2725              	 .cfi_def_cfa_offset 8
 2726              	 .cfi_offset 7,-8
 2727              	 .cfi_offset 14,-4
 2728 0002 84B0     	 sub sp,sp,#16
 2729              	.LCFI91:
 2730              	 .cfi_def_cfa_offset 24
 2731 0004 00AF     	 add r7,sp,#0
 2732              	.LCFI92:
 2733              	 .cfi_def_cfa_register 7
2212:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2734              	 .loc 1 2212 0
 2735 0006 0023     	 movs r3,#0
 2736 0008 FB60     	 str r3,[r7,#12]
2213:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2737              	 .loc 1 2213 0
 2738 000a 0023     	 movs r3,#0
 2739 000c BB60     	 str r3,[r7,#8]
2214:../Dave/Generated/FREERTOS/tasks.c **** 
2215:../Dave/Generated/FREERTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2216:../Dave/Generated/FREERTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2217:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
 2740              	 .loc 1 2217 0
 2741 000e 414B     	 ldr r3,.L187
 2742 0010 1B68     	 ldr r3,[r3]
 2743 0012 002B     	 cmp r3,#0
 2744 0014 09D1     	 bne .L176
 2745              	.LBB191:
 2746              	.LBB192:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 2747              	 .loc 2 197 0 discriminator 1
 2748              	
 2749 0016 4FF0FC03 	 mov r3,#252
 2750 001a 83F31188 	 msr basepri,r3
 2751 001e BFF36F8F 	 isb 
 2752 0022 BFF34F8F 	 dsb 
 2753              	
 2754              	
 2755              	 .thumb
 2756 0026 3B60     	 str r3,[r7]
 2757              	.L177:
 2758              	.LBE192:
 2759              	.LBE191:
 2760              	 .loc 1 2217 0 discriminator 1
 2761 0028 FEE7     	 b .L177
 2762              	.L176:
2218:../Dave/Generated/FREERTOS/tasks.c **** 
2219:../Dave/Generated/FREERTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2220:../Dave/Generated/FREERTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2221:../Dave/Generated/FREERTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2222:../Dave/Generated/FREERTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2223:../Dave/Generated/FREERTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2224:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 2763              	 .loc 1 2224 0
 2764 002a FFF7FEFF 	 bl vPortEnterCritical
2225:../Dave/Generated/FREERTOS/tasks.c ****     {
2226:../Dave/Generated/FREERTOS/tasks.c ****         --uxSchedulerSuspended;
 2765              	 .loc 1 2226 0
 2766 002e 394B     	 ldr r3,.L187
 2767 0030 1B68     	 ldr r3,[r3]
 2768 0032 013B     	 subs r3,r3,#1
 2769 0034 374A     	 ldr r2,.L187
 2770 0036 1360     	 str r3,[r2]
2227:../Dave/Generated/FREERTOS/tasks.c **** 
2228:../Dave/Generated/FREERTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2771              	 .loc 1 2228 0
 2772 0038 364B     	 ldr r3,.L187
 2773 003a 1B68     	 ldr r3,[r3]
 2774 003c 002B     	 cmp r3,#0
 2775 003e 62D1     	 bne .L178
2229:../Dave/Generated/FREERTOS/tasks.c ****         {
2230:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2776              	 .loc 1 2230 0
 2777 0040 354B     	 ldr r3,.L187+4
 2778 0042 1B68     	 ldr r3,[r3]
 2779 0044 002B     	 cmp r3,#0
 2780 0046 5ED0     	 beq .L178
2231:../Dave/Generated/FREERTOS/tasks.c ****             {
2232:../Dave/Generated/FREERTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2233:../Dave/Generated/FREERTOS/tasks.c ****                  * appropriate ready list. */
2234:../Dave/Generated/FREERTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2781              	 .loc 1 2234 0
 2782 0048 2FE0     	 b .L179
 2783              	.L181:
2235:../Dave/Generated/FREERTOS/tasks.c ****                 {
2236:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
 2784              	 .loc 1 2236 0
 2785 004a 344B     	 ldr r3,.L187+8
 2786 004c DB68     	 ldr r3,[r3,#12]
 2787 004e DB68     	 ldr r3,[r3,#12]
 2788 0050 FB60     	 str r3,[r7,#12]
2237:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2789              	 .loc 1 2237 0
 2790 0052 FB68     	 ldr r3,[r7,#12]
 2791 0054 1833     	 adds r3,r3,#24
 2792 0056 1846     	 mov r0,r3
 2793 0058 FFF7FEFF 	 bl uxListRemove
2238:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2794              	 .loc 1 2238 0
 2795 005c FB68     	 ldr r3,[r7,#12]
 2796 005e 0433     	 adds r3,r3,#4
 2797 0060 1846     	 mov r0,r3
 2798 0062 FFF7FEFF 	 bl uxListRemove
2239:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2799              	 .loc 1 2239 0
 2800 0066 FB68     	 ldr r3,[r7,#12]
 2801 0068 DA6A     	 ldr r2,[r3,#44]
 2802 006a 2D4B     	 ldr r3,.L187+12
 2803 006c 1B68     	 ldr r3,[r3]
 2804 006e 9A42     	 cmp r2,r3
 2805 0070 03D9     	 bls .L180
 2806              	 .loc 1 2239 0 is_stmt 0 discriminator 1
 2807 0072 FB68     	 ldr r3,[r7,#12]
 2808 0074 DB6A     	 ldr r3,[r3,#44]
 2809 0076 2A4A     	 ldr r2,.L187+12
 2810 0078 1360     	 str r3,[r2]
 2811              	.L180:
 2812              	 .loc 1 2239 0 discriminator 3
 2813 007a FB68     	 ldr r3,[r7,#12]
 2814 007c DA6A     	 ldr r2,[r3,#44]
 2815 007e 1346     	 mov r3,r2
 2816 0080 9B00     	 lsls r3,r3,#2
 2817 0082 1344     	 add r3,r3,r2
 2818 0084 9B00     	 lsls r3,r3,#2
 2819 0086 274A     	 ldr r2,.L187+16
 2820 0088 1A44     	 add r2,r2,r3
 2821 008a FB68     	 ldr r3,[r7,#12]
 2822 008c 0433     	 adds r3,r3,#4
 2823 008e 1046     	 mov r0,r2
 2824 0090 1946     	 mov r1,r3
 2825 0092 FFF7FEFF 	 bl vListInsertEnd
2240:../Dave/Generated/FREERTOS/tasks.c **** 
2241:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the moved task has a priority higher than the current
2242:../Dave/Generated/FREERTOS/tasks.c ****                      * task then a yield must be performed. */
2243:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2826              	 .loc 1 2243 0 is_stmt 1 discriminator 3
 2827 0096 FB68     	 ldr r3,[r7,#12]
 2828 0098 DA6A     	 ldr r2,[r3,#44]
 2829 009a 234B     	 ldr r3,.L187+20
 2830 009c 1B68     	 ldr r3,[r3]
 2831 009e DB6A     	 ldr r3,[r3,#44]
 2832 00a0 9A42     	 cmp r2,r3
 2833 00a2 02D3     	 bcc .L179
2244:../Dave/Generated/FREERTOS/tasks.c ****                     {
2245:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldPending = pdTRUE;
 2834              	 .loc 1 2245 0
 2835 00a4 214B     	 ldr r3,.L187+24
 2836 00a6 0122     	 movs r2,#1
 2837 00a8 1A60     	 str r2,[r3]
 2838              	.L179:
2234:../Dave/Generated/FREERTOS/tasks.c ****                 {
 2839              	 .loc 1 2234 0
 2840 00aa 1C4B     	 ldr r3,.L187+8
 2841 00ac 1B68     	 ldr r3,[r3]
 2842 00ae 002B     	 cmp r3,#0
 2843 00b0 CBD1     	 bne .L181
2246:../Dave/Generated/FREERTOS/tasks.c ****                     }
2247:../Dave/Generated/FREERTOS/tasks.c ****                     else
2248:../Dave/Generated/FREERTOS/tasks.c ****                     {
2249:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2250:../Dave/Generated/FREERTOS/tasks.c ****                     }
2251:../Dave/Generated/FREERTOS/tasks.c ****                 }
2252:../Dave/Generated/FREERTOS/tasks.c **** 
2253:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB != NULL )
 2844              	 .loc 1 2253 0
 2845 00b2 FB68     	 ldr r3,[r7,#12]
 2846 00b4 002B     	 cmp r3,#0
 2847 00b6 01D0     	 beq .L182
2254:../Dave/Generated/FREERTOS/tasks.c ****                 {
2255:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2256:../Dave/Generated/FREERTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2257:../Dave/Generated/FREERTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2258:../Dave/Generated/FREERTOS/tasks.c ****                      * important for low power tickless implementations, where
2259:../Dave/Generated/FREERTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2260:../Dave/Generated/FREERTOS/tasks.c ****                      * state. */
2261:../Dave/Generated/FREERTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
 2848              	 .loc 1 2261 0
 2849 00b8 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2850              	.L182:
 2851              	.LBB193:
2262:../Dave/Generated/FREERTOS/tasks.c ****                 }
2263:../Dave/Generated/FREERTOS/tasks.c **** 
2264:../Dave/Generated/FREERTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2265:../Dave/Generated/FREERTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2266:../Dave/Generated/FREERTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2267:../Dave/Generated/FREERTOS/tasks.c ****                  * time. */
2268:../Dave/Generated/FREERTOS/tasks.c ****                 {
2269:../Dave/Generated/FREERTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2852              	 .loc 1 2269 0
 2853 00bc 1C4B     	 ldr r3,.L187+28
 2854 00be 1B68     	 ldr r3,[r3]
 2855 00c0 7B60     	 str r3,[r7,#4]
2270:../Dave/Generated/FREERTOS/tasks.c **** 
2271:../Dave/Generated/FREERTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
 2856              	 .loc 1 2271 0
 2857 00c2 7B68     	 ldr r3,[r7,#4]
 2858 00c4 002B     	 cmp r3,#0
 2859 00c6 10D0     	 beq .L183
 2860              	.L185:
2272:../Dave/Generated/FREERTOS/tasks.c ****                     {
2273:../Dave/Generated/FREERTOS/tasks.c ****                         do
2274:../Dave/Generated/FREERTOS/tasks.c ****                         {
2275:../Dave/Generated/FREERTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
 2861              	 .loc 1 2275 0
 2862 00c8 FFF7FEFF 	 bl xTaskIncrementTick
 2863 00cc 0346     	 mov r3,r0
 2864 00ce 002B     	 cmp r3,#0
 2865 00d0 02D0     	 beq .L184
2276:../Dave/Generated/FREERTOS/tasks.c ****                             {
2277:../Dave/Generated/FREERTOS/tasks.c ****                                 xYieldPending = pdTRUE;
 2866              	 .loc 1 2277 0
 2867 00d2 164B     	 ldr r3,.L187+24
 2868 00d4 0122     	 movs r2,#1
 2869 00d6 1A60     	 str r2,[r3]
 2870              	.L184:
2278:../Dave/Generated/FREERTOS/tasks.c ****                             }
2279:../Dave/Generated/FREERTOS/tasks.c ****                             else
2280:../Dave/Generated/FREERTOS/tasks.c ****                             {
2281:../Dave/Generated/FREERTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2282:../Dave/Generated/FREERTOS/tasks.c ****                             }
2283:../Dave/Generated/FREERTOS/tasks.c **** 
2284:../Dave/Generated/FREERTOS/tasks.c ****                             --xPendedCounts;
 2871              	 .loc 1 2284 0
 2872 00d8 7B68     	 ldr r3,[r7,#4]
 2873 00da 013B     	 subs r3,r3,#1
 2874 00dc 7B60     	 str r3,[r7,#4]
2285:../Dave/Generated/FREERTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2875              	 .loc 1 2285 0
 2876 00de 7B68     	 ldr r3,[r7,#4]
 2877 00e0 002B     	 cmp r3,#0
 2878 00e2 F1D1     	 bne .L185
2286:../Dave/Generated/FREERTOS/tasks.c **** 
2287:../Dave/Generated/FREERTOS/tasks.c ****                         xPendedTicks = 0;
 2879              	 .loc 1 2287 0
 2880 00e4 124B     	 ldr r3,.L187+28
 2881 00e6 0022     	 movs r2,#0
 2882 00e8 1A60     	 str r2,[r3]
 2883              	.L183:
 2884              	.LBE193:
2288:../Dave/Generated/FREERTOS/tasks.c ****                     }
2289:../Dave/Generated/FREERTOS/tasks.c ****                     else
2290:../Dave/Generated/FREERTOS/tasks.c ****                     {
2291:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2292:../Dave/Generated/FREERTOS/tasks.c ****                     }
2293:../Dave/Generated/FREERTOS/tasks.c ****                 }
2294:../Dave/Generated/FREERTOS/tasks.c **** 
2295:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 2885              	 .loc 1 2295 0
 2886 00ea 104B     	 ldr r3,.L187+24
 2887 00ec 1B68     	 ldr r3,[r3]
 2888 00ee 002B     	 cmp r3,#0
 2889 00f0 09D0     	 beq .L178
2296:../Dave/Generated/FREERTOS/tasks.c ****                 {
2297:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2298:../Dave/Generated/FREERTOS/tasks.c ****                         {
2299:../Dave/Generated/FREERTOS/tasks.c ****                             xAlreadyYielded = pdTRUE;
 2890              	 .loc 1 2299 0
 2891 00f2 0123     	 movs r3,#1
 2892 00f4 BB60     	 str r3,[r7,#8]
2300:../Dave/Generated/FREERTOS/tasks.c ****                         }
2301:../Dave/Generated/FREERTOS/tasks.c ****                     #endif
2302:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 2893              	 .loc 1 2302 0
 2894 00f6 0F4B     	 ldr r3,.L187+32
 2895 00f8 4FF08052 	 mov r2,#268435456
 2896 00fc 1A60     	 str r2,[r3]
 2897              	
 2898 00fe BFF34F8F 	 dsb
 2899              	
 2900              	
 2901 0102 BFF36F8F 	 isb
 2902              	
 2903              	 .thumb
 2904              	.L178:
2303:../Dave/Generated/FREERTOS/tasks.c ****                 }
2304:../Dave/Generated/FREERTOS/tasks.c ****                 else
2305:../Dave/Generated/FREERTOS/tasks.c ****                 {
2306:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2307:../Dave/Generated/FREERTOS/tasks.c ****                 }
2308:../Dave/Generated/FREERTOS/tasks.c ****             }
2309:../Dave/Generated/FREERTOS/tasks.c ****         }
2310:../Dave/Generated/FREERTOS/tasks.c ****         else
2311:../Dave/Generated/FREERTOS/tasks.c ****         {
2312:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2313:../Dave/Generated/FREERTOS/tasks.c ****         }
2314:../Dave/Generated/FREERTOS/tasks.c ****     }
2315:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 2905              	 .loc 1 2315 0
 2906 0106 FFF7FEFF 	 bl vPortExitCritical
2316:../Dave/Generated/FREERTOS/tasks.c **** 
2317:../Dave/Generated/FREERTOS/tasks.c ****     return xAlreadyYielded;
 2907              	 .loc 1 2317 0
 2908 010a BB68     	 ldr r3,[r7,#8]
2318:../Dave/Generated/FREERTOS/tasks.c **** }
 2909              	 .loc 1 2318 0
 2910 010c 1846     	 mov r0,r3
 2911 010e 1037     	 adds r7,r7,#16
 2912              	.LCFI93:
 2913              	 .cfi_def_cfa_offset 8
 2914 0110 BD46     	 mov sp,r7
 2915              	.LCFI94:
 2916              	 .cfi_def_cfa_register 13
 2917              	 
 2918 0112 80BD     	 pop {r7,pc}
 2919              	.L188:
 2920              	 .align 2
 2921              	.L187:
 2922 0114 00000000 	 .word uxSchedulerSuspended
 2923 0118 00000000 	 .word uxCurrentNumberOfTasks
 2924 011c 00000000 	 .word xPendingReadyList
 2925 0120 00000000 	 .word uxTopReadyPriority
 2926 0124 00000000 	 .word pxReadyTasksLists
 2927 0128 00000000 	 .word pxCurrentTCB
 2928 012c 00000000 	 .word xYieldPending
 2929 0130 00000000 	 .word xPendedTicks
 2930 0134 04ED00E0 	 .word -536810236
 2931              	 .cfi_endproc
 2932              	.LFE155:
 2934              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2935              	 .align 2
 2936              	 .global xTaskGetTickCount
 2937              	 .thumb
 2938              	 .thumb_func
 2940              	xTaskGetTickCount:
 2941              	.LFB156:
2319:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2320:../Dave/Generated/FREERTOS/tasks.c **** 
2321:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2322:../Dave/Generated/FREERTOS/tasks.c **** {
 2942              	 .loc 1 2322 0
 2943              	 .cfi_startproc
 2944              	 
 2945              	 
 2946              	 
 2947 0000 80B4     	 push {r7}
 2948              	.LCFI95:
 2949              	 .cfi_def_cfa_offset 4
 2950              	 .cfi_offset 7,-4
 2951 0002 83B0     	 sub sp,sp,#12
 2952              	.LCFI96:
 2953              	 .cfi_def_cfa_offset 16
 2954 0004 00AF     	 add r7,sp,#0
 2955              	.LCFI97:
 2956              	 .cfi_def_cfa_register 7
2323:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xTicks;
2324:../Dave/Generated/FREERTOS/tasks.c **** 
2325:../Dave/Generated/FREERTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2326:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2327:../Dave/Generated/FREERTOS/tasks.c ****     {
2328:../Dave/Generated/FREERTOS/tasks.c ****         xTicks = xTickCount;
 2957              	 .loc 1 2328 0
 2958 0006 054B     	 ldr r3,.L191
 2959 0008 1B68     	 ldr r3,[r3]
 2960 000a 7B60     	 str r3,[r7,#4]
2329:../Dave/Generated/FREERTOS/tasks.c ****     }
2330:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2331:../Dave/Generated/FREERTOS/tasks.c **** 
2332:../Dave/Generated/FREERTOS/tasks.c ****     return xTicks;
 2961              	 .loc 1 2332 0
 2962 000c 7B68     	 ldr r3,[r7,#4]
2333:../Dave/Generated/FREERTOS/tasks.c **** }
 2963              	 .loc 1 2333 0
 2964 000e 1846     	 mov r0,r3
 2965 0010 0C37     	 adds r7,r7,#12
 2966              	.LCFI98:
 2967              	 .cfi_def_cfa_offset 4
 2968 0012 BD46     	 mov sp,r7
 2969              	.LCFI99:
 2970              	 .cfi_def_cfa_register 13
 2971              	 
 2972 0014 5DF8047B 	 ldr r7,[sp],#4
 2973              	.LCFI100:
 2974              	 .cfi_restore 7
 2975              	 .cfi_def_cfa_offset 0
 2976 0018 7047     	 bx lr
 2977              	.L192:
 2978 001a 00BF     	 .align 2
 2979              	.L191:
 2980 001c 00000000 	 .word xTickCount
 2981              	 .cfi_endproc
 2982              	.LFE156:
 2984              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2985              	 .align 2
 2986              	 .global xTaskGetTickCountFromISR
 2987              	 .thumb
 2988              	 .thumb_func
 2990              	xTaskGetTickCountFromISR:
 2991              	.LFB157:
2334:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2335:../Dave/Generated/FREERTOS/tasks.c **** 
2336:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2337:../Dave/Generated/FREERTOS/tasks.c **** {
 2992              	 .loc 1 2337 0
 2993              	 .cfi_startproc
 2994              	 
 2995              	 
 2996 0000 80B5     	 push {r7,lr}
 2997              	.LCFI101:
 2998              	 .cfi_def_cfa_offset 8
 2999              	 .cfi_offset 7,-8
 3000              	 .cfi_offset 14,-4
 3001 0002 82B0     	 sub sp,sp,#8
 3002              	.LCFI102:
 3003              	 .cfi_def_cfa_offset 16
 3004 0004 00AF     	 add r7,sp,#0
 3005              	.LCFI103:
 3006              	 .cfi_def_cfa_register 7
2338:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xReturn;
2339:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2340:../Dave/Generated/FREERTOS/tasks.c **** 
2341:../Dave/Generated/FREERTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2342:../Dave/Generated/FREERTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2343:../Dave/Generated/FREERTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2344:../Dave/Generated/FREERTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2345:../Dave/Generated/FREERTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2346:../Dave/Generated/FREERTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2347:../Dave/Generated/FREERTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2348:../Dave/Generated/FREERTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2349:../Dave/Generated/FREERTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2350:../Dave/Generated/FREERTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2351:../Dave/Generated/FREERTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2352:../Dave/Generated/FREERTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2353:../Dave/Generated/FREERTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2354:../Dave/Generated/FREERTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2355:../Dave/Generated/FREERTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3007              	 .loc 1 2355 0
 3008 0006 FFF7FEFF 	 bl vPortValidateInterruptPriority
2356:../Dave/Generated/FREERTOS/tasks.c **** 
2357:../Dave/Generated/FREERTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3009              	 .loc 1 2357 0
 3010 000a 0023     	 movs r3,#0
 3011 000c 7B60     	 str r3,[r7,#4]
2358:../Dave/Generated/FREERTOS/tasks.c ****     {
2359:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = xTickCount;
 3012              	 .loc 1 2359 0
 3013 000e 044B     	 ldr r3,.L195
 3014 0010 1B68     	 ldr r3,[r3]
 3015 0012 3B60     	 str r3,[r7]
2360:../Dave/Generated/FREERTOS/tasks.c ****     }
2361:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2362:../Dave/Generated/FREERTOS/tasks.c **** 
2363:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 3016              	 .loc 1 2363 0
 3017 0014 3B68     	 ldr r3,[r7]
2364:../Dave/Generated/FREERTOS/tasks.c **** }
 3018              	 .loc 1 2364 0
 3019 0016 1846     	 mov r0,r3
 3020 0018 0837     	 adds r7,r7,#8
 3021              	.LCFI104:
 3022              	 .cfi_def_cfa_offset 8
 3023 001a BD46     	 mov sp,r7
 3024              	.LCFI105:
 3025              	 .cfi_def_cfa_register 13
 3026              	 
 3027 001c 80BD     	 pop {r7,pc}
 3028              	.L196:
 3029 001e 00BF     	 .align 2
 3030              	.L195:
 3031 0020 00000000 	 .word xTickCount
 3032              	 .cfi_endproc
 3033              	.LFE157:
 3035              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 3036              	 .align 2
 3037              	 .global uxTaskGetNumberOfTasks
 3038              	 .thumb
 3039              	 .thumb_func
 3041              	uxTaskGetNumberOfTasks:
 3042              	.LFB158:
2365:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2366:../Dave/Generated/FREERTOS/tasks.c **** 
2367:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2368:../Dave/Generated/FREERTOS/tasks.c **** {
 3043              	 .loc 1 2368 0
 3044              	 .cfi_startproc
 3045              	 
 3046              	 
 3047              	 
 3048 0000 80B4     	 push {r7}
 3049              	.LCFI106:
 3050              	 .cfi_def_cfa_offset 4
 3051              	 .cfi_offset 7,-4
 3052 0002 00AF     	 add r7,sp,#0
 3053              	.LCFI107:
 3054              	 .cfi_def_cfa_register 7
2369:../Dave/Generated/FREERTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2370:../Dave/Generated/FREERTOS/tasks.c ****      * BaseType_t. */
2371:../Dave/Generated/FREERTOS/tasks.c ****     return uxCurrentNumberOfTasks;
 3055              	 .loc 1 2371 0
 3056 0004 034B     	 ldr r3,.L199
 3057 0006 1B68     	 ldr r3,[r3]
2372:../Dave/Generated/FREERTOS/tasks.c **** }
 3058              	 .loc 1 2372 0
 3059 0008 1846     	 mov r0,r3
 3060 000a BD46     	 mov sp,r7
 3061              	.LCFI108:
 3062              	 .cfi_def_cfa_register 13
 3063              	 
 3064 000c 5DF8047B 	 ldr r7,[sp],#4
 3065              	.LCFI109:
 3066              	 .cfi_restore 7
 3067              	 .cfi_def_cfa_offset 0
 3068 0010 7047     	 bx lr
 3069              	.L200:
 3070 0012 00BF     	 .align 2
 3071              	.L199:
 3072 0014 00000000 	 .word uxCurrentNumberOfTasks
 3073              	 .cfi_endproc
 3074              	.LFE158:
 3076              	 .section .text.pcTaskGetName,"ax",%progbits
 3077              	 .align 2
 3078              	 .global pcTaskGetName
 3079              	 .thumb
 3080              	 .thumb_func
 3082              	pcTaskGetName:
 3083              	.LFB159:
2373:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2374:../Dave/Generated/FREERTOS/tasks.c **** 
2375:../Dave/Generated/FREERTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2376:../Dave/Generated/FREERTOS/tasks.c **** {
 3084              	 .loc 1 2376 0
 3085              	 .cfi_startproc
 3086              	 
 3087              	 
 3088              	 
 3089 0000 80B4     	 push {r7}
 3090              	.LCFI110:
 3091              	 .cfi_def_cfa_offset 4
 3092              	 .cfi_offset 7,-4
 3093 0002 85B0     	 sub sp,sp,#20
 3094              	.LCFI111:
 3095              	 .cfi_def_cfa_offset 24
 3096 0004 00AF     	 add r7,sp,#0
 3097              	.LCFI112:
 3098              	 .cfi_def_cfa_register 7
 3099 0006 7860     	 str r0,[r7,#4]
2377:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB;
2378:../Dave/Generated/FREERTOS/tasks.c **** 
2379:../Dave/Generated/FREERTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2380:../Dave/Generated/FREERTOS/tasks.c ****      * queried. */
2381:../Dave/Generated/FREERTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3100              	 .loc 1 2381 0
 3101 0008 7B68     	 ldr r3,[r7,#4]
 3102 000a 002B     	 cmp r3,#0
 3103 000c 02D1     	 bne .L202
 3104              	 .loc 1 2381 0 is_stmt 0 discriminator 1
 3105 000e 0D4B     	 ldr r3,.L207
 3106 0010 1B68     	 ldr r3,[r3]
 3107 0012 00E0     	 b .L203
 3108              	.L202:
 3109              	 .loc 1 2381 0 discriminator 2
 3110 0014 7B68     	 ldr r3,[r7,#4]
 3111              	.L203:
 3112              	 .loc 1 2381 0 discriminator 4
 3113 0016 FB60     	 str r3,[r7,#12]
2382:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTCB );
 3114              	 .loc 1 2382 0 is_stmt 1 discriminator 4
 3115 0018 FB68     	 ldr r3,[r7,#12]
 3116 001a 002B     	 cmp r3,#0
 3117 001c 09D1     	 bne .L204
 3118              	.LBB194:
 3119              	.LBB195:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3120              	 .loc 2 197 0 discriminator 1
 3121              	
 3122 001e 4FF0FC03 	 mov r3,#252
 3123 0022 83F31188 	 msr basepri,r3
 3124 0026 BFF36F8F 	 isb 
 3125 002a BFF34F8F 	 dsb 
 3126              	
 3127              	
 3128              	 .thumb
 3129 002e BB60     	 str r3,[r7,#8]
 3130              	.L205:
 3131              	.LBE195:
 3132              	.LBE194:
 3133              	 .loc 1 2382 0 discriminator 1
 3134 0030 FEE7     	 b .L205
 3135              	.L204:
2383:../Dave/Generated/FREERTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3136              	 .loc 1 2383 0
 3137 0032 FB68     	 ldr r3,[r7,#12]
 3138 0034 3433     	 adds r3,r3,#52
2384:../Dave/Generated/FREERTOS/tasks.c **** }
 3139              	 .loc 1 2384 0
 3140 0036 1846     	 mov r0,r3
 3141 0038 1437     	 adds r7,r7,#20
 3142              	.LCFI113:
 3143              	 .cfi_def_cfa_offset 4
 3144 003a BD46     	 mov sp,r7
 3145              	.LCFI114:
 3146              	 .cfi_def_cfa_register 13
 3147              	 
 3148 003c 5DF8047B 	 ldr r7,[sp],#4
 3149              	.LCFI115:
 3150              	 .cfi_restore 7
 3151              	 .cfi_def_cfa_offset 0
 3152 0040 7047     	 bx lr
 3153              	.L208:
 3154 0042 00BF     	 .align 2
 3155              	.L207:
 3156 0044 00000000 	 .word pxCurrentTCB
 3157              	 .cfi_endproc
 3158              	.LFE159:
 3160              	 .section .text.prvSearchForNameWithinSingleList,"ax",%progbits
 3161              	 .align 2
 3162              	 .thumb
 3163              	 .thumb_func
 3165              	prvSearchForNameWithinSingleList:
 3166              	.LFB160:
2385:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2386:../Dave/Generated/FREERTOS/tasks.c **** 
2387:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2388:../Dave/Generated/FREERTOS/tasks.c **** 
2389:../Dave/Generated/FREERTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2390:../Dave/Generated/FREERTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2391:../Dave/Generated/FREERTOS/tasks.c ****     {
 3167              	 .loc 1 2391 0
 3168              	 .cfi_startproc
 3169              	 
 3170              	 
 3171              	 
 3172 0000 80B4     	 push {r7}
 3173              	.LCFI116:
 3174              	 .cfi_def_cfa_offset 4
 3175              	 .cfi_offset 7,-4
 3176 0002 8BB0     	 sub sp,sp,#44
 3177              	.LCFI117:
 3178              	 .cfi_def_cfa_offset 48
 3179 0004 00AF     	 add r7,sp,#0
 3180              	.LCFI118:
 3181              	 .cfi_def_cfa_register 7
 3182 0006 7860     	 str r0,[r7,#4]
 3183 0008 3960     	 str r1,[r7]
2392:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 3184              	 .loc 1 2392 0
 3185 000a 0023     	 movs r3,#0
 3186 000c 7B62     	 str r3,[r7,#36]
2393:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t x;
2394:../Dave/Generated/FREERTOS/tasks.c ****         char cNextChar;
2395:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xBreakLoop;
2396:../Dave/Generated/FREERTOS/tasks.c **** 
2397:../Dave/Generated/FREERTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2398:../Dave/Generated/FREERTOS/tasks.c **** 
2399:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 3187              	 .loc 1 2399 0
 3188 000e 7B68     	 ldr r3,[r7,#4]
 3189 0010 1B68     	 ldr r3,[r3]
 3190 0012 002B     	 cmp r3,#0
 3191 0014 5AD0     	 beq .L210
 3192              	.LBB196:
2400:../Dave/Generated/FREERTOS/tasks.c ****         {
2401:../Dave/Generated/FREERTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 3193              	 .loc 1 2401 0
 3194 0016 7B68     	 ldr r3,[r7,#4]
 3195 0018 BB61     	 str r3,[r7,#24]
 3196 001a BB69     	 ldr r3,[r7,#24]
 3197 001c 5B68     	 ldr r3,[r3,#4]
 3198 001e 5A68     	 ldr r2,[r3,#4]
 3199 0020 BB69     	 ldr r3,[r7,#24]
 3200 0022 5A60     	 str r2,[r3,#4]
 3201 0024 BB69     	 ldr r3,[r7,#24]
 3202 0026 5A68     	 ldr r2,[r3,#4]
 3203 0028 BB69     	 ldr r3,[r7,#24]
 3204 002a 0833     	 adds r3,r3,#8
 3205 002c 9A42     	 cmp r2,r3
 3206 002e 04D1     	 bne .L211
 3207              	 .loc 1 2401 0 is_stmt 0 discriminator 1
 3208 0030 BB69     	 ldr r3,[r7,#24]
 3209 0032 5B68     	 ldr r3,[r3,#4]
 3210 0034 5A68     	 ldr r2,[r3,#4]
 3211 0036 BB69     	 ldr r3,[r7,#24]
 3212 0038 5A60     	 str r2,[r3,#4]
 3213              	.L211:
 3214              	 .loc 1 2401 0 discriminator 3
 3215 003a BB69     	 ldr r3,[r7,#24]
 3216 003c 5B68     	 ldr r3,[r3,#4]
 3217 003e DB68     	 ldr r3,[r3,#12]
 3218 0040 7B61     	 str r3,[r7,#20]
 3219              	.L221:
 3220              	.LBE196:
 3221              	.LBB197:
2402:../Dave/Generated/FREERTOS/tasks.c **** 
2403:../Dave/Generated/FREERTOS/tasks.c ****             do
2404:../Dave/Generated/FREERTOS/tasks.c ****             {
2405:../Dave/Generated/FREERTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 3222              	 .loc 1 2405 0 is_stmt 1
 3223 0042 7B68     	 ldr r3,[r7,#4]
 3224 0044 3B61     	 str r3,[r7,#16]
 3225 0046 3B69     	 ldr r3,[r7,#16]
 3226 0048 5B68     	 ldr r3,[r3,#4]
 3227 004a 5A68     	 ldr r2,[r3,#4]
 3228 004c 3B69     	 ldr r3,[r7,#16]
 3229 004e 5A60     	 str r2,[r3,#4]
 3230 0050 3B69     	 ldr r3,[r7,#16]
 3231 0052 5A68     	 ldr r2,[r3,#4]
 3232 0054 3B69     	 ldr r3,[r7,#16]
 3233 0056 0833     	 adds r3,r3,#8
 3234 0058 9A42     	 cmp r2,r3
 3235 005a 04D1     	 bne .L212
 3236              	 .loc 1 2405 0 is_stmt 0 discriminator 1
 3237 005c 3B69     	 ldr r3,[r7,#16]
 3238 005e 5B68     	 ldr r3,[r3,#4]
 3239 0060 5A68     	 ldr r2,[r3,#4]
 3240 0062 3B69     	 ldr r3,[r7,#16]
 3241 0064 5A60     	 str r2,[r3,#4]
 3242              	.L212:
 3243              	 .loc 1 2405 0 discriminator 3
 3244 0066 3B69     	 ldr r3,[r7,#16]
 3245 0068 5B68     	 ldr r3,[r3,#4]
 3246 006a DB68     	 ldr r3,[r3,#12]
 3247 006c FB60     	 str r3,[r7,#12]
 3248              	.LBE197:
2406:../Dave/Generated/FREERTOS/tasks.c **** 
2407:../Dave/Generated/FREERTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2408:../Dave/Generated/FREERTOS/tasks.c ****                  * mismatch. */
2409:../Dave/Generated/FREERTOS/tasks.c ****                 xBreakLoop = pdFALSE;
 3249              	 .loc 1 2409 0 is_stmt 1 discriminator 3
 3250 006e 0023     	 movs r3,#0
 3251 0070 FB61     	 str r3,[r7,#28]
2410:../Dave/Generated/FREERTOS/tasks.c **** 
2411:../Dave/Generated/FREERTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 3252              	 .loc 1 2411 0 discriminator 3
 3253 0072 0023     	 movs r3,#0
 3254 0074 3B62     	 str r3,[r7,#32]
 3255 0076 1DE0     	 b .L213
 3256              	.L218:
2412:../Dave/Generated/FREERTOS/tasks.c ****                 {
2413:../Dave/Generated/FREERTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
 3257              	 .loc 1 2413 0
 3258 0078 FA68     	 ldr r2,[r7,#12]
 3259 007a 3B6A     	 ldr r3,[r7,#32]
 3260 007c 1344     	 add r3,r3,r2
 3261 007e 3033     	 adds r3,r3,#48
 3262 0080 1B79     	 ldrb r3,[r3,#4]
 3263 0082 FB72     	 strb r3,[r7,#11]
2414:../Dave/Generated/FREERTOS/tasks.c **** 
2415:../Dave/Generated/FREERTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
 3264              	 .loc 1 2415 0
 3265 0084 3A68     	 ldr r2,[r7]
 3266 0086 3B6A     	 ldr r3,[r7,#32]
 3267 0088 1344     	 add r3,r3,r2
 3268 008a 1B78     	 ldrb r3,[r3]
 3269 008c FA7A     	 ldrb r2,[r7,#11]
 3270 008e 9A42     	 cmp r2,r3
 3271 0090 02D0     	 beq .L214
2416:../Dave/Generated/FREERTOS/tasks.c ****                     {
2417:../Dave/Generated/FREERTOS/tasks.c ****                         /* Characters didn't match. */
2418:../Dave/Generated/FREERTOS/tasks.c ****                         xBreakLoop = pdTRUE;
 3272              	 .loc 1 2418 0
 3273 0092 0123     	 movs r3,#1
 3274 0094 FB61     	 str r3,[r7,#28]
 3275 0096 06E0     	 b .L215
 3276              	.L214:
2419:../Dave/Generated/FREERTOS/tasks.c ****                     }
2420:../Dave/Generated/FREERTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
 3277              	 .loc 1 2420 0
 3278 0098 FB7A     	 ldrb r3,[r7,#11]
 3279 009a 002B     	 cmp r3,#0
 3280 009c 03D1     	 bne .L215
2421:../Dave/Generated/FREERTOS/tasks.c ****                     {
2422:../Dave/Generated/FREERTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2423:../Dave/Generated/FREERTOS/tasks.c ****                          * found. */
2424:../Dave/Generated/FREERTOS/tasks.c ****                         pxReturn = pxNextTCB;
 3281              	 .loc 1 2424 0
 3282 009e FB68     	 ldr r3,[r7,#12]
 3283 00a0 7B62     	 str r3,[r7,#36]
2425:../Dave/Generated/FREERTOS/tasks.c ****                         xBreakLoop = pdTRUE;
 3284              	 .loc 1 2425 0
 3285 00a2 0123     	 movs r3,#1
 3286 00a4 FB61     	 str r3,[r7,#28]
 3287              	.L215:
2426:../Dave/Generated/FREERTOS/tasks.c ****                     }
2427:../Dave/Generated/FREERTOS/tasks.c ****                     else
2428:../Dave/Generated/FREERTOS/tasks.c ****                     {
2429:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2430:../Dave/Generated/FREERTOS/tasks.c ****                     }
2431:../Dave/Generated/FREERTOS/tasks.c **** 
2432:../Dave/Generated/FREERTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
 3288              	 .loc 1 2432 0
 3289 00a6 FB69     	 ldr r3,[r7,#28]
 3290 00a8 002B     	 cmp r3,#0
 3291 00aa 00D0     	 beq .L216
2433:../Dave/Generated/FREERTOS/tasks.c ****                     {
2434:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 3292              	 .loc 1 2434 0
 3293 00ac 05E0     	 b .L217
 3294              	.L216:
2411:../Dave/Generated/FREERTOS/tasks.c ****                 {
 3295              	 .loc 1 2411 0 discriminator 2
 3296 00ae 3B6A     	 ldr r3,[r7,#32]
 3297 00b0 0133     	 adds r3,r3,#1
 3298 00b2 3B62     	 str r3,[r7,#32]
 3299              	.L213:
2411:../Dave/Generated/FREERTOS/tasks.c ****                 {
 3300              	 .loc 1 2411 0 is_stmt 0 discriminator 1
 3301 00b4 3B6A     	 ldr r3,[r7,#32]
 3302 00b6 0F2B     	 cmp r3,#15
 3303 00b8 DED9     	 bls .L218
 3304              	.L217:
2435:../Dave/Generated/FREERTOS/tasks.c ****                     }
2436:../Dave/Generated/FREERTOS/tasks.c ****                 }
2437:../Dave/Generated/FREERTOS/tasks.c **** 
2438:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxReturn != NULL )
 3305              	 .loc 1 2438 0 is_stmt 1
 3306 00ba 7B6A     	 ldr r3,[r7,#36]
 3307 00bc 002B     	 cmp r3,#0
 3308 00be 01D0     	 beq .L219
2439:../Dave/Generated/FREERTOS/tasks.c ****                 {
2440:../Dave/Generated/FREERTOS/tasks.c ****                     /* The handle has been found. */
2441:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 3309              	 .loc 1 2441 0
 3310 00c0 00BF     	 nop
 3311 00c2 03E0     	 b .L210
 3312              	.L219:
2442:../Dave/Generated/FREERTOS/tasks.c ****                 }
2443:../Dave/Generated/FREERTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 3313              	 .loc 1 2443 0
 3314 00c4 FA68     	 ldr r2,[r7,#12]
 3315 00c6 7B69     	 ldr r3,[r7,#20]
 3316 00c8 9A42     	 cmp r2,r3
 3317 00ca BAD1     	 bne .L221
 3318              	.L210:
2444:../Dave/Generated/FREERTOS/tasks.c ****         }
2445:../Dave/Generated/FREERTOS/tasks.c ****         else
2446:../Dave/Generated/FREERTOS/tasks.c ****         {
2447:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2448:../Dave/Generated/FREERTOS/tasks.c ****         }
2449:../Dave/Generated/FREERTOS/tasks.c **** 
2450:../Dave/Generated/FREERTOS/tasks.c ****         return pxReturn;
 3319              	 .loc 1 2450 0
 3320 00cc 7B6A     	 ldr r3,[r7,#36]
2451:../Dave/Generated/FREERTOS/tasks.c ****     }
 3321              	 .loc 1 2451 0
 3322 00ce 1846     	 mov r0,r3
 3323 00d0 2C37     	 adds r7,r7,#44
 3324              	.LCFI119:
 3325              	 .cfi_def_cfa_offset 4
 3326 00d2 BD46     	 mov sp,r7
 3327              	.LCFI120:
 3328              	 .cfi_def_cfa_register 13
 3329              	 
 3330 00d4 5DF8047B 	 ldr r7,[sp],#4
 3331              	.LCFI121:
 3332              	 .cfi_restore 7
 3333              	 .cfi_def_cfa_offset 0
 3334 00d8 7047     	 bx lr
 3335              	 .cfi_endproc
 3336              	.LFE160:
 3338 00da 00BF     	 .section .text.xTaskGetHandle,"ax",%progbits
 3339              	 .align 2
 3340              	 .global xTaskGetHandle
 3341              	 .thumb
 3342              	 .thumb_func
 3344              	xTaskGetHandle:
 3345              	.LFB161:
2452:../Dave/Generated/FREERTOS/tasks.c **** 
2453:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2454:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2455:../Dave/Generated/FREERTOS/tasks.c **** 
2456:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2457:../Dave/Generated/FREERTOS/tasks.c **** 
2458:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2459:../Dave/Generated/FREERTOS/tasks.c ****     {
 3346              	 .loc 1 2459 0
 3347              	 .cfi_startproc
 3348              	 
 3349              	 
 3350 0000 80B5     	 push {r7,lr}
 3351              	.LCFI122:
 3352              	 .cfi_def_cfa_offset 8
 3353              	 .cfi_offset 7,-8
 3354              	 .cfi_offset 14,-4
 3355 0002 86B0     	 sub sp,sp,#24
 3356              	.LCFI123:
 3357              	 .cfi_def_cfa_offset 32
 3358 0004 00AF     	 add r7,sp,#0
 3359              	.LCFI124:
 3360              	 .cfi_def_cfa_register 7
 3361 0006 7860     	 str r0,[r7,#4]
2460:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
 3362              	 .loc 1 2460 0
 3363 0008 3823     	 movs r3,#56
 3364 000a 7B61     	 str r3,[r7,#20]
2461:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2462:../Dave/Generated/FREERTOS/tasks.c **** 
2463:../Dave/Generated/FREERTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2464:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3365              	 .loc 1 2464 0
 3366 000c 7868     	 ldr r0,[r7,#4]
 3367 000e FFF7FEFF 	 bl strlen
 3368 0012 0346     	 mov r3,r0
 3369 0014 0F2B     	 cmp r3,#15
 3370 0016 09D9     	 bls .L224
 3371              	.LBB198:
 3372              	.LBB199:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3373              	 .loc 2 197 0 discriminator 1
 3374              	
 3375 0018 4FF0FC03 	 mov r3,#252
 3376 001c 83F31188 	 msr basepri,r3
 3377 0020 BFF36F8F 	 isb 
 3378 0024 BFF34F8F 	 dsb 
 3379              	
 3380              	
 3381              	 .thumb
 3382 0028 FB60     	 str r3,[r7,#12]
 3383              	.L225:
 3384              	.LBE199:
 3385              	.LBE198:
 3386              	 .loc 1 2464 0 discriminator 1
 3387 002a FEE7     	 b .L225
 3388              	.L224:
2465:../Dave/Generated/FREERTOS/tasks.c **** 
2466:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 3389              	 .loc 1 2466 0
 3390 002c FFF7FEFF 	 bl vTaskSuspendAll
 3391              	.L228:
2467:../Dave/Generated/FREERTOS/tasks.c ****         {
2468:../Dave/Generated/FREERTOS/tasks.c ****             /* Search the ready lists. */
2469:../Dave/Generated/FREERTOS/tasks.c ****             do
2470:../Dave/Generated/FREERTOS/tasks.c ****             {
2471:../Dave/Generated/FREERTOS/tasks.c ****                 uxQueue--;
 3392              	 .loc 1 2471 0
 3393 0030 7B69     	 ldr r3,[r7,#20]
 3394 0032 013B     	 subs r3,r3,#1
 3395 0034 7B61     	 str r3,[r7,#20]
2472:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
 3396              	 .loc 1 2472 0
 3397 0036 7A69     	 ldr r2,[r7,#20]
 3398 0038 1346     	 mov r3,r2
 3399 003a 9B00     	 lsls r3,r3,#2
 3400 003c 1344     	 add r3,r3,r2
 3401 003e 9B00     	 lsls r3,r3,#2
 3402 0040 1C4A     	 ldr r2,.L234
 3403 0042 1344     	 add r3,r3,r2
 3404 0044 1846     	 mov r0,r3
 3405 0046 7968     	 ldr r1,[r7,#4]
 3406 0048 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3407 004c 3861     	 str r0,[r7,#16]
2473:../Dave/Generated/FREERTOS/tasks.c **** 
2474:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB != NULL )
 3408              	 .loc 1 2474 0
 3409 004e 3B69     	 ldr r3,[r7,#16]
 3410 0050 002B     	 cmp r3,#0
 3411 0052 00D0     	 beq .L226
2475:../Dave/Generated/FREERTOS/tasks.c ****                 {
2476:../Dave/Generated/FREERTOS/tasks.c ****                     /* Found the handle. */
2477:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 3412              	 .loc 1 2477 0
 3413 0054 02E0     	 b .L227
 3414              	.L226:
2478:../Dave/Generated/FREERTOS/tasks.c ****                 }
2479:../Dave/Generated/FREERTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
 3415              	 .loc 1 2479 0
 3416 0056 7B69     	 ldr r3,[r7,#20]
 3417 0058 002B     	 cmp r3,#0
 3418 005a E9D1     	 bne .L228
 3419              	.L227:
2480:../Dave/Generated/FREERTOS/tasks.c **** 
2481:../Dave/Generated/FREERTOS/tasks.c ****             /* Search the delayed lists. */
2482:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == NULL )
 3420              	 .loc 1 2482 0
 3421 005c 3B69     	 ldr r3,[r7,#16]
 3422 005e 002B     	 cmp r3,#0
 3423 0060 06D1     	 bne .L229
2483:../Dave/Generated/FREERTOS/tasks.c ****             {
2484:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
 3424              	 .loc 1 2484 0
 3425 0062 154B     	 ldr r3,.L234+4
 3426 0064 1B68     	 ldr r3,[r3]
 3427 0066 1846     	 mov r0,r3
 3428 0068 7968     	 ldr r1,[r7,#4]
 3429 006a FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3430 006e 3861     	 str r0,[r7,#16]
 3431              	.L229:
2485:../Dave/Generated/FREERTOS/tasks.c ****             }
2486:../Dave/Generated/FREERTOS/tasks.c **** 
2487:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == NULL )
 3432              	 .loc 1 2487 0
 3433 0070 3B69     	 ldr r3,[r7,#16]
 3434 0072 002B     	 cmp r3,#0
 3435 0074 06D1     	 bne .L230
2488:../Dave/Generated/FREERTOS/tasks.c ****             {
2489:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
 3436              	 .loc 1 2489 0
 3437 0076 114B     	 ldr r3,.L234+8
 3438 0078 1B68     	 ldr r3,[r3]
 3439 007a 1846     	 mov r0,r3
 3440 007c 7968     	 ldr r1,[r7,#4]
 3441 007e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3442 0082 3861     	 str r0,[r7,#16]
 3443              	.L230:
2490:../Dave/Generated/FREERTOS/tasks.c ****             }
2491:../Dave/Generated/FREERTOS/tasks.c **** 
2492:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2493:../Dave/Generated/FREERTOS/tasks.c ****                 {
2494:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB == NULL )
 3444              	 .loc 1 2494 0
 3445 0084 3B69     	 ldr r3,[r7,#16]
 3446 0086 002B     	 cmp r3,#0
 3447 0088 04D1     	 bne .L231
2495:../Dave/Generated/FREERTOS/tasks.c ****                     {
2496:../Dave/Generated/FREERTOS/tasks.c ****                         /* Search the suspended list. */
2497:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
 3448              	 .loc 1 2497 0
 3449 008a 0D48     	 ldr r0,.L234+12
 3450 008c 7968     	 ldr r1,[r7,#4]
 3451 008e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3452 0092 3861     	 str r0,[r7,#16]
 3453              	.L231:
2498:../Dave/Generated/FREERTOS/tasks.c ****                     }
2499:../Dave/Generated/FREERTOS/tasks.c ****                 }
2500:../Dave/Generated/FREERTOS/tasks.c ****             #endif
2501:../Dave/Generated/FREERTOS/tasks.c **** 
2502:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2503:../Dave/Generated/FREERTOS/tasks.c ****                 {
2504:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB == NULL )
 3454              	 .loc 1 2504 0
 3455 0094 3B69     	 ldr r3,[r7,#16]
 3456 0096 002B     	 cmp r3,#0
 3457 0098 04D1     	 bne .L232
2505:../Dave/Generated/FREERTOS/tasks.c ****                     {
2506:../Dave/Generated/FREERTOS/tasks.c ****                         /* Search the deleted list. */
2507:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
 3458              	 .loc 1 2507 0
 3459 009a 0A48     	 ldr r0,.L234+16
 3460 009c 7968     	 ldr r1,[r7,#4]
 3461 009e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3462 00a2 3861     	 str r0,[r7,#16]
 3463              	.L232:
2508:../Dave/Generated/FREERTOS/tasks.c ****                     }
2509:../Dave/Generated/FREERTOS/tasks.c ****                 }
2510:../Dave/Generated/FREERTOS/tasks.c ****             #endif
2511:../Dave/Generated/FREERTOS/tasks.c ****         }
2512:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3464              	 .loc 1 2512 0
 3465 00a4 FFF7FEFF 	 bl xTaskResumeAll
2513:../Dave/Generated/FREERTOS/tasks.c **** 
2514:../Dave/Generated/FREERTOS/tasks.c ****         return pxTCB;
 3466              	 .loc 1 2514 0
 3467 00a8 3B69     	 ldr r3,[r7,#16]
2515:../Dave/Generated/FREERTOS/tasks.c ****     }
 3468              	 .loc 1 2515 0
 3469 00aa 1846     	 mov r0,r3
 3470 00ac 1837     	 adds r7,r7,#24
 3471              	.LCFI125:
 3472              	 .cfi_def_cfa_offset 8
 3473 00ae BD46     	 mov sp,r7
 3474              	.LCFI126:
 3475              	 .cfi_def_cfa_register 13
 3476              	 
 3477 00b0 80BD     	 pop {r7,pc}
 3478              	.L235:
 3479 00b2 00BF     	 .align 2
 3480              	.L234:
 3481 00b4 00000000 	 .word pxReadyTasksLists
 3482 00b8 00000000 	 .word pxDelayedTaskList
 3483 00bc 00000000 	 .word pxOverflowDelayedTaskList
 3484 00c0 00000000 	 .word xSuspendedTaskList
 3485 00c4 00000000 	 .word xTasksWaitingTermination
 3486              	 .cfi_endproc
 3487              	.LFE161:
 3489              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 3490              	 .align 2
 3491              	 .global uxTaskGetSystemState
 3492              	 .thumb
 3493              	 .thumb_func
 3495              	uxTaskGetSystemState:
 3496              	.LFB162:
2516:../Dave/Generated/FREERTOS/tasks.c **** 
2517:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2518:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2519:../Dave/Generated/FREERTOS/tasks.c **** 
2520:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2521:../Dave/Generated/FREERTOS/tasks.c **** 
2522:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2523:../Dave/Generated/FREERTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2524:../Dave/Generated/FREERTOS/tasks.c ****                                       uint32_t * const pulTotalRunTime )
2525:../Dave/Generated/FREERTOS/tasks.c ****     {
 3497              	 .loc 1 2525 0
 3498              	 .cfi_startproc
 3499              	 
 3500              	 
 3501 0000 80B5     	 push {r7,lr}
 3502              	.LCFI127:
 3503              	 .cfi_def_cfa_offset 8
 3504              	 .cfi_offset 7,-8
 3505              	 .cfi_offset 14,-4
 3506 0002 86B0     	 sub sp,sp,#24
 3507              	.LCFI128:
 3508              	 .cfi_def_cfa_offset 32
 3509 0004 00AF     	 add r7,sp,#0
 3510              	.LCFI129:
 3511              	 .cfi_def_cfa_register 7
 3512 0006 F860     	 str r0,[r7,#12]
 3513 0008 B960     	 str r1,[r7,#8]
 3514 000a 7A60     	 str r2,[r7,#4]
2526:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3515              	 .loc 1 2526 0
 3516 000c 0023     	 movs r3,#0
 3517 000e 7B61     	 str r3,[r7,#20]
 3518 0010 3823     	 movs r3,#56
 3519 0012 3B61     	 str r3,[r7,#16]
2527:../Dave/Generated/FREERTOS/tasks.c **** 
2528:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 3520              	 .loc 1 2528 0
 3521 0014 FFF7FEFF 	 bl vTaskSuspendAll
2529:../Dave/Generated/FREERTOS/tasks.c ****         {
2530:../Dave/Generated/FREERTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2531:../Dave/Generated/FREERTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
 3522              	 .loc 1 2531 0
 3523 0018 3B4B     	 ldr r3,.L241
 3524 001a 1B68     	 ldr r3,[r3]
 3525 001c BA68     	 ldr r2,[r7,#8]
 3526 001e 9A42     	 cmp r2,r3
 3527 0020 6BD3     	 bcc .L237
 3528              	.L238:
2532:../Dave/Generated/FREERTOS/tasks.c ****             {
2533:../Dave/Generated/FREERTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2534:../Dave/Generated/FREERTOS/tasks.c ****                  * task in the Ready state. */
2535:../Dave/Generated/FREERTOS/tasks.c ****                 do
2536:../Dave/Generated/FREERTOS/tasks.c ****                 {
2537:../Dave/Generated/FREERTOS/tasks.c ****                     uxQueue--;
 3529              	 .loc 1 2537 0 discriminator 1
 3530 0022 3B69     	 ldr r3,[r7,#16]
 3531 0024 013B     	 subs r3,r3,#1
 3532 0026 3B61     	 str r3,[r7,#16]
2538:../Dave/Generated/FREERTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 3533              	 .loc 1 2538 0 discriminator 1
 3534 0028 7A69     	 ldr r2,[r7,#20]
 3535 002a 1346     	 mov r3,r2
 3536 002c DB00     	 lsls r3,r3,#3
 3537 002e 1344     	 add r3,r3,r2
 3538 0030 9B00     	 lsls r3,r3,#2
 3539 0032 1A46     	 mov r2,r3
 3540 0034 FB68     	 ldr r3,[r7,#12]
 3541 0036 9918     	 adds r1,r3,r2
 3542 0038 3A69     	 ldr r2,[r7,#16]
 3543 003a 1346     	 mov r3,r2
 3544 003c 9B00     	 lsls r3,r3,#2
 3545 003e 1344     	 add r3,r3,r2
 3546 0040 9B00     	 lsls r3,r3,#2
 3547 0042 324A     	 ldr r2,.L241+4
 3548 0044 1344     	 add r3,r3,r2
 3549 0046 0846     	 mov r0,r1
 3550 0048 1946     	 mov r1,r3
 3551 004a 0122     	 movs r2,#1
 3552 004c FFF7FEFF 	 bl prvListTasksWithinSingleList
 3553 0050 0246     	 mov r2,r0
 3554 0052 7B69     	 ldr r3,[r7,#20]
 3555 0054 1344     	 add r3,r3,r2
 3556 0056 7B61     	 str r3,[r7,#20]
2539:../Dave/Generated/FREERTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 3557              	 .loc 1 2539 0 discriminator 1
 3558 0058 3B69     	 ldr r3,[r7,#16]
 3559 005a 002B     	 cmp r3,#0
 3560 005c E1D1     	 bne .L238
2540:../Dave/Generated/FREERTOS/tasks.c **** 
2541:../Dave/Generated/FREERTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2542:../Dave/Generated/FREERTOS/tasks.c ****                  * task in the Blocked state. */
2543:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3561              	 .loc 1 2543 0
 3562 005e 7A69     	 ldr r2,[r7,#20]
 3563 0060 1346     	 mov r3,r2
 3564 0062 DB00     	 lsls r3,r3,#3
 3565 0064 1344     	 add r3,r3,r2
 3566 0066 9B00     	 lsls r3,r3,#2
 3567 0068 1A46     	 mov r2,r3
 3568 006a FB68     	 ldr r3,[r7,#12]
 3569 006c 1A44     	 add r2,r2,r3
 3570 006e 284B     	 ldr r3,.L241+8
 3571 0070 1B68     	 ldr r3,[r3]
 3572 0072 1046     	 mov r0,r2
 3573 0074 1946     	 mov r1,r3
 3574 0076 0222     	 movs r2,#2
 3575 0078 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3576 007c 0246     	 mov r2,r0
 3577 007e 7B69     	 ldr r3,[r7,#20]
 3578 0080 1344     	 add r3,r3,r2
 3579 0082 7B61     	 str r3,[r7,#20]
2544:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3580              	 .loc 1 2544 0
 3581 0084 7A69     	 ldr r2,[r7,#20]
 3582 0086 1346     	 mov r3,r2
 3583 0088 DB00     	 lsls r3,r3,#3
 3584 008a 1344     	 add r3,r3,r2
 3585 008c 9B00     	 lsls r3,r3,#2
 3586 008e 1A46     	 mov r2,r3
 3587 0090 FB68     	 ldr r3,[r7,#12]
 3588 0092 1A44     	 add r2,r2,r3
 3589 0094 1F4B     	 ldr r3,.L241+12
 3590 0096 1B68     	 ldr r3,[r3]
 3591 0098 1046     	 mov r0,r2
 3592 009a 1946     	 mov r1,r3
 3593 009c 0222     	 movs r2,#2
 3594 009e FFF7FEFF 	 bl prvListTasksWithinSingleList
 3595 00a2 0246     	 mov r2,r0
 3596 00a4 7B69     	 ldr r3,[r7,#20]
 3597 00a6 1344     	 add r3,r3,r2
 3598 00a8 7B61     	 str r3,[r7,#20]
2545:../Dave/Generated/FREERTOS/tasks.c **** 
2546:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2547:../Dave/Generated/FREERTOS/tasks.c ****                     {
2548:../Dave/Generated/FREERTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2549:../Dave/Generated/FREERTOS/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2550:../Dave/Generated/FREERTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 3599              	 .loc 1 2550 0
 3600 00aa 7A69     	 ldr r2,[r7,#20]
 3601 00ac 1346     	 mov r3,r2
 3602 00ae DB00     	 lsls r3,r3,#3
 3603 00b0 1344     	 add r3,r3,r2
 3604 00b2 9B00     	 lsls r3,r3,#2
 3605 00b4 1A46     	 mov r2,r3
 3606 00b6 FB68     	 ldr r3,[r7,#12]
 3607 00b8 1344     	 add r3,r3,r2
 3608 00ba 1846     	 mov r0,r3
 3609 00bc 1649     	 ldr r1,.L241+16
 3610 00be 0422     	 movs r2,#4
 3611 00c0 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3612 00c4 0246     	 mov r2,r0
 3613 00c6 7B69     	 ldr r3,[r7,#20]
 3614 00c8 1344     	 add r3,r3,r2
 3615 00ca 7B61     	 str r3,[r7,#20]
2551:../Dave/Generated/FREERTOS/tasks.c ****                     }
2552:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
2553:../Dave/Generated/FREERTOS/tasks.c **** 
2554:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2555:../Dave/Generated/FREERTOS/tasks.c ****                     {
2556:../Dave/Generated/FREERTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2557:../Dave/Generated/FREERTOS/tasks.c ****                          * each task in the Suspended state. */
2558:../Dave/Generated/FREERTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 3616              	 .loc 1 2558 0
 3617 00cc 7A69     	 ldr r2,[r7,#20]
 3618 00ce 1346     	 mov r3,r2
 3619 00d0 DB00     	 lsls r3,r3,#3
 3620 00d2 1344     	 add r3,r3,r2
 3621 00d4 9B00     	 lsls r3,r3,#2
 3622 00d6 1A46     	 mov r2,r3
 3623 00d8 FB68     	 ldr r3,[r7,#12]
 3624 00da 1344     	 add r3,r3,r2
 3625 00dc 1846     	 mov r0,r3
 3626 00de 0F49     	 ldr r1,.L241+20
 3627 00e0 0322     	 movs r2,#3
 3628 00e2 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3629 00e6 0246     	 mov r2,r0
 3630 00e8 7B69     	 ldr r3,[r7,#20]
 3631 00ea 1344     	 add r3,r3,r2
 3632 00ec 7B61     	 str r3,[r7,#20]
2559:../Dave/Generated/FREERTOS/tasks.c ****                     }
2560:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
2561:../Dave/Generated/FREERTOS/tasks.c **** 
2562:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2563:../Dave/Generated/FREERTOS/tasks.c ****                     {
2564:../Dave/Generated/FREERTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2565:../Dave/Generated/FREERTOS/tasks.c ****                         {
2566:../Dave/Generated/FREERTOS/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2567:../Dave/Generated/FREERTOS/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2568:../Dave/Generated/FREERTOS/tasks.c ****                             #else
2569:../Dave/Generated/FREERTOS/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2570:../Dave/Generated/FREERTOS/tasks.c ****                             #endif
2571:../Dave/Generated/FREERTOS/tasks.c ****                         }
2572:../Dave/Generated/FREERTOS/tasks.c ****                     }
2573:../Dave/Generated/FREERTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2574:../Dave/Generated/FREERTOS/tasks.c ****                     {
2575:../Dave/Generated/FREERTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
 3633              	 .loc 1 2575 0
 3634 00ee 7B68     	 ldr r3,[r7,#4]
 3635 00f0 002B     	 cmp r3,#0
 3636 00f2 02D0     	 beq .L237
2576:../Dave/Generated/FREERTOS/tasks.c ****                         {
2577:../Dave/Generated/FREERTOS/tasks.c ****                             *pulTotalRunTime = 0;
 3637              	 .loc 1 2577 0
 3638 00f4 7B68     	 ldr r3,[r7,#4]
 3639 00f6 0022     	 movs r2,#0
 3640 00f8 1A60     	 str r2,[r3]
 3641              	.L237:
2578:../Dave/Generated/FREERTOS/tasks.c ****                         }
2579:../Dave/Generated/FREERTOS/tasks.c ****                     }
2580:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2581:../Dave/Generated/FREERTOS/tasks.c ****             }
2582:../Dave/Generated/FREERTOS/tasks.c ****             else
2583:../Dave/Generated/FREERTOS/tasks.c ****             {
2584:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2585:../Dave/Generated/FREERTOS/tasks.c ****             }
2586:../Dave/Generated/FREERTOS/tasks.c ****         }
2587:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3642              	 .loc 1 2587 0
 3643 00fa FFF7FEFF 	 bl xTaskResumeAll
2588:../Dave/Generated/FREERTOS/tasks.c **** 
2589:../Dave/Generated/FREERTOS/tasks.c ****         return uxTask;
 3644              	 .loc 1 2589 0
 3645 00fe 7B69     	 ldr r3,[r7,#20]
2590:../Dave/Generated/FREERTOS/tasks.c ****     }
 3646              	 .loc 1 2590 0
 3647 0100 1846     	 mov r0,r3
 3648 0102 1837     	 adds r7,r7,#24
 3649              	.LCFI130:
 3650              	 .cfi_def_cfa_offset 8
 3651 0104 BD46     	 mov sp,r7
 3652              	.LCFI131:
 3653              	 .cfi_def_cfa_register 13
 3654              	 
 3655 0106 80BD     	 pop {r7,pc}
 3656              	.L242:
 3657              	 .align 2
 3658              	.L241:
 3659 0108 00000000 	 .word uxCurrentNumberOfTasks
 3660 010c 00000000 	 .word pxReadyTasksLists
 3661 0110 00000000 	 .word pxDelayedTaskList
 3662 0114 00000000 	 .word pxOverflowDelayedTaskList
 3663 0118 00000000 	 .word xTasksWaitingTermination
 3664 011c 00000000 	 .word xSuspendedTaskList
 3665              	 .cfi_endproc
 3666              	.LFE162:
 3668              	 .section .text.xTaskGetIdleTaskHandle,"ax",%progbits
 3669              	 .align 2
 3670              	 .global xTaskGetIdleTaskHandle
 3671              	 .thumb
 3672              	 .thumb_func
 3674              	xTaskGetIdleTaskHandle:
 3675              	.LFB163:
2591:../Dave/Generated/FREERTOS/tasks.c **** 
2592:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2593:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2594:../Dave/Generated/FREERTOS/tasks.c **** 
2595:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2596:../Dave/Generated/FREERTOS/tasks.c **** 
2597:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2598:../Dave/Generated/FREERTOS/tasks.c ****     {
 3676              	 .loc 1 2598 0
 3677              	 .cfi_startproc
 3678              	 
 3679              	 
 3680              	 
 3681 0000 80B4     	 push {r7}
 3682              	.LCFI132:
 3683              	 .cfi_def_cfa_offset 4
 3684              	 .cfi_offset 7,-4
 3685 0002 83B0     	 sub sp,sp,#12
 3686              	.LCFI133:
 3687              	 .cfi_def_cfa_offset 16
 3688 0004 00AF     	 add r7,sp,#0
 3689              	.LCFI134:
 3690              	 .cfi_def_cfa_register 7
2599:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2600:../Dave/Generated/FREERTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2601:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
 3691              	 .loc 1 2601 0
 3692 0006 0B4B     	 ldr r3,.L247
 3693 0008 1B68     	 ldr r3,[r3]
 3694 000a 002B     	 cmp r3,#0
 3695 000c 09D1     	 bne .L244
 3696              	.LBB200:
 3697              	.LBB201:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3698              	 .loc 2 197 0 discriminator 1
 3699              	
 3700 000e 4FF0FC03 	 mov r3,#252
 3701 0012 83F31188 	 msr basepri,r3
 3702 0016 BFF36F8F 	 isb 
 3703 001a BFF34F8F 	 dsb 
 3704              	
 3705              	
 3706              	 .thumb
 3707 001e 7B60     	 str r3,[r7,#4]
 3708              	.L245:
 3709              	.LBE201:
 3710              	.LBE200:
 3711              	 .loc 1 2601 0 discriminator 1
 3712 0020 FEE7     	 b .L245
 3713              	.L244:
2602:../Dave/Generated/FREERTOS/tasks.c ****         return xIdleTaskHandle;
 3714              	 .loc 1 2602 0
 3715 0022 044B     	 ldr r3,.L247
 3716 0024 1B68     	 ldr r3,[r3]
2603:../Dave/Generated/FREERTOS/tasks.c ****     }
 3717              	 .loc 1 2603 0
 3718 0026 1846     	 mov r0,r3
 3719 0028 0C37     	 adds r7,r7,#12
 3720              	.LCFI135:
 3721              	 .cfi_def_cfa_offset 4
 3722 002a BD46     	 mov sp,r7
 3723              	.LCFI136:
 3724              	 .cfi_def_cfa_register 13
 3725              	 
 3726 002c 5DF8047B 	 ldr r7,[sp],#4
 3727              	.LCFI137:
 3728              	 .cfi_restore 7
 3729              	 .cfi_def_cfa_offset 0
 3730 0030 7047     	 bx lr
 3731              	.L248:
 3732 0032 00BF     	 .align 2
 3733              	.L247:
 3734 0034 00000000 	 .word xIdleTaskHandle
 3735              	 .cfi_endproc
 3736              	.LFE163:
 3738              	 .section .text.xTaskCatchUpTicks,"ax",%progbits
 3739              	 .align 2
 3740              	 .global xTaskCatchUpTicks
 3741              	 .thumb
 3742              	 .thumb_func
 3744              	xTaskCatchUpTicks:
 3745              	.LFB164:
2604:../Dave/Generated/FREERTOS/tasks.c **** 
2605:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2606:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2607:../Dave/Generated/FREERTOS/tasks.c **** 
2608:../Dave/Generated/FREERTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2609:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2610:../Dave/Generated/FREERTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2611:../Dave/Generated/FREERTOS/tasks.c ****  * 1. */
2612:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2613:../Dave/Generated/FREERTOS/tasks.c **** 
2614:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2615:../Dave/Generated/FREERTOS/tasks.c ****     {
2616:../Dave/Generated/FREERTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2617:../Dave/Generated/FREERTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2618:../Dave/Generated/FREERTOS/tasks.c ****          * each stepped tick. */
2619:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2620:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount += xTicksToJump;
2621:../Dave/Generated/FREERTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2622:../Dave/Generated/FREERTOS/tasks.c ****     }
2623:../Dave/Generated/FREERTOS/tasks.c **** 
2624:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2625:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2626:../Dave/Generated/FREERTOS/tasks.c **** 
2627:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2628:../Dave/Generated/FREERTOS/tasks.c **** {
 3746              	 .loc 1 2628 0
 3747              	 .cfi_startproc
 3748              	 
 3749              	 
 3750 0000 80B5     	 push {r7,lr}
 3751              	.LCFI138:
 3752              	 .cfi_def_cfa_offset 8
 3753              	 .cfi_offset 7,-8
 3754              	 .cfi_offset 14,-4
 3755 0002 84B0     	 sub sp,sp,#16
 3756              	.LCFI139:
 3757              	 .cfi_def_cfa_offset 24
 3758 0004 00AF     	 add r7,sp,#0
 3759              	.LCFI140:
 3760              	 .cfi_def_cfa_register 7
 3761 0006 7860     	 str r0,[r7,#4]
2629:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xYieldOccurred;
2630:../Dave/Generated/FREERTOS/tasks.c **** 
2631:../Dave/Generated/FREERTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2632:../Dave/Generated/FREERTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2633:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
 3762              	 .loc 1 2633 0
 3763 0008 0E4B     	 ldr r3,.L253
 3764 000a 1B68     	 ldr r3,[r3]
 3765 000c 002B     	 cmp r3,#0
 3766 000e 09D0     	 beq .L250
 3767              	.LBB202:
 3768              	.LBB203:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3769              	 .loc 2 197 0 discriminator 1
 3770              	
 3771 0010 4FF0FC03 	 mov r3,#252
 3772 0014 83F31188 	 msr basepri,r3
 3773 0018 BFF36F8F 	 isb 
 3774 001c BFF34F8F 	 dsb 
 3775              	
 3776              	
 3777              	 .thumb
 3778 0020 BB60     	 str r3,[r7,#8]
 3779              	.L251:
 3780              	.LBE203:
 3781              	.LBE202:
 3782              	 .loc 1 2633 0 discriminator 1
 3783 0022 FEE7     	 b .L251
 3784              	.L250:
2634:../Dave/Generated/FREERTOS/tasks.c **** 
2635:../Dave/Generated/FREERTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2636:../Dave/Generated/FREERTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2637:../Dave/Generated/FREERTOS/tasks.c ****     vTaskSuspendAll();
 3785              	 .loc 1 2637 0
 3786 0024 FFF7FEFF 	 bl vTaskSuspendAll
2638:../Dave/Generated/FREERTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 3787              	 .loc 1 2638 0
 3788 0028 074B     	 ldr r3,.L253+4
 3789 002a 1A68     	 ldr r2,[r3]
 3790 002c 7B68     	 ldr r3,[r7,#4]
 3791 002e 1344     	 add r3,r3,r2
 3792 0030 054A     	 ldr r2,.L253+4
 3793 0032 1360     	 str r3,[r2]
2639:../Dave/Generated/FREERTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3794              	 .loc 1 2639 0
 3795 0034 FFF7FEFF 	 bl xTaskResumeAll
 3796 0038 F860     	 str r0,[r7,#12]
2640:../Dave/Generated/FREERTOS/tasks.c **** 
2641:../Dave/Generated/FREERTOS/tasks.c ****     return xYieldOccurred;
 3797              	 .loc 1 2641 0
 3798 003a FB68     	 ldr r3,[r7,#12]
2642:../Dave/Generated/FREERTOS/tasks.c **** }
 3799              	 .loc 1 2642 0
 3800 003c 1846     	 mov r0,r3
 3801 003e 1037     	 adds r7,r7,#16
 3802              	.LCFI141:
 3803              	 .cfi_def_cfa_offset 8
 3804 0040 BD46     	 mov sp,r7
 3805              	.LCFI142:
 3806              	 .cfi_def_cfa_register 13
 3807              	 
 3808 0042 80BD     	 pop {r7,pc}
 3809              	.L254:
 3810              	 .align 2
 3811              	.L253:
 3812 0044 00000000 	 .word uxSchedulerSuspended
 3813 0048 00000000 	 .word xPendedTicks
 3814              	 .cfi_endproc
 3815              	.LFE164:
 3817              	 .section .text.xTaskAbortDelay,"ax",%progbits
 3818              	 .align 2
 3819              	 .global xTaskAbortDelay
 3820              	 .thumb
 3821              	 .thumb_func
 3823              	xTaskAbortDelay:
 3824              	.LFB165:
2643:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2644:../Dave/Generated/FREERTOS/tasks.c **** 
2645:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2646:../Dave/Generated/FREERTOS/tasks.c **** 
2647:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2648:../Dave/Generated/FREERTOS/tasks.c ****     {
 3825              	 .loc 1 2648 0
 3826              	 .cfi_startproc
 3827              	 
 3828              	 
 3829 0000 80B5     	 push {r7,lr}
 3830              	.LCFI143:
 3831              	 .cfi_def_cfa_offset 8
 3832              	 .cfi_offset 7,-8
 3833              	 .cfi_offset 14,-4
 3834 0002 86B0     	 sub sp,sp,#24
 3835              	.LCFI144:
 3836              	 .cfi_def_cfa_offset 32
 3837 0004 00AF     	 add r7,sp,#0
 3838              	.LCFI145:
 3839              	 .cfi_def_cfa_register 7
 3840 0006 7860     	 str r0,[r7,#4]
2649:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB = xTask;
 3841              	 .loc 1 2649 0
 3842 0008 7B68     	 ldr r3,[r7,#4]
 3843 000a 3B61     	 str r3,[r7,#16]
2650:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
2651:../Dave/Generated/FREERTOS/tasks.c **** 
2652:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTCB );
 3844              	 .loc 1 2652 0
 3845 000c 3B69     	 ldr r3,[r7,#16]
 3846 000e 002B     	 cmp r3,#0
 3847 0010 09D1     	 bne .L256
 3848              	.LBB204:
 3849              	.LBB205:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 3850              	 .loc 2 197 0 discriminator 1
 3851              	
 3852 0012 4FF0FC03 	 mov r3,#252
 3853 0016 83F31188 	 msr basepri,r3
 3854 001a BFF36F8F 	 isb 
 3855 001e BFF34F8F 	 dsb 
 3856              	
 3857              	
 3858              	 .thumb
 3859 0022 FB60     	 str r3,[r7,#12]
 3860              	.L257:
 3861              	.LBE205:
 3862              	.LBE204:
 3863              	 .loc 1 2652 0 discriminator 1
 3864 0024 FEE7     	 b .L257
 3865              	.L256:
2653:../Dave/Generated/FREERTOS/tasks.c **** 
2654:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 3866              	 .loc 1 2654 0
 3867 0026 FFF7FEFF 	 bl vTaskSuspendAll
2655:../Dave/Generated/FREERTOS/tasks.c ****         {
2656:../Dave/Generated/FREERTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2657:../Dave/Generated/FREERTOS/tasks.c ****              * it is actually in the Blocked state. */
2658:../Dave/Generated/FREERTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
 3868              	 .loc 1 2658 0
 3869 002a 7868     	 ldr r0,[r7,#4]
 3870 002c FFF7FEFF 	 bl eTaskGetState
 3871 0030 0346     	 mov r3,r0
 3872 0032 022B     	 cmp r3,#2
 3873 0034 3AD1     	 bne .L258
2659:../Dave/Generated/FREERTOS/tasks.c ****             {
2660:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 3874              	 .loc 1 2660 0
 3875 0036 0123     	 movs r3,#1
 3876 0038 7B61     	 str r3,[r7,#20]
2661:../Dave/Generated/FREERTOS/tasks.c **** 
2662:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2663:../Dave/Generated/FREERTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2664:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler is suspended. */
2665:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3877              	 .loc 1 2665 0
 3878 003a 3B69     	 ldr r3,[r7,#16]
 3879 003c 0433     	 adds r3,r3,#4
 3880 003e 1846     	 mov r0,r3
 3881 0040 FFF7FEFF 	 bl uxListRemove
2666:../Dave/Generated/FREERTOS/tasks.c **** 
2667:../Dave/Generated/FREERTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2668:../Dave/Generated/FREERTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2669:../Dave/Generated/FREERTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2670:../Dave/Generated/FREERTOS/tasks.c ****                  * is used. */
2671:../Dave/Generated/FREERTOS/tasks.c ****                 taskENTER_CRITICAL();
 3882              	 .loc 1 2671 0
 3883 0044 FFF7FEFF 	 bl vPortEnterCritical
2672:../Dave/Generated/FREERTOS/tasks.c ****                 {
2673:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3884              	 .loc 1 2673 0
 3885 0048 3B69     	 ldr r3,[r7,#16]
 3886 004a 9B6A     	 ldr r3,[r3,#40]
 3887 004c 002B     	 cmp r3,#0
 3888 004e 08D0     	 beq .L259
2674:../Dave/Generated/FREERTOS/tasks.c ****                     {
2675:../Dave/Generated/FREERTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3889              	 .loc 1 2675 0
 3890 0050 3B69     	 ldr r3,[r7,#16]
 3891 0052 1833     	 adds r3,r3,#24
 3892 0054 1846     	 mov r0,r3
 3893 0056 FFF7FEFF 	 bl uxListRemove
2676:../Dave/Generated/FREERTOS/tasks.c **** 
2677:../Dave/Generated/FREERTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2678:../Dave/Generated/FREERTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2679:../Dave/Generated/FREERTOS/tasks.c ****                          * then block again. */
2680:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
 3894              	 .loc 1 2680 0
 3895 005a 3B69     	 ldr r3,[r7,#16]
 3896 005c 0122     	 movs r2,#1
 3897 005e 83F86E20 	 strb r2,[r3,#110]
 3898              	.L259:
2681:../Dave/Generated/FREERTOS/tasks.c ****                     }
2682:../Dave/Generated/FREERTOS/tasks.c ****                     else
2683:../Dave/Generated/FREERTOS/tasks.c ****                     {
2684:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2685:../Dave/Generated/FREERTOS/tasks.c ****                     }
2686:../Dave/Generated/FREERTOS/tasks.c ****                 }
2687:../Dave/Generated/FREERTOS/tasks.c ****                 taskEXIT_CRITICAL();
 3899              	 .loc 1 2687 0
 3900 0062 FFF7FEFF 	 bl vPortExitCritical
2688:../Dave/Generated/FREERTOS/tasks.c **** 
2689:../Dave/Generated/FREERTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2690:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 3901              	 .loc 1 2690 0
 3902 0066 3B69     	 ldr r3,[r7,#16]
 3903 0068 DA6A     	 ldr r2,[r3,#44]
 3904 006a 154B     	 ldr r3,.L263
 3905 006c 1B68     	 ldr r3,[r3]
 3906 006e 9A42     	 cmp r2,r3
 3907 0070 03D9     	 bls .L260
 3908              	 .loc 1 2690 0 is_stmt 0 discriminator 1
 3909 0072 3B69     	 ldr r3,[r7,#16]
 3910 0074 DB6A     	 ldr r3,[r3,#44]
 3911 0076 124A     	 ldr r2,.L263
 3912 0078 1360     	 str r3,[r2]
 3913              	.L260:
 3914              	 .loc 1 2690 0 discriminator 3
 3915 007a 3B69     	 ldr r3,[r7,#16]
 3916 007c DA6A     	 ldr r2,[r3,#44]
 3917 007e 1346     	 mov r3,r2
 3918 0080 9B00     	 lsls r3,r3,#2
 3919 0082 1344     	 add r3,r3,r2
 3920 0084 9B00     	 lsls r3,r3,#2
 3921 0086 0F4A     	 ldr r2,.L263+4
 3922 0088 1A44     	 add r2,r2,r3
 3923 008a 3B69     	 ldr r3,[r7,#16]
 3924 008c 0433     	 adds r3,r3,#4
 3925 008e 1046     	 mov r0,r2
 3926 0090 1946     	 mov r1,r3
 3927 0092 FFF7FEFF 	 bl vListInsertEnd
2691:../Dave/Generated/FREERTOS/tasks.c **** 
2692:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2693:../Dave/Generated/FREERTOS/tasks.c ****                  * switch if preemption is turned off. */
2694:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2695:../Dave/Generated/FREERTOS/tasks.c ****                     {
2696:../Dave/Generated/FREERTOS/tasks.c ****                         /* Preemption is on, but a context switch should only be
2697:../Dave/Generated/FREERTOS/tasks.c ****                          *  performed if the unblocked task has a priority that is
2698:../Dave/Generated/FREERTOS/tasks.c ****                          *  equal to or higher than the currently executing task. */
2699:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3928              	 .loc 1 2699 0 is_stmt 1 discriminator 3
 3929 0096 3B69     	 ldr r3,[r7,#16]
 3930 0098 DA6A     	 ldr r2,[r3,#44]
 3931 009a 0B4B     	 ldr r3,.L263+8
 3932 009c 1B68     	 ldr r3,[r3]
 3933 009e DB6A     	 ldr r3,[r3,#44]
 3934 00a0 9A42     	 cmp r2,r3
 3935 00a2 05D9     	 bls .L261
2700:../Dave/Generated/FREERTOS/tasks.c ****                         {
2701:../Dave/Generated/FREERTOS/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2702:../Dave/Generated/FREERTOS/tasks.c ****                              * is unsuspended. */
2703:../Dave/Generated/FREERTOS/tasks.c ****                             xYieldPending = pdTRUE;
 3936              	 .loc 1 2703 0
 3937 00a4 094B     	 ldr r3,.L263+12
 3938 00a6 0122     	 movs r2,#1
 3939 00a8 1A60     	 str r2,[r3]
 3940 00aa 01E0     	 b .L261
 3941              	.L258:
2704:../Dave/Generated/FREERTOS/tasks.c ****                         }
2705:../Dave/Generated/FREERTOS/tasks.c ****                         else
2706:../Dave/Generated/FREERTOS/tasks.c ****                         {
2707:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2708:../Dave/Generated/FREERTOS/tasks.c ****                         }
2709:../Dave/Generated/FREERTOS/tasks.c ****                     }
2710:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2711:../Dave/Generated/FREERTOS/tasks.c ****             }
2712:../Dave/Generated/FREERTOS/tasks.c ****             else
2713:../Dave/Generated/FREERTOS/tasks.c ****             {
2714:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
 3942              	 .loc 1 2714 0
 3943 00ac 0023     	 movs r3,#0
 3944 00ae 7B61     	 str r3,[r7,#20]
 3945              	.L261:
2715:../Dave/Generated/FREERTOS/tasks.c ****             }
2716:../Dave/Generated/FREERTOS/tasks.c ****         }
2717:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3946              	 .loc 1 2717 0
 3947 00b0 FFF7FEFF 	 bl xTaskResumeAll
2718:../Dave/Generated/FREERTOS/tasks.c **** 
2719:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 3948              	 .loc 1 2719 0
 3949 00b4 7B69     	 ldr r3,[r7,#20]
2720:../Dave/Generated/FREERTOS/tasks.c ****     }
 3950              	 .loc 1 2720 0
 3951 00b6 1846     	 mov r0,r3
 3952 00b8 1837     	 adds r7,r7,#24
 3953              	.LCFI146:
 3954              	 .cfi_def_cfa_offset 8
 3955 00ba BD46     	 mov sp,r7
 3956              	.LCFI147:
 3957              	 .cfi_def_cfa_register 13
 3958              	 
 3959 00bc 80BD     	 pop {r7,pc}
 3960              	.L264:
 3961 00be 00BF     	 .align 2
 3962              	.L263:
 3963 00c0 00000000 	 .word uxTopReadyPriority
 3964 00c4 00000000 	 .word pxReadyTasksLists
 3965 00c8 00000000 	 .word pxCurrentTCB
 3966 00cc 00000000 	 .word xYieldPending
 3967              	 .cfi_endproc
 3968              	.LFE165:
 3970              	 .section .text.xTaskIncrementTick,"ax",%progbits
 3971              	 .align 2
 3972              	 .global xTaskIncrementTick
 3973              	 .thumb
 3974              	 .thumb_func
 3976              	xTaskIncrementTick:
 3977              	.LFB166:
2721:../Dave/Generated/FREERTOS/tasks.c **** 
2722:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2723:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2724:../Dave/Generated/FREERTOS/tasks.c **** 
2725:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2726:../Dave/Generated/FREERTOS/tasks.c **** {
 3978              	 .loc 1 2726 0
 3979              	 .cfi_startproc
 3980              	 
 3981              	 
 3982 0000 80B5     	 push {r7,lr}
 3983              	.LCFI148:
 3984              	 .cfi_def_cfa_offset 8
 3985              	 .cfi_offset 7,-8
 3986              	 .cfi_offset 14,-4
 3987 0002 86B0     	 sub sp,sp,#24
 3988              	.LCFI149:
 3989              	 .cfi_def_cfa_offset 32
 3990 0004 00AF     	 add r7,sp,#0
 3991              	.LCFI150:
 3992              	 .cfi_def_cfa_register 7
2727:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB;
2728:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xItemValue;
2729:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 3993              	 .loc 1 2729 0
 3994 0006 0023     	 movs r3,#0
 3995 0008 7B61     	 str r3,[r7,#20]
2730:../Dave/Generated/FREERTOS/tasks.c **** 
2731:../Dave/Generated/FREERTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2732:../Dave/Generated/FREERTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2733:../Dave/Generated/FREERTOS/tasks.c ****      * tasks to be unblocked. */
2734:../Dave/Generated/FREERTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2735:../Dave/Generated/FREERTOS/tasks.c **** 
2736:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3996              	 .loc 1 2736 0
 3997 000a 4E4B     	 ldr r3,.L281
 3998 000c 1B68     	 ldr r3,[r3]
 3999 000e 002B     	 cmp r3,#0
 4000 0010 40F08E80 	 bne .L266
 4001              	.LBB206:
2737:../Dave/Generated/FREERTOS/tasks.c ****     {
2738:../Dave/Generated/FREERTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2739:../Dave/Generated/FREERTOS/tasks.c ****          * block. */
2740:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 4002              	 .loc 1 2740 0
 4003 0014 4C4B     	 ldr r3,.L281+4
 4004 0016 1B68     	 ldr r3,[r3]
 4005 0018 0133     	 adds r3,r3,#1
 4006 001a 3B61     	 str r3,[r7,#16]
2741:../Dave/Generated/FREERTOS/tasks.c **** 
2742:../Dave/Generated/FREERTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2743:../Dave/Generated/FREERTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2744:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount = xConstTickCount;
 4007              	 .loc 1 2744 0
 4008 001c 4A4A     	 ldr r2,.L281+4
 4009 001e 3B69     	 ldr r3,[r7,#16]
 4010 0020 1360     	 str r3,[r2]
2745:../Dave/Generated/FREERTOS/tasks.c **** 
2746:../Dave/Generated/FREERTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
 4011              	 .loc 1 2746 0
 4012 0022 3B69     	 ldr r3,[r7,#16]
 4013 0024 002B     	 cmp r3,#0
 4014 0026 1FD1     	 bne .L267
 4015              	.LBB207:
2747:../Dave/Generated/FREERTOS/tasks.c ****         {
2748:../Dave/Generated/FREERTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
 4016              	 .loc 1 2748 0
 4017 0028 484B     	 ldr r3,.L281+8
 4018 002a 1B68     	 ldr r3,[r3]
 4019 002c 1B68     	 ldr r3,[r3]
 4020 002e 002B     	 cmp r3,#0
 4021 0030 09D0     	 beq .L268
 4022              	.LBB208:
 4023              	.LBB209:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4024              	 .loc 2 197 0 discriminator 1
 4025              	
 4026 0032 4FF0FC03 	 mov r3,#252
 4027 0036 83F31188 	 msr basepri,r3
 4028 003a BFF36F8F 	 isb 
 4029 003e BFF34F8F 	 dsb 
 4030              	
 4031              	
 4032              	 .thumb
 4033 0042 3B60     	 str r3,[r7]
 4034              	.L269:
 4035              	.LBE209:
 4036              	.LBE208:
 4037              	 .loc 1 2748 0 discriminator 1
 4038 0044 FEE7     	 b .L269
 4039              	.L268:
 4040              	 .loc 1 2748 0 is_stmt 0 discriminator 2
 4041 0046 414B     	 ldr r3,.L281+8
 4042 0048 1B68     	 ldr r3,[r3]
 4043 004a FB60     	 str r3,[r7,#12]
 4044 004c 404B     	 ldr r3,.L281+12
 4045 004e 1B68     	 ldr r3,[r3]
 4046 0050 3E4A     	 ldr r2,.L281+8
 4047 0052 1360     	 str r3,[r2]
 4048 0054 3E4A     	 ldr r2,.L281+12
 4049 0056 FB68     	 ldr r3,[r7,#12]
 4050 0058 1360     	 str r3,[r2]
 4051 005a 3E4B     	 ldr r3,.L281+16
 4052 005c 1B68     	 ldr r3,[r3]
 4053 005e 0133     	 adds r3,r3,#1
 4054 0060 3C4A     	 ldr r2,.L281+16
 4055 0062 1360     	 str r3,[r2]
 4056 0064 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 4057              	.L267:
 4058              	.LBE207:
2749:../Dave/Generated/FREERTOS/tasks.c ****         }
2750:../Dave/Generated/FREERTOS/tasks.c ****         else
2751:../Dave/Generated/FREERTOS/tasks.c ****         {
2752:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2753:../Dave/Generated/FREERTOS/tasks.c ****         }
2754:../Dave/Generated/FREERTOS/tasks.c **** 
2755:../Dave/Generated/FREERTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2756:../Dave/Generated/FREERTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2757:../Dave/Generated/FREERTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2758:../Dave/Generated/FREERTOS/tasks.c ****          * look any further down the list. */
2759:../Dave/Generated/FREERTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
 4059              	 .loc 1 2759 0 is_stmt 1
 4060 0068 3B4B     	 ldr r3,.L281+20
 4061 006a 1B68     	 ldr r3,[r3]
 4062 006c 3A69     	 ldr r2,[r7,#16]
 4063 006e 9A42     	 cmp r2,r3
 4064 0070 49D3     	 bcc .L270
 4065              	.L276:
2760:../Dave/Generated/FREERTOS/tasks.c ****         {
2761:../Dave/Generated/FREERTOS/tasks.c ****             for( ; ; )
2762:../Dave/Generated/FREERTOS/tasks.c ****             {
2763:../Dave/Generated/FREERTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4066              	 .loc 1 2763 0
 4067 0072 364B     	 ldr r3,.L281+8
 4068 0074 1B68     	 ldr r3,[r3]
 4069 0076 1B68     	 ldr r3,[r3]
 4070 0078 002B     	 cmp r3,#0
 4071 007a 04D1     	 bne .L271
2764:../Dave/Generated/FREERTOS/tasks.c ****                 {
2765:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2766:../Dave/Generated/FREERTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2767:../Dave/Generated/FREERTOS/tasks.c ****                      * unlikely that the
2768:../Dave/Generated/FREERTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2769:../Dave/Generated/FREERTOS/tasks.c ****                      * next time through. */
2770:../Dave/Generated/FREERTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
 4072              	 .loc 1 2770 0
 4073 007c 364B     	 ldr r3,.L281+20
 4074 007e 4FF0FF32 	 mov r2,#-1
 4075 0082 1A60     	 str r2,[r3]
2771:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 4076              	 .loc 1 2771 0
 4077 0084 3FE0     	 b .L270
 4078              	.L271:
2772:../Dave/Generated/FREERTOS/tasks.c ****                 }
2773:../Dave/Generated/FREERTOS/tasks.c ****                 else
2774:../Dave/Generated/FREERTOS/tasks.c ****                 {
2775:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2776:../Dave/Generated/FREERTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2777:../Dave/Generated/FREERTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2778:../Dave/Generated/FREERTOS/tasks.c ****                      * be removed from the Blocked state. */
2779:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
 4079              	 .loc 1 2779 0
 4080 0086 314B     	 ldr r3,.L281+8
 4081 0088 1B68     	 ldr r3,[r3]
 4082 008a DB68     	 ldr r3,[r3,#12]
 4083 008c DB68     	 ldr r3,[r3,#12]
 4084 008e BB60     	 str r3,[r7,#8]
2780:../Dave/Generated/FREERTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 4085              	 .loc 1 2780 0
 4086 0090 BB68     	 ldr r3,[r7,#8]
 4087 0092 5B68     	 ldr r3,[r3,#4]
 4088 0094 7B60     	 str r3,[r7,#4]
2781:../Dave/Generated/FREERTOS/tasks.c **** 
2782:../Dave/Generated/FREERTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
 4089              	 .loc 1 2782 0
 4090 0096 3A69     	 ldr r2,[r7,#16]
 4091 0098 7B68     	 ldr r3,[r7,#4]
 4092 009a 9A42     	 cmp r2,r3
 4093 009c 03D2     	 bcs .L272
2783:../Dave/Generated/FREERTOS/tasks.c ****                     {
2784:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2785:../Dave/Generated/FREERTOS/tasks.c ****                          * item value is the time at which the task at the head
2786:../Dave/Generated/FREERTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2787:../Dave/Generated/FREERTOS/tasks.c ****                          * state -  so record the item value in
2788:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2789:../Dave/Generated/FREERTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
 4094              	 .loc 1 2789 0
 4095 009e 2E4A     	 ldr r2,.L281+20
 4096 00a0 7B68     	 ldr r3,[r7,#4]
 4097 00a2 1360     	 str r3,[r2]
2790:../Dave/Generated/FREERTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 4098              	 .loc 1 2790 0
 4099 00a4 2FE0     	 b .L270
 4100              	.L272:
2791:../Dave/Generated/FREERTOS/tasks.c ****                     }
2792:../Dave/Generated/FREERTOS/tasks.c ****                     else
2793:../Dave/Generated/FREERTOS/tasks.c ****                     {
2794:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2795:../Dave/Generated/FREERTOS/tasks.c ****                     }
2796:../Dave/Generated/FREERTOS/tasks.c **** 
2797:../Dave/Generated/FREERTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2798:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4101              	 .loc 1 2798 0
 4102 00a6 BB68     	 ldr r3,[r7,#8]
 4103 00a8 0433     	 adds r3,r3,#4
 4104 00aa 1846     	 mov r0,r3
 4105 00ac FFF7FEFF 	 bl uxListRemove
2799:../Dave/Generated/FREERTOS/tasks.c **** 
2800:../Dave/Generated/FREERTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2801:../Dave/Generated/FREERTOS/tasks.c ****                      * it from the event list. */
2802:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 4106              	 .loc 1 2802 0
 4107 00b0 BB68     	 ldr r3,[r7,#8]
 4108 00b2 9B6A     	 ldr r3,[r3,#40]
 4109 00b4 002B     	 cmp r3,#0
 4110 00b6 04D0     	 beq .L273
2803:../Dave/Generated/FREERTOS/tasks.c ****                     {
2804:../Dave/Generated/FREERTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 4111              	 .loc 1 2804 0
 4112 00b8 BB68     	 ldr r3,[r7,#8]
 4113 00ba 1833     	 adds r3,r3,#24
 4114 00bc 1846     	 mov r0,r3
 4115 00be FFF7FEFF 	 bl uxListRemove
 4116              	.L273:
2805:../Dave/Generated/FREERTOS/tasks.c ****                     }
2806:../Dave/Generated/FREERTOS/tasks.c ****                     else
2807:../Dave/Generated/FREERTOS/tasks.c ****                     {
2808:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2809:../Dave/Generated/FREERTOS/tasks.c ****                     }
2810:../Dave/Generated/FREERTOS/tasks.c **** 
2811:../Dave/Generated/FREERTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2812:../Dave/Generated/FREERTOS/tasks.c ****                      * list. */
2813:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4117              	 .loc 1 2813 0
 4118 00c2 BB68     	 ldr r3,[r7,#8]
 4119 00c4 DA6A     	 ldr r2,[r3,#44]
 4120 00c6 254B     	 ldr r3,.L281+24
 4121 00c8 1B68     	 ldr r3,[r3]
 4122 00ca 9A42     	 cmp r2,r3
 4123 00cc 03D9     	 bls .L274
 4124              	 .loc 1 2813 0 is_stmt 0 discriminator 1
 4125 00ce BB68     	 ldr r3,[r7,#8]
 4126 00d0 DB6A     	 ldr r3,[r3,#44]
 4127 00d2 224A     	 ldr r2,.L281+24
 4128 00d4 1360     	 str r3,[r2]
 4129              	.L274:
 4130              	 .loc 1 2813 0 discriminator 3
 4131 00d6 BB68     	 ldr r3,[r7,#8]
 4132 00d8 DA6A     	 ldr r2,[r3,#44]
 4133 00da 1346     	 mov r3,r2
 4134 00dc 9B00     	 lsls r3,r3,#2
 4135 00de 1344     	 add r3,r3,r2
 4136 00e0 9B00     	 lsls r3,r3,#2
 4137 00e2 1F4A     	 ldr r2,.L281+28
 4138 00e4 1A44     	 add r2,r2,r3
 4139 00e6 BB68     	 ldr r3,[r7,#8]
 4140 00e8 0433     	 adds r3,r3,#4
 4141 00ea 1046     	 mov r0,r2
 4142 00ec 1946     	 mov r1,r3
 4143 00ee FFF7FEFF 	 bl vListInsertEnd
2814:../Dave/Generated/FREERTOS/tasks.c **** 
2815:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2816:../Dave/Generated/FREERTOS/tasks.c ****                      * context switch if preemption is turned off. */
2817:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2818:../Dave/Generated/FREERTOS/tasks.c ****                         {
2819:../Dave/Generated/FREERTOS/tasks.c ****                             /* Preemption is on, but a context switch should
2820:../Dave/Generated/FREERTOS/tasks.c ****                              * only be performed if the unblocked task has a
2821:../Dave/Generated/FREERTOS/tasks.c ****                              * priority that is equal to or higher than the
2822:../Dave/Generated/FREERTOS/tasks.c ****                              * currently executing task. */
2823:../Dave/Generated/FREERTOS/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 4144              	 .loc 1 2823 0 is_stmt 1 discriminator 3
 4145 00f2 BB68     	 ldr r3,[r7,#8]
 4146 00f4 DA6A     	 ldr r2,[r3,#44]
 4147 00f6 1B4B     	 ldr r3,.L281+32
 4148 00f8 1B68     	 ldr r3,[r3]
 4149 00fa DB6A     	 ldr r3,[r3,#44]
 4150 00fc 9A42     	 cmp r2,r3
 4151 00fe 01D3     	 bcc .L275
2824:../Dave/Generated/FREERTOS/tasks.c ****                             {
2825:../Dave/Generated/FREERTOS/tasks.c ****                                 xSwitchRequired = pdTRUE;
 4152              	 .loc 1 2825 0
 4153 0100 0123     	 movs r3,#1
 4154 0102 7B61     	 str r3,[r7,#20]
 4155              	.L275:
2826:../Dave/Generated/FREERTOS/tasks.c ****                             }
2827:../Dave/Generated/FREERTOS/tasks.c ****                             else
2828:../Dave/Generated/FREERTOS/tasks.c ****                             {
2829:../Dave/Generated/FREERTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2830:../Dave/Generated/FREERTOS/tasks.c ****                             }
2831:../Dave/Generated/FREERTOS/tasks.c ****                         }
2832:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2833:../Dave/Generated/FREERTOS/tasks.c ****                 }
2834:../Dave/Generated/FREERTOS/tasks.c ****             }
 4156              	 .loc 1 2834 0
 4157 0104 B5E7     	 b .L276
 4158              	.L270:
2835:../Dave/Generated/FREERTOS/tasks.c ****         }
2836:../Dave/Generated/FREERTOS/tasks.c **** 
2837:../Dave/Generated/FREERTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2838:../Dave/Generated/FREERTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2839:../Dave/Generated/FREERTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2840:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2841:../Dave/Generated/FREERTOS/tasks.c ****             {
2842:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
 4159              	 .loc 1 2842 0
 4160 0106 174B     	 ldr r3,.L281+32
 4161 0108 1B68     	 ldr r3,[r3]
 4162 010a DA6A     	 ldr r2,[r3,#44]
 4163 010c 1449     	 ldr r1,.L281+28
 4164 010e 1346     	 mov r3,r2
 4165 0110 9B00     	 lsls r3,r3,#2
 4166 0112 1344     	 add r3,r3,r2
 4167 0114 9B00     	 lsls r3,r3,#2
 4168 0116 0B44     	 add r3,r3,r1
 4169 0118 1B68     	 ldr r3,[r3]
 4170 011a 012B     	 cmp r3,#1
 4171 011c 01D9     	 bls .L277
2843:../Dave/Generated/FREERTOS/tasks.c ****                 {
2844:../Dave/Generated/FREERTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
 4172              	 .loc 1 2844 0
 4173 011e 0123     	 movs r3,#1
 4174 0120 7B61     	 str r3,[r7,#20]
 4175              	.L277:
2845:../Dave/Generated/FREERTOS/tasks.c ****                 }
2846:../Dave/Generated/FREERTOS/tasks.c ****                 else
2847:../Dave/Generated/FREERTOS/tasks.c ****                 {
2848:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2849:../Dave/Generated/FREERTOS/tasks.c ****                 }
2850:../Dave/Generated/FREERTOS/tasks.c ****             }
2851:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2852:../Dave/Generated/FREERTOS/tasks.c **** 
2853:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2854:../Dave/Generated/FREERTOS/tasks.c ****             {
2855:../Dave/Generated/FREERTOS/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2856:../Dave/Generated/FREERTOS/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2857:../Dave/Generated/FREERTOS/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2858:../Dave/Generated/FREERTOS/tasks.c ****                 {
2859:../Dave/Generated/FREERTOS/tasks.c ****                     vApplicationTickHook();
2860:../Dave/Generated/FREERTOS/tasks.c ****                 }
2861:../Dave/Generated/FREERTOS/tasks.c ****                 else
2862:../Dave/Generated/FREERTOS/tasks.c ****                 {
2863:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2864:../Dave/Generated/FREERTOS/tasks.c ****                 }
2865:../Dave/Generated/FREERTOS/tasks.c ****             }
2866:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2867:../Dave/Generated/FREERTOS/tasks.c **** 
2868:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2869:../Dave/Generated/FREERTOS/tasks.c ****             {
2870:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 4176              	 .loc 1 2870 0
 4177 0122 114B     	 ldr r3,.L281+36
 4178 0124 1B68     	 ldr r3,[r3]
 4179 0126 002B     	 cmp r3,#0
 4180 0128 01D0     	 beq .L278
2871:../Dave/Generated/FREERTOS/tasks.c ****                 {
2872:../Dave/Generated/FREERTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
 4181              	 .loc 1 2872 0
 4182 012a 0123     	 movs r3,#1
 4183 012c 7B61     	 str r3,[r7,#20]
 4184              	.L278:
 4185              	.LBE206:
 4186 012e 04E0     	 b .L279
 4187              	.L266:
2873:../Dave/Generated/FREERTOS/tasks.c ****                 }
2874:../Dave/Generated/FREERTOS/tasks.c ****                 else
2875:../Dave/Generated/FREERTOS/tasks.c ****                 {
2876:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2877:../Dave/Generated/FREERTOS/tasks.c ****                 }
2878:../Dave/Generated/FREERTOS/tasks.c ****             }
2879:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2880:../Dave/Generated/FREERTOS/tasks.c ****     }
2881:../Dave/Generated/FREERTOS/tasks.c ****     else
2882:../Dave/Generated/FREERTOS/tasks.c ****     {
2883:../Dave/Generated/FREERTOS/tasks.c ****         ++xPendedTicks;
 4188              	 .loc 1 2883 0
 4189 0130 0E4B     	 ldr r3,.L281+40
 4190 0132 1B68     	 ldr r3,[r3]
 4191 0134 0133     	 adds r3,r3,#1
 4192 0136 0D4A     	 ldr r2,.L281+40
 4193 0138 1360     	 str r3,[r2]
 4194              	.L279:
2884:../Dave/Generated/FREERTOS/tasks.c **** 
2885:../Dave/Generated/FREERTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2886:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler is locked. */
2887:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2888:../Dave/Generated/FREERTOS/tasks.c ****             {
2889:../Dave/Generated/FREERTOS/tasks.c ****                 vApplicationTickHook();
2890:../Dave/Generated/FREERTOS/tasks.c ****             }
2891:../Dave/Generated/FREERTOS/tasks.c ****         #endif
2892:../Dave/Generated/FREERTOS/tasks.c ****     }
2893:../Dave/Generated/FREERTOS/tasks.c **** 
2894:../Dave/Generated/FREERTOS/tasks.c ****     return xSwitchRequired;
 4195              	 .loc 1 2894 0
 4196 013a 7B69     	 ldr r3,[r7,#20]
2895:../Dave/Generated/FREERTOS/tasks.c **** }
 4197              	 .loc 1 2895 0
 4198 013c 1846     	 mov r0,r3
 4199 013e 1837     	 adds r7,r7,#24
 4200              	.LCFI151:
 4201              	 .cfi_def_cfa_offset 8
 4202 0140 BD46     	 mov sp,r7
 4203              	.LCFI152:
 4204              	 .cfi_def_cfa_register 13
 4205              	 
 4206 0142 80BD     	 pop {r7,pc}
 4207              	.L282:
 4208              	 .align 2
 4209              	.L281:
 4210 0144 00000000 	 .word uxSchedulerSuspended
 4211 0148 00000000 	 .word xTickCount
 4212 014c 00000000 	 .word pxDelayedTaskList
 4213 0150 00000000 	 .word pxOverflowDelayedTaskList
 4214 0154 00000000 	 .word xNumOfOverflows
 4215 0158 00000000 	 .word xNextTaskUnblockTime
 4216 015c 00000000 	 .word uxTopReadyPriority
 4217 0160 00000000 	 .word pxReadyTasksLists
 4218 0164 00000000 	 .word pxCurrentTCB
 4219 0168 00000000 	 .word xYieldPending
 4220 016c 00000000 	 .word xPendedTicks
 4221              	 .cfi_endproc
 4222              	.LFE166:
 4224              	 .section .text.vTaskSwitchContext,"ax",%progbits
 4225              	 .align 2
 4226              	 .global vTaskSwitchContext
 4227              	 .thumb
 4228              	 .thumb_func
 4230              	vTaskSwitchContext:
 4231              	.LFB167:
2896:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2897:../Dave/Generated/FREERTOS/tasks.c **** 
2898:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2899:../Dave/Generated/FREERTOS/tasks.c **** 
2900:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2901:../Dave/Generated/FREERTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2902:../Dave/Generated/FREERTOS/tasks.c ****     {
2903:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * xTCB;
2904:../Dave/Generated/FREERTOS/tasks.c **** 
2905:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2906:../Dave/Generated/FREERTOS/tasks.c ****          * getting set. */
2907:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask == NULL )
2908:../Dave/Generated/FREERTOS/tasks.c ****         {
2909:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2910:../Dave/Generated/FREERTOS/tasks.c ****         }
2911:../Dave/Generated/FREERTOS/tasks.c ****         else
2912:../Dave/Generated/FREERTOS/tasks.c ****         {
2913:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = xTask;
2914:../Dave/Generated/FREERTOS/tasks.c ****         }
2915:../Dave/Generated/FREERTOS/tasks.c **** 
2916:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2917:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2918:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
2919:../Dave/Generated/FREERTOS/tasks.c ****         {
2920:../Dave/Generated/FREERTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2921:../Dave/Generated/FREERTOS/tasks.c ****         }
2922:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
2923:../Dave/Generated/FREERTOS/tasks.c ****     }
2924:../Dave/Generated/FREERTOS/tasks.c **** 
2925:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2926:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2927:../Dave/Generated/FREERTOS/tasks.c **** 
2928:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2929:../Dave/Generated/FREERTOS/tasks.c **** 
2930:../Dave/Generated/FREERTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2931:../Dave/Generated/FREERTOS/tasks.c ****     {
2932:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2933:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t xReturn;
2934:../Dave/Generated/FREERTOS/tasks.c **** 
2935:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2936:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2937:../Dave/Generated/FREERTOS/tasks.c **** 
2938:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2939:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2940:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
2941:../Dave/Generated/FREERTOS/tasks.c ****         {
2942:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2943:../Dave/Generated/FREERTOS/tasks.c ****         }
2944:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
2945:../Dave/Generated/FREERTOS/tasks.c **** 
2946:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2947:../Dave/Generated/FREERTOS/tasks.c ****     }
2948:../Dave/Generated/FREERTOS/tasks.c **** 
2949:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2950:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2951:../Dave/Generated/FREERTOS/tasks.c **** 
2952:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2953:../Dave/Generated/FREERTOS/tasks.c **** 
2954:../Dave/Generated/FREERTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2955:../Dave/Generated/FREERTOS/tasks.c ****     {
2956:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2957:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t xReturn;
2958:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2959:../Dave/Generated/FREERTOS/tasks.c **** 
2960:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2961:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2962:../Dave/Generated/FREERTOS/tasks.c **** 
2963:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2964:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2965:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2966:../Dave/Generated/FREERTOS/tasks.c ****         {
2967:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2968:../Dave/Generated/FREERTOS/tasks.c ****         }
2969:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2970:../Dave/Generated/FREERTOS/tasks.c **** 
2971:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2972:../Dave/Generated/FREERTOS/tasks.c ****     }
2973:../Dave/Generated/FREERTOS/tasks.c **** 
2974:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2975:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2976:../Dave/Generated/FREERTOS/tasks.c **** 
2977:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2978:../Dave/Generated/FREERTOS/tasks.c **** 
2979:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2980:../Dave/Generated/FREERTOS/tasks.c ****                                              void * pvParameter )
2981:../Dave/Generated/FREERTOS/tasks.c ****     {
2982:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * xTCB;
2983:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
2984:../Dave/Generated/FREERTOS/tasks.c **** 
2985:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2986:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask == NULL )
2987:../Dave/Generated/FREERTOS/tasks.c ****         {
2988:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = pxCurrentTCB;
2989:../Dave/Generated/FREERTOS/tasks.c ****         }
2990:../Dave/Generated/FREERTOS/tasks.c ****         else
2991:../Dave/Generated/FREERTOS/tasks.c ****         {
2992:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = xTask;
2993:../Dave/Generated/FREERTOS/tasks.c ****         }
2994:../Dave/Generated/FREERTOS/tasks.c **** 
2995:../Dave/Generated/FREERTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2996:../Dave/Generated/FREERTOS/tasks.c ****         {
2997:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2998:../Dave/Generated/FREERTOS/tasks.c ****         }
2999:../Dave/Generated/FREERTOS/tasks.c ****         else
3000:../Dave/Generated/FREERTOS/tasks.c ****         {
3001:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdFAIL;
3002:../Dave/Generated/FREERTOS/tasks.c ****         }
3003:../Dave/Generated/FREERTOS/tasks.c **** 
3004:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
3005:../Dave/Generated/FREERTOS/tasks.c ****     }
3006:../Dave/Generated/FREERTOS/tasks.c **** 
3007:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3008:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3009:../Dave/Generated/FREERTOS/tasks.c **** 
3010:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSwitchContext( void )
3011:../Dave/Generated/FREERTOS/tasks.c **** {
 4232              	 .loc 1 3011 0
 4233              	 .cfi_startproc
 4234              	 
 4235              	 
 4236              	 
 4237 0000 80B4     	 push {r7}
 4238              	.LCFI153:
 4239              	 .cfi_def_cfa_offset 4
 4240              	 .cfi_offset 7,-4
 4241 0002 85B0     	 sub sp,sp,#20
 4242              	.LCFI154:
 4243              	 .cfi_def_cfa_offset 24
 4244 0004 00AF     	 add r7,sp,#0
 4245              	.LCFI155:
 4246              	 .cfi_def_cfa_register 7
3012:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4247              	 .loc 1 3012 0
 4248 0006 274B     	 ldr r3,.L291
 4249 0008 1B68     	 ldr r3,[r3]
 4250 000a 002B     	 cmp r3,#0
 4251 000c 03D0     	 beq .L284
3013:../Dave/Generated/FREERTOS/tasks.c ****     {
3014:../Dave/Generated/FREERTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3015:../Dave/Generated/FREERTOS/tasks.c ****          * switch. */
3016:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 4252              	 .loc 1 3016 0
 4253 000e 264B     	 ldr r3,.L291+4
 4254 0010 0122     	 movs r2,#1
 4255 0012 1A60     	 str r2,[r3]
 4256 0014 40E0     	 b .L283
 4257              	.L284:
3017:../Dave/Generated/FREERTOS/tasks.c ****     }
3018:../Dave/Generated/FREERTOS/tasks.c ****     else
3019:../Dave/Generated/FREERTOS/tasks.c ****     {
3020:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdFALSE;
 4258              	 .loc 1 3020 0
 4259 0016 244B     	 ldr r3,.L291+4
 4260 0018 0022     	 movs r2,#0
 4261 001a 1A60     	 str r2,[r3]
 4262              	.LBB210:
3021:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3022:../Dave/Generated/FREERTOS/tasks.c **** 
3023:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3024:../Dave/Generated/FREERTOS/tasks.c ****             {
3025:../Dave/Generated/FREERTOS/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3026:../Dave/Generated/FREERTOS/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3027:../Dave/Generated/FREERTOS/tasks.c ****                 #else
3028:../Dave/Generated/FREERTOS/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3029:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
3030:../Dave/Generated/FREERTOS/tasks.c **** 
3031:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add the amount of time the task has been running to the
3032:../Dave/Generated/FREERTOS/tasks.c ****                  * accumulated time so far.  The time the task started running was
3033:../Dave/Generated/FREERTOS/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3034:../Dave/Generated/FREERTOS/tasks.c ****                  * protection here so count values are only valid until the timer
3035:../Dave/Generated/FREERTOS/tasks.c ****                  * overflows.  The guard against negative values is to protect
3036:../Dave/Generated/FREERTOS/tasks.c ****                  * against suspect run time stat counter implementations - which
3037:../Dave/Generated/FREERTOS/tasks.c ****                  * are provided by the application, not the kernel. */
3038:../Dave/Generated/FREERTOS/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3039:../Dave/Generated/FREERTOS/tasks.c ****                 {
3040:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3041:../Dave/Generated/FREERTOS/tasks.c ****                 }
3042:../Dave/Generated/FREERTOS/tasks.c ****                 else
3043:../Dave/Generated/FREERTOS/tasks.c ****                 {
3044:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3045:../Dave/Generated/FREERTOS/tasks.c ****                 }
3046:../Dave/Generated/FREERTOS/tasks.c **** 
3047:../Dave/Generated/FREERTOS/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3048:../Dave/Generated/FREERTOS/tasks.c ****             }
3049:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3050:../Dave/Generated/FREERTOS/tasks.c **** 
3051:../Dave/Generated/FREERTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3052:../Dave/Generated/FREERTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3053:../Dave/Generated/FREERTOS/tasks.c **** 
3054:../Dave/Generated/FREERTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3055:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3056:../Dave/Generated/FREERTOS/tasks.c ****             {
3057:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3058:../Dave/Generated/FREERTOS/tasks.c ****             }
3059:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3060:../Dave/Generated/FREERTOS/tasks.c **** 
3061:../Dave/Generated/FREERTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3062:../Dave/Generated/FREERTOS/tasks.c ****          * optimised asm code. */
3063:../Dave/Generated/FREERTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
 4263              	 .loc 1 3063 0
 4264 001c 234B     	 ldr r3,.L291+8
 4265 001e 1B68     	 ldr r3,[r3]
 4266 0020 FB60     	 str r3,[r7,#12]
 4267 0022 0FE0     	 b .L286
 4268              	.L289:
 4269              	 .loc 1 3063 0 is_stmt 0 discriminator 5
 4270 0024 FB68     	 ldr r3,[r7,#12]
 4271 0026 002B     	 cmp r3,#0
 4272 0028 09D1     	 bne .L287
 4273              	.LBB211:
 4274              	.LBB212:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4275              	 .loc 2 197 0 is_stmt 1 discriminator 2
 4276              	
 4277 002a 4FF0FC03 	 mov r3,#252
 4278 002e 83F31188 	 msr basepri,r3
 4279 0032 BFF36F8F 	 isb 
 4280 0036 BFF34F8F 	 dsb 
 4281              	
 4282              	
 4283              	 .thumb
 4284 003a 7B60     	 str r3,[r7,#4]
 4285              	.L288:
 4286              	.LBE212:
 4287              	.LBE211:
 4288              	 .loc 1 3063 0 discriminator 1
 4289 003c FEE7     	 b .L288
 4290              	.L287:
 4291              	 .loc 1 3063 0 is_stmt 0 discriminator 3
 4292 003e FB68     	 ldr r3,[r7,#12]
 4293 0040 013B     	 subs r3,r3,#1
 4294 0042 FB60     	 str r3,[r7,#12]
 4295              	.L286:
 4296              	 .loc 1 3063 0 discriminator 4
 4297 0044 1A49     	 ldr r1,.L291+12
 4298 0046 FA68     	 ldr r2,[r7,#12]
 4299 0048 1346     	 mov r3,r2
 4300 004a 9B00     	 lsls r3,r3,#2
 4301 004c 1344     	 add r3,r3,r2
 4302 004e 9B00     	 lsls r3,r3,#2
 4303 0050 0B44     	 add r3,r3,r1
 4304 0052 1B68     	 ldr r3,[r3]
 4305 0054 002B     	 cmp r3,#0
 4306 0056 E5D0     	 beq .L289
 4307              	.LBB213:
 4308              	 .loc 1 3063 0 discriminator 6
 4309 0058 FA68     	 ldr r2,[r7,#12]
 4310 005a 1346     	 mov r3,r2
 4311 005c 9B00     	 lsls r3,r3,#2
 4312 005e 1344     	 add r3,r3,r2
 4313 0060 9B00     	 lsls r3,r3,#2
 4314 0062 134A     	 ldr r2,.L291+12
 4315 0064 1344     	 add r3,r3,r2
 4316 0066 BB60     	 str r3,[r7,#8]
 4317 0068 BB68     	 ldr r3,[r7,#8]
 4318 006a 5B68     	 ldr r3,[r3,#4]
 4319 006c 5A68     	 ldr r2,[r3,#4]
 4320 006e BB68     	 ldr r3,[r7,#8]
 4321 0070 5A60     	 str r2,[r3,#4]
 4322 0072 BB68     	 ldr r3,[r7,#8]
 4323 0074 5A68     	 ldr r2,[r3,#4]
 4324 0076 BB68     	 ldr r3,[r7,#8]
 4325 0078 0833     	 adds r3,r3,#8
 4326 007a 9A42     	 cmp r2,r3
 4327 007c 04D1     	 bne .L290
 4328              	 .loc 1 3063 0 discriminator 7
 4329 007e BB68     	 ldr r3,[r7,#8]
 4330 0080 5B68     	 ldr r3,[r3,#4]
 4331 0082 5A68     	 ldr r2,[r3,#4]
 4332 0084 BB68     	 ldr r3,[r7,#8]
 4333 0086 5A60     	 str r2,[r3,#4]
 4334              	.L290:
 4335              	 .loc 1 3063 0 discriminator 9
 4336 0088 BB68     	 ldr r3,[r7,#8]
 4337 008a 5B68     	 ldr r3,[r3,#4]
 4338 008c DB68     	 ldr r3,[r3,#12]
 4339 008e 094A     	 ldr r2,.L291+16
 4340 0090 1360     	 str r3,[r2]
 4341              	.LBE213:
 4342 0092 064A     	 ldr r2,.L291+8
 4343 0094 FB68     	 ldr r3,[r7,#12]
 4344 0096 1360     	 str r3,[r2]
 4345              	.L283:
 4346              	.LBE210:
3064:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3065:../Dave/Generated/FREERTOS/tasks.c **** 
3066:../Dave/Generated/FREERTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3067:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3068:../Dave/Generated/FREERTOS/tasks.c ****             {
3069:../Dave/Generated/FREERTOS/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3070:../Dave/Generated/FREERTOS/tasks.c ****             }
3071:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3072:../Dave/Generated/FREERTOS/tasks.c **** 
3073:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3074:../Dave/Generated/FREERTOS/tasks.c ****             {
3075:../Dave/Generated/FREERTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3076:../Dave/Generated/FREERTOS/tasks.c ****                  * structure specific to this task.
3077:../Dave/Generated/FREERTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3078:../Dave/Generated/FREERTOS/tasks.c ****                  * for additional information. */
3079:../Dave/Generated/FREERTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3080:../Dave/Generated/FREERTOS/tasks.c ****             }
3081:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3082:../Dave/Generated/FREERTOS/tasks.c ****     }
3083:../Dave/Generated/FREERTOS/tasks.c **** }
 4347              	 .loc 1 3083 0 is_stmt 1
 4348 0098 1437     	 adds r7,r7,#20
 4349              	.LCFI156:
 4350              	 .cfi_def_cfa_offset 4
 4351 009a BD46     	 mov sp,r7
 4352              	.LCFI157:
 4353              	 .cfi_def_cfa_register 13
 4354              	 
 4355 009c 5DF8047B 	 ldr r7,[sp],#4
 4356              	.LCFI158:
 4357              	 .cfi_restore 7
 4358              	 .cfi_def_cfa_offset 0
 4359 00a0 7047     	 bx lr
 4360              	.L292:
 4361 00a2 00BF     	 .align 2
 4362              	.L291:
 4363 00a4 00000000 	 .word uxSchedulerSuspended
 4364 00a8 00000000 	 .word xYieldPending
 4365 00ac 00000000 	 .word uxTopReadyPriority
 4366 00b0 00000000 	 .word pxReadyTasksLists
 4367 00b4 00000000 	 .word pxCurrentTCB
 4368              	 .cfi_endproc
 4369              	.LFE167:
 4371              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 4372              	 .align 2
 4373              	 .global vTaskPlaceOnEventList
 4374              	 .thumb
 4375              	 .thumb_func
 4377              	vTaskPlaceOnEventList:
 4378              	.LFB168:
3084:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:../Dave/Generated/FREERTOS/tasks.c **** 
3086:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3087:../Dave/Generated/FREERTOS/tasks.c ****                             const TickType_t xTicksToWait )
3088:../Dave/Generated/FREERTOS/tasks.c **** {
 4379              	 .loc 1 3088 0
 4380              	 .cfi_startproc
 4381              	 
 4382              	 
 4383 0000 80B5     	 push {r7,lr}
 4384              	.LCFI159:
 4385              	 .cfi_def_cfa_offset 8
 4386              	 .cfi_offset 7,-8
 4387              	 .cfi_offset 14,-4
 4388 0002 84B0     	 sub sp,sp,#16
 4389              	.LCFI160:
 4390              	 .cfi_def_cfa_offset 24
 4391 0004 00AF     	 add r7,sp,#0
 4392              	.LCFI161:
 4393              	 .cfi_def_cfa_register 7
 4394 0006 7860     	 str r0,[r7,#4]
 4395 0008 3960     	 str r1,[r7]
3089:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxEventList );
 4396              	 .loc 1 3089 0
 4397 000a 7B68     	 ldr r3,[r7,#4]
 4398 000c 002B     	 cmp r3,#0
 4399 000e 09D1     	 bne .L294
 4400              	.LBB214:
 4401              	.LBB215:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4402              	 .loc 2 197 0 discriminator 1
 4403              	
 4404 0010 4FF0FC03 	 mov r3,#252
 4405 0014 83F31188 	 msr basepri,r3
 4406 0018 BFF36F8F 	 isb 
 4407 001c BFF34F8F 	 dsb 
 4408              	
 4409              	
 4410              	 .thumb
 4411 0020 FB60     	 str r3,[r7,#12]
 4412              	.L295:
 4413              	.LBE215:
 4414              	.LBE214:
 4415              	 .loc 1 3089 0 discriminator 1
 4416 0022 FEE7     	 b .L295
 4417              	.L294:
3090:../Dave/Generated/FREERTOS/tasks.c **** 
3091:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3092:../Dave/Generated/FREERTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3093:../Dave/Generated/FREERTOS/tasks.c **** 
3094:../Dave/Generated/FREERTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3095:../Dave/Generated/FREERTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3096:../Dave/Generated/FREERTOS/tasks.c ****      * is the first to be woken by the event.  The queue that contains the event
3097:../Dave/Generated/FREERTOS/tasks.c ****      * list is locked, preventing simultaneous access from interrupts. */
3098:../Dave/Generated/FREERTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4418              	 .loc 1 3098 0
 4419 0024 064B     	 ldr r3,.L296
 4420 0026 1B68     	 ldr r3,[r3]
 4421 0028 1833     	 adds r3,r3,#24
 4422 002a 7868     	 ldr r0,[r7,#4]
 4423 002c 1946     	 mov r1,r3
 4424 002e FFF7FEFF 	 bl vListInsert
3099:../Dave/Generated/FREERTOS/tasks.c **** 
3100:../Dave/Generated/FREERTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4425              	 .loc 1 3100 0
 4426 0032 3868     	 ldr r0,[r7]
 4427 0034 0121     	 movs r1,#1
 4428 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3101:../Dave/Generated/FREERTOS/tasks.c **** }
 4429              	 .loc 1 3101 0
 4430 003a 1037     	 adds r7,r7,#16
 4431              	.LCFI162:
 4432              	 .cfi_def_cfa_offset 8
 4433 003c BD46     	 mov sp,r7
 4434              	.LCFI163:
 4435              	 .cfi_def_cfa_register 13
 4436              	 
 4437 003e 80BD     	 pop {r7,pc}
 4438              	.L297:
 4439              	 .align 2
 4440              	.L296:
 4441 0040 00000000 	 .word pxCurrentTCB
 4442              	 .cfi_endproc
 4443              	.LFE168:
 4445              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4446              	 .align 2
 4447              	 .global vTaskPlaceOnUnorderedEventList
 4448              	 .thumb
 4449              	 .thumb_func
 4451              	vTaskPlaceOnUnorderedEventList:
 4452              	.LFB169:
3102:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3103:../Dave/Generated/FREERTOS/tasks.c **** 
3104:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3105:../Dave/Generated/FREERTOS/tasks.c ****                                      const TickType_t xItemValue,
3106:../Dave/Generated/FREERTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3107:../Dave/Generated/FREERTOS/tasks.c **** {
 4453              	 .loc 1 3107 0
 4454              	 .cfi_startproc
 4455              	 
 4456              	 
 4457 0000 80B5     	 push {r7,lr}
 4458              	.LCFI164:
 4459              	 .cfi_def_cfa_offset 8
 4460              	 .cfi_offset 7,-8
 4461              	 .cfi_offset 14,-4
 4462 0002 86B0     	 sub sp,sp,#24
 4463              	.LCFI165:
 4464              	 .cfi_def_cfa_offset 32
 4465 0004 00AF     	 add r7,sp,#0
 4466              	.LCFI166:
 4467              	 .cfi_def_cfa_register 7
 4468 0006 F860     	 str r0,[r7,#12]
 4469 0008 B960     	 str r1,[r7,#8]
 4470 000a 7A60     	 str r2,[r7,#4]
3108:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxEventList );
 4471              	 .loc 1 3108 0
 4472 000c FB68     	 ldr r3,[r7,#12]
 4473 000e 002B     	 cmp r3,#0
 4474 0010 09D1     	 bne .L299
 4475              	.LBB216:
 4476              	.LBB217:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4477              	 .loc 2 197 0 discriminator 1
 4478              	
 4479 0012 4FF0FC03 	 mov r3,#252
 4480 0016 83F31188 	 msr basepri,r3
 4481 001a BFF36F8F 	 isb 
 4482 001e BFF34F8F 	 dsb 
 4483              	
 4484              	
 4485              	 .thumb
 4486 0022 7B61     	 str r3,[r7,#20]
 4487              	.L300:
 4488              	.LBE217:
 4489              	.LBE216:
 4490              	 .loc 1 3108 0 discriminator 1
 4491 0024 FEE7     	 b .L300
 4492              	.L299:
3109:../Dave/Generated/FREERTOS/tasks.c **** 
3110:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3111:../Dave/Generated/FREERTOS/tasks.c ****      * the event groups implementation. */
3112:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
 4493              	 .loc 1 3112 0
 4494 0026 114B     	 ldr r3,.L303
 4495 0028 1B68     	 ldr r3,[r3]
 4496 002a 002B     	 cmp r3,#0
 4497 002c 09D1     	 bne .L301
 4498              	.LBB218:
 4499              	.LBB219:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4500              	 .loc 2 197 0 discriminator 1
 4501              	
 4502 002e 4FF0FC03 	 mov r3,#252
 4503 0032 83F31188 	 msr basepri,r3
 4504 0036 BFF36F8F 	 isb 
 4505 003a BFF34F8F 	 dsb 
 4506              	
 4507              	
 4508              	 .thumb
 4509 003e 3B61     	 str r3,[r7,#16]
 4510              	.L302:
 4511              	.LBE219:
 4512              	.LBE218:
 4513              	 .loc 1 3112 0 discriminator 2
 4514 0040 FEE7     	 b .L302
 4515              	.L301:
3113:../Dave/Generated/FREERTOS/tasks.c **** 
3114:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3115:../Dave/Generated/FREERTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3116:../Dave/Generated/FREERTOS/tasks.c ****      * task that is not in the Blocked state. */
3117:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
 4516              	 .loc 1 3117 0
 4517 0042 0B4B     	 ldr r3,.L303+4
 4518 0044 1B68     	 ldr r3,[r3]
 4519 0046 BA68     	 ldr r2,[r7,#8]
 4520 0048 42F00042 	 orr r2,r2,#-2147483648
 4521 004c 9A61     	 str r2,[r3,#24]
3118:../Dave/Generated/FREERTOS/tasks.c **** 
3119:../Dave/Generated/FREERTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3120:../Dave/Generated/FREERTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3121:../Dave/Generated/FREERTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3122:../Dave/Generated/FREERTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3123:../Dave/Generated/FREERTOS/tasks.c ****      * the task level). */
3124:../Dave/Generated/FREERTOS/tasks.c ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4522              	 .loc 1 3124 0
 4523 004e 084B     	 ldr r3,.L303+4
 4524 0050 1B68     	 ldr r3,[r3]
 4525 0052 1833     	 adds r3,r3,#24
 4526 0054 F868     	 ldr r0,[r7,#12]
 4527 0056 1946     	 mov r1,r3
 4528 0058 FFF7FEFF 	 bl vListInsertEnd
3125:../Dave/Generated/FREERTOS/tasks.c **** 
3126:../Dave/Generated/FREERTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4529              	 .loc 1 3126 0
 4530 005c 7868     	 ldr r0,[r7,#4]
 4531 005e 0121     	 movs r1,#1
 4532 0060 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3127:../Dave/Generated/FREERTOS/tasks.c **** }
 4533              	 .loc 1 3127 0
 4534 0064 1837     	 adds r7,r7,#24
 4535              	.LCFI167:
 4536              	 .cfi_def_cfa_offset 8
 4537 0066 BD46     	 mov sp,r7
 4538              	.LCFI168:
 4539              	 .cfi_def_cfa_register 13
 4540              	 
 4541 0068 80BD     	 pop {r7,pc}
 4542              	.L304:
 4543 006a 00BF     	 .align 2
 4544              	.L303:
 4545 006c 00000000 	 .word uxSchedulerSuspended
 4546 0070 00000000 	 .word pxCurrentTCB
 4547              	 .cfi_endproc
 4548              	.LFE169:
 4550              	 .section .text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4551              	 .align 2
 4552              	 .global vTaskPlaceOnEventListRestricted
 4553              	 .thumb
 4554              	 .thumb_func
 4556              	vTaskPlaceOnEventListRestricted:
 4557              	.LFB170:
3128:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3129:../Dave/Generated/FREERTOS/tasks.c **** 
3130:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3131:../Dave/Generated/FREERTOS/tasks.c **** 
3132:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3133:../Dave/Generated/FREERTOS/tasks.c ****                                           TickType_t xTicksToWait,
3134:../Dave/Generated/FREERTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3135:../Dave/Generated/FREERTOS/tasks.c ****     {
 4558              	 .loc 1 3135 0
 4559              	 .cfi_startproc
 4560              	 
 4561              	 
 4562 0000 80B5     	 push {r7,lr}
 4563              	.LCFI169:
 4564              	 .cfi_def_cfa_offset 8
 4565              	 .cfi_offset 7,-8
 4566              	 .cfi_offset 14,-4
 4567 0002 86B0     	 sub sp,sp,#24
 4568              	.LCFI170:
 4569              	 .cfi_def_cfa_offset 32
 4570 0004 00AF     	 add r7,sp,#0
 4571              	.LCFI171:
 4572              	 .cfi_def_cfa_register 7
 4573 0006 F860     	 str r0,[r7,#12]
 4574 0008 B960     	 str r1,[r7,#8]
 4575 000a 7A60     	 str r2,[r7,#4]
3136:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxEventList );
 4576              	 .loc 1 3136 0
 4577 000c FB68     	 ldr r3,[r7,#12]
 4578 000e 002B     	 cmp r3,#0
 4579 0010 09D1     	 bne .L306
 4580              	.LBB220:
 4581              	.LBB221:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4582              	 .loc 2 197 0 discriminator 1
 4583              	
 4584 0012 4FF0FC03 	 mov r3,#252
 4585 0016 83F31188 	 msr basepri,r3
 4586 001a BFF36F8F 	 isb 
 4587 001e BFF34F8F 	 dsb 
 4588              	
 4589              	
 4590              	 .thumb
 4591 0022 7B61     	 str r3,[r7,#20]
 4592              	.L307:
 4593              	.LBE221:
 4594              	.LBE220:
 4595              	 .loc 1 3136 0 discriminator 1
 4596 0024 FEE7     	 b .L307
 4597              	.L306:
3137:../Dave/Generated/FREERTOS/tasks.c **** 
3138:../Dave/Generated/FREERTOS/tasks.c ****         /* This function should not be called by application code hence the
3139:../Dave/Generated/FREERTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3140:../Dave/Generated/FREERTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3141:../Dave/Generated/FREERTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3142:../Dave/Generated/FREERTOS/tasks.c **** 
3143:../Dave/Generated/FREERTOS/tasks.c **** 
3144:../Dave/Generated/FREERTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3145:../Dave/Generated/FREERTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3146:../Dave/Generated/FREERTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3147:../Dave/Generated/FREERTOS/tasks.c ****          * can be used in place of vListInsert. */
3148:../Dave/Generated/FREERTOS/tasks.c ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4598              	 .loc 1 3148 0
 4599 0026 0A4B     	 ldr r3,.L309
 4600 0028 1B68     	 ldr r3,[r3]
 4601 002a 1833     	 adds r3,r3,#24
 4602 002c F868     	 ldr r0,[r7,#12]
 4603 002e 1946     	 mov r1,r3
 4604 0030 FFF7FEFF 	 bl vListInsertEnd
3149:../Dave/Generated/FREERTOS/tasks.c **** 
3150:../Dave/Generated/FREERTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3151:../Dave/Generated/FREERTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3152:../Dave/Generated/FREERTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3153:../Dave/Generated/FREERTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
 4605              	 .loc 1 3153 0
 4606 0034 7B68     	 ldr r3,[r7,#4]
 4607 0036 002B     	 cmp r3,#0
 4608 0038 02D0     	 beq .L308
3154:../Dave/Generated/FREERTOS/tasks.c ****         {
3155:../Dave/Generated/FREERTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
 4609              	 .loc 1 3155 0
 4610 003a 4FF0FF33 	 mov r3,#-1
 4611 003e BB60     	 str r3,[r7,#8]
 4612              	.L308:
3156:../Dave/Generated/FREERTOS/tasks.c ****         }
3157:../Dave/Generated/FREERTOS/tasks.c **** 
3158:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3159:../Dave/Generated/FREERTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4613              	 .loc 1 3159 0
 4614 0040 B868     	 ldr r0,[r7,#8]
 4615 0042 7968     	 ldr r1,[r7,#4]
 4616 0044 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3160:../Dave/Generated/FREERTOS/tasks.c ****     }
 4617              	 .loc 1 3160 0
 4618 0048 1837     	 adds r7,r7,#24
 4619              	.LCFI172:
 4620              	 .cfi_def_cfa_offset 8
 4621 004a BD46     	 mov sp,r7
 4622              	.LCFI173:
 4623              	 .cfi_def_cfa_register 13
 4624              	 
 4625 004c 80BD     	 pop {r7,pc}
 4626              	.L310:
 4627 004e 00BF     	 .align 2
 4628              	.L309:
 4629 0050 00000000 	 .word pxCurrentTCB
 4630              	 .cfi_endproc
 4631              	.LFE170:
 4633              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 4634              	 .align 2
 4635              	 .global xTaskRemoveFromEventList
 4636              	 .thumb
 4637              	 .thumb_func
 4639              	xTaskRemoveFromEventList:
 4640              	.LFB171:
3161:../Dave/Generated/FREERTOS/tasks.c **** 
3162:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TIMERS */
3163:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3164:../Dave/Generated/FREERTOS/tasks.c **** 
3165:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3166:../Dave/Generated/FREERTOS/tasks.c **** {
 4641              	 .loc 1 3166 0
 4642              	 .cfi_startproc
 4643              	 
 4644              	 
 4645 0000 80B5     	 push {r7,lr}
 4646              	.LCFI174:
 4647              	 .cfi_def_cfa_offset 8
 4648              	 .cfi_offset 7,-8
 4649              	 .cfi_offset 14,-4
 4650 0002 86B0     	 sub sp,sp,#24
 4651              	.LCFI175:
 4652              	 .cfi_def_cfa_offset 32
 4653 0004 00AF     	 add r7,sp,#0
 4654              	.LCFI176:
 4655              	 .cfi_def_cfa_register 7
 4656 0006 7860     	 str r0,[r7,#4]
3167:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3168:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
3169:../Dave/Generated/FREERTOS/tasks.c **** 
3170:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3171:../Dave/Generated/FREERTOS/tasks.c ****      * called from a critical section within an ISR. */
3172:../Dave/Generated/FREERTOS/tasks.c **** 
3173:../Dave/Generated/FREERTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3174:../Dave/Generated/FREERTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3175:../Dave/Generated/FREERTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3176:../Dave/Generated/FREERTOS/tasks.c ****      *
3177:../Dave/Generated/FREERTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3178:../Dave/Generated/FREERTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3179:../Dave/Generated/FREERTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3180:../Dave/Generated/FREERTOS/tasks.c ****      *
3181:../Dave/Generated/FREERTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3182:../Dave/Generated/FREERTOS/tasks.c ****      * pxEventList is not empty. */
3183:../Dave/Generated/FREERTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
 4657              	 .loc 1 3183 0
 4658 0008 7B68     	 ldr r3,[r7,#4]
 4659 000a DB68     	 ldr r3,[r3,#12]
 4660 000c DB68     	 ldr r3,[r3,#12]
 4661 000e 3B61     	 str r3,[r7,#16]
3184:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4662              	 .loc 1 3184 0
 4663 0010 3B69     	 ldr r3,[r7,#16]
 4664 0012 002B     	 cmp r3,#0
 4665 0014 09D1     	 bne .L312
 4666              	.LBB222:
 4667              	.LBB223:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4668              	 .loc 2 197 0 discriminator 1
 4669              	
 4670 0016 4FF0FC03 	 mov r3,#252
 4671 001a 83F31188 	 msr basepri,r3
 4672 001e BFF36F8F 	 isb 
 4673 0022 BFF34F8F 	 dsb 
 4674              	
 4675              	
 4676              	 .thumb
 4677 0026 FB60     	 str r3,[r7,#12]
 4678              	.L313:
 4679              	.LBE223:
 4680              	.LBE222:
 4681              	 .loc 1 3184 0 discriminator 1
 4682 0028 FEE7     	 b .L313
 4683              	.L312:
3185:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4684              	 .loc 1 3185 0
 4685 002a 3B69     	 ldr r3,[r7,#16]
 4686 002c 1833     	 adds r3,r3,#24
 4687 002e 1846     	 mov r0,r3
 4688 0030 FFF7FEFF 	 bl uxListRemove
3186:../Dave/Generated/FREERTOS/tasks.c **** 
3187:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4689              	 .loc 1 3187 0
 4690 0034 1D4B     	 ldr r3,.L320
 4691 0036 1B68     	 ldr r3,[r3]
 4692 0038 002B     	 cmp r3,#0
 4693 003a 1DD1     	 bne .L314
3188:../Dave/Generated/FREERTOS/tasks.c ****     {
3189:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4694              	 .loc 1 3189 0
 4695 003c 3B69     	 ldr r3,[r7,#16]
 4696 003e 0433     	 adds r3,r3,#4
 4697 0040 1846     	 mov r0,r3
 4698 0042 FFF7FEFF 	 bl uxListRemove
3190:../Dave/Generated/FREERTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4699              	 .loc 1 3190 0
 4700 0046 3B69     	 ldr r3,[r7,#16]
 4701 0048 DA6A     	 ldr r2,[r3,#44]
 4702 004a 194B     	 ldr r3,.L320+4
 4703 004c 1B68     	 ldr r3,[r3]
 4704 004e 9A42     	 cmp r2,r3
 4705 0050 03D9     	 bls .L315
 4706              	 .loc 1 3190 0 is_stmt 0 discriminator 1
 4707 0052 3B69     	 ldr r3,[r7,#16]
 4708 0054 DB6A     	 ldr r3,[r3,#44]
 4709 0056 164A     	 ldr r2,.L320+4
 4710 0058 1360     	 str r3,[r2]
 4711              	.L315:
 4712              	 .loc 1 3190 0 discriminator 3
 4713 005a 3B69     	 ldr r3,[r7,#16]
 4714 005c DA6A     	 ldr r2,[r3,#44]
 4715 005e 1346     	 mov r3,r2
 4716 0060 9B00     	 lsls r3,r3,#2
 4717 0062 1344     	 add r3,r3,r2
 4718 0064 9B00     	 lsls r3,r3,#2
 4719 0066 134A     	 ldr r2,.L320+8
 4720 0068 1A44     	 add r2,r2,r3
 4721 006a 3B69     	 ldr r3,[r7,#16]
 4722 006c 0433     	 adds r3,r3,#4
 4723 006e 1046     	 mov r0,r2
 4724 0070 1946     	 mov r1,r3
 4725 0072 FFF7FEFF 	 bl vListInsertEnd
 4726 0076 05E0     	 b .L316
 4727              	.L314:
3191:../Dave/Generated/FREERTOS/tasks.c **** 
3192:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3193:../Dave/Generated/FREERTOS/tasks.c ****             {
3194:../Dave/Generated/FREERTOS/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3195:../Dave/Generated/FREERTOS/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3196:../Dave/Generated/FREERTOS/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3197:../Dave/Generated/FREERTOS/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3198:../Dave/Generated/FREERTOS/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3199:../Dave/Generated/FREERTOS/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3200:../Dave/Generated/FREERTOS/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3201:../Dave/Generated/FREERTOS/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3202:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
3203:../Dave/Generated/FREERTOS/tasks.c ****             }
3204:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3205:../Dave/Generated/FREERTOS/tasks.c ****     }
3206:../Dave/Generated/FREERTOS/tasks.c ****     else
3207:../Dave/Generated/FREERTOS/tasks.c ****     {
3208:../Dave/Generated/FREERTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3209:../Dave/Generated/FREERTOS/tasks.c ****          * pending until the scheduler is resumed. */
3210:../Dave/Generated/FREERTOS/tasks.c ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4728              	 .loc 1 3210 0 is_stmt 1
 4729 0078 3B69     	 ldr r3,[r7,#16]
 4730 007a 1833     	 adds r3,r3,#24
 4731 007c 0E48     	 ldr r0,.L320+12
 4732 007e 1946     	 mov r1,r3
 4733 0080 FFF7FEFF 	 bl vListInsertEnd
 4734              	.L316:
3211:../Dave/Generated/FREERTOS/tasks.c ****     }
3212:../Dave/Generated/FREERTOS/tasks.c **** 
3213:../Dave/Generated/FREERTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4735              	 .loc 1 3213 0
 4736 0084 3B69     	 ldr r3,[r7,#16]
 4737 0086 DA6A     	 ldr r2,[r3,#44]
 4738 0088 0C4B     	 ldr r3,.L320+16
 4739 008a 1B68     	 ldr r3,[r3]
 4740 008c DB6A     	 ldr r3,[r3,#44]
 4741 008e 9A42     	 cmp r2,r3
 4742 0090 05D9     	 bls .L317
3214:../Dave/Generated/FREERTOS/tasks.c ****     {
3215:../Dave/Generated/FREERTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3216:../Dave/Generated/FREERTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3217:../Dave/Generated/FREERTOS/tasks.c ****          * it should force a context switch now. */
3218:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pdTRUE;
 4743              	 .loc 1 3218 0
 4744 0092 0123     	 movs r3,#1
 4745 0094 7B61     	 str r3,[r7,#20]
3219:../Dave/Generated/FREERTOS/tasks.c **** 
3220:../Dave/Generated/FREERTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3221:../Dave/Generated/FREERTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3222:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 4746              	 .loc 1 3222 0
 4747 0096 0A4B     	 ldr r3,.L320+20
 4748 0098 0122     	 movs r2,#1
 4749 009a 1A60     	 str r2,[r3]
 4750 009c 01E0     	 b .L318
 4751              	.L317:
3223:../Dave/Generated/FREERTOS/tasks.c ****     }
3224:../Dave/Generated/FREERTOS/tasks.c ****     else
3225:../Dave/Generated/FREERTOS/tasks.c ****     {
3226:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pdFALSE;
 4752              	 .loc 1 3226 0
 4753 009e 0023     	 movs r3,#0
 4754 00a0 7B61     	 str r3,[r7,#20]
 4755              	.L318:
3227:../Dave/Generated/FREERTOS/tasks.c ****     }
3228:../Dave/Generated/FREERTOS/tasks.c **** 
3229:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 4756              	 .loc 1 3229 0
 4757 00a2 7B69     	 ldr r3,[r7,#20]
3230:../Dave/Generated/FREERTOS/tasks.c **** }
 4758              	 .loc 1 3230 0
 4759 00a4 1846     	 mov r0,r3
 4760 00a6 1837     	 adds r7,r7,#24
 4761              	.LCFI177:
 4762              	 .cfi_def_cfa_offset 8
 4763 00a8 BD46     	 mov sp,r7
 4764              	.LCFI178:
 4765              	 .cfi_def_cfa_register 13
 4766              	 
 4767 00aa 80BD     	 pop {r7,pc}
 4768              	.L321:
 4769              	 .align 2
 4770              	.L320:
 4771 00ac 00000000 	 .word uxSchedulerSuspended
 4772 00b0 00000000 	 .word uxTopReadyPriority
 4773 00b4 00000000 	 .word pxReadyTasksLists
 4774 00b8 00000000 	 .word xPendingReadyList
 4775 00bc 00000000 	 .word pxCurrentTCB
 4776 00c0 00000000 	 .word xYieldPending
 4777              	 .cfi_endproc
 4778              	.LFE171:
 4780              	 .section .text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4781              	 .align 2
 4782              	 .global vTaskRemoveFromUnorderedEventList
 4783              	 .thumb
 4784              	 .thumb_func
 4786              	vTaskRemoveFromUnorderedEventList:
 4787              	.LFB172:
3231:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3232:../Dave/Generated/FREERTOS/tasks.c **** 
3233:../Dave/Generated/FREERTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3234:../Dave/Generated/FREERTOS/tasks.c ****                                         const TickType_t xItemValue )
3235:../Dave/Generated/FREERTOS/tasks.c **** {
 4788              	 .loc 1 3235 0
 4789              	 .cfi_startproc
 4790              	 
 4791              	 
 4792 0000 80B5     	 push {r7,lr}
 4793              	.LCFI179:
 4794              	 .cfi_def_cfa_offset 8
 4795              	 .cfi_offset 7,-8
 4796              	 .cfi_offset 14,-4
 4797 0002 86B0     	 sub sp,sp,#24
 4798              	.LCFI180:
 4799              	 .cfi_def_cfa_offset 32
 4800 0004 00AF     	 add r7,sp,#0
 4801              	.LCFI181:
 4802              	 .cfi_def_cfa_register 7
 4803 0006 7860     	 str r0,[r7,#4]
 4804 0008 3960     	 str r1,[r7]
3236:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3237:../Dave/Generated/FREERTOS/tasks.c **** 
3238:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3239:../Dave/Generated/FREERTOS/tasks.c ****      * the event flags implementation. */
3240:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
 4805              	 .loc 1 3240 0
 4806 000a 284B     	 ldr r3,.L329
 4807 000c 1B68     	 ldr r3,[r3]
 4808 000e 002B     	 cmp r3,#0
 4809 0010 09D1     	 bne .L323
 4810              	.LBB224:
 4811              	.LBB225:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4812              	 .loc 2 197 0 discriminator 1
 4813              	
 4814 0012 4FF0FC03 	 mov r3,#252
 4815 0016 83F31188 	 msr basepri,r3
 4816 001a BFF36F8F 	 isb 
 4817 001e BFF34F8F 	 dsb 
 4818              	
 4819              	
 4820              	 .thumb
 4821 0022 3B61     	 str r3,[r7,#16]
 4822              	.L324:
 4823              	.LBE225:
 4824              	.LBE224:
 4825              	 .loc 1 3240 0 discriminator 1
 4826 0024 FEE7     	 b .L324
 4827              	.L323:
3241:../Dave/Generated/FREERTOS/tasks.c **** 
3242:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the new item value in the event list. */
3243:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4828              	 .loc 1 3243 0
 4829 0026 3B68     	 ldr r3,[r7]
 4830 0028 43F00042 	 orr r2,r3,#-2147483648
 4831 002c 7B68     	 ldr r3,[r7,#4]
 4832 002e 1A60     	 str r2,[r3]
3244:../Dave/Generated/FREERTOS/tasks.c **** 
3245:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3246:../Dave/Generated/FREERTOS/tasks.c ****      * event flags. */
3247:../Dave/Generated/FREERTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
 4833              	 .loc 1 3247 0
 4834 0030 7B68     	 ldr r3,[r7,#4]
 4835 0032 DB68     	 ldr r3,[r3,#12]
 4836 0034 7B61     	 str r3,[r7,#20]
3248:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4837              	 .loc 1 3248 0
 4838 0036 7B69     	 ldr r3,[r7,#20]
 4839 0038 002B     	 cmp r3,#0
 4840 003a 09D1     	 bne .L325
 4841              	.LBB226:
 4842              	.LBB227:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4843              	 .loc 2 197 0 discriminator 1
 4844              	
 4845 003c 4FF0FC03 	 mov r3,#252
 4846 0040 83F31188 	 msr basepri,r3
 4847 0044 BFF36F8F 	 isb 
 4848 0048 BFF34F8F 	 dsb 
 4849              	
 4850              	
 4851              	 .thumb
 4852 004c FB60     	 str r3,[r7,#12]
 4853              	.L326:
 4854              	.LBE227:
 4855              	.LBE226:
 4856              	 .loc 1 3248 0 discriminator 2
 4857 004e FEE7     	 b .L326
 4858              	.L325:
3249:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4859              	 .loc 1 3249 0
 4860 0050 7868     	 ldr r0,[r7,#4]
 4861 0052 FFF7FEFF 	 bl uxListRemove
3250:../Dave/Generated/FREERTOS/tasks.c **** 
3251:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3252:../Dave/Generated/FREERTOS/tasks.c ****         {
3253:../Dave/Generated/FREERTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3254:../Dave/Generated/FREERTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3255:../Dave/Generated/FREERTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3256:../Dave/Generated/FREERTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3257:../Dave/Generated/FREERTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3258:../Dave/Generated/FREERTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3259:../Dave/Generated/FREERTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3260:../Dave/Generated/FREERTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3261:../Dave/Generated/FREERTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3262:../Dave/Generated/FREERTOS/tasks.c ****         }
3263:../Dave/Generated/FREERTOS/tasks.c ****     #endif
3264:../Dave/Generated/FREERTOS/tasks.c **** 
3265:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3266:../Dave/Generated/FREERTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3267:../Dave/Generated/FREERTOS/tasks.c ****      * lists. */
3268:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4862              	 .loc 1 3268 0
 4863 0056 7B69     	 ldr r3,[r7,#20]
 4864 0058 0433     	 adds r3,r3,#4
 4865 005a 1846     	 mov r0,r3
 4866 005c FFF7FEFF 	 bl uxListRemove
3269:../Dave/Generated/FREERTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4867              	 .loc 1 3269 0
 4868 0060 7B69     	 ldr r3,[r7,#20]
 4869 0062 DA6A     	 ldr r2,[r3,#44]
 4870 0064 124B     	 ldr r3,.L329+4
 4871 0066 1B68     	 ldr r3,[r3]
 4872 0068 9A42     	 cmp r2,r3
 4873 006a 03D9     	 bls .L327
 4874              	 .loc 1 3269 0 is_stmt 0 discriminator 1
 4875 006c 7B69     	 ldr r3,[r7,#20]
 4876 006e DB6A     	 ldr r3,[r3,#44]
 4877 0070 0F4A     	 ldr r2,.L329+4
 4878 0072 1360     	 str r3,[r2]
 4879              	.L327:
 4880              	 .loc 1 3269 0 discriminator 3
 4881 0074 7B69     	 ldr r3,[r7,#20]
 4882 0076 DA6A     	 ldr r2,[r3,#44]
 4883 0078 1346     	 mov r3,r2
 4884 007a 9B00     	 lsls r3,r3,#2
 4885 007c 1344     	 add r3,r3,r2
 4886 007e 9B00     	 lsls r3,r3,#2
 4887 0080 0C4A     	 ldr r2,.L329+8
 4888 0082 1A44     	 add r2,r2,r3
 4889 0084 7B69     	 ldr r3,[r7,#20]
 4890 0086 0433     	 adds r3,r3,#4
 4891 0088 1046     	 mov r0,r2
 4892 008a 1946     	 mov r1,r3
 4893 008c FFF7FEFF 	 bl vListInsertEnd
3270:../Dave/Generated/FREERTOS/tasks.c **** 
3271:../Dave/Generated/FREERTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4894              	 .loc 1 3271 0 is_stmt 1 discriminator 3
 4895 0090 7B69     	 ldr r3,[r7,#20]
 4896 0092 DA6A     	 ldr r2,[r3,#44]
 4897 0094 084B     	 ldr r3,.L329+12
 4898 0096 1B68     	 ldr r3,[r3]
 4899 0098 DB6A     	 ldr r3,[r3,#44]
 4900 009a 9A42     	 cmp r2,r3
 4901 009c 02D9     	 bls .L322
3272:../Dave/Generated/FREERTOS/tasks.c ****     {
3273:../Dave/Generated/FREERTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3274:../Dave/Generated/FREERTOS/tasks.c ****          * a context switch is required.  This function is called with the
3275:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3276:../Dave/Generated/FREERTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3277:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 4902              	 .loc 1 3277 0
 4903 009e 074B     	 ldr r3,.L329+16
 4904 00a0 0122     	 movs r2,#1
 4905 00a2 1A60     	 str r2,[r3]
 4906              	.L322:
3278:../Dave/Generated/FREERTOS/tasks.c ****     }
3279:../Dave/Generated/FREERTOS/tasks.c **** }
 4907              	 .loc 1 3279 0
 4908 00a4 1837     	 adds r7,r7,#24
 4909              	.LCFI182:
 4910              	 .cfi_def_cfa_offset 8
 4911 00a6 BD46     	 mov sp,r7
 4912              	.LCFI183:
 4913              	 .cfi_def_cfa_register 13
 4914              	 
 4915 00a8 80BD     	 pop {r7,pc}
 4916              	.L330:
 4917 00aa 00BF     	 .align 2
 4918              	.L329:
 4919 00ac 00000000 	 .word uxSchedulerSuspended
 4920 00b0 00000000 	 .word uxTopReadyPriority
 4921 00b4 00000000 	 .word pxReadyTasksLists
 4922 00b8 00000000 	 .word pxCurrentTCB
 4923 00bc 00000000 	 .word xYieldPending
 4924              	 .cfi_endproc
 4925              	.LFE172:
 4927              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
 4928              	 .align 2
 4929              	 .global vTaskSetTimeOutState
 4930              	 .thumb
 4931              	 .thumb_func
 4933              	vTaskSetTimeOutState:
 4934              	.LFB173:
3280:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3281:../Dave/Generated/FREERTOS/tasks.c **** 
3282:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3283:../Dave/Generated/FREERTOS/tasks.c **** {
 4935              	 .loc 1 3283 0
 4936              	 .cfi_startproc
 4937              	 
 4938              	 
 4939 0000 80B5     	 push {r7,lr}
 4940              	.LCFI184:
 4941              	 .cfi_def_cfa_offset 8
 4942              	 .cfi_offset 7,-8
 4943              	 .cfi_offset 14,-4
 4944 0002 84B0     	 sub sp,sp,#16
 4945              	.LCFI185:
 4946              	 .cfi_def_cfa_offset 24
 4947 0004 00AF     	 add r7,sp,#0
 4948              	.LCFI186:
 4949              	 .cfi_def_cfa_register 7
 4950 0006 7860     	 str r0,[r7,#4]
3284:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTimeOut );
 4951              	 .loc 1 3284 0
 4952 0008 7B68     	 ldr r3,[r7,#4]
 4953 000a 002B     	 cmp r3,#0
 4954 000c 09D1     	 bne .L332
 4955              	.LBB228:
 4956              	.LBB229:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 4957              	 .loc 2 197 0 discriminator 1
 4958              	
 4959 000e 4FF0FC03 	 mov r3,#252
 4960 0012 83F31188 	 msr basepri,r3
 4961 0016 BFF36F8F 	 isb 
 4962 001a BFF34F8F 	 dsb 
 4963              	
 4964              	
 4965              	 .thumb
 4966 001e FB60     	 str r3,[r7,#12]
 4967              	.L333:
 4968              	.LBE229:
 4969              	.LBE228:
 4970              	 .loc 1 3284 0 discriminator 1
 4971 0020 FEE7     	 b .L333
 4972              	.L332:
3285:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 4973              	 .loc 1 3285 0
 4974 0022 FFF7FEFF 	 bl vPortEnterCritical
3286:../Dave/Generated/FREERTOS/tasks.c ****     {
3287:../Dave/Generated/FREERTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
 4975              	 .loc 1 3287 0
 4976 0026 064B     	 ldr r3,.L334
 4977 0028 1A68     	 ldr r2,[r3]
 4978 002a 7B68     	 ldr r3,[r7,#4]
 4979 002c 1A60     	 str r2,[r3]
3288:../Dave/Generated/FREERTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4980              	 .loc 1 3288 0
 4981 002e 054B     	 ldr r3,.L334+4
 4982 0030 1A68     	 ldr r2,[r3]
 4983 0032 7B68     	 ldr r3,[r7,#4]
 4984 0034 5A60     	 str r2,[r3,#4]
3289:../Dave/Generated/FREERTOS/tasks.c ****     }
3290:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 4985              	 .loc 1 3290 0
 4986 0036 FFF7FEFF 	 bl vPortExitCritical
3291:../Dave/Generated/FREERTOS/tasks.c **** }
 4987              	 .loc 1 3291 0
 4988 003a 1037     	 adds r7,r7,#16
 4989              	.LCFI187:
 4990              	 .cfi_def_cfa_offset 8
 4991 003c BD46     	 mov sp,r7
 4992              	.LCFI188:
 4993              	 .cfi_def_cfa_register 13
 4994              	 
 4995 003e 80BD     	 pop {r7,pc}
 4996              	.L335:
 4997              	 .align 2
 4998              	.L334:
 4999 0040 00000000 	 .word xNumOfOverflows
 5000 0044 00000000 	 .word xTickCount
 5001              	 .cfi_endproc
 5002              	.LFE173:
 5004              	 .section .text.vTaskInternalSetTimeOutState,"ax",%progbits
 5005              	 .align 2
 5006              	 .global vTaskInternalSetTimeOutState
 5007              	 .thumb
 5008              	 .thumb_func
 5010              	vTaskInternalSetTimeOutState:
 5011              	.LFB174:
3292:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3293:../Dave/Generated/FREERTOS/tasks.c **** 
3294:../Dave/Generated/FREERTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3295:../Dave/Generated/FREERTOS/tasks.c **** {
 5012              	 .loc 1 3295 0
 5013              	 .cfi_startproc
 5014              	 
 5015              	 
 5016              	 
 5017 0000 80B4     	 push {r7}
 5018              	.LCFI189:
 5019              	 .cfi_def_cfa_offset 4
 5020              	 .cfi_offset 7,-4
 5021 0002 83B0     	 sub sp,sp,#12
 5022              	.LCFI190:
 5023              	 .cfi_def_cfa_offset 16
 5024 0004 00AF     	 add r7,sp,#0
 5025              	.LCFI191:
 5026              	 .cfi_def_cfa_register 7
 5027 0006 7860     	 str r0,[r7,#4]
3296:../Dave/Generated/FREERTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3297:../Dave/Generated/FREERTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
 5028              	 .loc 1 3297 0
 5029 0008 064B     	 ldr r3,.L337
 5030 000a 1A68     	 ldr r2,[r3]
 5031 000c 7B68     	 ldr r3,[r7,#4]
 5032 000e 1A60     	 str r2,[r3]
3298:../Dave/Generated/FREERTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5033              	 .loc 1 3298 0
 5034 0010 054B     	 ldr r3,.L337+4
 5035 0012 1A68     	 ldr r2,[r3]
 5036 0014 7B68     	 ldr r3,[r7,#4]
 5037 0016 5A60     	 str r2,[r3,#4]
3299:../Dave/Generated/FREERTOS/tasks.c **** }
 5038              	 .loc 1 3299 0
 5039 0018 0C37     	 adds r7,r7,#12
 5040              	.LCFI192:
 5041              	 .cfi_def_cfa_offset 4
 5042 001a BD46     	 mov sp,r7
 5043              	.LCFI193:
 5044              	 .cfi_def_cfa_register 13
 5045              	 
 5046 001c 5DF8047B 	 ldr r7,[sp],#4
 5047              	.LCFI194:
 5048              	 .cfi_restore 7
 5049              	 .cfi_def_cfa_offset 0
 5050 0020 7047     	 bx lr
 5051              	.L338:
 5052 0022 00BF     	 .align 2
 5053              	.L337:
 5054 0024 00000000 	 .word xNumOfOverflows
 5055 0028 00000000 	 .word xTickCount
 5056              	 .cfi_endproc
 5057              	.LFE174:
 5059              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 5060              	 .align 2
 5061              	 .global xTaskCheckForTimeOut
 5062              	 .thumb
 5063              	 .thumb_func
 5065              	xTaskCheckForTimeOut:
 5066              	.LFB175:
3300:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3301:../Dave/Generated/FREERTOS/tasks.c **** 
3302:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3303:../Dave/Generated/FREERTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3304:../Dave/Generated/FREERTOS/tasks.c **** {
 5067              	 .loc 1 3304 0
 5068              	 .cfi_startproc
 5069              	 
 5070              	 
 5071 0000 80B5     	 push {r7,lr}
 5072              	.LCFI195:
 5073              	 .cfi_def_cfa_offset 8
 5074              	 .cfi_offset 7,-8
 5075              	 .cfi_offset 14,-4
 5076 0002 88B0     	 sub sp,sp,#32
 5077              	.LCFI196:
 5078              	 .cfi_def_cfa_offset 40
 5079 0004 00AF     	 add r7,sp,#0
 5080              	.LCFI197:
 5081              	 .cfi_def_cfa_register 7
 5082 0006 7860     	 str r0,[r7,#4]
 5083 0008 3960     	 str r1,[r7]
3305:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
3306:../Dave/Generated/FREERTOS/tasks.c **** 
3307:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTimeOut );
 5084              	 .loc 1 3307 0
 5085 000a 7B68     	 ldr r3,[r7,#4]
 5086 000c 002B     	 cmp r3,#0
 5087 000e 09D1     	 bne .L340
 5088              	.LBB230:
 5089              	.LBB231:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 5090              	 .loc 2 197 0 discriminator 1
 5091              	
 5092 0010 4FF0FC03 	 mov r3,#252
 5093 0014 83F31188 	 msr basepri,r3
 5094 0018 BFF36F8F 	 isb 
 5095 001c BFF34F8F 	 dsb 
 5096              	
 5097              	
 5098              	 .thumb
 5099 0020 3B61     	 str r3,[r7,#16]
 5100              	.L341:
 5101              	.LBE231:
 5102              	.LBE230:
 5103              	 .loc 1 3307 0 discriminator 1
 5104 0022 FEE7     	 b .L341
 5105              	.L340:
3308:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTicksToWait );
 5106              	 .loc 1 3308 0
 5107 0024 3B68     	 ldr r3,[r7]
 5108 0026 002B     	 cmp r3,#0
 5109 0028 09D1     	 bne .L342
 5110              	.LBB232:
 5111              	.LBB233:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 5112              	 .loc 2 197 0 discriminator 1
 5113              	
 5114 002a 4FF0FC03 	 mov r3,#252
 5115 002e 83F31188 	 msr basepri,r3
 5116 0032 BFF36F8F 	 isb 
 5117 0036 BFF34F8F 	 dsb 
 5118              	
 5119              	
 5120              	 .thumb
 5121 003a FB60     	 str r3,[r7,#12]
 5122              	.L343:
 5123              	.LBE233:
 5124              	.LBE232:
 5125              	 .loc 1 3308 0 discriminator 2
 5126 003c FEE7     	 b .L343
 5127              	.L342:
3309:../Dave/Generated/FREERTOS/tasks.c **** 
3310:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 5128              	 .loc 1 3310 0
 5129 003e FFF7FEFF 	 bl vPortEnterCritical
 5130              	.LBB234:
3311:../Dave/Generated/FREERTOS/tasks.c ****     {
3312:../Dave/Generated/FREERTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3313:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
 5131              	 .loc 1 3313 0
 5132 0042 264B     	 ldr r3,.L350
 5133 0044 1B68     	 ldr r3,[r3]
 5134 0046 BB61     	 str r3,[r7,#24]
3314:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5135              	 .loc 1 3314 0
 5136 0048 7B68     	 ldr r3,[r7,#4]
 5137 004a 5B68     	 ldr r3,[r3,#4]
 5138 004c BA69     	 ldr r2,[r7,#24]
 5139 004e D31A     	 subs r3,r2,r3
 5140 0050 7B61     	 str r3,[r7,#20]
3315:../Dave/Generated/FREERTOS/tasks.c **** 
3316:../Dave/Generated/FREERTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3317:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 5141              	 .loc 1 3317 0
 5142 0052 234B     	 ldr r3,.L350+4
 5143 0054 1B68     	 ldr r3,[r3]
 5144 0056 93F86E30 	 ldrb r3,[r3,#110]
 5145 005a 002B     	 cmp r3,#0
 5146 005c 07D0     	 beq .L344
3318:../Dave/Generated/FREERTOS/tasks.c ****             {
3319:../Dave/Generated/FREERTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3320:../Dave/Generated/FREERTOS/tasks.c ****                  * but has the same result. */
3321:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
 5147              	 .loc 1 3321 0
 5148 005e 204B     	 ldr r3,.L350+4
 5149 0060 1B68     	 ldr r3,[r3]
 5150 0062 0022     	 movs r2,#0
 5151 0064 83F86E20 	 strb r2,[r3,#110]
3322:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 5152              	 .loc 1 3322 0
 5153 0068 0123     	 movs r3,#1
 5154 006a FB61     	 str r3,[r7,#28]
 5155 006c 2EE0     	 b .L345
 5156              	.L344:
3323:../Dave/Generated/FREERTOS/tasks.c ****             }
3324:../Dave/Generated/FREERTOS/tasks.c ****             else
3325:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3326:../Dave/Generated/FREERTOS/tasks.c **** 
3327:../Dave/Generated/FREERTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3328:../Dave/Generated/FREERTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
 5157              	 .loc 1 3328 0
 5158 006e 3B68     	 ldr r3,[r7]
 5159 0070 1B68     	 ldr r3,[r3]
 5160 0072 B3F1FF3F 	 cmp r3,#-1
 5161 0076 02D1     	 bne .L346
3329:../Dave/Generated/FREERTOS/tasks.c ****             {
3330:../Dave/Generated/FREERTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3331:../Dave/Generated/FREERTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3332:../Dave/Generated/FREERTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3333:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFALSE;
 5162              	 .loc 1 3333 0
 5163 0078 0023     	 movs r3,#0
 5164 007a FB61     	 str r3,[r7,#28]
 5165 007c 26E0     	 b .L345
 5166              	.L346:
3334:../Dave/Generated/FREERTOS/tasks.c ****             }
3335:../Dave/Generated/FREERTOS/tasks.c ****             else
3336:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3337:../Dave/Generated/FREERTOS/tasks.c **** 
3338:../Dave/Generated/FREERTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
 5167              	 .loc 1 3338 0
 5168 007e 7B68     	 ldr r3,[r7,#4]
 5169 0080 1A68     	 ldr r2,[r3]
 5170 0082 184B     	 ldr r3,.L350+8
 5171 0084 1B68     	 ldr r3,[r3]
 5172 0086 9A42     	 cmp r2,r3
 5173 0088 0AD0     	 beq .L347
 5174              	 .loc 1 3338 0 is_stmt 0 discriminator 1
 5175 008a 7B68     	 ldr r3,[r7,#4]
 5176 008c 5A68     	 ldr r2,[r3,#4]
 5177 008e BB69     	 ldr r3,[r7,#24]
 5178 0090 9A42     	 cmp r2,r3
 5179 0092 05D8     	 bhi .L347
3339:../Dave/Generated/FREERTOS/tasks.c ****         {
3340:../Dave/Generated/FREERTOS/tasks.c ****             /* The tick count is greater than the time at which
3341:../Dave/Generated/FREERTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3342:../Dave/Generated/FREERTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3343:../Dave/Generated/FREERTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3344:../Dave/Generated/FREERTOS/tasks.c ****              * was called. */
3345:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdTRUE;
 5180              	 .loc 1 3345 0 is_stmt 1
 5181 0094 0123     	 movs r3,#1
 5182 0096 FB61     	 str r3,[r7,#28]
3346:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5183              	 .loc 1 3346 0
 5184 0098 3B68     	 ldr r3,[r7]
 5185 009a 0022     	 movs r2,#0
 5186 009c 1A60     	 str r2,[r3]
 5187 009e 15E0     	 b .L345
 5188              	.L347:
3347:../Dave/Generated/FREERTOS/tasks.c ****         }
3348:../Dave/Generated/FREERTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
 5189              	 .loc 1 3348 0
 5190 00a0 3B68     	 ldr r3,[r7]
 5191 00a2 1A68     	 ldr r2,[r3]
 5192 00a4 7B69     	 ldr r3,[r7,#20]
 5193 00a6 9A42     	 cmp r2,r3
 5194 00a8 0BD9     	 bls .L348
3349:../Dave/Generated/FREERTOS/tasks.c ****         {
3350:../Dave/Generated/FREERTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3351:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
 5195              	 .loc 1 3351 0
 5196 00aa 3B68     	 ldr r3,[r7]
 5197 00ac 1A68     	 ldr r2,[r3]
 5198 00ae 7B69     	 ldr r3,[r7,#20]
 5199 00b0 D21A     	 subs r2,r2,r3
 5200 00b2 3B68     	 ldr r3,[r7]
 5201 00b4 1A60     	 str r2,[r3]
3352:../Dave/Generated/FREERTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5202              	 .loc 1 3352 0
 5203 00b6 7868     	 ldr r0,[r7,#4]
 5204 00b8 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
3353:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdFALSE;
 5205              	 .loc 1 3353 0
 5206 00bc 0023     	 movs r3,#0
 5207 00be FB61     	 str r3,[r7,#28]
 5208 00c0 04E0     	 b .L345
 5209              	.L348:
3354:../Dave/Generated/FREERTOS/tasks.c ****         }
3355:../Dave/Generated/FREERTOS/tasks.c ****         else
3356:../Dave/Generated/FREERTOS/tasks.c ****         {
3357:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5210              	 .loc 1 3357 0
 5211 00c2 3B68     	 ldr r3,[r7]
 5212 00c4 0022     	 movs r2,#0
 5213 00c6 1A60     	 str r2,[r3]
3358:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdTRUE;
 5214              	 .loc 1 3358 0
 5215 00c8 0123     	 movs r3,#1
 5216 00ca FB61     	 str r3,[r7,#28]
 5217              	.L345:
 5218              	.LBE234:
3359:../Dave/Generated/FREERTOS/tasks.c ****         }
3360:../Dave/Generated/FREERTOS/tasks.c ****     }
3361:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 5219              	 .loc 1 3361 0
 5220 00cc FFF7FEFF 	 bl vPortExitCritical
3362:../Dave/Generated/FREERTOS/tasks.c **** 
3363:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 5221              	 .loc 1 3363 0
 5222 00d0 FB69     	 ldr r3,[r7,#28]
3364:../Dave/Generated/FREERTOS/tasks.c **** }
 5223              	 .loc 1 3364 0
 5224 00d2 1846     	 mov r0,r3
 5225 00d4 2037     	 adds r7,r7,#32
 5226              	.LCFI198:
 5227              	 .cfi_def_cfa_offset 8
 5228 00d6 BD46     	 mov sp,r7
 5229              	.LCFI199:
 5230              	 .cfi_def_cfa_register 13
 5231              	 
 5232 00d8 80BD     	 pop {r7,pc}
 5233              	.L351:
 5234 00da 00BF     	 .align 2
 5235              	.L350:
 5236 00dc 00000000 	 .word xTickCount
 5237 00e0 00000000 	 .word pxCurrentTCB
 5238 00e4 00000000 	 .word xNumOfOverflows
 5239              	 .cfi_endproc
 5240              	.LFE175:
 5242              	 .section .text.vTaskMissedYield,"ax",%progbits
 5243              	 .align 2
 5244              	 .global vTaskMissedYield
 5245              	 .thumb
 5246              	 .thumb_func
 5248              	vTaskMissedYield:
 5249              	.LFB176:
3365:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3366:../Dave/Generated/FREERTOS/tasks.c **** 
3367:../Dave/Generated/FREERTOS/tasks.c **** void vTaskMissedYield( void )
3368:../Dave/Generated/FREERTOS/tasks.c **** {
 5250              	 .loc 1 3368 0
 5251              	 .cfi_startproc
 5252              	 
 5253              	 
 5254              	 
 5255 0000 80B4     	 push {r7}
 5256              	.LCFI200:
 5257              	 .cfi_def_cfa_offset 4
 5258              	 .cfi_offset 7,-4
 5259 0002 00AF     	 add r7,sp,#0
 5260              	.LCFI201:
 5261              	 .cfi_def_cfa_register 7
3369:../Dave/Generated/FREERTOS/tasks.c ****     xYieldPending = pdTRUE;
 5262              	 .loc 1 3369 0
 5263 0004 034B     	 ldr r3,.L353
 5264 0006 0122     	 movs r2,#1
 5265 0008 1A60     	 str r2,[r3]
3370:../Dave/Generated/FREERTOS/tasks.c **** }
 5266              	 .loc 1 3370 0
 5267 000a BD46     	 mov sp,r7
 5268              	.LCFI202:
 5269              	 .cfi_def_cfa_register 13
 5270              	 
 5271 000c 5DF8047B 	 ldr r7,[sp],#4
 5272              	.LCFI203:
 5273              	 .cfi_restore 7
 5274              	 .cfi_def_cfa_offset 0
 5275 0010 7047     	 bx lr
 5276              	.L354:
 5277 0012 00BF     	 .align 2
 5278              	.L353:
 5279 0014 00000000 	 .word xYieldPending
 5280              	 .cfi_endproc
 5281              	.LFE176:
 5283              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 5284              	 .align 2
 5285              	 .global uxTaskGetTaskNumber
 5286              	 .thumb
 5287              	 .thumb_func
 5289              	uxTaskGetTaskNumber:
 5290              	.LFB177:
3371:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3372:../Dave/Generated/FREERTOS/tasks.c **** 
3373:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3374:../Dave/Generated/FREERTOS/tasks.c **** 
3375:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3376:../Dave/Generated/FREERTOS/tasks.c ****     {
 5291              	 .loc 1 3376 0
 5292              	 .cfi_startproc
 5293              	 
 5294              	 
 5295              	 
 5296 0000 80B4     	 push {r7}
 5297              	.LCFI204:
 5298              	 .cfi_def_cfa_offset 4
 5299              	 .cfi_offset 7,-4
 5300 0002 85B0     	 sub sp,sp,#20
 5301              	.LCFI205:
 5302              	 .cfi_def_cfa_offset 24
 5303 0004 00AF     	 add r7,sp,#0
 5304              	.LCFI206:
 5305              	 .cfi_def_cfa_register 7
 5306 0006 7860     	 str r0,[r7,#4]
3377:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
3378:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
3379:../Dave/Generated/FREERTOS/tasks.c **** 
3380:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask != NULL )
 5307              	 .loc 1 3380 0
 5308 0008 7B68     	 ldr r3,[r7,#4]
 5309 000a 002B     	 cmp r3,#0
 5310 000c 05D0     	 beq .L356
3381:../Dave/Generated/FREERTOS/tasks.c ****         {
3382:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = xTask;
 5311              	 .loc 1 3382 0
 5312 000e 7B68     	 ldr r3,[r7,#4]
 5313 0010 BB60     	 str r3,[r7,#8]
3383:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 5314              	 .loc 1 3383 0
 5315 0012 BB68     	 ldr r3,[r7,#8]
 5316 0014 9B6C     	 ldr r3,[r3,#72]
 5317 0016 FB60     	 str r3,[r7,#12]
 5318 0018 01E0     	 b .L357
 5319              	.L356:
3384:../Dave/Generated/FREERTOS/tasks.c ****         }
3385:../Dave/Generated/FREERTOS/tasks.c ****         else
3386:../Dave/Generated/FREERTOS/tasks.c ****         {
3387:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = 0U;
 5320              	 .loc 1 3387 0
 5321 001a 0023     	 movs r3,#0
 5322 001c FB60     	 str r3,[r7,#12]
 5323              	.L357:
3388:../Dave/Generated/FREERTOS/tasks.c ****         }
3389:../Dave/Generated/FREERTOS/tasks.c **** 
3390:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 5324              	 .loc 1 3390 0
 5325 001e FB68     	 ldr r3,[r7,#12]
3391:../Dave/Generated/FREERTOS/tasks.c ****     }
 5326              	 .loc 1 3391 0
 5327 0020 1846     	 mov r0,r3
 5328 0022 1437     	 adds r7,r7,#20
 5329              	.LCFI207:
 5330              	 .cfi_def_cfa_offset 4
 5331 0024 BD46     	 mov sp,r7
 5332              	.LCFI208:
 5333              	 .cfi_def_cfa_register 13
 5334              	 
 5335 0026 5DF8047B 	 ldr r7,[sp],#4
 5336              	.LCFI209:
 5337              	 .cfi_restore 7
 5338              	 .cfi_def_cfa_offset 0
 5339 002a 7047     	 bx lr
 5340              	 .cfi_endproc
 5341              	.LFE177:
 5343              	 .section .text.vTaskSetTaskNumber,"ax",%progbits
 5344              	 .align 2
 5345              	 .global vTaskSetTaskNumber
 5346              	 .thumb
 5347              	 .thumb_func
 5349              	vTaskSetTaskNumber:
 5350              	.LFB178:
3392:../Dave/Generated/FREERTOS/tasks.c **** 
3393:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3394:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3395:../Dave/Generated/FREERTOS/tasks.c **** 
3396:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3397:../Dave/Generated/FREERTOS/tasks.c **** 
3398:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3399:../Dave/Generated/FREERTOS/tasks.c ****                              const UBaseType_t uxHandle )
3400:../Dave/Generated/FREERTOS/tasks.c ****     {
 5351              	 .loc 1 3400 0
 5352              	 .cfi_startproc
 5353              	 
 5354              	 
 5355              	 
 5356 0000 80B4     	 push {r7}
 5357              	.LCFI210:
 5358              	 .cfi_def_cfa_offset 4
 5359              	 .cfi_offset 7,-4
 5360 0002 85B0     	 sub sp,sp,#20
 5361              	.LCFI211:
 5362              	 .cfi_def_cfa_offset 24
 5363 0004 00AF     	 add r7,sp,#0
 5364              	.LCFI212:
 5365              	 .cfi_def_cfa_register 7
 5366 0006 7860     	 str r0,[r7,#4]
 5367 0008 3960     	 str r1,[r7]
3401:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3402:../Dave/Generated/FREERTOS/tasks.c **** 
3403:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask != NULL )
 5368              	 .loc 1 3403 0
 5369 000a 7B68     	 ldr r3,[r7,#4]
 5370 000c 002B     	 cmp r3,#0
 5371 000e 04D0     	 beq .L359
3404:../Dave/Generated/FREERTOS/tasks.c ****         {
3405:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = xTask;
 5372              	 .loc 1 3405 0
 5373 0010 7B68     	 ldr r3,[r7,#4]
 5374 0012 FB60     	 str r3,[r7,#12]
3406:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 5375              	 .loc 1 3406 0
 5376 0014 FB68     	 ldr r3,[r7,#12]
 5377 0016 3A68     	 ldr r2,[r7]
 5378 0018 9A64     	 str r2,[r3,#72]
 5379              	.L359:
3407:../Dave/Generated/FREERTOS/tasks.c ****         }
3408:../Dave/Generated/FREERTOS/tasks.c ****     }
 5380              	 .loc 1 3408 0
 5381 001a 1437     	 adds r7,r7,#20
 5382              	.LCFI213:
 5383              	 .cfi_def_cfa_offset 4
 5384 001c BD46     	 mov sp,r7
 5385              	.LCFI214:
 5386              	 .cfi_def_cfa_register 13
 5387              	 
 5388 001e 5DF8047B 	 ldr r7,[sp],#4
 5389              	.LCFI215:
 5390              	 .cfi_restore 7
 5391              	 .cfi_def_cfa_offset 0
 5392 0022 7047     	 bx lr
 5393              	 .cfi_endproc
 5394              	.LFE178:
 5396              	 .section .text.prvIdleTask,"ax",%progbits
 5397              	 .align 2
 5398              	 .thumb
 5399              	 .thumb_func
 5401              	prvIdleTask:
 5402              	.LFB179:
3409:../Dave/Generated/FREERTOS/tasks.c **** 
3410:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3411:../Dave/Generated/FREERTOS/tasks.c **** 
3412:../Dave/Generated/FREERTOS/tasks.c **** /*
3413:../Dave/Generated/FREERTOS/tasks.c ****  * -----------------------------------------------------------
3414:../Dave/Generated/FREERTOS/tasks.c ****  * The Idle task.
3415:../Dave/Generated/FREERTOS/tasks.c ****  * ----------------------------------------------------------
3416:../Dave/Generated/FREERTOS/tasks.c ****  *
3417:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3418:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3419:../Dave/Generated/FREERTOS/tasks.c ****  *
3420:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3421:../Dave/Generated/FREERTOS/tasks.c ****  *
3422:../Dave/Generated/FREERTOS/tasks.c ****  */
3423:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3424:../Dave/Generated/FREERTOS/tasks.c **** {
 5403              	 .loc 1 3424 0
 5404              	 .cfi_startproc
 5405              	 
 5406              	 
 5407 0000 80B5     	 push {r7,lr}
 5408              	.LCFI216:
 5409              	 .cfi_def_cfa_offset 8
 5410              	 .cfi_offset 7,-8
 5411              	 .cfi_offset 14,-4
 5412 0002 82B0     	 sub sp,sp,#8
 5413              	.LCFI217:
 5414              	 .cfi_def_cfa_offset 16
 5415 0004 00AF     	 add r7,sp,#0
 5416              	.LCFI218:
 5417              	 .cfi_def_cfa_register 7
 5418 0006 7860     	 str r0,[r7,#4]
 5419              	.L363:
3425:../Dave/Generated/FREERTOS/tasks.c ****     /* Stop warnings. */
3426:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) pvParameters;
3427:../Dave/Generated/FREERTOS/tasks.c **** 
3428:../Dave/Generated/FREERTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3429:../Dave/Generated/FREERTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3430:../Dave/Generated/FREERTOS/tasks.c **** 
3431:../Dave/Generated/FREERTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3432:../Dave/Generated/FREERTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3433:../Dave/Generated/FREERTOS/tasks.c ****      * any. */
3434:../Dave/Generated/FREERTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3435:../Dave/Generated/FREERTOS/tasks.c **** 
3436:../Dave/Generated/FREERTOS/tasks.c ****     for( ; ; )
3437:../Dave/Generated/FREERTOS/tasks.c ****     {
3438:../Dave/Generated/FREERTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3439:../Dave/Generated/FREERTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3440:../Dave/Generated/FREERTOS/tasks.c ****         prvCheckTasksWaitingTermination();
 5420              	 .loc 1 3440 0
 5421 0008 FFF7FEFF 	 bl prvCheckTasksWaitingTermination
3441:../Dave/Generated/FREERTOS/tasks.c **** 
3442:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3443:../Dave/Generated/FREERTOS/tasks.c ****             {
3444:../Dave/Generated/FREERTOS/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3445:../Dave/Generated/FREERTOS/tasks.c ****                  * see if any other task has become available.  If we are using
3446:../Dave/Generated/FREERTOS/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3447:../Dave/Generated/FREERTOS/tasks.c ****                  * will automatically get the processor anyway. */
3448:../Dave/Generated/FREERTOS/tasks.c ****                 taskYIELD();
3449:../Dave/Generated/FREERTOS/tasks.c ****             }
3450:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3451:../Dave/Generated/FREERTOS/tasks.c **** 
3452:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3453:../Dave/Generated/FREERTOS/tasks.c ****             {
3454:../Dave/Generated/FREERTOS/tasks.c ****                 /* When using preemption tasks of equal priority will be
3455:../Dave/Generated/FREERTOS/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3456:../Dave/Generated/FREERTOS/tasks.c ****                  * to run then the idle task should yield before the end of the
3457:../Dave/Generated/FREERTOS/tasks.c ****                  * timeslice.
3458:../Dave/Generated/FREERTOS/tasks.c ****                  *
3459:../Dave/Generated/FREERTOS/tasks.c ****                  * A critical region is not required here as we are just reading from
3460:../Dave/Generated/FREERTOS/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3461:../Dave/Generated/FREERTOS/tasks.c ****                  * the ready list at the idle priority contains more than one task
3462:../Dave/Generated/FREERTOS/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3463:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
 5422              	 .loc 1 3463 0
 5423 000c 064B     	 ldr r3,.L364
 5424 000e 1B68     	 ldr r3,[r3]
 5425 0010 012B     	 cmp r3,#1
 5426 0012 07D9     	 bls .L362
3464:../Dave/Generated/FREERTOS/tasks.c ****                 {
3465:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD();
 5427              	 .loc 1 3465 0
 5428 0014 054B     	 ldr r3,.L364+4
 5429 0016 4FF08052 	 mov r2,#268435456
 5430 001a 1A60     	 str r2,[r3]
 5431              	
 5432 001c BFF34F8F 	 dsb
 5433              	
 5434              	
 5435 0020 BFF36F8F 	 isb
 5436              	
 5437              	 .thumb
 5438              	.L362:
3466:../Dave/Generated/FREERTOS/tasks.c ****                 }
3467:../Dave/Generated/FREERTOS/tasks.c ****                 else
3468:../Dave/Generated/FREERTOS/tasks.c ****                 {
3469:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3470:../Dave/Generated/FREERTOS/tasks.c ****                 }
3471:../Dave/Generated/FREERTOS/tasks.c ****             }
3472:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3473:../Dave/Generated/FREERTOS/tasks.c **** 
3474:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3475:../Dave/Generated/FREERTOS/tasks.c ****             {
3476:../Dave/Generated/FREERTOS/tasks.c ****                 extern void vApplicationIdleHook( void );
3477:../Dave/Generated/FREERTOS/tasks.c **** 
3478:../Dave/Generated/FREERTOS/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3479:../Dave/Generated/FREERTOS/tasks.c ****                  * allows the application designer to add background functionality
3480:../Dave/Generated/FREERTOS/tasks.c ****                  * without the overhead of a separate task.
3481:../Dave/Generated/FREERTOS/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3482:../Dave/Generated/FREERTOS/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3483:../Dave/Generated/FREERTOS/tasks.c ****                 vApplicationIdleHook();
3484:../Dave/Generated/FREERTOS/tasks.c ****             }
3485:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3486:../Dave/Generated/FREERTOS/tasks.c **** 
3487:../Dave/Generated/FREERTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3488:../Dave/Generated/FREERTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3489:../Dave/Generated/FREERTOS/tasks.c ****          * user defined low power mode  implementations require
3490:../Dave/Generated/FREERTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3491:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3492:../Dave/Generated/FREERTOS/tasks.c ****             {
3493:../Dave/Generated/FREERTOS/tasks.c ****                 TickType_t xExpectedIdleTime;
3494:../Dave/Generated/FREERTOS/tasks.c **** 
3495:../Dave/Generated/FREERTOS/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3496:../Dave/Generated/FREERTOS/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3497:../Dave/Generated/FREERTOS/tasks.c ****                  * test of the expected idle time is performed without the
3498:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3499:../Dave/Generated/FREERTOS/tasks.c ****                  * valid. */
3500:../Dave/Generated/FREERTOS/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3501:../Dave/Generated/FREERTOS/tasks.c **** 
3502:../Dave/Generated/FREERTOS/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3503:../Dave/Generated/FREERTOS/tasks.c ****                 {
3504:../Dave/Generated/FREERTOS/tasks.c ****                     vTaskSuspendAll();
3505:../Dave/Generated/FREERTOS/tasks.c ****                     {
3506:../Dave/Generated/FREERTOS/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3507:../Dave/Generated/FREERTOS/tasks.c ****                          * time can be sampled again, and this time its value can
3508:../Dave/Generated/FREERTOS/tasks.c ****                          * be used. */
3509:../Dave/Generated/FREERTOS/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3510:../Dave/Generated/FREERTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3511:../Dave/Generated/FREERTOS/tasks.c **** 
3512:../Dave/Generated/FREERTOS/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3513:../Dave/Generated/FREERTOS/tasks.c ****                          * if the application does not want
3514:../Dave/Generated/FREERTOS/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3515:../Dave/Generated/FREERTOS/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3516:../Dave/Generated/FREERTOS/tasks.c **** 
3517:../Dave/Generated/FREERTOS/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3518:../Dave/Generated/FREERTOS/tasks.c ****                         {
3519:../Dave/Generated/FREERTOS/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3520:../Dave/Generated/FREERTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3521:../Dave/Generated/FREERTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
3522:../Dave/Generated/FREERTOS/tasks.c ****                         }
3523:../Dave/Generated/FREERTOS/tasks.c ****                         else
3524:../Dave/Generated/FREERTOS/tasks.c ****                         {
3525:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3526:../Dave/Generated/FREERTOS/tasks.c ****                         }
3527:../Dave/Generated/FREERTOS/tasks.c ****                     }
3528:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) xTaskResumeAll();
3529:../Dave/Generated/FREERTOS/tasks.c ****                 }
3530:../Dave/Generated/FREERTOS/tasks.c ****                 else
3531:../Dave/Generated/FREERTOS/tasks.c ****                 {
3532:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3533:../Dave/Generated/FREERTOS/tasks.c ****                 }
3534:../Dave/Generated/FREERTOS/tasks.c ****             }
3535:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3536:../Dave/Generated/FREERTOS/tasks.c ****     }
 5439              	 .loc 1 3536 0
 5440 0024 F0E7     	 b .L363
 5441              	.L365:
 5442 0026 00BF     	 .align 2
 5443              	.L364:
 5444 0028 00000000 	 .word pxReadyTasksLists
 5445 002c 04ED00E0 	 .word -536810236
 5446              	 .cfi_endproc
 5447              	.LFE179:
 5449              	 .section .text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 5450              	 .align 2
 5451              	 .global vTaskSetThreadLocalStoragePointer
 5452              	 .thumb
 5453              	 .thumb_func
 5455              	vTaskSetThreadLocalStoragePointer:
 5456              	.LFB180:
3537:../Dave/Generated/FREERTOS/tasks.c **** }
3538:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3539:../Dave/Generated/FREERTOS/tasks.c **** 
3540:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3541:../Dave/Generated/FREERTOS/tasks.c **** 
3542:../Dave/Generated/FREERTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3543:../Dave/Generated/FREERTOS/tasks.c ****     {
3544:../Dave/Generated/FREERTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3545:../Dave/Generated/FREERTOS/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3546:../Dave/Generated/FREERTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3547:../Dave/Generated/FREERTOS/tasks.c **** 
3548:../Dave/Generated/FREERTOS/tasks.c ****         /* This function must be called from a critical section. */
3549:../Dave/Generated/FREERTOS/tasks.c **** 
3550:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3551:../Dave/Generated/FREERTOS/tasks.c ****         {
3552:../Dave/Generated/FREERTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3553:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3554:../Dave/Generated/FREERTOS/tasks.c ****         }
3555:../Dave/Generated/FREERTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3556:../Dave/Generated/FREERTOS/tasks.c ****         {
3557:../Dave/Generated/FREERTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3558:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3559:../Dave/Generated/FREERTOS/tasks.c ****         }
3560:../Dave/Generated/FREERTOS/tasks.c ****         else if( xPendedTicks != 0 )
3561:../Dave/Generated/FREERTOS/tasks.c ****         {
3562:../Dave/Generated/FREERTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3563:../Dave/Generated/FREERTOS/tasks.c ****              * because the scheduler is suspended. */
3564:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3565:../Dave/Generated/FREERTOS/tasks.c ****         }
3566:../Dave/Generated/FREERTOS/tasks.c ****         else
3567:../Dave/Generated/FREERTOS/tasks.c ****         {
3568:../Dave/Generated/FREERTOS/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3569:../Dave/Generated/FREERTOS/tasks.c ****              * have an infinite block time rather than actually being suspended)
3570:../Dave/Generated/FREERTOS/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3571:../Dave/Generated/FREERTOS/tasks.c ****              * interrupts. */
3572:../Dave/Generated/FREERTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3573:../Dave/Generated/FREERTOS/tasks.c ****             {
3574:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3575:../Dave/Generated/FREERTOS/tasks.c ****             }
3576:../Dave/Generated/FREERTOS/tasks.c ****             else
3577:../Dave/Generated/FREERTOS/tasks.c ****             {
3578:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3579:../Dave/Generated/FREERTOS/tasks.c ****             }
3580:../Dave/Generated/FREERTOS/tasks.c ****         }
3581:../Dave/Generated/FREERTOS/tasks.c **** 
3582:../Dave/Generated/FREERTOS/tasks.c ****         return eReturn;
3583:../Dave/Generated/FREERTOS/tasks.c ****     }
3584:../Dave/Generated/FREERTOS/tasks.c **** 
3585:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3586:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3587:../Dave/Generated/FREERTOS/tasks.c **** 
3588:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3589:../Dave/Generated/FREERTOS/tasks.c **** 
3590:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3591:../Dave/Generated/FREERTOS/tasks.c ****                                             BaseType_t xIndex,
3592:../Dave/Generated/FREERTOS/tasks.c ****                                             void * pvValue )
3593:../Dave/Generated/FREERTOS/tasks.c ****     {
 5457              	 .loc 1 3593 0
 5458              	 .cfi_startproc
 5459              	 
 5460              	 
 5461              	 
 5462 0000 80B4     	 push {r7}
 5463              	.LCFI219:
 5464              	 .cfi_def_cfa_offset 4
 5465              	 .cfi_offset 7,-4
 5466 0002 87B0     	 sub sp,sp,#28
 5467              	.LCFI220:
 5468              	 .cfi_def_cfa_offset 32
 5469 0004 00AF     	 add r7,sp,#0
 5470              	.LCFI221:
 5471              	 .cfi_def_cfa_register 7
 5472 0006 F860     	 str r0,[r7,#12]
 5473 0008 B960     	 str r1,[r7,#8]
 5474 000a 7A60     	 str r2,[r7,#4]
3594:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3595:../Dave/Generated/FREERTOS/tasks.c **** 
3596:../Dave/Generated/FREERTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5475              	 .loc 1 3596 0
 5476 000c BB68     	 ldr r3,[r7,#8]
 5477 000e 042B     	 cmp r3,#4
 5478 0010 1BDC     	 bgt .L366
3597:../Dave/Generated/FREERTOS/tasks.c ****         {
3598:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
 5479              	 .loc 1 3598 0
 5480 0012 FB68     	 ldr r3,[r7,#12]
 5481 0014 002B     	 cmp r3,#0
 5482 0016 02D1     	 bne .L368
 5483              	 .loc 1 3598 0 is_stmt 0 discriminator 1
 5484 0018 0E4B     	 ldr r3,.L372
 5485 001a 1B68     	 ldr r3,[r3]
 5486 001c 00E0     	 b .L369
 5487              	.L368:
 5488              	 .loc 1 3598 0 discriminator 2
 5489 001e FB68     	 ldr r3,[r7,#12]
 5490              	.L369:
 5491              	 .loc 1 3598 0 discriminator 4
 5492 0020 7B61     	 str r3,[r7,#20]
3599:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB != NULL );
 5493              	 .loc 1 3599 0 is_stmt 1 discriminator 4
 5494 0022 7B69     	 ldr r3,[r7,#20]
 5495 0024 002B     	 cmp r3,#0
 5496 0026 09D1     	 bne .L370
 5497              	.LBB235:
 5498              	.LBB236:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 5499              	 .loc 2 197 0 discriminator 1
 5500              	
 5501 0028 4FF0FC03 	 mov r3,#252
 5502 002c 83F31188 	 msr basepri,r3
 5503 0030 BFF36F8F 	 isb 
 5504 0034 BFF34F8F 	 dsb 
 5505              	
 5506              	
 5507              	 .thumb
 5508 0038 3B61     	 str r3,[r7,#16]
 5509              	.L371:
 5510              	.LBE236:
 5511              	.LBE235:
 5512              	 .loc 1 3599 0 discriminator 1
 5513 003a FEE7     	 b .L371
 5514              	.L370:
3600:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 5515              	 .loc 1 3600 0
 5516 003c 7A69     	 ldr r2,[r7,#20]
 5517 003e BB68     	 ldr r3,[r7,#8]
 5518 0040 1433     	 adds r3,r3,#20
 5519 0042 9B00     	 lsls r3,r3,#2
 5520 0044 1344     	 add r3,r3,r2
 5521 0046 7A68     	 ldr r2,[r7,#4]
 5522 0048 5A60     	 str r2,[r3,#4]
 5523              	.L366:
3601:../Dave/Generated/FREERTOS/tasks.c ****         }
3602:../Dave/Generated/FREERTOS/tasks.c ****     }
 5524              	 .loc 1 3602 0
 5525 004a 1C37     	 adds r7,r7,#28
 5526              	.LCFI222:
 5527              	 .cfi_def_cfa_offset 4
 5528 004c BD46     	 mov sp,r7
 5529              	.LCFI223:
 5530              	 .cfi_def_cfa_register 13
 5531              	 
 5532 004e 5DF8047B 	 ldr r7,[sp],#4
 5533              	.LCFI224:
 5534              	 .cfi_restore 7
 5535              	 .cfi_def_cfa_offset 0
 5536 0052 7047     	 bx lr
 5537              	.L373:
 5538              	 .align 2
 5539              	.L372:
 5540 0054 00000000 	 .word pxCurrentTCB
 5541              	 .cfi_endproc
 5542              	.LFE180:
 5544              	 .section .text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 5545              	 .align 2
 5546              	 .global pvTaskGetThreadLocalStoragePointer
 5547              	 .thumb
 5548              	 .thumb_func
 5550              	pvTaskGetThreadLocalStoragePointer:
 5551              	.LFB181:
3603:../Dave/Generated/FREERTOS/tasks.c **** 
3604:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3605:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3606:../Dave/Generated/FREERTOS/tasks.c **** 
3607:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3608:../Dave/Generated/FREERTOS/tasks.c **** 
3609:../Dave/Generated/FREERTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3610:../Dave/Generated/FREERTOS/tasks.c ****                                                BaseType_t xIndex )
3611:../Dave/Generated/FREERTOS/tasks.c ****     {
 5552              	 .loc 1 3611 0
 5553              	 .cfi_startproc
 5554              	 
 5555              	 
 5556              	 
 5557 0000 80B4     	 push {r7}
 5558              	.LCFI225:
 5559              	 .cfi_def_cfa_offset 4
 5560              	 .cfi_offset 7,-4
 5561 0002 85B0     	 sub sp,sp,#20
 5562              	.LCFI226:
 5563              	 .cfi_def_cfa_offset 24
 5564 0004 00AF     	 add r7,sp,#0
 5565              	.LCFI227:
 5566              	 .cfi_def_cfa_register 7
 5567 0006 7860     	 str r0,[r7,#4]
 5568 0008 3960     	 str r1,[r7]
3612:../Dave/Generated/FREERTOS/tasks.c ****         void * pvReturn = NULL;
 5569              	 .loc 1 3612 0
 5570 000a 0023     	 movs r3,#0
 5571 000c FB60     	 str r3,[r7,#12]
3613:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3614:../Dave/Generated/FREERTOS/tasks.c **** 
3615:../Dave/Generated/FREERTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5572              	 .loc 1 3615 0
 5573 000e 3B68     	 ldr r3,[r7]
 5574 0010 042B     	 cmp r3,#4
 5575 0012 0FDC     	 bgt .L375
3616:../Dave/Generated/FREERTOS/tasks.c ****         {
3617:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 5576              	 .loc 1 3617 0
 5577 0014 7B68     	 ldr r3,[r7,#4]
 5578 0016 002B     	 cmp r3,#0
 5579 0018 02D1     	 bne .L376
 5580              	 .loc 1 3617 0 is_stmt 0 discriminator 1
 5581 001a 0B4B     	 ldr r3,.L380
 5582 001c 1B68     	 ldr r3,[r3]
 5583 001e 00E0     	 b .L377
 5584              	.L376:
 5585              	 .loc 1 3617 0 discriminator 2
 5586 0020 7B68     	 ldr r3,[r7,#4]
 5587              	.L377:
 5588              	 .loc 1 3617 0 discriminator 4
 5589 0022 BB60     	 str r3,[r7,#8]
3618:../Dave/Generated/FREERTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 5590              	 .loc 1 3618 0 is_stmt 1 discriminator 4
 5591 0024 BA68     	 ldr r2,[r7,#8]
 5592 0026 3B68     	 ldr r3,[r7]
 5593 0028 1433     	 adds r3,r3,#20
 5594 002a 9B00     	 lsls r3,r3,#2
 5595 002c 1344     	 add r3,r3,r2
 5596 002e 5B68     	 ldr r3,[r3,#4]
 5597 0030 FB60     	 str r3,[r7,#12]
 5598 0032 01E0     	 b .L378
 5599              	.L375:
3619:../Dave/Generated/FREERTOS/tasks.c ****         }
3620:../Dave/Generated/FREERTOS/tasks.c ****         else
3621:../Dave/Generated/FREERTOS/tasks.c ****         {
3622:../Dave/Generated/FREERTOS/tasks.c ****             pvReturn = NULL;
 5600              	 .loc 1 3622 0
 5601 0034 0023     	 movs r3,#0
 5602 0036 FB60     	 str r3,[r7,#12]
 5603              	.L378:
3623:../Dave/Generated/FREERTOS/tasks.c ****         }
3624:../Dave/Generated/FREERTOS/tasks.c **** 
3625:../Dave/Generated/FREERTOS/tasks.c ****         return pvReturn;
 5604              	 .loc 1 3625 0
 5605 0038 FB68     	 ldr r3,[r7,#12]
3626:../Dave/Generated/FREERTOS/tasks.c ****     }
 5606              	 .loc 1 3626 0
 5607 003a 1846     	 mov r0,r3
 5608 003c 1437     	 adds r7,r7,#20
 5609              	.LCFI228:
 5610              	 .cfi_def_cfa_offset 4
 5611 003e BD46     	 mov sp,r7
 5612              	.LCFI229:
 5613              	 .cfi_def_cfa_register 13
 5614              	 
 5615 0040 5DF8047B 	 ldr r7,[sp],#4
 5616              	.LCFI230:
 5617              	 .cfi_restore 7
 5618              	 .cfi_def_cfa_offset 0
 5619 0044 7047     	 bx lr
 5620              	.L381:
 5621 0046 00BF     	 .align 2
 5622              	.L380:
 5623 0048 00000000 	 .word pxCurrentTCB
 5624              	 .cfi_endproc
 5625              	.LFE181:
 5627              	 .section .text.prvInitialiseTaskLists,"ax",%progbits
 5628              	 .align 2
 5629              	 .thumb
 5630              	 .thumb_func
 5632              	prvInitialiseTaskLists:
 5633              	.LFB182:
3627:../Dave/Generated/FREERTOS/tasks.c **** 
3628:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3629:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3630:../Dave/Generated/FREERTOS/tasks.c **** 
3631:../Dave/Generated/FREERTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3632:../Dave/Generated/FREERTOS/tasks.c **** 
3633:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3634:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3635:../Dave/Generated/FREERTOS/tasks.c ****     {
3636:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3637:../Dave/Generated/FREERTOS/tasks.c **** 
3638:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3639:../Dave/Generated/FREERTOS/tasks.c ****          * the calling task. */
3640:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3641:../Dave/Generated/FREERTOS/tasks.c **** 
3642:../Dave/Generated/FREERTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3643:../Dave/Generated/FREERTOS/tasks.c ****     }
3644:../Dave/Generated/FREERTOS/tasks.c **** 
3645:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3646:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3647:../Dave/Generated/FREERTOS/tasks.c **** 
3648:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3649:../Dave/Generated/FREERTOS/tasks.c **** {
 5634              	 .loc 1 3649 0
 5635              	 .cfi_startproc
 5636              	 
 5637              	 
 5638 0000 80B5     	 push {r7,lr}
 5639              	.LCFI231:
 5640              	 .cfi_def_cfa_offset 8
 5641              	 .cfi_offset 7,-8
 5642              	 .cfi_offset 14,-4
 5643 0002 82B0     	 sub sp,sp,#8
 5644              	.LCFI232:
 5645              	 .cfi_def_cfa_offset 16
 5646 0004 00AF     	 add r7,sp,#0
 5647              	.LCFI233:
 5648              	 .cfi_def_cfa_register 7
3650:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxPriority;
3651:../Dave/Generated/FREERTOS/tasks.c **** 
3652:../Dave/Generated/FREERTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
 5649              	 .loc 1 3652 0
 5650 0006 0023     	 movs r3,#0
 5651 0008 7B60     	 str r3,[r7,#4]
 5652 000a 0CE0     	 b .L383
 5653              	.L384:
3653:../Dave/Generated/FREERTOS/tasks.c ****     {
3654:../Dave/Generated/FREERTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5654              	 .loc 1 3654 0 discriminator 3
 5655 000c 7A68     	 ldr r2,[r7,#4]
 5656 000e 1346     	 mov r3,r2
 5657 0010 9B00     	 lsls r3,r3,#2
 5658 0012 1344     	 add r3,r3,r2
 5659 0014 9B00     	 lsls r3,r3,#2
 5660 0016 114A     	 ldr r2,.L385
 5661 0018 1344     	 add r3,r3,r2
 5662 001a 1846     	 mov r0,r3
 5663 001c FFF7FEFF 	 bl vListInitialise
3652:../Dave/Generated/FREERTOS/tasks.c ****     {
 5664              	 .loc 1 3652 0 discriminator 3
 5665 0020 7B68     	 ldr r3,[r7,#4]
 5666 0022 0133     	 adds r3,r3,#1
 5667 0024 7B60     	 str r3,[r7,#4]
 5668              	.L383:
3652:../Dave/Generated/FREERTOS/tasks.c ****     {
 5669              	 .loc 1 3652 0 is_stmt 0 discriminator 1
 5670 0026 7B68     	 ldr r3,[r7,#4]
 5671 0028 372B     	 cmp r3,#55
 5672 002a EFD9     	 bls .L384
3655:../Dave/Generated/FREERTOS/tasks.c ****     }
3656:../Dave/Generated/FREERTOS/tasks.c **** 
3657:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
 5673              	 .loc 1 3657 0 is_stmt 1
 5674 002c 0C48     	 ldr r0,.L385+4
 5675 002e FFF7FEFF 	 bl vListInitialise
3658:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 5676              	 .loc 1 3658 0
 5677 0032 0C48     	 ldr r0,.L385+8
 5678 0034 FFF7FEFF 	 bl vListInitialise
3659:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 5679              	 .loc 1 3659 0
 5680 0038 0B48     	 ldr r0,.L385+12
 5681 003a FFF7FEFF 	 bl vListInitialise
3660:../Dave/Generated/FREERTOS/tasks.c **** 
3661:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3662:../Dave/Generated/FREERTOS/tasks.c ****         {
3663:../Dave/Generated/FREERTOS/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
 5682              	 .loc 1 3663 0
 5683 003e 0B48     	 ldr r0,.L385+16
 5684 0040 FFF7FEFF 	 bl vListInitialise
3664:../Dave/Generated/FREERTOS/tasks.c ****         }
3665:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3666:../Dave/Generated/FREERTOS/tasks.c **** 
3667:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3668:../Dave/Generated/FREERTOS/tasks.c ****         {
3669:../Dave/Generated/FREERTOS/tasks.c ****             vListInitialise( &xSuspendedTaskList );
 5685              	 .loc 1 3669 0
 5686 0044 0A48     	 ldr r0,.L385+20
 5687 0046 FFF7FEFF 	 bl vListInitialise
3670:../Dave/Generated/FREERTOS/tasks.c ****         }
3671:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3672:../Dave/Generated/FREERTOS/tasks.c **** 
3673:../Dave/Generated/FREERTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3674:../Dave/Generated/FREERTOS/tasks.c ****      * using list2. */
3675:../Dave/Generated/FREERTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
 5688              	 .loc 1 3675 0
 5689 004a 0A4B     	 ldr r3,.L385+24
 5690 004c 044A     	 ldr r2,.L385+4
 5691 004e 1A60     	 str r2,[r3]
3676:../Dave/Generated/FREERTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5692              	 .loc 1 3676 0
 5693 0050 094B     	 ldr r3,.L385+28
 5694 0052 044A     	 ldr r2,.L385+8
 5695 0054 1A60     	 str r2,[r3]
3677:../Dave/Generated/FREERTOS/tasks.c **** }
 5696              	 .loc 1 3677 0
 5697 0056 0837     	 adds r7,r7,#8
 5698              	.LCFI234:
 5699              	 .cfi_def_cfa_offset 8
 5700 0058 BD46     	 mov sp,r7
 5701              	.LCFI235:
 5702              	 .cfi_def_cfa_register 13
 5703              	 
 5704 005a 80BD     	 pop {r7,pc}
 5705              	.L386:
 5706              	 .align 2
 5707              	.L385:
 5708 005c 00000000 	 .word pxReadyTasksLists
 5709 0060 00000000 	 .word xDelayedTaskList1
 5710 0064 00000000 	 .word xDelayedTaskList2
 5711 0068 00000000 	 .word xPendingReadyList
 5712 006c 00000000 	 .word xTasksWaitingTermination
 5713 0070 00000000 	 .word xSuspendedTaskList
 5714 0074 00000000 	 .word pxDelayedTaskList
 5715 0078 00000000 	 .word pxOverflowDelayedTaskList
 5716              	 .cfi_endproc
 5717              	.LFE182:
 5719              	 .section .text.prvCheckTasksWaitingTermination,"ax",%progbits
 5720              	 .align 2
 5721              	 .thumb
 5722              	 .thumb_func
 5724              	prvCheckTasksWaitingTermination:
 5725              	.LFB183:
3678:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3679:../Dave/Generated/FREERTOS/tasks.c **** 
3680:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3681:../Dave/Generated/FREERTOS/tasks.c **** {
 5726              	 .loc 1 3681 0
 5727              	 .cfi_startproc
 5728              	 
 5729              	 
 5730 0000 80B5     	 push {r7,lr}
 5731              	.LCFI236:
 5732              	 .cfi_def_cfa_offset 8
 5733              	 .cfi_offset 7,-8
 5734              	 .cfi_offset 14,-4
 5735 0002 82B0     	 sub sp,sp,#8
 5736              	.LCFI237:
 5737              	 .cfi_def_cfa_offset 16
 5738 0004 00AF     	 add r7,sp,#0
 5739              	.LCFI238:
 5740              	 .cfi_def_cfa_register 7
 5741              	.LBB237:
3682:../Dave/Generated/FREERTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3683:../Dave/Generated/FREERTOS/tasks.c **** 
3684:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3685:../Dave/Generated/FREERTOS/tasks.c ****         {
3686:../Dave/Generated/FREERTOS/tasks.c ****             TCB_t * pxTCB;
3687:../Dave/Generated/FREERTOS/tasks.c **** 
3688:../Dave/Generated/FREERTOS/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3689:../Dave/Generated/FREERTOS/tasks.c ****              * being called too often in the idle task. */
3690:../Dave/Generated/FREERTOS/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5742              	 .loc 1 3690 0
 5743 0006 19E0     	 b .L388
 5744              	.L389:
3691:../Dave/Generated/FREERTOS/tasks.c ****             {
3692:../Dave/Generated/FREERTOS/tasks.c ****                 taskENTER_CRITICAL();
 5745              	 .loc 1 3692 0
 5746 0008 FFF7FEFF 	 bl vPortEnterCritical
3693:../Dave/Generated/FREERTOS/tasks.c ****                 {
3694:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
 5747              	 .loc 1 3694 0
 5748 000c 0F4B     	 ldr r3,.L390
 5749 000e DB68     	 ldr r3,[r3,#12]
 5750 0010 DB68     	 ldr r3,[r3,#12]
 5751 0012 7B60     	 str r3,[r7,#4]
3695:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5752              	 .loc 1 3695 0
 5753 0014 7B68     	 ldr r3,[r7,#4]
 5754 0016 0433     	 adds r3,r3,#4
 5755 0018 1846     	 mov r0,r3
 5756 001a FFF7FEFF 	 bl uxListRemove
3696:../Dave/Generated/FREERTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 5757              	 .loc 1 3696 0
 5758 001e 0C4B     	 ldr r3,.L390+4
 5759 0020 1B68     	 ldr r3,[r3]
 5760 0022 013B     	 subs r3,r3,#1
 5761 0024 0A4A     	 ldr r2,.L390+4
 5762 0026 1360     	 str r3,[r2]
3697:../Dave/Generated/FREERTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 5763              	 .loc 1 3697 0
 5764 0028 0A4B     	 ldr r3,.L390+8
 5765 002a 1B68     	 ldr r3,[r3]
 5766 002c 013B     	 subs r3,r3,#1
 5767 002e 094A     	 ldr r2,.L390+8
 5768 0030 1360     	 str r3,[r2]
3698:../Dave/Generated/FREERTOS/tasks.c ****                 }
3699:../Dave/Generated/FREERTOS/tasks.c ****                 taskEXIT_CRITICAL();
 5769              	 .loc 1 3699 0
 5770 0032 FFF7FEFF 	 bl vPortExitCritical
3700:../Dave/Generated/FREERTOS/tasks.c **** 
3701:../Dave/Generated/FREERTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
 5771              	 .loc 1 3701 0
 5772 0036 7868     	 ldr r0,[r7,#4]
 5773 0038 FFF7FEFF 	 bl prvDeleteTCB
 5774              	.L388:
3690:../Dave/Generated/FREERTOS/tasks.c ****             {
 5775              	 .loc 1 3690 0
 5776 003c 054B     	 ldr r3,.L390+8
 5777 003e 1B68     	 ldr r3,[r3]
 5778 0040 002B     	 cmp r3,#0
 5779 0042 E1D1     	 bne .L389
 5780              	.LBE237:
3702:../Dave/Generated/FREERTOS/tasks.c ****             }
3703:../Dave/Generated/FREERTOS/tasks.c ****         }
3704:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3705:../Dave/Generated/FREERTOS/tasks.c **** }
 5781              	 .loc 1 3705 0
 5782 0044 0837     	 adds r7,r7,#8
 5783              	.LCFI239:
 5784              	 .cfi_def_cfa_offset 8
 5785 0046 BD46     	 mov sp,r7
 5786              	.LCFI240:
 5787              	 .cfi_def_cfa_register 13
 5788              	 
 5789 0048 80BD     	 pop {r7,pc}
 5790              	.L391:
 5791 004a 00BF     	 .align 2
 5792              	.L390:
 5793 004c 00000000 	 .word xTasksWaitingTermination
 5794 0050 00000000 	 .word uxCurrentNumberOfTasks
 5795 0054 00000000 	 .word uxDeletedTasksWaitingCleanUp
 5796              	 .cfi_endproc
 5797              	.LFE183:
 5799              	 .section .text.vTaskGetInfo,"ax",%progbits
 5800              	 .align 2
 5801              	 .global vTaskGetInfo
 5802              	 .thumb
 5803              	 .thumb_func
 5805              	vTaskGetInfo:
 5806              	.LFB184:
3706:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3707:../Dave/Generated/FREERTOS/tasks.c **** 
3708:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3709:../Dave/Generated/FREERTOS/tasks.c **** 
3710:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3711:../Dave/Generated/FREERTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3712:../Dave/Generated/FREERTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3713:../Dave/Generated/FREERTOS/tasks.c ****                        eTaskState eState )
3714:../Dave/Generated/FREERTOS/tasks.c ****     {
 5807              	 .loc 1 3714 0
 5808              	 .cfi_startproc
 5809              	 
 5810              	 
 5811 0000 80B5     	 push {r7,lr}
 5812              	.LCFI241:
 5813              	 .cfi_def_cfa_offset 8
 5814              	 .cfi_offset 7,-8
 5815              	 .cfi_offset 14,-4
 5816 0002 86B0     	 sub sp,sp,#24
 5817              	.LCFI242:
 5818              	 .cfi_def_cfa_offset 32
 5819 0004 00AF     	 add r7,sp,#0
 5820              	.LCFI243:
 5821              	 .cfi_def_cfa_register 7
 5822 0006 F860     	 str r0,[r7,#12]
 5823 0008 B960     	 str r1,[r7,#8]
 5824 000a 7A60     	 str r2,[r7,#4]
 5825 000c FB70     	 strb r3,[r7,#3]
3715:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3716:../Dave/Generated/FREERTOS/tasks.c **** 
3717:../Dave/Generated/FREERTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3718:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 5826              	 .loc 1 3718 0
 5827 000e FB68     	 ldr r3,[r7,#12]
 5828 0010 002B     	 cmp r3,#0
 5829 0012 02D1     	 bne .L393
 5830              	 .loc 1 3718 0 is_stmt 0 discriminator 1
 5831 0014 2B4B     	 ldr r3,.L402
 5832 0016 1B68     	 ldr r3,[r3]
 5833 0018 00E0     	 b .L394
 5834              	.L393:
 5835              	 .loc 1 3718 0 discriminator 2
 5836 001a FB68     	 ldr r3,[r7,#12]
 5837              	.L394:
 5838              	 .loc 1 3718 0 discriminator 4
 5839 001c 7B61     	 str r3,[r7,#20]
3719:../Dave/Generated/FREERTOS/tasks.c **** 
3720:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5840              	 .loc 1 3720 0 is_stmt 1 discriminator 4
 5841 001e BB68     	 ldr r3,[r7,#8]
 5842 0020 7A69     	 ldr r2,[r7,#20]
 5843 0022 1A60     	 str r2,[r3]
3721:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 5844              	 .loc 1 3721 0 discriminator 4
 5845 0024 7B69     	 ldr r3,[r7,#20]
 5846 0026 03F13402 	 add r2,r3,#52
 5847 002a BB68     	 ldr r3,[r7,#8]
 5848 002c 5A60     	 str r2,[r3,#4]
3722:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5849              	 .loc 1 3722 0 discriminator 4
 5850 002e 7B69     	 ldr r3,[r7,#20]
 5851 0030 DA6A     	 ldr r2,[r3,#44]
 5852 0032 BB68     	 ldr r3,[r7,#8]
 5853 0034 1A61     	 str r2,[r3,#16]
3723:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5854              	 .loc 1 3723 0 discriminator 4
 5855 0036 7B69     	 ldr r3,[r7,#20]
 5856 0038 1A6B     	 ldr r2,[r3,#48]
 5857 003a BB68     	 ldr r3,[r7,#8]
 5858 003c DA61     	 str r2,[r3,#28]
3724:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5859              	 .loc 1 3724 0 discriminator 4
 5860 003e 7B69     	 ldr r3,[r7,#20]
 5861 0040 5A6C     	 ldr r2,[r3,#68]
 5862 0042 BB68     	 ldr r3,[r7,#8]
 5863 0044 9A60     	 str r2,[r3,#8]
3725:../Dave/Generated/FREERTOS/tasks.c **** 
3726:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3727:../Dave/Generated/FREERTOS/tasks.c ****             {
3728:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5864              	 .loc 1 3728 0 discriminator 4
 5865 0046 7B69     	 ldr r3,[r7,#20]
 5866 0048 DA6C     	 ldr r2,[r3,#76]
 5867 004a BB68     	 ldr r3,[r7,#8]
 5868 004c 5A61     	 str r2,[r3,#20]
3729:../Dave/Generated/FREERTOS/tasks.c ****             }
3730:../Dave/Generated/FREERTOS/tasks.c ****         #else
3731:../Dave/Generated/FREERTOS/tasks.c ****             {
3732:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3733:../Dave/Generated/FREERTOS/tasks.c ****             }
3734:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3735:../Dave/Generated/FREERTOS/tasks.c **** 
3736:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3737:../Dave/Generated/FREERTOS/tasks.c ****             {
3738:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3739:../Dave/Generated/FREERTOS/tasks.c ****             }
3740:../Dave/Generated/FREERTOS/tasks.c ****         #else
3741:../Dave/Generated/FREERTOS/tasks.c ****             {
3742:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = 0;
 5869              	 .loc 1 3742 0 discriminator 4
 5870 004e BB68     	 ldr r3,[r7,#8]
 5871 0050 0022     	 movs r2,#0
 5872 0052 9A61     	 str r2,[r3,#24]
3743:../Dave/Generated/FREERTOS/tasks.c ****             }
3744:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3745:../Dave/Generated/FREERTOS/tasks.c **** 
3746:../Dave/Generated/FREERTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3747:../Dave/Generated/FREERTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3748:../Dave/Generated/FREERTOS/tasks.c ****          * state is just set to whatever is passed in. */
3749:../Dave/Generated/FREERTOS/tasks.c ****         if( eState != eInvalid )
 5873              	 .loc 1 3749 0 discriminator 4
 5874 0054 FB78     	 ldrb r3,[r7,#3]
 5875 0056 052B     	 cmp r3,#5
 5876 0058 1AD0     	 beq .L395
3750:../Dave/Generated/FREERTOS/tasks.c ****         {
3751:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 5877              	 .loc 1 3751 0
 5878 005a 1A4B     	 ldr r3,.L402
 5879 005c 1B68     	 ldr r3,[r3]
 5880 005e 7A69     	 ldr r2,[r7,#20]
 5881 0060 9A42     	 cmp r2,r3
 5882 0062 03D1     	 bne .L396
3752:../Dave/Generated/FREERTOS/tasks.c ****             {
3753:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
 5883              	 .loc 1 3753 0
 5884 0064 BB68     	 ldr r3,[r7,#8]
 5885 0066 0022     	 movs r2,#0
 5886 0068 1A73     	 strb r2,[r3,#12]
 5887 006a 18E0     	 b .L399
 5888              	.L396:
3754:../Dave/Generated/FREERTOS/tasks.c ****             }
3755:../Dave/Generated/FREERTOS/tasks.c ****             else
3756:../Dave/Generated/FREERTOS/tasks.c ****             {
3757:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
 5889              	 .loc 1 3757 0
 5890 006c BB68     	 ldr r3,[r7,#8]
 5891 006e FA78     	 ldrb r2,[r7,#3]
 5892 0070 1A73     	 strb r2,[r3,#12]
3758:../Dave/Generated/FREERTOS/tasks.c **** 
3759:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3760:../Dave/Generated/FREERTOS/tasks.c ****                     {
3761:../Dave/Generated/FREERTOS/tasks.c ****                         /* If the task is in the suspended list then there is a
3762:../Dave/Generated/FREERTOS/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3763:../Dave/Generated/FREERTOS/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3764:../Dave/Generated/FREERTOS/tasks.c ****                         if( eState == eSuspended )
 5893              	 .loc 1 3764 0
 5894 0072 FB78     	 ldrb r3,[r7,#3]
 5895 0074 032B     	 cmp r3,#3
 5896 0076 12D1     	 bne .L399
3765:../Dave/Generated/FREERTOS/tasks.c ****                         {
3766:../Dave/Generated/FREERTOS/tasks.c ****                             vTaskSuspendAll();
 5897              	 .loc 1 3766 0
 5898 0078 FFF7FEFF 	 bl vTaskSuspendAll
3767:../Dave/Generated/FREERTOS/tasks.c ****                             {
3768:../Dave/Generated/FREERTOS/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5899              	 .loc 1 3768 0
 5900 007c 7B69     	 ldr r3,[r7,#20]
 5901 007e 9B6A     	 ldr r3,[r3,#40]
 5902 0080 002B     	 cmp r3,#0
 5903 0082 02D0     	 beq .L398
3769:../Dave/Generated/FREERTOS/tasks.c ****                                 {
3770:../Dave/Generated/FREERTOS/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
 5904              	 .loc 1 3770 0
 5905 0084 BB68     	 ldr r3,[r7,#8]
 5906 0086 0222     	 movs r2,#2
 5907 0088 1A73     	 strb r2,[r3,#12]
 5908              	.L398:
3771:../Dave/Generated/FREERTOS/tasks.c ****                                 }
3772:../Dave/Generated/FREERTOS/tasks.c ****                             }
3773:../Dave/Generated/FREERTOS/tasks.c ****                             ( void ) xTaskResumeAll();
 5909              	 .loc 1 3773 0
 5910 008a FFF7FEFF 	 bl xTaskResumeAll
 5911 008e 06E0     	 b .L399
 5912              	.L395:
3774:../Dave/Generated/FREERTOS/tasks.c ****                         }
3775:../Dave/Generated/FREERTOS/tasks.c ****                     }
3776:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3777:../Dave/Generated/FREERTOS/tasks.c ****             }
3778:../Dave/Generated/FREERTOS/tasks.c ****         }
3779:../Dave/Generated/FREERTOS/tasks.c ****         else
3780:../Dave/Generated/FREERTOS/tasks.c ****         {
3781:../Dave/Generated/FREERTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5913              	 .loc 1 3781 0
 5914 0090 7869     	 ldr r0,[r7,#20]
 5915 0092 FFF7FEFF 	 bl eTaskGetState
 5916 0096 0346     	 mov r3,r0
 5917 0098 1A46     	 mov r2,r3
 5918 009a BB68     	 ldr r3,[r7,#8]
 5919 009c 1A73     	 strb r2,[r3,#12]
 5920              	.L399:
3782:../Dave/Generated/FREERTOS/tasks.c ****         }
3783:../Dave/Generated/FREERTOS/tasks.c **** 
3784:../Dave/Generated/FREERTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3785:../Dave/Generated/FREERTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3786:../Dave/Generated/FREERTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
 5921              	 .loc 1 3786 0
 5922 009e 7B68     	 ldr r3,[r7,#4]
 5923 00a0 002B     	 cmp r3,#0
 5924 00a2 09D0     	 beq .L400
3787:../Dave/Generated/FREERTOS/tasks.c ****         {
3788:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3789:../Dave/Generated/FREERTOS/tasks.c ****                 {
3790:../Dave/Generated/FREERTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3791:../Dave/Generated/FREERTOS/tasks.c ****                 }
3792:../Dave/Generated/FREERTOS/tasks.c ****             #else
3793:../Dave/Generated/FREERTOS/tasks.c ****                 {
3794:../Dave/Generated/FREERTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
 5925              	 .loc 1 3794 0
 5926 00a4 7B69     	 ldr r3,[r7,#20]
 5927 00a6 1B6B     	 ldr r3,[r3,#48]
 5928 00a8 1846     	 mov r0,r3
 5929 00aa FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5930 00ae 0346     	 mov r3,r0
 5931 00b0 1A46     	 mov r2,r3
 5932 00b2 BB68     	 ldr r3,[r7,#8]
 5933 00b4 1A84     	 strh r2,[r3,#32]
 5934 00b6 02E0     	 b .L392
 5935              	.L400:
3795:../Dave/Generated/FREERTOS/tasks.c ****                 }
3796:../Dave/Generated/FREERTOS/tasks.c ****             #endif
3797:../Dave/Generated/FREERTOS/tasks.c ****         }
3798:../Dave/Generated/FREERTOS/tasks.c ****         else
3799:../Dave/Generated/FREERTOS/tasks.c ****         {
3800:../Dave/Generated/FREERTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
 5936              	 .loc 1 3800 0
 5937 00b8 BB68     	 ldr r3,[r7,#8]
 5938 00ba 0022     	 movs r2,#0
 5939 00bc 1A84     	 strh r2,[r3,#32]
 5940              	.L392:
3801:../Dave/Generated/FREERTOS/tasks.c ****         }
3802:../Dave/Generated/FREERTOS/tasks.c ****     }
 5941              	 .loc 1 3802 0
 5942 00be 1837     	 adds r7,r7,#24
 5943              	.LCFI244:
 5944              	 .cfi_def_cfa_offset 8
 5945 00c0 BD46     	 mov sp,r7
 5946              	.LCFI245:
 5947              	 .cfi_def_cfa_register 13
 5948              	 
 5949 00c2 80BD     	 pop {r7,pc}
 5950              	.L403:
 5951              	 .align 2
 5952              	.L402:
 5953 00c4 00000000 	 .word pxCurrentTCB
 5954              	 .cfi_endproc
 5955              	.LFE184:
 5957              	 .section .text.prvListTasksWithinSingleList,"ax",%progbits
 5958              	 .align 2
 5959              	 .thumb
 5960              	 .thumb_func
 5962              	prvListTasksWithinSingleList:
 5963              	.LFB185:
3803:../Dave/Generated/FREERTOS/tasks.c **** 
3804:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3805:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3806:../Dave/Generated/FREERTOS/tasks.c **** 
3807:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3808:../Dave/Generated/FREERTOS/tasks.c **** 
3809:../Dave/Generated/FREERTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3810:../Dave/Generated/FREERTOS/tasks.c ****                                                      List_t * pxList,
3811:../Dave/Generated/FREERTOS/tasks.c ****                                                      eTaskState eState )
3812:../Dave/Generated/FREERTOS/tasks.c ****     {
 5964              	 .loc 1 3812 0
 5965              	 .cfi_startproc
 5966              	 
 5967              	 
 5968 0000 80B5     	 push {r7,lr}
 5969              	.LCFI246:
 5970              	 .cfi_def_cfa_offset 8
 5971              	 .cfi_offset 7,-8
 5972              	 .cfi_offset 14,-4
 5973 0002 8AB0     	 sub sp,sp,#40
 5974              	.LCFI247:
 5975              	 .cfi_def_cfa_offset 48
 5976 0004 00AF     	 add r7,sp,#0
 5977              	.LCFI248:
 5978              	 .cfi_def_cfa_register 7
 5979 0006 F860     	 str r0,[r7,#12]
 5980 0008 B960     	 str r1,[r7,#8]
 5981 000a 1346     	 mov r3,r2
 5982 000c FB71     	 strb r3,[r7,#7]
3813:../Dave/Generated/FREERTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3814:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTask = 0;
 5983              	 .loc 1 3814 0
 5984 000e 0023     	 movs r3,#0
 5985 0010 7B62     	 str r3,[r7,#36]
3815:../Dave/Generated/FREERTOS/tasks.c **** 
3816:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5986              	 .loc 1 3816 0
 5987 0012 BB68     	 ldr r3,[r7,#8]
 5988 0014 1B68     	 ldr r3,[r3]
 5989 0016 002B     	 cmp r3,#0
 5990 0018 40D0     	 beq .L405
 5991              	.LBB238:
3817:../Dave/Generated/FREERTOS/tasks.c ****         {
3818:../Dave/Generated/FREERTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 5992              	 .loc 1 3818 0
 5993 001a BB68     	 ldr r3,[r7,#8]
 5994 001c 3B62     	 str r3,[r7,#32]
 5995 001e 3B6A     	 ldr r3,[r7,#32]
 5996 0020 5B68     	 ldr r3,[r3,#4]
 5997 0022 5A68     	 ldr r2,[r3,#4]
 5998 0024 3B6A     	 ldr r3,[r7,#32]
 5999 0026 5A60     	 str r2,[r3,#4]
 6000 0028 3B6A     	 ldr r3,[r7,#32]
 6001 002a 5A68     	 ldr r2,[r3,#4]
 6002 002c 3B6A     	 ldr r3,[r7,#32]
 6003 002e 0833     	 adds r3,r3,#8
 6004 0030 9A42     	 cmp r2,r3
 6005 0032 04D1     	 bne .L406
 6006              	 .loc 1 3818 0 is_stmt 0 discriminator 1
 6007 0034 3B6A     	 ldr r3,[r7,#32]
 6008 0036 5B68     	 ldr r3,[r3,#4]
 6009 0038 5A68     	 ldr r2,[r3,#4]
 6010 003a 3B6A     	 ldr r3,[r7,#32]
 6011 003c 5A60     	 str r2,[r3,#4]
 6012              	.L406:
 6013              	 .loc 1 3818 0 discriminator 3
 6014 003e 3B6A     	 ldr r3,[r7,#32]
 6015 0040 5B68     	 ldr r3,[r3,#4]
 6016 0042 DB68     	 ldr r3,[r3,#12]
 6017 0044 FB61     	 str r3,[r7,#28]
 6018              	.L408:
 6019              	.LBE238:
 6020              	.LBB239:
3819:../Dave/Generated/FREERTOS/tasks.c **** 
3820:../Dave/Generated/FREERTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3821:../Dave/Generated/FREERTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3822:../Dave/Generated/FREERTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3823:../Dave/Generated/FREERTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3824:../Dave/Generated/FREERTOS/tasks.c ****             do
3825:../Dave/Generated/FREERTOS/tasks.c ****             {
3826:../Dave/Generated/FREERTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 6021              	 .loc 1 3826 0 is_stmt 1
 6022 0046 BB68     	 ldr r3,[r7,#8]
 6023 0048 BB61     	 str r3,[r7,#24]
 6024 004a BB69     	 ldr r3,[r7,#24]
 6025 004c 5B68     	 ldr r3,[r3,#4]
 6026 004e 5A68     	 ldr r2,[r3,#4]
 6027 0050 BB69     	 ldr r3,[r7,#24]
 6028 0052 5A60     	 str r2,[r3,#4]
 6029 0054 BB69     	 ldr r3,[r7,#24]
 6030 0056 5A68     	 ldr r2,[r3,#4]
 6031 0058 BB69     	 ldr r3,[r7,#24]
 6032 005a 0833     	 adds r3,r3,#8
 6033 005c 9A42     	 cmp r2,r3
 6034 005e 04D1     	 bne .L407
 6035              	 .loc 1 3826 0 is_stmt 0 discriminator 1
 6036 0060 BB69     	 ldr r3,[r7,#24]
 6037 0062 5B68     	 ldr r3,[r3,#4]
 6038 0064 5A68     	 ldr r2,[r3,#4]
 6039 0066 BB69     	 ldr r3,[r7,#24]
 6040 0068 5A60     	 str r2,[r3,#4]
 6041              	.L407:
 6042              	 .loc 1 3826 0 discriminator 3
 6043 006a BB69     	 ldr r3,[r7,#24]
 6044 006c 5B68     	 ldr r3,[r3,#4]
 6045 006e DB68     	 ldr r3,[r3,#12]
 6046 0070 7B61     	 str r3,[r7,#20]
 6047              	.LBE239:
3827:../Dave/Generated/FREERTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6048              	 .loc 1 3827 0 is_stmt 1 discriminator 3
 6049 0072 7A6A     	 ldr r2,[r7,#36]
 6050 0074 1346     	 mov r3,r2
 6051 0076 DB00     	 lsls r3,r3,#3
 6052 0078 1344     	 add r3,r3,r2
 6053 007a 9B00     	 lsls r3,r3,#2
 6054 007c 1A46     	 mov r2,r3
 6055 007e FB68     	 ldr r3,[r7,#12]
 6056 0080 1A44     	 add r2,r2,r3
 6057 0082 FB79     	 ldrb r3,[r7,#7]
 6058 0084 7869     	 ldr r0,[r7,#20]
 6059 0086 1146     	 mov r1,r2
 6060 0088 0122     	 movs r2,#1
 6061 008a FFF7FEFF 	 bl vTaskGetInfo
3828:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask++;
 6062              	 .loc 1 3828 0 discriminator 3
 6063 008e 7B6A     	 ldr r3,[r7,#36]
 6064 0090 0133     	 adds r3,r3,#1
 6065 0092 7B62     	 str r3,[r7,#36]
3829:../Dave/Generated/FREERTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 6066              	 .loc 1 3829 0 discriminator 3
 6067 0094 7A69     	 ldr r2,[r7,#20]
 6068 0096 FB69     	 ldr r3,[r7,#28]
 6069 0098 9A42     	 cmp r2,r3
 6070 009a D4D1     	 bne .L408
 6071              	.L405:
3830:../Dave/Generated/FREERTOS/tasks.c ****         }
3831:../Dave/Generated/FREERTOS/tasks.c ****         else
3832:../Dave/Generated/FREERTOS/tasks.c ****         {
3833:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3834:../Dave/Generated/FREERTOS/tasks.c ****         }
3835:../Dave/Generated/FREERTOS/tasks.c **** 
3836:../Dave/Generated/FREERTOS/tasks.c ****         return uxTask;
 6072              	 .loc 1 3836 0
 6073 009c 7B6A     	 ldr r3,[r7,#36]
3837:../Dave/Generated/FREERTOS/tasks.c ****     }
 6074              	 .loc 1 3837 0
 6075 009e 1846     	 mov r0,r3
 6076 00a0 2837     	 adds r7,r7,#40
 6077              	.LCFI249:
 6078              	 .cfi_def_cfa_offset 8
 6079 00a2 BD46     	 mov sp,r7
 6080              	.LCFI250:
 6081              	 .cfi_def_cfa_register 13
 6082              	 
 6083 00a4 80BD     	 pop {r7,pc}
 6084              	 .cfi_endproc
 6085              	.LFE185:
 6087 00a6 00BF     	 .section .text.prvTaskCheckFreeStackSpace,"ax",%progbits
 6088              	 .align 2
 6089              	 .thumb
 6090              	 .thumb_func
 6092              	prvTaskCheckFreeStackSpace:
 6093              	.LFB186:
3838:../Dave/Generated/FREERTOS/tasks.c **** 
3839:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3840:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3841:../Dave/Generated/FREERTOS/tasks.c **** 
3842:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3843:../Dave/Generated/FREERTOS/tasks.c **** 
3844:../Dave/Generated/FREERTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3845:../Dave/Generated/FREERTOS/tasks.c ****     {
 6094              	 .loc 1 3845 0
 6095              	 .cfi_startproc
 6096              	 
 6097              	 
 6098              	 
 6099 0000 80B4     	 push {r7}
 6100              	.LCFI251:
 6101              	 .cfi_def_cfa_offset 4
 6102              	 .cfi_offset 7,-4
 6103 0002 85B0     	 sub sp,sp,#20
 6104              	.LCFI252:
 6105              	 .cfi_def_cfa_offset 24
 6106 0004 00AF     	 add r7,sp,#0
 6107              	.LCFI253:
 6108              	 .cfi_def_cfa_register 7
 6109 0006 7860     	 str r0,[r7,#4]
3846:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulCount = 0U;
 6110              	 .loc 1 3846 0
 6111 0008 0023     	 movs r3,#0
 6112 000a FB60     	 str r3,[r7,#12]
3847:../Dave/Generated/FREERTOS/tasks.c **** 
3848:../Dave/Generated/FREERTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 6113              	 .loc 1 3848 0
 6114 000c 05E0     	 b .L411
 6115              	.L412:
3849:../Dave/Generated/FREERTOS/tasks.c ****         {
3850:../Dave/Generated/FREERTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 6116              	 .loc 1 3850 0
 6117 000e 7B68     	 ldr r3,[r7,#4]
 6118 0010 0133     	 adds r3,r3,#1
 6119 0012 7B60     	 str r3,[r7,#4]
3851:../Dave/Generated/FREERTOS/tasks.c ****             ulCount++;
 6120              	 .loc 1 3851 0
 6121 0014 FB68     	 ldr r3,[r7,#12]
 6122 0016 0133     	 adds r3,r3,#1
 6123 0018 FB60     	 str r3,[r7,#12]
 6124              	.L411:
3848:../Dave/Generated/FREERTOS/tasks.c ****         {
 6125              	 .loc 1 3848 0
 6126 001a 7B68     	 ldr r3,[r7,#4]
 6127 001c 1B78     	 ldrb r3,[r3]
 6128 001e A52B     	 cmp r3,#165
 6129 0020 F5D0     	 beq .L412
3852:../Dave/Generated/FREERTOS/tasks.c ****         }
3853:../Dave/Generated/FREERTOS/tasks.c **** 
3854:../Dave/Generated/FREERTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 6130              	 .loc 1 3854 0
 6131 0022 FB68     	 ldr r3,[r7,#12]
 6132 0024 9B08     	 lsrs r3,r3,#2
 6133 0026 FB60     	 str r3,[r7,#12]
3855:../Dave/Generated/FREERTOS/tasks.c **** 
3856:../Dave/Generated/FREERTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 6134              	 .loc 1 3856 0
 6135 0028 FB68     	 ldr r3,[r7,#12]
 6136 002a 9BB2     	 uxth r3,r3
3857:../Dave/Generated/FREERTOS/tasks.c ****     }
 6137              	 .loc 1 3857 0
 6138 002c 1846     	 mov r0,r3
 6139 002e 1437     	 adds r7,r7,#20
 6140              	.LCFI254:
 6141              	 .cfi_def_cfa_offset 4
 6142 0030 BD46     	 mov sp,r7
 6143              	.LCFI255:
 6144              	 .cfi_def_cfa_register 13
 6145              	 
 6146 0032 5DF8047B 	 ldr r7,[sp],#4
 6147              	.LCFI256:
 6148              	 .cfi_restore 7
 6149              	 .cfi_def_cfa_offset 0
 6150 0036 7047     	 bx lr
 6151              	 .cfi_endproc
 6152              	.LFE186:
 6154              	 .section .text.uxTaskGetStackHighWaterMark,"ax",%progbits
 6155              	 .align 2
 6156              	 .global uxTaskGetStackHighWaterMark
 6157              	 .thumb
 6158              	 .thumb_func
 6160              	uxTaskGetStackHighWaterMark:
 6161              	.LFB187:
3858:../Dave/Generated/FREERTOS/tasks.c **** 
3859:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3860:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3861:../Dave/Generated/FREERTOS/tasks.c **** 
3862:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3863:../Dave/Generated/FREERTOS/tasks.c **** 
3864:../Dave/Generated/FREERTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3865:../Dave/Generated/FREERTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3866:../Dave/Generated/FREERTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3867:../Dave/Generated/FREERTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3868:../Dave/Generated/FREERTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3869:../Dave/Generated/FREERTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3870:../Dave/Generated/FREERTOS/tasks.c ****     {
3871:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3872:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t * pucEndOfStack;
3873:../Dave/Generated/FREERTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3874:../Dave/Generated/FREERTOS/tasks.c **** 
3875:../Dave/Generated/FREERTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3876:../Dave/Generated/FREERTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3877:../Dave/Generated/FREERTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3878:../Dave/Generated/FREERTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3879:../Dave/Generated/FREERTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3880:../Dave/Generated/FREERTOS/tasks.c ****          * type. */
3881:../Dave/Generated/FREERTOS/tasks.c **** 
3882:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3883:../Dave/Generated/FREERTOS/tasks.c **** 
3884:../Dave/Generated/FREERTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3885:../Dave/Generated/FREERTOS/tasks.c ****             {
3886:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3887:../Dave/Generated/FREERTOS/tasks.c ****             }
3888:../Dave/Generated/FREERTOS/tasks.c ****         #else
3889:../Dave/Generated/FREERTOS/tasks.c ****             {
3890:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3891:../Dave/Generated/FREERTOS/tasks.c ****             }
3892:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3893:../Dave/Generated/FREERTOS/tasks.c **** 
3894:../Dave/Generated/FREERTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3895:../Dave/Generated/FREERTOS/tasks.c **** 
3896:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
3897:../Dave/Generated/FREERTOS/tasks.c ****     }
3898:../Dave/Generated/FREERTOS/tasks.c **** 
3899:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3900:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3901:../Dave/Generated/FREERTOS/tasks.c **** 
3902:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3903:../Dave/Generated/FREERTOS/tasks.c **** 
3904:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3905:../Dave/Generated/FREERTOS/tasks.c ****     {
 6162              	 .loc 1 3905 0
 6163              	 .cfi_startproc
 6164              	 
 6165              	 
 6166 0000 80B5     	 push {r7,lr}
 6167              	.LCFI257:
 6168              	 .cfi_def_cfa_offset 8
 6169              	 .cfi_offset 7,-8
 6170              	 .cfi_offset 14,-4
 6171 0002 86B0     	 sub sp,sp,#24
 6172              	.LCFI258:
 6173              	 .cfi_def_cfa_offset 32
 6174 0004 00AF     	 add r7,sp,#0
 6175              	.LCFI259:
 6176              	 .cfi_def_cfa_register 7
 6177 0006 7860     	 str r0,[r7,#4]
3906:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3907:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t * pucEndOfStack;
3908:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
3909:../Dave/Generated/FREERTOS/tasks.c **** 
3910:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 6178              	 .loc 1 3910 0
 6179 0008 7B68     	 ldr r3,[r7,#4]
 6180 000a 002B     	 cmp r3,#0
 6181 000c 02D1     	 bne .L415
 6182              	 .loc 1 3910 0 is_stmt 0 discriminator 1
 6183 000e 094B     	 ldr r3,.L418
 6184 0010 1B68     	 ldr r3,[r3]
 6185 0012 00E0     	 b .L416
 6186              	.L415:
 6187              	 .loc 1 3910 0 discriminator 2
 6188 0014 7B68     	 ldr r3,[r7,#4]
 6189              	.L416:
 6190              	 .loc 1 3910 0 discriminator 4
 6191 0016 7B61     	 str r3,[r7,#20]
3911:../Dave/Generated/FREERTOS/tasks.c **** 
3912:../Dave/Generated/FREERTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3913:../Dave/Generated/FREERTOS/tasks.c ****             {
3914:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 6192              	 .loc 1 3914 0 is_stmt 1 discriminator 4
 6193 0018 7B69     	 ldr r3,[r7,#20]
 6194 001a 1B6B     	 ldr r3,[r3,#48]
 6195 001c 3B61     	 str r3,[r7,#16]
3915:../Dave/Generated/FREERTOS/tasks.c ****             }
3916:../Dave/Generated/FREERTOS/tasks.c ****         #else
3917:../Dave/Generated/FREERTOS/tasks.c ****             {
3918:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3919:../Dave/Generated/FREERTOS/tasks.c ****             }
3920:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3921:../Dave/Generated/FREERTOS/tasks.c **** 
3922:../Dave/Generated/FREERTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 6196              	 .loc 1 3922 0 discriminator 4
 6197 001e 3869     	 ldr r0,[r7,#16]
 6198 0020 FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 6199 0024 0346     	 mov r3,r0
 6200 0026 FB60     	 str r3,[r7,#12]
3923:../Dave/Generated/FREERTOS/tasks.c **** 
3924:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 6201              	 .loc 1 3924 0 discriminator 4
 6202 0028 FB68     	 ldr r3,[r7,#12]
3925:../Dave/Generated/FREERTOS/tasks.c ****     }
 6203              	 .loc 1 3925 0 discriminator 4
 6204 002a 1846     	 mov r0,r3
 6205 002c 1837     	 adds r7,r7,#24
 6206              	.LCFI260:
 6207              	 .cfi_def_cfa_offset 8
 6208 002e BD46     	 mov sp,r7
 6209              	.LCFI261:
 6210              	 .cfi_def_cfa_register 13
 6211              	 
 6212 0030 80BD     	 pop {r7,pc}
 6213              	.L419:
 6214 0032 00BF     	 .align 2
 6215              	.L418:
 6216 0034 00000000 	 .word pxCurrentTCB
 6217              	 .cfi_endproc
 6218              	.LFE187:
 6220              	 .section .text.prvDeleteTCB,"ax",%progbits
 6221              	 .align 2
 6222              	 .thumb
 6223              	 .thumb_func
 6225              	prvDeleteTCB:
 6226              	.LFB188:
3926:../Dave/Generated/FREERTOS/tasks.c **** 
3927:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3928:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3929:../Dave/Generated/FREERTOS/tasks.c **** 
3930:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3931:../Dave/Generated/FREERTOS/tasks.c **** 
3932:../Dave/Generated/FREERTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3933:../Dave/Generated/FREERTOS/tasks.c ****     {
 6227              	 .loc 1 3933 0
 6228              	 .cfi_startproc
 6229              	 
 6230              	 
 6231 0000 80B5     	 push {r7,lr}
 6232              	.LCFI262:
 6233              	 .cfi_def_cfa_offset 8
 6234              	 .cfi_offset 7,-8
 6235              	 .cfi_offset 14,-4
 6236 0002 84B0     	 sub sp,sp,#16
 6237              	.LCFI263:
 6238              	 .cfi_def_cfa_offset 24
 6239 0004 00AF     	 add r7,sp,#0
 6240              	.LCFI264:
 6241              	 .cfi_def_cfa_register 7
 6242 0006 7860     	 str r0,[r7,#4]
3934:../Dave/Generated/FREERTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3935:../Dave/Generated/FREERTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3936:../Dave/Generated/FREERTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3937:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3938:../Dave/Generated/FREERTOS/tasks.c **** 
3939:../Dave/Generated/FREERTOS/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3940:../Dave/Generated/FREERTOS/tasks.c ****          * to the task to free any memory allocated at the application level.
3941:../Dave/Generated/FREERTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3942:../Dave/Generated/FREERTOS/tasks.c ****          * for additional information. */
3943:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3944:../Dave/Generated/FREERTOS/tasks.c ****             {
3945:../Dave/Generated/FREERTOS/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3946:../Dave/Generated/FREERTOS/tasks.c ****             }
3947:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3948:../Dave/Generated/FREERTOS/tasks.c **** 
3949:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3950:../Dave/Generated/FREERTOS/tasks.c ****             {
3951:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3952:../Dave/Generated/FREERTOS/tasks.c ****                  * the stack and TCB. */
3953:../Dave/Generated/FREERTOS/tasks.c ****                 vPortFree( pxTCB->pxStack );
3954:../Dave/Generated/FREERTOS/tasks.c ****                 vPortFree( pxTCB );
3955:../Dave/Generated/FREERTOS/tasks.c ****             }
3956:../Dave/Generated/FREERTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3957:../Dave/Generated/FREERTOS/tasks.c ****             {
3958:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3959:../Dave/Generated/FREERTOS/tasks.c ****                  * check what was statically allocated before trying to free the
3960:../Dave/Generated/FREERTOS/tasks.c ****                  * memory. */
3961:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 6243              	 .loc 1 3961 0
 6244 0008 7B68     	 ldr r3,[r7,#4]
 6245 000a 93F86D30 	 ldrb r3,[r3,#109]
 6246 000e 002B     	 cmp r3,#0
 6247 0010 08D1     	 bne .L421
3962:../Dave/Generated/FREERTOS/tasks.c ****                 {
3963:../Dave/Generated/FREERTOS/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3964:../Dave/Generated/FREERTOS/tasks.c ****                      * must be freed. */
3965:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB->pxStack );
 6248              	 .loc 1 3965 0
 6249 0012 7B68     	 ldr r3,[r7,#4]
 6250 0014 1B6B     	 ldr r3,[r3,#48]
 6251 0016 1846     	 mov r0,r3
 6252 0018 FFF7FEFF 	 bl vPortFree
3966:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB );
 6253              	 .loc 1 3966 0
 6254 001c 7868     	 ldr r0,[r7,#4]
 6255 001e FFF7FEFF 	 bl vPortFree
 6256 0022 17E0     	 b .L420
 6257              	.L421:
3967:../Dave/Generated/FREERTOS/tasks.c ****                 }
3968:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 6258              	 .loc 1 3968 0
 6259 0024 7B68     	 ldr r3,[r7,#4]
 6260 0026 93F86D30 	 ldrb r3,[r3,#109]
 6261 002a 012B     	 cmp r3,#1
 6262 002c 03D1     	 bne .L423
3969:../Dave/Generated/FREERTOS/tasks.c ****                 {
3970:../Dave/Generated/FREERTOS/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3971:../Dave/Generated/FREERTOS/tasks.c ****                      * only memory that must be freed. */
3972:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB );
 6263              	 .loc 1 3972 0
 6264 002e 7868     	 ldr r0,[r7,#4]
 6265 0030 FFF7FEFF 	 bl vPortFree
 6266 0034 0EE0     	 b .L420
 6267              	.L423:
3973:../Dave/Generated/FREERTOS/tasks.c ****                 }
3974:../Dave/Generated/FREERTOS/tasks.c ****                 else
3975:../Dave/Generated/FREERTOS/tasks.c ****                 {
3976:../Dave/Generated/FREERTOS/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3977:../Dave/Generated/FREERTOS/tasks.c ****                      * nothing needs to be freed. */
3978:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
 6268              	 .loc 1 3978 0
 6269 0036 7B68     	 ldr r3,[r7,#4]
 6270 0038 93F86D30 	 ldrb r3,[r3,#109]
 6271 003c 022B     	 cmp r3,#2
 6272 003e 09D0     	 beq .L420
 6273              	.LBB240:
 6274              	.LBB241:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6275              	 .loc 2 197 0 discriminator 1
 6276              	
 6277 0040 4FF0FC03 	 mov r3,#252
 6278 0044 83F31188 	 msr basepri,r3
 6279 0048 BFF36F8F 	 isb 
 6280 004c BFF34F8F 	 dsb 
 6281              	
 6282              	
 6283              	 .thumb
 6284 0050 FB60     	 str r3,[r7,#12]
 6285              	.L424:
 6286              	.LBE241:
 6287              	.LBE240:
 6288              	 .loc 1 3978 0 discriminator 1
 6289 0052 FEE7     	 b .L424
 6290              	.L420:
3979:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3980:../Dave/Generated/FREERTOS/tasks.c ****                 }
3981:../Dave/Generated/FREERTOS/tasks.c ****             }
3982:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3983:../Dave/Generated/FREERTOS/tasks.c ****     }
 6291              	 .loc 1 3983 0
 6292 0054 1037     	 adds r7,r7,#16
 6293              	.LCFI265:
 6294              	 .cfi_def_cfa_offset 8
 6295 0056 BD46     	 mov sp,r7
 6296              	.LCFI266:
 6297              	 .cfi_def_cfa_register 13
 6298              	 
 6299 0058 80BD     	 pop {r7,pc}
 6300              	 .cfi_endproc
 6301              	.LFE188:
 6303 005a 00BF     	 .section .text.prvResetNextTaskUnblockTime,"ax",%progbits
 6304              	 .align 2
 6305              	 .thumb
 6306              	 .thumb_func
 6308              	prvResetNextTaskUnblockTime:
 6309              	.LFB189:
3984:../Dave/Generated/FREERTOS/tasks.c **** 
3985:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3986:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3987:../Dave/Generated/FREERTOS/tasks.c **** 
3988:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3989:../Dave/Generated/FREERTOS/tasks.c **** {
 6310              	 .loc 1 3989 0
 6311              	 .cfi_startproc
 6312              	 
 6313              	 
 6314              	 
 6315 0000 80B4     	 push {r7}
 6316              	.LCFI267:
 6317              	 .cfi_def_cfa_offset 4
 6318              	 .cfi_offset 7,-4
 6319 0002 00AF     	 add r7,sp,#0
 6320              	.LCFI268:
 6321              	 .cfi_def_cfa_register 7
3990:../Dave/Generated/FREERTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6322              	 .loc 1 3990 0
 6323 0004 094B     	 ldr r3,.L428
 6324 0006 1B68     	 ldr r3,[r3]
 6325 0008 1B68     	 ldr r3,[r3]
 6326 000a 002B     	 cmp r3,#0
 6327 000c 04D1     	 bne .L426
3991:../Dave/Generated/FREERTOS/tasks.c ****     {
3992:../Dave/Generated/FREERTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3993:../Dave/Generated/FREERTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
3994:../Dave/Generated/FREERTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3995:../Dave/Generated/FREERTOS/tasks.c ****          * there is an item in the delayed list. */
3996:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 6328              	 .loc 1 3996 0
 6329 000e 084B     	 ldr r3,.L428+4
 6330 0010 4FF0FF32 	 mov r2,#-1
 6331 0014 1A60     	 str r2,[r3]
 6332 0016 05E0     	 b .L425
 6333              	.L426:
3997:../Dave/Generated/FREERTOS/tasks.c ****     }
3998:../Dave/Generated/FREERTOS/tasks.c ****     else
3999:../Dave/Generated/FREERTOS/tasks.c ****     {
4000:../Dave/Generated/FREERTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4001:../Dave/Generated/FREERTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4002:../Dave/Generated/FREERTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4003:../Dave/Generated/FREERTOS/tasks.c ****          * from the Blocked state. */
4004:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 6334              	 .loc 1 4004 0
 6335 0018 044B     	 ldr r3,.L428
 6336 001a 1B68     	 ldr r3,[r3]
 6337 001c DB68     	 ldr r3,[r3,#12]
 6338 001e 1B68     	 ldr r3,[r3]
 6339 0020 034A     	 ldr r2,.L428+4
 6340 0022 1360     	 str r3,[r2]
 6341              	.L425:
4005:../Dave/Generated/FREERTOS/tasks.c ****     }
4006:../Dave/Generated/FREERTOS/tasks.c **** }
 6342              	 .loc 1 4006 0
 6343 0024 BD46     	 mov sp,r7
 6344              	.LCFI269:
 6345              	 .cfi_def_cfa_register 13
 6346              	 
 6347 0026 5DF8047B 	 ldr r7,[sp],#4
 6348              	.LCFI270:
 6349              	 .cfi_restore 7
 6350              	 .cfi_def_cfa_offset 0
 6351 002a 7047     	 bx lr
 6352              	.L429:
 6353              	 .align 2
 6354              	.L428:
 6355 002c 00000000 	 .word pxDelayedTaskList
 6356 0030 00000000 	 .word xNextTaskUnblockTime
 6357              	 .cfi_endproc
 6358              	.LFE189:
 6360              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6361              	 .align 2
 6362              	 .global xTaskGetCurrentTaskHandle
 6363              	 .thumb
 6364              	 .thumb_func
 6366              	xTaskGetCurrentTaskHandle:
 6367              	.LFB190:
4007:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4008:../Dave/Generated/FREERTOS/tasks.c **** 
4009:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4010:../Dave/Generated/FREERTOS/tasks.c **** 
4011:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4012:../Dave/Generated/FREERTOS/tasks.c ****     {
 6368              	 .loc 1 4012 0
 6369              	 .cfi_startproc
 6370              	 
 6371              	 
 6372              	 
 6373 0000 80B4     	 push {r7}
 6374              	.LCFI271:
 6375              	 .cfi_def_cfa_offset 4
 6376              	 .cfi_offset 7,-4
 6377 0002 83B0     	 sub sp,sp,#12
 6378              	.LCFI272:
 6379              	 .cfi_def_cfa_offset 16
 6380 0004 00AF     	 add r7,sp,#0
 6381              	.LCFI273:
 6382              	 .cfi_def_cfa_register 7
4013:../Dave/Generated/FREERTOS/tasks.c ****         TaskHandle_t xReturn;
4014:../Dave/Generated/FREERTOS/tasks.c **** 
4015:../Dave/Generated/FREERTOS/tasks.c ****         /* A critical section is not required as this is not called from
4016:../Dave/Generated/FREERTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4017:../Dave/Generated/FREERTOS/tasks.c ****          * individual execution thread. */
4018:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pxCurrentTCB;
 6383              	 .loc 1 4018 0
 6384 0006 054B     	 ldr r3,.L432
 6385 0008 1B68     	 ldr r3,[r3]
 6386 000a 7B60     	 str r3,[r7,#4]
4019:../Dave/Generated/FREERTOS/tasks.c **** 
4020:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6387              	 .loc 1 4020 0
 6388 000c 7B68     	 ldr r3,[r7,#4]
4021:../Dave/Generated/FREERTOS/tasks.c ****     }
 6389              	 .loc 1 4021 0
 6390 000e 1846     	 mov r0,r3
 6391 0010 0C37     	 adds r7,r7,#12
 6392              	.LCFI274:
 6393              	 .cfi_def_cfa_offset 4
 6394 0012 BD46     	 mov sp,r7
 6395              	.LCFI275:
 6396              	 .cfi_def_cfa_register 13
 6397              	 
 6398 0014 5DF8047B 	 ldr r7,[sp],#4
 6399              	.LCFI276:
 6400              	 .cfi_restore 7
 6401              	 .cfi_def_cfa_offset 0
 6402 0018 7047     	 bx lr
 6403              	.L433:
 6404 001a 00BF     	 .align 2
 6405              	.L432:
 6406 001c 00000000 	 .word pxCurrentTCB
 6407              	 .cfi_endproc
 6408              	.LFE190:
 6410              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 6411              	 .align 2
 6412              	 .global xTaskGetSchedulerState
 6413              	 .thumb
 6414              	 .thumb_func
 6416              	xTaskGetSchedulerState:
 6417              	.LFB191:
4022:../Dave/Generated/FREERTOS/tasks.c **** 
4023:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4024:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4025:../Dave/Generated/FREERTOS/tasks.c **** 
4026:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4027:../Dave/Generated/FREERTOS/tasks.c **** 
4028:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4029:../Dave/Generated/FREERTOS/tasks.c ****     {
 6418              	 .loc 1 4029 0
 6419              	 .cfi_startproc
 6420              	 
 6421              	 
 6422              	 
 6423 0000 80B4     	 push {r7}
 6424              	.LCFI277:
 6425              	 .cfi_def_cfa_offset 4
 6426              	 .cfi_offset 7,-4
 6427 0002 83B0     	 sub sp,sp,#12
 6428              	.LCFI278:
 6429              	 .cfi_def_cfa_offset 16
 6430 0004 00AF     	 add r7,sp,#0
 6431              	.LCFI279:
 6432              	 .cfi_def_cfa_register 7
4030:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
4031:../Dave/Generated/FREERTOS/tasks.c **** 
4032:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
 6433              	 .loc 1 4032 0
 6434 0006 0B4B     	 ldr r3,.L439
 6435 0008 1B68     	 ldr r3,[r3]
 6436 000a 002B     	 cmp r3,#0
 6437 000c 02D1     	 bne .L435
4033:../Dave/Generated/FREERTOS/tasks.c ****         {
4034:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
 6438              	 .loc 1 4034 0
 6439 000e 0123     	 movs r3,#1
 6440 0010 7B60     	 str r3,[r7,#4]
 6441 0012 08E0     	 b .L436
 6442              	.L435:
4035:../Dave/Generated/FREERTOS/tasks.c ****         }
4036:../Dave/Generated/FREERTOS/tasks.c ****         else
4037:../Dave/Generated/FREERTOS/tasks.c ****         {
4038:../Dave/Generated/FREERTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6443              	 .loc 1 4038 0
 6444 0014 084B     	 ldr r3,.L439+4
 6445 0016 1B68     	 ldr r3,[r3]
 6446 0018 002B     	 cmp r3,#0
 6447 001a 02D1     	 bne .L437
4039:../Dave/Generated/FREERTOS/tasks.c ****             {
4040:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
 6448              	 .loc 1 4040 0
 6449 001c 0223     	 movs r3,#2
 6450 001e 7B60     	 str r3,[r7,#4]
 6451 0020 01E0     	 b .L436
 6452              	.L437:
4041:../Dave/Generated/FREERTOS/tasks.c ****             }
4042:../Dave/Generated/FREERTOS/tasks.c ****             else
4043:../Dave/Generated/FREERTOS/tasks.c ****             {
4044:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
 6453              	 .loc 1 4044 0
 6454 0022 0023     	 movs r3,#0
 6455 0024 7B60     	 str r3,[r7,#4]
 6456              	.L436:
4045:../Dave/Generated/FREERTOS/tasks.c ****             }
4046:../Dave/Generated/FREERTOS/tasks.c ****         }
4047:../Dave/Generated/FREERTOS/tasks.c **** 
4048:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6457              	 .loc 1 4048 0
 6458 0026 7B68     	 ldr r3,[r7,#4]
4049:../Dave/Generated/FREERTOS/tasks.c ****     }
 6459              	 .loc 1 4049 0
 6460 0028 1846     	 mov r0,r3
 6461 002a 0C37     	 adds r7,r7,#12
 6462              	.LCFI280:
 6463              	 .cfi_def_cfa_offset 4
 6464 002c BD46     	 mov sp,r7
 6465              	.LCFI281:
 6466              	 .cfi_def_cfa_register 13
 6467              	 
 6468 002e 5DF8047B 	 ldr r7,[sp],#4
 6469              	.LCFI282:
 6470              	 .cfi_restore 7
 6471              	 .cfi_def_cfa_offset 0
 6472 0032 7047     	 bx lr
 6473              	.L440:
 6474              	 .align 2
 6475              	.L439:
 6476 0034 00000000 	 .word xSchedulerRunning
 6477 0038 00000000 	 .word uxSchedulerSuspended
 6478              	 .cfi_endproc
 6479              	.LFE191:
 6481              	 .section .text.xTaskPriorityInherit,"ax",%progbits
 6482              	 .align 2
 6483              	 .global xTaskPriorityInherit
 6484              	 .thumb
 6485              	 .thumb_func
 6487              	xTaskPriorityInherit:
 6488              	.LFB192:
4050:../Dave/Generated/FREERTOS/tasks.c **** 
4051:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4052:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4053:../Dave/Generated/FREERTOS/tasks.c **** 
4054:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4055:../Dave/Generated/FREERTOS/tasks.c **** 
4056:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4057:../Dave/Generated/FREERTOS/tasks.c ****     {
 6489              	 .loc 1 4057 0
 6490              	 .cfi_startproc
 6491              	 
 6492              	 
 6493 0000 80B5     	 push {r7,lr}
 6494              	.LCFI283:
 6495              	 .cfi_def_cfa_offset 8
 6496              	 .cfi_offset 7,-8
 6497              	 .cfi_offset 14,-4
 6498 0002 84B0     	 sub sp,sp,#16
 6499              	.LCFI284:
 6500              	 .cfi_def_cfa_offset 24
 6501 0004 00AF     	 add r7,sp,#0
 6502              	.LCFI285:
 6503              	 .cfi_def_cfa_register 7
 6504 0006 7860     	 str r0,[r7,#4]
4058:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6505              	 .loc 1 4058 0
 6506 0008 7B68     	 ldr r3,[r7,#4]
 6507 000a BB60     	 str r3,[r7,#8]
4059:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6508              	 .loc 1 4059 0
 6509 000c 0023     	 movs r3,#0
 6510 000e FB60     	 str r3,[r7,#12]
4060:../Dave/Generated/FREERTOS/tasks.c **** 
4061:../Dave/Generated/FREERTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4062:../Dave/Generated/FREERTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4063:../Dave/Generated/FREERTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4064:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6511              	 .loc 1 4064 0
 6512 0010 7B68     	 ldr r3,[r7,#4]
 6513 0012 002B     	 cmp r3,#0
 6514 0014 51D0     	 beq .L442
4065:../Dave/Generated/FREERTOS/tasks.c ****         {
4066:../Dave/Generated/FREERTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4067:../Dave/Generated/FREERTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4068:../Dave/Generated/FREERTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4069:../Dave/Generated/FREERTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6515              	 .loc 1 4069 0
 6516 0016 BB68     	 ldr r3,[r7,#8]
 6517 0018 DA6A     	 ldr r2,[r3,#44]
 6518 001a 2A4B     	 ldr r3,.L449
 6519 001c 1B68     	 ldr r3,[r3]
 6520 001e DB6A     	 ldr r3,[r3,#44]
 6521 0020 9A42     	 cmp r2,r3
 6522 0022 41D2     	 bcs .L443
4070:../Dave/Generated/FREERTOS/tasks.c ****             {
4071:../Dave/Generated/FREERTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4072:../Dave/Generated/FREERTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4073:../Dave/Generated/FREERTOS/tasks.c ****                  * not being used for anything else. */
4074:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
 6523              	 .loc 1 4074 0
 6524 0024 BB68     	 ldr r3,[r7,#8]
 6525 0026 9B69     	 ldr r3,[r3,#24]
 6526 0028 002B     	 cmp r3,#0
 6527 002a 06DB     	 blt .L444
4075:../Dave/Generated/FREERTOS/tasks.c ****                 {
4076:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
 6528              	 .loc 1 4076 0
 6529 002c 254B     	 ldr r3,.L449
 6530 002e 1B68     	 ldr r3,[r3]
 6531 0030 DB6A     	 ldr r3,[r3,#44]
 6532 0032 C3F13802 	 rsb r2,r3,#56
 6533 0036 BB68     	 ldr r3,[r7,#8]
 6534 0038 9A61     	 str r2,[r3,#24]
 6535              	.L444:
4077:../Dave/Generated/FREERTOS/tasks.c ****                 }
4078:../Dave/Generated/FREERTOS/tasks.c ****                 else
4079:../Dave/Generated/FREERTOS/tasks.c ****                 {
4080:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4081:../Dave/Generated/FREERTOS/tasks.c ****                 }
4082:../Dave/Generated/FREERTOS/tasks.c **** 
4083:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4084:../Dave/Generated/FREERTOS/tasks.c ****                  * to be moved into a new list. */
4085:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
 6536              	 .loc 1 4085 0
 6537 003a BB68     	 ldr r3,[r7,#8]
 6538 003c 5969     	 ldr r1,[r3,#20]
 6539 003e BB68     	 ldr r3,[r7,#8]
 6540 0040 DA6A     	 ldr r2,[r3,#44]
 6541 0042 1346     	 mov r3,r2
 6542 0044 9B00     	 lsls r3,r3,#2
 6543 0046 1344     	 add r3,r3,r2
 6544 0048 9B00     	 lsls r3,r3,#2
 6545 004a 1F4A     	 ldr r2,.L449+4
 6546 004c 1344     	 add r3,r3,r2
 6547 004e 9942     	 cmp r1,r3
 6548 0050 22D1     	 bne .L445
4086:../Dave/Generated/FREERTOS/tasks.c ****                 {
4087:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
 6549              	 .loc 1 4087 0
 6550 0052 BB68     	 ldr r3,[r7,#8]
 6551 0054 0433     	 adds r3,r3,#4
 6552 0056 1846     	 mov r0,r3
 6553 0058 FFF7FEFF 	 bl uxListRemove
4088:../Dave/Generated/FREERTOS/tasks.c ****                     {
4089:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4090:../Dave/Generated/FREERTOS/tasks.c ****                          * there is no need to check again and the port level
4091:../Dave/Generated/FREERTOS/tasks.c ****                          * reset macro can be called directly. */
4092:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4093:../Dave/Generated/FREERTOS/tasks.c ****                     }
4094:../Dave/Generated/FREERTOS/tasks.c ****                     else
4095:../Dave/Generated/FREERTOS/tasks.c ****                     {
4096:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4097:../Dave/Generated/FREERTOS/tasks.c ****                     }
4098:../Dave/Generated/FREERTOS/tasks.c **** 
4099:../Dave/Generated/FREERTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4100:../Dave/Generated/FREERTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6554              	 .loc 1 4100 0
 6555 005c 194B     	 ldr r3,.L449
 6556 005e 1B68     	 ldr r3,[r3]
 6557 0060 DA6A     	 ldr r2,[r3,#44]
 6558 0062 BB68     	 ldr r3,[r7,#8]
 6559 0064 DA62     	 str r2,[r3,#44]
4101:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6560              	 .loc 1 4101 0
 6561 0066 BB68     	 ldr r3,[r7,#8]
 6562 0068 DA6A     	 ldr r2,[r3,#44]
 6563 006a 184B     	 ldr r3,.L449+8
 6564 006c 1B68     	 ldr r3,[r3]
 6565 006e 9A42     	 cmp r2,r3
 6566 0070 03D9     	 bls .L446
 6567              	 .loc 1 4101 0 is_stmt 0 discriminator 1
 6568 0072 BB68     	 ldr r3,[r7,#8]
 6569 0074 DB6A     	 ldr r3,[r3,#44]
 6570 0076 154A     	 ldr r2,.L449+8
 6571 0078 1360     	 str r3,[r2]
 6572              	.L446:
 6573              	 .loc 1 4101 0 discriminator 3
 6574 007a BB68     	 ldr r3,[r7,#8]
 6575 007c DA6A     	 ldr r2,[r3,#44]
 6576 007e 1346     	 mov r3,r2
 6577 0080 9B00     	 lsls r3,r3,#2
 6578 0082 1344     	 add r3,r3,r2
 6579 0084 9B00     	 lsls r3,r3,#2
 6580 0086 104A     	 ldr r2,.L449+4
 6581 0088 1A44     	 add r2,r2,r3
 6582 008a BB68     	 ldr r3,[r7,#8]
 6583 008c 0433     	 adds r3,r3,#4
 6584 008e 1046     	 mov r0,r2
 6585 0090 1946     	 mov r1,r3
 6586 0092 FFF7FEFF 	 bl vListInsertEnd
 6587 0096 04E0     	 b .L447
 6588              	.L445:
4102:../Dave/Generated/FREERTOS/tasks.c ****                 }
4103:../Dave/Generated/FREERTOS/tasks.c ****                 else
4104:../Dave/Generated/FREERTOS/tasks.c ****                 {
4105:../Dave/Generated/FREERTOS/tasks.c ****                     /* Just inherit the priority. */
4106:../Dave/Generated/FREERTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6589              	 .loc 1 4106 0 is_stmt 1
 6590 0098 0A4B     	 ldr r3,.L449
 6591 009a 1B68     	 ldr r3,[r3]
 6592 009c DA6A     	 ldr r2,[r3,#44]
 6593 009e BB68     	 ldr r3,[r7,#8]
 6594 00a0 DA62     	 str r2,[r3,#44]
 6595              	.L447:
4107:../Dave/Generated/FREERTOS/tasks.c ****                 }
4108:../Dave/Generated/FREERTOS/tasks.c **** 
4109:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4110:../Dave/Generated/FREERTOS/tasks.c **** 
4111:../Dave/Generated/FREERTOS/tasks.c ****                 /* Inheritance occurred. */
4112:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 6596              	 .loc 1 4112 0
 6597 00a2 0123     	 movs r3,#1
 6598 00a4 FB60     	 str r3,[r7,#12]
 6599 00a6 08E0     	 b .L442
 6600              	.L443:
4113:../Dave/Generated/FREERTOS/tasks.c ****             }
4114:../Dave/Generated/FREERTOS/tasks.c ****             else
4115:../Dave/Generated/FREERTOS/tasks.c ****             {
4116:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6601              	 .loc 1 4116 0
 6602 00a8 BB68     	 ldr r3,[r7,#8]
 6603 00aa DA6C     	 ldr r2,[r3,#76]
 6604 00ac 054B     	 ldr r3,.L449
 6605 00ae 1B68     	 ldr r3,[r3]
 6606 00b0 DB6A     	 ldr r3,[r3,#44]
 6607 00b2 9A42     	 cmp r2,r3
 6608 00b4 01D2     	 bcs .L442
4117:../Dave/Generated/FREERTOS/tasks.c ****                 {
4118:../Dave/Generated/FREERTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4119:../Dave/Generated/FREERTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4120:../Dave/Generated/FREERTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4121:../Dave/Generated/FREERTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4122:../Dave/Generated/FREERTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4123:../Dave/Generated/FREERTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4124:../Dave/Generated/FREERTOS/tasks.c ****                      * not been the case. */
4125:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 6609              	 .loc 1 4125 0
 6610 00b6 0123     	 movs r3,#1
 6611 00b8 FB60     	 str r3,[r7,#12]
 6612              	.L442:
4126:../Dave/Generated/FREERTOS/tasks.c ****                 }
4127:../Dave/Generated/FREERTOS/tasks.c ****                 else
4128:../Dave/Generated/FREERTOS/tasks.c ****                 {
4129:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4130:../Dave/Generated/FREERTOS/tasks.c ****                 }
4131:../Dave/Generated/FREERTOS/tasks.c ****             }
4132:../Dave/Generated/FREERTOS/tasks.c ****         }
4133:../Dave/Generated/FREERTOS/tasks.c ****         else
4134:../Dave/Generated/FREERTOS/tasks.c ****         {
4135:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4136:../Dave/Generated/FREERTOS/tasks.c ****         }
4137:../Dave/Generated/FREERTOS/tasks.c **** 
4138:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6613              	 .loc 1 4138 0
 6614 00ba FB68     	 ldr r3,[r7,#12]
4139:../Dave/Generated/FREERTOS/tasks.c ****     }
 6615              	 .loc 1 4139 0
 6616 00bc 1846     	 mov r0,r3
 6617 00be 1037     	 adds r7,r7,#16
 6618              	.LCFI286:
 6619              	 .cfi_def_cfa_offset 8
 6620 00c0 BD46     	 mov sp,r7
 6621              	.LCFI287:
 6622              	 .cfi_def_cfa_register 13
 6623              	 
 6624 00c2 80BD     	 pop {r7,pc}
 6625              	.L450:
 6626              	 .align 2
 6627              	.L449:
 6628 00c4 00000000 	 .word pxCurrentTCB
 6629 00c8 00000000 	 .word pxReadyTasksLists
 6630 00cc 00000000 	 .word uxTopReadyPriority
 6631              	 .cfi_endproc
 6632              	.LFE192:
 6634              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 6635              	 .align 2
 6636              	 .global xTaskPriorityDisinherit
 6637              	 .thumb
 6638              	 .thumb_func
 6640              	xTaskPriorityDisinherit:
 6641              	.LFB193:
4140:../Dave/Generated/FREERTOS/tasks.c **** 
4141:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4142:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4143:../Dave/Generated/FREERTOS/tasks.c **** 
4144:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4145:../Dave/Generated/FREERTOS/tasks.c **** 
4146:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4147:../Dave/Generated/FREERTOS/tasks.c ****     {
 6642              	 .loc 1 4147 0
 6643              	 .cfi_startproc
 6644              	 
 6645              	 
 6646 0000 80B5     	 push {r7,lr}
 6647              	.LCFI288:
 6648              	 .cfi_def_cfa_offset 8
 6649              	 .cfi_offset 7,-8
 6650              	 .cfi_offset 14,-4
 6651 0002 86B0     	 sub sp,sp,#24
 6652              	.LCFI289:
 6653              	 .cfi_def_cfa_offset 32
 6654 0004 00AF     	 add r7,sp,#0
 6655              	.LCFI290:
 6656              	 .cfi_def_cfa_register 7
 6657 0006 7860     	 str r0,[r7,#4]
4148:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6658              	 .loc 1 4148 0
 6659 0008 7B68     	 ldr r3,[r7,#4]
 6660 000a 3B61     	 str r3,[r7,#16]
4149:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6661              	 .loc 1 4149 0
 6662 000c 0023     	 movs r3,#0
 6663 000e 7B61     	 str r3,[r7,#20]
4150:../Dave/Generated/FREERTOS/tasks.c **** 
4151:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6664              	 .loc 1 4151 0
 6665 0010 7B68     	 ldr r3,[r7,#4]
 6666 0012 002B     	 cmp r3,#0
 6667 0014 54D0     	 beq .L452
4152:../Dave/Generated/FREERTOS/tasks.c ****         {
4153:../Dave/Generated/FREERTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4154:../Dave/Generated/FREERTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4155:../Dave/Generated/FREERTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4156:../Dave/Generated/FREERTOS/tasks.c ****              * be the running state task. */
4157:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
 6668              	 .loc 1 4157 0
 6669 0016 2D4B     	 ldr r3,.L459
 6670 0018 1B68     	 ldr r3,[r3]
 6671 001a 3A69     	 ldr r2,[r7,#16]
 6672 001c 9A42     	 cmp r2,r3
 6673 001e 09D0     	 beq .L453
 6674              	.LBB242:
 6675              	.LBB243:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6676              	 .loc 2 197 0 discriminator 1
 6677              	
 6678 0020 4FF0FC03 	 mov r3,#252
 6679 0024 83F31188 	 msr basepri,r3
 6680 0028 BFF36F8F 	 isb 
 6681 002c BFF34F8F 	 dsb 
 6682              	
 6683              	
 6684              	 .thumb
 6685 0030 FB60     	 str r3,[r7,#12]
 6686              	.L454:
 6687              	.LBE243:
 6688              	.LBE242:
 6689              	 .loc 1 4157 0 discriminator 1
 6690 0032 FEE7     	 b .L454
 6691              	.L453:
4158:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6692              	 .loc 1 4158 0
 6693 0034 3B69     	 ldr r3,[r7,#16]
 6694 0036 1B6D     	 ldr r3,[r3,#80]
 6695 0038 002B     	 cmp r3,#0
 6696 003a 09D1     	 bne .L455
 6697              	.LBB244:
 6698              	.LBB245:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6699              	 .loc 2 197 0 discriminator 1
 6700              	
 6701 003c 4FF0FC03 	 mov r3,#252
 6702 0040 83F31188 	 msr basepri,r3
 6703 0044 BFF36F8F 	 isb 
 6704 0048 BFF34F8F 	 dsb 
 6705              	
 6706              	
 6707              	 .thumb
 6708 004c BB60     	 str r3,[r7,#8]
 6709              	.L456:
 6710              	.LBE245:
 6711              	.LBE244:
 6712              	 .loc 1 4158 0 discriminator 2
 6713 004e FEE7     	 b .L456
 6714              	.L455:
4159:../Dave/Generated/FREERTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6715              	 .loc 1 4159 0
 6716 0050 3B69     	 ldr r3,[r7,#16]
 6717 0052 1B6D     	 ldr r3,[r3,#80]
 6718 0054 5A1E     	 subs r2,r3,#1
 6719 0056 3B69     	 ldr r3,[r7,#16]
 6720 0058 1A65     	 str r2,[r3,#80]
4160:../Dave/Generated/FREERTOS/tasks.c **** 
4161:../Dave/Generated/FREERTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4162:../Dave/Generated/FREERTOS/tasks.c ****              * task? */
4163:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6721              	 .loc 1 4163 0
 6722 005a 3B69     	 ldr r3,[r7,#16]
 6723 005c DA6A     	 ldr r2,[r3,#44]
 6724 005e 3B69     	 ldr r3,[r7,#16]
 6725 0060 DB6C     	 ldr r3,[r3,#76]
 6726 0062 9A42     	 cmp r2,r3
 6727 0064 2CD0     	 beq .L452
4164:../Dave/Generated/FREERTOS/tasks.c ****             {
4165:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4166:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6728              	 .loc 1 4166 0
 6729 0066 3B69     	 ldr r3,[r7,#16]
 6730 0068 1B6D     	 ldr r3,[r3,#80]
 6731 006a 002B     	 cmp r3,#0
 6732 006c 28D1     	 bne .L452
4167:../Dave/Generated/FREERTOS/tasks.c ****                 {
4168:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4169:../Dave/Generated/FREERTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4170:../Dave/Generated/FREERTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4171:../Dave/Generated/FREERTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4172:../Dave/Generated/FREERTOS/tasks.c ****                      * the holding task from the ready list. */
4173:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6733              	 .loc 1 4173 0
 6734 006e 3B69     	 ldr r3,[r7,#16]
 6735 0070 0433     	 adds r3,r3,#4
 6736 0072 1846     	 mov r0,r3
 6737 0074 FFF7FEFF 	 bl uxListRemove
4174:../Dave/Generated/FREERTOS/tasks.c ****                     {
4175:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4176:../Dave/Generated/FREERTOS/tasks.c ****                     }
4177:../Dave/Generated/FREERTOS/tasks.c ****                     else
4178:../Dave/Generated/FREERTOS/tasks.c ****                     {
4179:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4180:../Dave/Generated/FREERTOS/tasks.c ****                     }
4181:../Dave/Generated/FREERTOS/tasks.c **** 
4182:../Dave/Generated/FREERTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4183:../Dave/Generated/FREERTOS/tasks.c ****                      * new  ready list. */
4184:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4185:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 6738              	 .loc 1 4185 0
 6739 0078 3B69     	 ldr r3,[r7,#16]
 6740 007a DA6C     	 ldr r2,[r3,#76]
 6741 007c 3B69     	 ldr r3,[r7,#16]
 6742 007e DA62     	 str r2,[r3,#44]
4186:../Dave/Generated/FREERTOS/tasks.c **** 
4187:../Dave/Generated/FREERTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4188:../Dave/Generated/FREERTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4189:../Dave/Generated/FREERTOS/tasks.c ****                      * running to give back the mutex. */
4190:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
 6743              	 .loc 1 4190 0
 6744 0080 3B69     	 ldr r3,[r7,#16]
 6745 0082 DB6A     	 ldr r3,[r3,#44]
 6746 0084 C3F13802 	 rsb r2,r3,#56
 6747 0088 3B69     	 ldr r3,[r7,#16]
 6748 008a 9A61     	 str r2,[r3,#24]
4191:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6749              	 .loc 1 4191 0
 6750 008c 3B69     	 ldr r3,[r7,#16]
 6751 008e DA6A     	 ldr r2,[r3,#44]
 6752 0090 0F4B     	 ldr r3,.L459+4
 6753 0092 1B68     	 ldr r3,[r3]
 6754 0094 9A42     	 cmp r2,r3
 6755 0096 03D9     	 bls .L457
 6756              	 .loc 1 4191 0 is_stmt 0 discriminator 1
 6757 0098 3B69     	 ldr r3,[r7,#16]
 6758 009a DB6A     	 ldr r3,[r3,#44]
 6759 009c 0C4A     	 ldr r2,.L459+4
 6760 009e 1360     	 str r3,[r2]
 6761              	.L457:
 6762              	 .loc 1 4191 0 discriminator 3
 6763 00a0 3B69     	 ldr r3,[r7,#16]
 6764 00a2 DA6A     	 ldr r2,[r3,#44]
 6765 00a4 1346     	 mov r3,r2
 6766 00a6 9B00     	 lsls r3,r3,#2
 6767 00a8 1344     	 add r3,r3,r2
 6768 00aa 9B00     	 lsls r3,r3,#2
 6769 00ac 094A     	 ldr r2,.L459+8
 6770 00ae 1A44     	 add r2,r2,r3
 6771 00b0 3B69     	 ldr r3,[r7,#16]
 6772 00b2 0433     	 adds r3,r3,#4
 6773 00b4 1046     	 mov r0,r2
 6774 00b6 1946     	 mov r1,r3
 6775 00b8 FFF7FEFF 	 bl vListInsertEnd
4192:../Dave/Generated/FREERTOS/tasks.c **** 
4193:../Dave/Generated/FREERTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4194:../Dave/Generated/FREERTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4195:../Dave/Generated/FREERTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4196:../Dave/Generated/FREERTOS/tasks.c ****                      * in an order different to that in which they were taken.
4197:../Dave/Generated/FREERTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4198:../Dave/Generated/FREERTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4199:../Dave/Generated/FREERTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4200:../Dave/Generated/FREERTOS/tasks.c ****                      * a task is waiting on it or not. */
4201:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 6776              	 .loc 1 4201 0 is_stmt 1 discriminator 3
 6777 00bc 0123     	 movs r3,#1
 6778 00be 7B61     	 str r3,[r7,#20]
 6779              	.L452:
4202:../Dave/Generated/FREERTOS/tasks.c ****                 }
4203:../Dave/Generated/FREERTOS/tasks.c ****                 else
4204:../Dave/Generated/FREERTOS/tasks.c ****                 {
4205:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4206:../Dave/Generated/FREERTOS/tasks.c ****                 }
4207:../Dave/Generated/FREERTOS/tasks.c ****             }
4208:../Dave/Generated/FREERTOS/tasks.c ****             else
4209:../Dave/Generated/FREERTOS/tasks.c ****             {
4210:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4211:../Dave/Generated/FREERTOS/tasks.c ****             }
4212:../Dave/Generated/FREERTOS/tasks.c ****         }
4213:../Dave/Generated/FREERTOS/tasks.c ****         else
4214:../Dave/Generated/FREERTOS/tasks.c ****         {
4215:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4216:../Dave/Generated/FREERTOS/tasks.c ****         }
4217:../Dave/Generated/FREERTOS/tasks.c **** 
4218:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6780              	 .loc 1 4218 0
 6781 00c0 7B69     	 ldr r3,[r7,#20]
4219:../Dave/Generated/FREERTOS/tasks.c ****     }
 6782              	 .loc 1 4219 0
 6783 00c2 1846     	 mov r0,r3
 6784 00c4 1837     	 adds r7,r7,#24
 6785              	.LCFI291:
 6786              	 .cfi_def_cfa_offset 8
 6787 00c6 BD46     	 mov sp,r7
 6788              	.LCFI292:
 6789              	 .cfi_def_cfa_register 13
 6790              	 
 6791 00c8 80BD     	 pop {r7,pc}
 6792              	.L460:
 6793 00ca 00BF     	 .align 2
 6794              	.L459:
 6795 00cc 00000000 	 .word pxCurrentTCB
 6796 00d0 00000000 	 .word uxTopReadyPriority
 6797 00d4 00000000 	 .word pxReadyTasksLists
 6798              	 .cfi_endproc
 6799              	.LFE193:
 6801              	 .section .text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6802              	 .align 2
 6803              	 .global vTaskPriorityDisinheritAfterTimeout
 6804              	 .thumb
 6805              	 .thumb_func
 6807              	vTaskPriorityDisinheritAfterTimeout:
 6808              	.LFB194:
4220:../Dave/Generated/FREERTOS/tasks.c **** 
4221:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4222:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4223:../Dave/Generated/FREERTOS/tasks.c **** 
4224:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4225:../Dave/Generated/FREERTOS/tasks.c **** 
4226:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4227:../Dave/Generated/FREERTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4228:../Dave/Generated/FREERTOS/tasks.c ****     {
 6809              	 .loc 1 4228 0
 6810              	 .cfi_startproc
 6811              	 
 6812              	 
 6813 0000 80B5     	 push {r7,lr}
 6814              	.LCFI293:
 6815              	 .cfi_def_cfa_offset 8
 6816              	 .cfi_offset 7,-8
 6817              	 .cfi_offset 14,-4
 6818 0002 88B0     	 sub sp,sp,#32
 6819              	.LCFI294:
 6820              	 .cfi_def_cfa_offset 40
 6821 0004 00AF     	 add r7,sp,#0
 6822              	.LCFI295:
 6823              	 .cfi_def_cfa_register 7
 6824 0006 7860     	 str r0,[r7,#4]
 6825 0008 3960     	 str r1,[r7]
4229:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6826              	 .loc 1 4229 0
 6827 000a 7B68     	 ldr r3,[r7,#4]
 6828 000c BB61     	 str r3,[r7,#24]
4230:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4231:../Dave/Generated/FREERTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6829              	 .loc 1 4231 0
 6830 000e 0123     	 movs r3,#1
 6831 0010 7B61     	 str r3,[r7,#20]
4232:../Dave/Generated/FREERTOS/tasks.c **** 
4233:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6832              	 .loc 1 4233 0
 6833 0012 7B68     	 ldr r3,[r7,#4]
 6834 0014 002B     	 cmp r3,#0
 6835 0016 68D0     	 beq .L461
4234:../Dave/Generated/FREERTOS/tasks.c ****         {
4235:../Dave/Generated/FREERTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4236:../Dave/Generated/FREERTOS/tasks.c ****              * one mutex. */
4237:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6836              	 .loc 1 4237 0
 6837 0018 BB69     	 ldr r3,[r7,#24]
 6838 001a 1B6D     	 ldr r3,[r3,#80]
 6839 001c 002B     	 cmp r3,#0
 6840 001e 09D1     	 bne .L463
 6841              	.LBB246:
 6842              	.LBB247:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6843              	 .loc 2 197 0 discriminator 1
 6844              	
 6845 0020 4FF0FC03 	 mov r3,#252
 6846 0024 83F31188 	 msr basepri,r3
 6847 0028 BFF36F8F 	 isb 
 6848 002c BFF34F8F 	 dsb 
 6849              	
 6850              	
 6851              	 .thumb
 6852 0030 FB60     	 str r3,[r7,#12]
 6853              	.L464:
 6854              	.LBE247:
 6855              	.LBE246:
 6856              	 .loc 1 4237 0 discriminator 1
 6857 0032 FEE7     	 b .L464
 6858              	.L463:
4238:../Dave/Generated/FREERTOS/tasks.c **** 
4239:../Dave/Generated/FREERTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4240:../Dave/Generated/FREERTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4241:../Dave/Generated/FREERTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4242:../Dave/Generated/FREERTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4243:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6859              	 .loc 1 4243 0
 6860 0034 BB69     	 ldr r3,[r7,#24]
 6861 0036 DA6C     	 ldr r2,[r3,#76]
 6862 0038 3B68     	 ldr r3,[r7]
 6863 003a 9A42     	 cmp r2,r3
 6864 003c 02D2     	 bcs .L465
4244:../Dave/Generated/FREERTOS/tasks.c ****             {
4245:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 6865              	 .loc 1 4245 0
 6866 003e 3B68     	 ldr r3,[r7]
 6867 0040 FB61     	 str r3,[r7,#28]
 6868 0042 02E0     	 b .L466
 6869              	.L465:
4246:../Dave/Generated/FREERTOS/tasks.c ****             }
4247:../Dave/Generated/FREERTOS/tasks.c ****             else
4248:../Dave/Generated/FREERTOS/tasks.c ****             {
4249:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
 6870              	 .loc 1 4249 0
 6871 0044 BB69     	 ldr r3,[r7,#24]
 6872 0046 DB6C     	 ldr r3,[r3,#76]
 6873 0048 FB61     	 str r3,[r7,#28]
 6874              	.L466:
4250:../Dave/Generated/FREERTOS/tasks.c ****             }
4251:../Dave/Generated/FREERTOS/tasks.c **** 
4252:../Dave/Generated/FREERTOS/tasks.c ****             /* Does the priority need to change? */
4253:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
 6875              	 .loc 1 4253 0
 6876 004a BB69     	 ldr r3,[r7,#24]
 6877 004c DA6A     	 ldr r2,[r3,#44]
 6878 004e FB69     	 ldr r3,[r7,#28]
 6879 0050 9A42     	 cmp r2,r3
 6880 0052 4AD0     	 beq .L461
4254:../Dave/Generated/FREERTOS/tasks.c ****             {
4255:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4256:../Dave/Generated/FREERTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4257:../Dave/Generated/FREERTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4258:../Dave/Generated/FREERTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4259:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6881              	 .loc 1 4259 0
 6882 0054 BB69     	 ldr r3,[r7,#24]
 6883 0056 1A6D     	 ldr r2,[r3,#80]
 6884 0058 7B69     	 ldr r3,[r7,#20]
 6885 005a 9A42     	 cmp r2,r3
 6886 005c 45D1     	 bne .L461
4260:../Dave/Generated/FREERTOS/tasks.c ****                 {
4261:../Dave/Generated/FREERTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4262:../Dave/Generated/FREERTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4263:../Dave/Generated/FREERTOS/tasks.c ****                      * its own priority. */
4264:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
 6887              	 .loc 1 4264 0
 6888 005e 244B     	 ldr r3,.L471
 6889 0060 1B68     	 ldr r3,[r3]
 6890 0062 BA69     	 ldr r2,[r7,#24]
 6891 0064 9A42     	 cmp r2,r3
 6892 0066 09D1     	 bne .L467
 6893              	.LBB248:
 6894              	.LBB249:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 6895              	 .loc 2 197 0 discriminator 1
 6896              	
 6897 0068 4FF0FC03 	 mov r3,#252
 6898 006c 83F31188 	 msr basepri,r3
 6899 0070 BFF36F8F 	 isb 
 6900 0074 BFF34F8F 	 dsb 
 6901              	
 6902              	
 6903              	 .thumb
 6904 0078 BB60     	 str r3,[r7,#8]
 6905              	.L468:
 6906              	.LBE249:
 6907              	.LBE248:
 6908              	 .loc 1 4264 0 discriminator 2
 6909 007a FEE7     	 b .L468
 6910              	.L467:
4265:../Dave/Generated/FREERTOS/tasks.c **** 
4266:../Dave/Generated/FREERTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4267:../Dave/Generated/FREERTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4268:../Dave/Generated/FREERTOS/tasks.c ****                      * state. */
4269:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4270:../Dave/Generated/FREERTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6911              	 .loc 1 4270 0
 6912 007c BB69     	 ldr r3,[r7,#24]
 6913 007e DB6A     	 ldr r3,[r3,#44]
 6914 0080 3B61     	 str r3,[r7,#16]
4271:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 6915              	 .loc 1 4271 0
 6916 0082 BB69     	 ldr r3,[r7,#24]
 6917 0084 FA69     	 ldr r2,[r7,#28]
 6918 0086 DA62     	 str r2,[r3,#44]
4272:../Dave/Generated/FREERTOS/tasks.c **** 
4273:../Dave/Generated/FREERTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4274:../Dave/Generated/FREERTOS/tasks.c ****                      * being used for anything else. */
4275:../Dave/Generated/FREERTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
 6919              	 .loc 1 4275 0
 6920 0088 BB69     	 ldr r3,[r7,#24]
 6921 008a 9B69     	 ldr r3,[r3,#24]
 6922 008c 002B     	 cmp r3,#0
 6923 008e 04DB     	 blt .L469
4276:../Dave/Generated/FREERTOS/tasks.c ****                     {
4277:../Dave/Generated/FREERTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
 6924              	 .loc 1 4277 0
 6925 0090 FB69     	 ldr r3,[r7,#28]
 6926 0092 C3F13802 	 rsb r2,r3,#56
 6927 0096 BB69     	 ldr r3,[r7,#24]
 6928 0098 9A61     	 str r2,[r3,#24]
 6929              	.L469:
4278:../Dave/Generated/FREERTOS/tasks.c ****                     }
4279:../Dave/Generated/FREERTOS/tasks.c ****                     else
4280:../Dave/Generated/FREERTOS/tasks.c ****                     {
4281:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4282:../Dave/Generated/FREERTOS/tasks.c ****                     }
4283:../Dave/Generated/FREERTOS/tasks.c **** 
4284:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4285:../Dave/Generated/FREERTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4286:../Dave/Generated/FREERTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4287:../Dave/Generated/FREERTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4288:../Dave/Generated/FREERTOS/tasks.c ****                      * the task's priority is going to change and there is one
4289:../Dave/Generated/FREERTOS/tasks.c ****                      * Ready list per priority. */
4290:../Dave/Generated/FREERTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
 6930              	 .loc 1 4290 0
 6931 009a BB69     	 ldr r3,[r7,#24]
 6932 009c 5969     	 ldr r1,[r3,#20]
 6933 009e 3A69     	 ldr r2,[r7,#16]
 6934 00a0 1346     	 mov r3,r2
 6935 00a2 9B00     	 lsls r3,r3,#2
 6936 00a4 1344     	 add r3,r3,r2
 6937 00a6 9B00     	 lsls r3,r3,#2
 6938 00a8 124A     	 ldr r2,.L471+4
 6939 00aa 1344     	 add r3,r3,r2
 6940 00ac 9942     	 cmp r1,r3
 6941 00ae 1CD1     	 bne .L461
4291:../Dave/Generated/FREERTOS/tasks.c ****                     {
4292:../Dave/Generated/FREERTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6942              	 .loc 1 4292 0
 6943 00b0 BB69     	 ldr r3,[r7,#24]
 6944 00b2 0433     	 adds r3,r3,#4
 6945 00b4 1846     	 mov r0,r3
 6946 00b6 FFF7FEFF 	 bl uxListRemove
4293:../Dave/Generated/FREERTOS/tasks.c ****                         {
4294:../Dave/Generated/FREERTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4295:../Dave/Generated/FREERTOS/tasks.c ****                              * there is no need to check again and the port level
4296:../Dave/Generated/FREERTOS/tasks.c ****                              * reset macro can be called directly. */
4297:../Dave/Generated/FREERTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4298:../Dave/Generated/FREERTOS/tasks.c ****                         }
4299:../Dave/Generated/FREERTOS/tasks.c ****                         else
4300:../Dave/Generated/FREERTOS/tasks.c ****                         {
4301:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4302:../Dave/Generated/FREERTOS/tasks.c ****                         }
4303:../Dave/Generated/FREERTOS/tasks.c **** 
4304:../Dave/Generated/FREERTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 6947              	 .loc 1 4304 0
 6948 00ba BB69     	 ldr r3,[r7,#24]
 6949 00bc DA6A     	 ldr r2,[r3,#44]
 6950 00be 0E4B     	 ldr r3,.L471+8
 6951 00c0 1B68     	 ldr r3,[r3]
 6952 00c2 9A42     	 cmp r2,r3
 6953 00c4 03D9     	 bls .L470
 6954              	 .loc 1 4304 0 is_stmt 0 discriminator 1
 6955 00c6 BB69     	 ldr r3,[r7,#24]
 6956 00c8 DB6A     	 ldr r3,[r3,#44]
 6957 00ca 0B4A     	 ldr r2,.L471+8
 6958 00cc 1360     	 str r3,[r2]
 6959              	.L470:
 6960              	 .loc 1 4304 0 discriminator 3
 6961 00ce BB69     	 ldr r3,[r7,#24]
 6962 00d0 DA6A     	 ldr r2,[r3,#44]
 6963 00d2 1346     	 mov r3,r2
 6964 00d4 9B00     	 lsls r3,r3,#2
 6965 00d6 1344     	 add r3,r3,r2
 6966 00d8 9B00     	 lsls r3,r3,#2
 6967 00da 064A     	 ldr r2,.L471+4
 6968 00dc 1A44     	 add r2,r2,r3
 6969 00de BB69     	 ldr r3,[r7,#24]
 6970 00e0 0433     	 adds r3,r3,#4
 6971 00e2 1046     	 mov r0,r2
 6972 00e4 1946     	 mov r1,r3
 6973 00e6 FFF7FEFF 	 bl vListInsertEnd
 6974              	.L461:
4305:../Dave/Generated/FREERTOS/tasks.c ****                     }
4306:../Dave/Generated/FREERTOS/tasks.c ****                     else
4307:../Dave/Generated/FREERTOS/tasks.c ****                     {
4308:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4309:../Dave/Generated/FREERTOS/tasks.c ****                     }
4310:../Dave/Generated/FREERTOS/tasks.c ****                 }
4311:../Dave/Generated/FREERTOS/tasks.c ****                 else
4312:../Dave/Generated/FREERTOS/tasks.c ****                 {
4313:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4314:../Dave/Generated/FREERTOS/tasks.c ****                 }
4315:../Dave/Generated/FREERTOS/tasks.c ****             }
4316:../Dave/Generated/FREERTOS/tasks.c ****             else
4317:../Dave/Generated/FREERTOS/tasks.c ****             {
4318:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4319:../Dave/Generated/FREERTOS/tasks.c ****             }
4320:../Dave/Generated/FREERTOS/tasks.c ****         }
4321:../Dave/Generated/FREERTOS/tasks.c ****         else
4322:../Dave/Generated/FREERTOS/tasks.c ****         {
4323:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4324:../Dave/Generated/FREERTOS/tasks.c ****         }
4325:../Dave/Generated/FREERTOS/tasks.c ****     }
 6975              	 .loc 1 4325 0 is_stmt 1
 6976 00ea 2037     	 adds r7,r7,#32
 6977              	.LCFI296:
 6978              	 .cfi_def_cfa_offset 8
 6979 00ec BD46     	 mov sp,r7
 6980              	.LCFI297:
 6981              	 .cfi_def_cfa_register 13
 6982              	 
 6983 00ee 80BD     	 pop {r7,pc}
 6984              	.L472:
 6985              	 .align 2
 6986              	.L471:
 6987 00f0 00000000 	 .word pxCurrentTCB
 6988 00f4 00000000 	 .word pxReadyTasksLists
 6989 00f8 00000000 	 .word uxTopReadyPriority
 6990              	 .cfi_endproc
 6991              	.LFE194:
 6993              	 .section .text.prvWriteNameToBuffer,"ax",%progbits
 6994              	 .align 2
 6995              	 .thumb
 6996              	 .thumb_func
 6998              	prvWriteNameToBuffer:
 6999              	.LFB195:
4326:../Dave/Generated/FREERTOS/tasks.c **** 
4327:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4328:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4329:../Dave/Generated/FREERTOS/tasks.c **** 
4330:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4331:../Dave/Generated/FREERTOS/tasks.c **** 
4332:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskEnterCritical( void )
4333:../Dave/Generated/FREERTOS/tasks.c ****     {
4334:../Dave/Generated/FREERTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4335:../Dave/Generated/FREERTOS/tasks.c **** 
4336:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4337:../Dave/Generated/FREERTOS/tasks.c ****         {
4338:../Dave/Generated/FREERTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4339:../Dave/Generated/FREERTOS/tasks.c **** 
4340:../Dave/Generated/FREERTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4341:../Dave/Generated/FREERTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4342:../Dave/Generated/FREERTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4343:../Dave/Generated/FREERTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4344:../Dave/Generated/FREERTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4345:../Dave/Generated/FREERTOS/tasks.c ****              * critical section. */
4346:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4347:../Dave/Generated/FREERTOS/tasks.c ****             {
4348:../Dave/Generated/FREERTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4349:../Dave/Generated/FREERTOS/tasks.c ****             }
4350:../Dave/Generated/FREERTOS/tasks.c ****         }
4351:../Dave/Generated/FREERTOS/tasks.c ****         else
4352:../Dave/Generated/FREERTOS/tasks.c ****         {
4353:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4354:../Dave/Generated/FREERTOS/tasks.c ****         }
4355:../Dave/Generated/FREERTOS/tasks.c ****     }
4356:../Dave/Generated/FREERTOS/tasks.c **** 
4357:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4358:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4359:../Dave/Generated/FREERTOS/tasks.c **** 
4360:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4361:../Dave/Generated/FREERTOS/tasks.c **** 
4362:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskExitCritical( void )
4363:../Dave/Generated/FREERTOS/tasks.c ****     {
4364:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4365:../Dave/Generated/FREERTOS/tasks.c ****         {
4366:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4367:../Dave/Generated/FREERTOS/tasks.c ****             {
4368:../Dave/Generated/FREERTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4369:../Dave/Generated/FREERTOS/tasks.c **** 
4370:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4371:../Dave/Generated/FREERTOS/tasks.c ****                 {
4372:../Dave/Generated/FREERTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4373:../Dave/Generated/FREERTOS/tasks.c ****                 }
4374:../Dave/Generated/FREERTOS/tasks.c ****                 else
4375:../Dave/Generated/FREERTOS/tasks.c ****                 {
4376:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4377:../Dave/Generated/FREERTOS/tasks.c ****                 }
4378:../Dave/Generated/FREERTOS/tasks.c ****             }
4379:../Dave/Generated/FREERTOS/tasks.c ****             else
4380:../Dave/Generated/FREERTOS/tasks.c ****             {
4381:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4382:../Dave/Generated/FREERTOS/tasks.c ****             }
4383:../Dave/Generated/FREERTOS/tasks.c ****         }
4384:../Dave/Generated/FREERTOS/tasks.c ****         else
4385:../Dave/Generated/FREERTOS/tasks.c ****         {
4386:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4387:../Dave/Generated/FREERTOS/tasks.c ****         }
4388:../Dave/Generated/FREERTOS/tasks.c ****     }
4389:../Dave/Generated/FREERTOS/tasks.c **** 
4390:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4391:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4392:../Dave/Generated/FREERTOS/tasks.c **** 
4393:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4394:../Dave/Generated/FREERTOS/tasks.c **** 
4395:../Dave/Generated/FREERTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4396:../Dave/Generated/FREERTOS/tasks.c ****                                         const char * pcTaskName )
4397:../Dave/Generated/FREERTOS/tasks.c ****     {
 7000              	 .loc 1 4397 0
 7001              	 .cfi_startproc
 7002              	 
 7003              	 
 7004 0000 80B5     	 push {r7,lr}
 7005              	.LCFI298:
 7006              	 .cfi_def_cfa_offset 8
 7007              	 .cfi_offset 7,-8
 7008              	 .cfi_offset 14,-4
 7009 0002 84B0     	 sub sp,sp,#16
 7010              	.LCFI299:
 7011              	 .cfi_def_cfa_offset 24
 7012 0004 00AF     	 add r7,sp,#0
 7013              	.LCFI300:
 7014              	 .cfi_def_cfa_register 7
 7015 0006 7860     	 str r0,[r7,#4]
 7016 0008 3960     	 str r1,[r7]
4398:../Dave/Generated/FREERTOS/tasks.c ****         size_t x;
4399:../Dave/Generated/FREERTOS/tasks.c **** 
4400:../Dave/Generated/FREERTOS/tasks.c ****         /* Start by copying the entire string. */
4401:../Dave/Generated/FREERTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
 7017              	 .loc 1 4401 0
 7018 000a 7868     	 ldr r0,[r7,#4]
 7019 000c 3968     	 ldr r1,[r7]
 7020 000e FFF7FEFF 	 bl strcpy
4402:../Dave/Generated/FREERTOS/tasks.c **** 
4403:../Dave/Generated/FREERTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4404:../Dave/Generated/FREERTOS/tasks.c ****          * printed out. */
4405:../Dave/Generated/FREERTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 7021              	 .loc 1 4405 0
 7022 0012 7868     	 ldr r0,[r7,#4]
 7023 0014 FFF7FEFF 	 bl strlen
 7024 0018 F860     	 str r0,[r7,#12]
 7025 001a 07E0     	 b .L474
 7026              	.L475:
4406:../Dave/Generated/FREERTOS/tasks.c ****         {
4407:../Dave/Generated/FREERTOS/tasks.c ****             pcBuffer[ x ] = ' ';
 7027              	 .loc 1 4407 0 discriminator 3
 7028 001c 7A68     	 ldr r2,[r7,#4]
 7029 001e FB68     	 ldr r3,[r7,#12]
 7030 0020 1344     	 add r3,r3,r2
 7031 0022 2022     	 movs r2,#32
 7032 0024 1A70     	 strb r2,[r3]
4405:../Dave/Generated/FREERTOS/tasks.c ****         {
 7033              	 .loc 1 4405 0 discriminator 3
 7034 0026 FB68     	 ldr r3,[r7,#12]
 7035 0028 0133     	 adds r3,r3,#1
 7036 002a FB60     	 str r3,[r7,#12]
 7037              	.L474:
4405:../Dave/Generated/FREERTOS/tasks.c ****         {
 7038              	 .loc 1 4405 0 is_stmt 0 discriminator 1
 7039 002c FB68     	 ldr r3,[r7,#12]
 7040 002e 0E2B     	 cmp r3,#14
 7041 0030 F4D9     	 bls .L475
4408:../Dave/Generated/FREERTOS/tasks.c ****         }
4409:../Dave/Generated/FREERTOS/tasks.c **** 
4410:../Dave/Generated/FREERTOS/tasks.c ****         /* Terminate. */
4411:../Dave/Generated/FREERTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
 7042              	 .loc 1 4411 0 is_stmt 1
 7043 0032 7A68     	 ldr r2,[r7,#4]
 7044 0034 FB68     	 ldr r3,[r7,#12]
 7045 0036 1344     	 add r3,r3,r2
 7046 0038 0022     	 movs r2,#0
 7047 003a 1A70     	 strb r2,[r3]
4412:../Dave/Generated/FREERTOS/tasks.c **** 
4413:../Dave/Generated/FREERTOS/tasks.c ****         /* Return the new end of string. */
4414:../Dave/Generated/FREERTOS/tasks.c ****         return &( pcBuffer[ x ] );
 7048              	 .loc 1 4414 0
 7049 003c 7A68     	 ldr r2,[r7,#4]
 7050 003e FB68     	 ldr r3,[r7,#12]
 7051 0040 1344     	 add r3,r3,r2
4415:../Dave/Generated/FREERTOS/tasks.c ****     }
 7052              	 .loc 1 4415 0
 7053 0042 1846     	 mov r0,r3
 7054 0044 1037     	 adds r7,r7,#16
 7055              	.LCFI301:
 7056              	 .cfi_def_cfa_offset 8
 7057 0046 BD46     	 mov sp,r7
 7058              	.LCFI302:
 7059              	 .cfi_def_cfa_register 13
 7060              	 
 7061 0048 80BD     	 pop {r7,pc}
 7062              	 .cfi_endproc
 7063              	.LFE195:
 7065 004a 00BF     	 .section .rodata
 7066 0005 000000   	 .align 2
 7067              	.LC1:
 7068 0008 09256309 	 .ascii "\011%c\011%u\011%u\011%u\015\012\000"
 7068      25750925 
 7068      75092575 
 7068      0D0A00
 7069 0017 00       	 .section .text.vTaskList,"ax",%progbits
 7070              	 .align 2
 7071              	 .global vTaskList
 7072              	 .thumb
 7073              	 .thumb_func
 7075              	vTaskList:
 7076              	.LFB196:
4416:../Dave/Generated/FREERTOS/tasks.c **** 
4417:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4418:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4419:../Dave/Generated/FREERTOS/tasks.c **** 
4420:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4421:../Dave/Generated/FREERTOS/tasks.c **** 
4422:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4423:../Dave/Generated/FREERTOS/tasks.c ****     {
 7077              	 .loc 1 4423 0
 7078              	 .cfi_startproc
 7079              	 
 7080              	 
 7081 0000 B0B5     	 push {r4,r5,r7,lr}
 7082              	.LCFI303:
 7083              	 .cfi_def_cfa_offset 16
 7084              	 .cfi_offset 4,-16
 7085              	 .cfi_offset 5,-12
 7086              	 .cfi_offset 7,-8
 7087              	 .cfi_offset 14,-4
 7088 0002 88B0     	 sub sp,sp,#32
 7089              	.LCFI304:
 7090              	 .cfi_def_cfa_offset 48
 7091 0004 02AF     	 add r7,sp,#8
 7092              	.LCFI305:
 7093              	 .cfi_def_cfa 7,40
 7094 0006 7860     	 str r0,[r7,#4]
4424:../Dave/Generated/FREERTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4425:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4426:../Dave/Generated/FREERTOS/tasks.c ****         char cStatus;
4427:../Dave/Generated/FREERTOS/tasks.c **** 
4428:../Dave/Generated/FREERTOS/tasks.c ****         /*
4429:../Dave/Generated/FREERTOS/tasks.c ****          * PLEASE NOTE:
4430:../Dave/Generated/FREERTOS/tasks.c ****          *
4431:../Dave/Generated/FREERTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4432:../Dave/Generated/FREERTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4433:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler.
4434:../Dave/Generated/FREERTOS/tasks.c ****          *
4435:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4436:../Dave/Generated/FREERTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4437:../Dave/Generated/FREERTOS/tasks.c ****          * displays task names, states and stack usage.
4438:../Dave/Generated/FREERTOS/tasks.c ****          *
4439:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4440:../Dave/Generated/FREERTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4441:../Dave/Generated/FREERTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4442:../Dave/Generated/FREERTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4443:../Dave/Generated/FREERTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4444:../Dave/Generated/FREERTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4445:../Dave/Generated/FREERTOS/tasks.c ****          * snprintf() implementation!).
4446:../Dave/Generated/FREERTOS/tasks.c ****          *
4447:../Dave/Generated/FREERTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4448:../Dave/Generated/FREERTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4449:../Dave/Generated/FREERTOS/tasks.c ****          * through a call to vTaskList().
4450:../Dave/Generated/FREERTOS/tasks.c ****          */
4451:../Dave/Generated/FREERTOS/tasks.c **** 
4452:../Dave/Generated/FREERTOS/tasks.c **** 
4453:../Dave/Generated/FREERTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4454:../Dave/Generated/FREERTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
 7095              	 .loc 1 4454 0
 7096 0008 7B68     	 ldr r3,[r7,#4]
 7097 000a 0022     	 movs r2,#0
 7098 000c 1A70     	 strb r2,[r3]
4455:../Dave/Generated/FREERTOS/tasks.c **** 
4456:../Dave/Generated/FREERTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4457:../Dave/Generated/FREERTOS/tasks.c ****          * function is executing. */
4458:../Dave/Generated/FREERTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
 7099              	 .loc 1 4458 0
 7100 000e 454B     	 ldr r3,.L489
 7101 0010 1B68     	 ldr r3,[r3]
 7102 0012 FB60     	 str r3,[r7,#12]
4459:../Dave/Generated/FREERTOS/tasks.c **** 
4460:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4461:../Dave/Generated/FREERTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4462:../Dave/Generated/FREERTOS/tasks.c ****          * equate to NULL. */
4463:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
 7103              	 .loc 1 4463 0
 7104 0014 434B     	 ldr r3,.L489
 7105 0016 1A68     	 ldr r2,[r3]
 7106 0018 1346     	 mov r3,r2
 7107 001a DB00     	 lsls r3,r3,#3
 7108 001c 1344     	 add r3,r3,r2
 7109 001e 9B00     	 lsls r3,r3,#2
 7110 0020 1846     	 mov r0,r3
 7111 0022 FFF7FEFF 	 bl pvPortMalloc
 7112 0026 B860     	 str r0,[r7,#8]
4464:../Dave/Generated/FREERTOS/tasks.c **** 
4465:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
 7113              	 .loc 1 4465 0
 7114 0028 BB68     	 ldr r3,[r7,#8]
 7115 002a 002B     	 cmp r3,#0
 7116 002c 76D0     	 beq .L477
4466:../Dave/Generated/FREERTOS/tasks.c ****         {
4467:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the (binary) data. */
4468:../Dave/Generated/FREERTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 7117              	 .loc 1 4468 0
 7118 002e B868     	 ldr r0,[r7,#8]
 7119 0030 F968     	 ldr r1,[r7,#12]
 7120 0032 0022     	 movs r2,#0
 7121 0034 FFF7FEFF 	 bl uxTaskGetSystemState
 7122 0038 F860     	 str r0,[r7,#12]
4469:../Dave/Generated/FREERTOS/tasks.c **** 
4470:../Dave/Generated/FREERTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4471:../Dave/Generated/FREERTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
 7123              	 .loc 1 4471 0
 7124 003a 0023     	 movs r3,#0
 7125 003c 7B61     	 str r3,[r7,#20]
 7126 003e 66E0     	 b .L479
 7127              	.L488:
4472:../Dave/Generated/FREERTOS/tasks.c ****             {
4473:../Dave/Generated/FREERTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
 7128              	 .loc 1 4473 0
 7129 0040 7A69     	 ldr r2,[r7,#20]
 7130 0042 1346     	 mov r3,r2
 7131 0044 DB00     	 lsls r3,r3,#3
 7132 0046 1344     	 add r3,r3,r2
 7133 0048 9B00     	 lsls r3,r3,#2
 7134 004a 1A46     	 mov r2,r3
 7135 004c BB68     	 ldr r3,[r7,#8]
 7136 004e 1344     	 add r3,r3,r2
 7137 0050 1B7B     	 ldrb r3,[r3,#12]
 7138 0052 042B     	 cmp r3,#4
 7139 0054 1BD8     	 bhi .L480
 7140 0056 01A2     	 adr r2,.L482
 7141 0058 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7142              	 .p2align 2
 7143              	.L482:
 7144 005c 71000000 	 .word .L481+1
 7145 0060 77000000 	 .word .L483+1
 7146 0064 7D000000 	 .word .L484+1
 7147 0068 83000000 	 .word .L485+1
 7148 006c 89000000 	 .word .L486+1
 7149              	 .p2align 1
 7150              	.L481:
4474:../Dave/Generated/FREERTOS/tasks.c ****                 {
4475:../Dave/Generated/FREERTOS/tasks.c ****                     case eRunning:
4476:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
 7151              	 .loc 1 4476 0
 7152 0070 5823     	 movs r3,#88
 7153 0072 FB74     	 strb r3,[r7,#19]
4477:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7154              	 .loc 1 4477 0
 7155 0074 0EE0     	 b .L487
 7156              	.L483:
4478:../Dave/Generated/FREERTOS/tasks.c **** 
4479:../Dave/Generated/FREERTOS/tasks.c ****                     case eReady:
4480:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
 7157              	 .loc 1 4480 0
 7158 0076 5223     	 movs r3,#82
 7159 0078 FB74     	 strb r3,[r7,#19]
4481:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7160              	 .loc 1 4481 0
 7161 007a 0BE0     	 b .L487
 7162              	.L484:
4482:../Dave/Generated/FREERTOS/tasks.c **** 
4483:../Dave/Generated/FREERTOS/tasks.c ****                     case eBlocked:
4484:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
 7163              	 .loc 1 4484 0
 7164 007c 4223     	 movs r3,#66
 7165 007e FB74     	 strb r3,[r7,#19]
4485:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7166              	 .loc 1 4485 0
 7167 0080 08E0     	 b .L487
 7168              	.L485:
4486:../Dave/Generated/FREERTOS/tasks.c **** 
4487:../Dave/Generated/FREERTOS/tasks.c ****                     case eSuspended:
4488:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
 7169              	 .loc 1 4488 0
 7170 0082 5323     	 movs r3,#83
 7171 0084 FB74     	 strb r3,[r7,#19]
4489:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7172              	 .loc 1 4489 0
 7173 0086 05E0     	 b .L487
 7174              	.L486:
4490:../Dave/Generated/FREERTOS/tasks.c **** 
4491:../Dave/Generated/FREERTOS/tasks.c ****                     case eDeleted:
4492:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
 7175              	 .loc 1 4492 0
 7176 0088 4423     	 movs r3,#68
 7177 008a FB74     	 strb r3,[r7,#19]
4493:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7178              	 .loc 1 4493 0
 7179 008c 02E0     	 b .L487
 7180              	.L480:
4494:../Dave/Generated/FREERTOS/tasks.c **** 
4495:../Dave/Generated/FREERTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4496:../Dave/Generated/FREERTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4497:../Dave/Generated/FREERTOS/tasks.c ****                                     * to prevent static checking errors. */
4498:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = ( char ) 0x00;
 7181              	 .loc 1 4498 0
 7182 008e 0023     	 movs r3,#0
 7183 0090 FB74     	 strb r3,[r7,#19]
4499:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 7184              	 .loc 1 4499 0
 7185 0092 00BF     	 nop
 7186              	.L487:
4500:../Dave/Generated/FREERTOS/tasks.c ****                 }
4501:../Dave/Generated/FREERTOS/tasks.c **** 
4502:../Dave/Generated/FREERTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4503:../Dave/Generated/FREERTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4504:../Dave/Generated/FREERTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
 7187              	 .loc 1 4504 0 discriminator 2
 7188 0094 7A69     	 ldr r2,[r7,#20]
 7189 0096 1346     	 mov r3,r2
 7190 0098 DB00     	 lsls r3,r3,#3
 7191 009a 1344     	 add r3,r3,r2
 7192 009c 9B00     	 lsls r3,r3,#2
 7193 009e 1A46     	 mov r2,r3
 7194 00a0 BB68     	 ldr r3,[r7,#8]
 7195 00a2 1344     	 add r3,r3,r2
 7196 00a4 5B68     	 ldr r3,[r3,#4]
 7197 00a6 7868     	 ldr r0,[r7,#4]
 7198 00a8 1946     	 mov r1,r3
 7199 00aa FFF7FEFF 	 bl prvWriteNameToBuffer
 7200 00ae 7860     	 str r0,[r7,#4]
4505:../Dave/Generated/FREERTOS/tasks.c **** 
4506:../Dave/Generated/FREERTOS/tasks.c ****                 /* Write the rest of the string. */
4507:../Dave/Generated/FREERTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
 7201              	 .loc 1 4507 0 discriminator 2
 7202 00b0 FD7C     	 ldrb r5,[r7,#19]
 7203 00b2 7A69     	 ldr r2,[r7,#20]
 7204 00b4 1346     	 mov r3,r2
 7205 00b6 DB00     	 lsls r3,r3,#3
 7206 00b8 1344     	 add r3,r3,r2
 7207 00ba 9B00     	 lsls r3,r3,#2
 7208 00bc 1A46     	 mov r2,r3
 7209 00be BB68     	 ldr r3,[r7,#8]
 7210 00c0 1344     	 add r3,r3,r2
 7211 00c2 1C69     	 ldr r4,[r3,#16]
 7212 00c4 7A69     	 ldr r2,[r7,#20]
 7213 00c6 1346     	 mov r3,r2
 7214 00c8 DB00     	 lsls r3,r3,#3
 7215 00ca 1344     	 add r3,r3,r2
 7216 00cc 9B00     	 lsls r3,r3,#2
 7217 00ce 1A46     	 mov r2,r3
 7218 00d0 BB68     	 ldr r3,[r7,#8]
 7219 00d2 1344     	 add r3,r3,r2
 7220 00d4 1B8C     	 ldrh r3,[r3,#32]
 7221 00d6 1946     	 mov r1,r3
 7222 00d8 7A69     	 ldr r2,[r7,#20]
 7223 00da 1346     	 mov r3,r2
 7224 00dc DB00     	 lsls r3,r3,#3
 7225 00de 1344     	 add r3,r3,r2
 7226 00e0 9B00     	 lsls r3,r3,#2
 7227 00e2 1A46     	 mov r2,r3
 7228 00e4 BB68     	 ldr r3,[r7,#8]
 7229 00e6 1344     	 add r3,r3,r2
 7230 00e8 9B68     	 ldr r3,[r3,#8]
 7231 00ea 0091     	 str r1,[sp]
 7232 00ec 0193     	 str r3,[sp,#4]
 7233 00ee 7868     	 ldr r0,[r7,#4]
 7234 00f0 0D49     	 ldr r1,.L489+4
 7235 00f2 2A46     	 mov r2,r5
 7236 00f4 2346     	 mov r3,r4
 7237 00f6 FFF7FEFF 	 bl sprintf
4508:../Dave/Generated/FREERTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 7238              	 .loc 1 4508 0 discriminator 2
 7239 00fa 7868     	 ldr r0,[r7,#4]
 7240 00fc FFF7FEFF 	 bl strlen
 7241 0100 0246     	 mov r2,r0
 7242 0102 7B68     	 ldr r3,[r7,#4]
 7243 0104 1344     	 add r3,r3,r2
 7244 0106 7B60     	 str r3,[r7,#4]
4471:../Dave/Generated/FREERTOS/tasks.c ****             {
 7245              	 .loc 1 4471 0 discriminator 2
 7246 0108 7B69     	 ldr r3,[r7,#20]
 7247 010a 0133     	 adds r3,r3,#1
 7248 010c 7B61     	 str r3,[r7,#20]
 7249              	.L479:
4471:../Dave/Generated/FREERTOS/tasks.c ****             {
 7250              	 .loc 1 4471 0 is_stmt 0 discriminator 1
 7251 010e 7A69     	 ldr r2,[r7,#20]
 7252 0110 FB68     	 ldr r3,[r7,#12]
 7253 0112 9A42     	 cmp r2,r3
 7254 0114 94D3     	 bcc .L488
4509:../Dave/Generated/FREERTOS/tasks.c ****             }
4510:../Dave/Generated/FREERTOS/tasks.c **** 
4511:../Dave/Generated/FREERTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4512:../Dave/Generated/FREERTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4513:../Dave/Generated/FREERTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
 7255              	 .loc 1 4513 0 is_stmt 1
 7256 0116 B868     	 ldr r0,[r7,#8]
 7257 0118 FFF7FEFF 	 bl vPortFree
 7258              	.L477:
4514:../Dave/Generated/FREERTOS/tasks.c ****         }
4515:../Dave/Generated/FREERTOS/tasks.c ****         else
4516:../Dave/Generated/FREERTOS/tasks.c ****         {
4517:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4518:../Dave/Generated/FREERTOS/tasks.c ****         }
4519:../Dave/Generated/FREERTOS/tasks.c ****     }
 7259              	 .loc 1 4519 0
 7260 011c 1837     	 adds r7,r7,#24
 7261              	.LCFI306:
 7262              	 .cfi_def_cfa_offset 16
 7263 011e BD46     	 mov sp,r7
 7264              	.LCFI307:
 7265              	 .cfi_def_cfa_register 13
 7266              	 
 7267 0120 B0BD     	 pop {r4,r5,r7,pc}
 7268              	.L490:
 7269 0122 00BF     	 .align 2
 7270              	.L489:
 7271 0124 00000000 	 .word uxCurrentNumberOfTasks
 7272 0128 08000000 	 .word .LC1
 7273              	 .cfi_endproc
 7274              	.LFE196:
 7276              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 7277              	 .align 2
 7278              	 .global uxTaskResetEventItemValue
 7279              	 .thumb
 7280              	 .thumb_func
 7282              	uxTaskResetEventItemValue:
 7283              	.LFB197:
4520:../Dave/Generated/FREERTOS/tasks.c **** 
4521:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4522:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
4523:../Dave/Generated/FREERTOS/tasks.c **** 
4524:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4525:../Dave/Generated/FREERTOS/tasks.c **** 
4526:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4527:../Dave/Generated/FREERTOS/tasks.c ****     {
4528:../Dave/Generated/FREERTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4529:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4530:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4531:../Dave/Generated/FREERTOS/tasks.c **** 
4532:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4533:../Dave/Generated/FREERTOS/tasks.c ****             {
4534:../Dave/Generated/FREERTOS/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4535:../Dave/Generated/FREERTOS/tasks.c ****             }
4536:../Dave/Generated/FREERTOS/tasks.c ****         #endif
4537:../Dave/Generated/FREERTOS/tasks.c **** 
4538:../Dave/Generated/FREERTOS/tasks.c ****         /*
4539:../Dave/Generated/FREERTOS/tasks.c ****          * PLEASE NOTE:
4540:../Dave/Generated/FREERTOS/tasks.c ****          *
4541:../Dave/Generated/FREERTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4542:../Dave/Generated/FREERTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4543:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler.
4544:../Dave/Generated/FREERTOS/tasks.c ****          *
4545:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4546:../Dave/Generated/FREERTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4547:../Dave/Generated/FREERTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4548:../Dave/Generated/FREERTOS/tasks.c ****          * in both absolute and percentage terms.
4549:../Dave/Generated/FREERTOS/tasks.c ****          *
4550:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4551:../Dave/Generated/FREERTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4552:../Dave/Generated/FREERTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4553:../Dave/Generated/FREERTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4554:../Dave/Generated/FREERTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4555:../Dave/Generated/FREERTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4556:../Dave/Generated/FREERTOS/tasks.c ****          * a full snprintf() implementation!).
4557:../Dave/Generated/FREERTOS/tasks.c ****          *
4558:../Dave/Generated/FREERTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4559:../Dave/Generated/FREERTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4560:../Dave/Generated/FREERTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4561:../Dave/Generated/FREERTOS/tasks.c ****          */
4562:../Dave/Generated/FREERTOS/tasks.c **** 
4563:../Dave/Generated/FREERTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4564:../Dave/Generated/FREERTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4565:../Dave/Generated/FREERTOS/tasks.c **** 
4566:../Dave/Generated/FREERTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4567:../Dave/Generated/FREERTOS/tasks.c ****          * function is executing. */
4568:../Dave/Generated/FREERTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4569:../Dave/Generated/FREERTOS/tasks.c **** 
4570:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4571:../Dave/Generated/FREERTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4572:../Dave/Generated/FREERTOS/tasks.c ****          * equate to NULL. */
4573:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4574:../Dave/Generated/FREERTOS/tasks.c **** 
4575:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4576:../Dave/Generated/FREERTOS/tasks.c ****         {
4577:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the (binary) data. */
4578:../Dave/Generated/FREERTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4579:../Dave/Generated/FREERTOS/tasks.c **** 
4580:../Dave/Generated/FREERTOS/tasks.c ****             /* For percentage calculations. */
4581:../Dave/Generated/FREERTOS/tasks.c ****             ulTotalTime /= 100UL;
4582:../Dave/Generated/FREERTOS/tasks.c **** 
4583:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid divide by zero errors. */
4584:../Dave/Generated/FREERTOS/tasks.c ****             if( ulTotalTime > 0UL )
4585:../Dave/Generated/FREERTOS/tasks.c ****             {
4586:../Dave/Generated/FREERTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4587:../Dave/Generated/FREERTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4588:../Dave/Generated/FREERTOS/tasks.c ****                 {
4589:../Dave/Generated/FREERTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4590:../Dave/Generated/FREERTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4591:../Dave/Generated/FREERTOS/tasks.c ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4592:../Dave/Generated/FREERTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4593:../Dave/Generated/FREERTOS/tasks.c **** 
4594:../Dave/Generated/FREERTOS/tasks.c ****                     /* Write the task name to the string, padding with
4595:../Dave/Generated/FREERTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4596:../Dave/Generated/FREERTOS/tasks.c ****                      * easily. */
4597:../Dave/Generated/FREERTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4598:../Dave/Generated/FREERTOS/tasks.c **** 
4599:../Dave/Generated/FREERTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4600:../Dave/Generated/FREERTOS/tasks.c ****                     {
4601:../Dave/Generated/FREERTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4602:../Dave/Generated/FREERTOS/tasks.c ****                             {
4603:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4604:../Dave/Generated/FREERTOS/tasks.c ****                             }
4605:../Dave/Generated/FREERTOS/tasks.c ****                         #else
4606:../Dave/Generated/FREERTOS/tasks.c ****                             {
4607:../Dave/Generated/FREERTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4608:../Dave/Generated/FREERTOS/tasks.c ****                                  * printf() library can be used. */
4609:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4610:../Dave/Generated/FREERTOS/tasks.c ****                             }
4611:../Dave/Generated/FREERTOS/tasks.c ****                         #endif
4612:../Dave/Generated/FREERTOS/tasks.c ****                     }
4613:../Dave/Generated/FREERTOS/tasks.c ****                     else
4614:../Dave/Generated/FREERTOS/tasks.c ****                     {
4615:../Dave/Generated/FREERTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4616:../Dave/Generated/FREERTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4617:../Dave/Generated/FREERTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4618:../Dave/Generated/FREERTOS/tasks.c ****                             {
4619:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4620:../Dave/Generated/FREERTOS/tasks.c ****                             }
4621:../Dave/Generated/FREERTOS/tasks.c ****                         #else
4622:../Dave/Generated/FREERTOS/tasks.c ****                             {
4623:../Dave/Generated/FREERTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4624:../Dave/Generated/FREERTOS/tasks.c ****                                  * printf() library can be used. */
4625:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4626:../Dave/Generated/FREERTOS/tasks.c ****                             }
4627:../Dave/Generated/FREERTOS/tasks.c ****                         #endif
4628:../Dave/Generated/FREERTOS/tasks.c ****                     }
4629:../Dave/Generated/FREERTOS/tasks.c **** 
4630:../Dave/Generated/FREERTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4631:../Dave/Generated/FREERTOS/tasks.c ****                 }
4632:../Dave/Generated/FREERTOS/tasks.c ****             }
4633:../Dave/Generated/FREERTOS/tasks.c ****             else
4634:../Dave/Generated/FREERTOS/tasks.c ****             {
4635:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4636:../Dave/Generated/FREERTOS/tasks.c ****             }
4637:../Dave/Generated/FREERTOS/tasks.c **** 
4638:../Dave/Generated/FREERTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4639:../Dave/Generated/FREERTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4640:../Dave/Generated/FREERTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4641:../Dave/Generated/FREERTOS/tasks.c ****         }
4642:../Dave/Generated/FREERTOS/tasks.c ****         else
4643:../Dave/Generated/FREERTOS/tasks.c ****         {
4644:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4645:../Dave/Generated/FREERTOS/tasks.c ****         }
4646:../Dave/Generated/FREERTOS/tasks.c ****     }
4647:../Dave/Generated/FREERTOS/tasks.c **** 
4648:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4649:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4650:../Dave/Generated/FREERTOS/tasks.c **** 
4651:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4652:../Dave/Generated/FREERTOS/tasks.c **** {
 7284              	 .loc 1 4652 0
 7285              	 .cfi_startproc
 7286              	 
 7287              	 
 7288              	 
 7289 0000 80B4     	 push {r7}
 7290              	.LCFI308:
 7291              	 .cfi_def_cfa_offset 4
 7292              	 .cfi_offset 7,-4
 7293 0002 83B0     	 sub sp,sp,#12
 7294              	.LCFI309:
 7295              	 .cfi_def_cfa_offset 16
 7296 0004 00AF     	 add r7,sp,#0
 7297              	.LCFI310:
 7298              	 .cfi_def_cfa_register 7
4653:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t uxReturn;
4654:../Dave/Generated/FREERTOS/tasks.c **** 
4655:../Dave/Generated/FREERTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7299              	 .loc 1 4655 0
 7300 0006 094B     	 ldr r3,.L493
 7301 0008 1B68     	 ldr r3,[r3]
 7302 000a 9B69     	 ldr r3,[r3,#24]
 7303 000c 7B60     	 str r3,[r7,#4]
4656:../Dave/Generated/FREERTOS/tasks.c **** 
4657:../Dave/Generated/FREERTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4658:../Dave/Generated/FREERTOS/tasks.c ****      * queues and semaphores. */
4659:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
 7304              	 .loc 1 4659 0
 7305 000e 074B     	 ldr r3,.L493
 7306 0010 1B68     	 ldr r3,[r3]
 7307 0012 064A     	 ldr r2,.L493
 7308 0014 1268     	 ldr r2,[r2]
 7309 0016 D26A     	 ldr r2,[r2,#44]
 7310 0018 C2F13802 	 rsb r2,r2,#56
 7311 001c 9A61     	 str r2,[r3,#24]
4660:../Dave/Generated/FREERTOS/tasks.c **** 
4661:../Dave/Generated/FREERTOS/tasks.c ****     return uxReturn;
 7312              	 .loc 1 4661 0
 7313 001e 7B68     	 ldr r3,[r7,#4]
4662:../Dave/Generated/FREERTOS/tasks.c **** }
 7314              	 .loc 1 4662 0
 7315 0020 1846     	 mov r0,r3
 7316 0022 0C37     	 adds r7,r7,#12
 7317              	.LCFI311:
 7318              	 .cfi_def_cfa_offset 4
 7319 0024 BD46     	 mov sp,r7
 7320              	.LCFI312:
 7321              	 .cfi_def_cfa_register 13
 7322              	 
 7323 0026 5DF8047B 	 ldr r7,[sp],#4
 7324              	.LCFI313:
 7325              	 .cfi_restore 7
 7326              	 .cfi_def_cfa_offset 0
 7327 002a 7047     	 bx lr
 7328              	.L494:
 7329              	 .align 2
 7330              	.L493:
 7331 002c 00000000 	 .word pxCurrentTCB
 7332              	 .cfi_endproc
 7333              	.LFE197:
 7335              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7336              	 .align 2
 7337              	 .global pvTaskIncrementMutexHeldCount
 7338              	 .thumb
 7339              	 .thumb_func
 7341              	pvTaskIncrementMutexHeldCount:
 7342              	.LFB198:
4663:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4664:../Dave/Generated/FREERTOS/tasks.c **** 
4665:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4666:../Dave/Generated/FREERTOS/tasks.c **** 
4667:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4668:../Dave/Generated/FREERTOS/tasks.c ****     {
 7343              	 .loc 1 4668 0
 7344              	 .cfi_startproc
 7345              	 
 7346              	 
 7347              	 
 7348 0000 80B4     	 push {r7}
 7349              	.LCFI314:
 7350              	 .cfi_def_cfa_offset 4
 7351              	 .cfi_offset 7,-4
 7352 0002 00AF     	 add r7,sp,#0
 7353              	.LCFI315:
 7354              	 .cfi_def_cfa_register 7
4669:../Dave/Generated/FREERTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4670:../Dave/Generated/FREERTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4671:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB != NULL )
 7355              	 .loc 1 4671 0
 7356 0004 074B     	 ldr r3,.L498
 7357 0006 1B68     	 ldr r3,[r3]
 7358 0008 002B     	 cmp r3,#0
 7359 000a 04D0     	 beq .L496
4672:../Dave/Generated/FREERTOS/tasks.c ****         {
4673:../Dave/Generated/FREERTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
 7360              	 .loc 1 4673 0
 7361 000c 054B     	 ldr r3,.L498
 7362 000e 1B68     	 ldr r3,[r3]
 7363 0010 1A6D     	 ldr r2,[r3,#80]
 7364 0012 0132     	 adds r2,r2,#1
 7365 0014 1A65     	 str r2,[r3,#80]
 7366              	.L496:
4674:../Dave/Generated/FREERTOS/tasks.c ****         }
4675:../Dave/Generated/FREERTOS/tasks.c **** 
4676:../Dave/Generated/FREERTOS/tasks.c ****         return pxCurrentTCB;
 7367              	 .loc 1 4676 0
 7368 0016 034B     	 ldr r3,.L498
 7369 0018 1B68     	 ldr r3,[r3]
4677:../Dave/Generated/FREERTOS/tasks.c ****     }
 7370              	 .loc 1 4677 0
 7371 001a 1846     	 mov r0,r3
 7372 001c BD46     	 mov sp,r7
 7373              	.LCFI316:
 7374              	 .cfi_def_cfa_register 13
 7375              	 
 7376 001e 5DF8047B 	 ldr r7,[sp],#4
 7377              	.LCFI317:
 7378              	 .cfi_restore 7
 7379              	 .cfi_def_cfa_offset 0
 7380 0022 7047     	 bx lr
 7381              	.L499:
 7382              	 .align 2
 7383              	.L498:
 7384 0024 00000000 	 .word pxCurrentTCB
 7385              	 .cfi_endproc
 7386              	.LFE198:
 7388              	 .section .text.ulTaskGenericNotifyTake,"ax",%progbits
 7389              	 .align 2
 7390              	 .global ulTaskGenericNotifyTake
 7391              	 .thumb
 7392              	 .thumb_func
 7394              	ulTaskGenericNotifyTake:
 7395              	.LFB199:
4678:../Dave/Generated/FREERTOS/tasks.c **** 
4679:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4680:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4681:../Dave/Generated/FREERTOS/tasks.c **** 
4682:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4683:../Dave/Generated/FREERTOS/tasks.c **** 
4684:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4685:../Dave/Generated/FREERTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4686:../Dave/Generated/FREERTOS/tasks.c ****                                       TickType_t xTicksToWait )
4687:../Dave/Generated/FREERTOS/tasks.c ****     {
 7396              	 .loc 1 4687 0
 7397              	 .cfi_startproc
 7398              	 
 7399              	 
 7400 0000 80B5     	 push {r7,lr}
 7401              	.LCFI318:
 7402              	 .cfi_def_cfa_offset 8
 7403              	 .cfi_offset 7,-8
 7404              	 .cfi_offset 14,-4
 7405 0002 86B0     	 sub sp,sp,#24
 7406              	.LCFI319:
 7407              	 .cfi_def_cfa_offset 32
 7408 0004 00AF     	 add r7,sp,#0
 7409              	.LCFI320:
 7410              	 .cfi_def_cfa_register 7
 7411 0006 F860     	 str r0,[r7,#12]
 7412 0008 B960     	 str r1,[r7,#8]
 7413 000a 7A60     	 str r2,[r7,#4]
4688:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulReturn;
4689:../Dave/Generated/FREERTOS/tasks.c **** 
4690:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7414              	 .loc 1 4690 0
 7415 000c FB68     	 ldr r3,[r7,#12]
 7416 000e 002B     	 cmp r3,#0
 7417 0010 09D0     	 beq .L501
 7418              	.LBB250:
 7419              	.LBB251:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7420              	 .loc 2 197 0 discriminator 1
 7421              	
 7422 0012 4FF0FC03 	 mov r3,#252
 7423 0016 83F31188 	 msr basepri,r3
 7424 001a BFF36F8F 	 isb 
 7425 001e BFF34F8F 	 dsb 
 7426              	
 7427              	
 7428              	 .thumb
 7429 0022 3B61     	 str r3,[r7,#16]
 7430              	.L502:
 7431              	.LBE251:
 7432              	.LBE250:
 7433              	 .loc 1 4690 0 discriminator 1
 7434 0024 FEE7     	 b .L502
 7435              	.L501:
4691:../Dave/Generated/FREERTOS/tasks.c **** 
4692:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7436              	 .loc 1 4692 0
 7437 0026 FFF7FEFF 	 bl vPortEnterCritical
4693:../Dave/Generated/FREERTOS/tasks.c ****         {
4694:../Dave/Generated/FREERTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4695:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 7438              	 .loc 1 4695 0
 7439 002a 264B     	 ldr r3,.L508
 7440 002c 1B68     	 ldr r3,[r3]
 7441 002e FA68     	 ldr r2,[r7,#12]
 7442 0030 1A32     	 adds r2,r2,#26
 7443 0032 53F82230 	 ldr r3,[r3,r2,lsl#2]
 7444 0036 002B     	 cmp r3,#0
 7445 0038 15D1     	 bne .L503
4696:../Dave/Generated/FREERTOS/tasks.c ****             {
4697:../Dave/Generated/FREERTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4698:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7446              	 .loc 1 4698 0
 7447 003a 224B     	 ldr r3,.L508
 7448 003c 1A68     	 ldr r2,[r3]
 7449 003e FB68     	 ldr r3,[r7,#12]
 7450 0040 1344     	 add r3,r3,r2
 7451 0042 6833     	 adds r3,r3,#104
 7452 0044 0122     	 movs r2,#1
 7453 0046 1A71     	 strb r2,[r3,#4]
4699:../Dave/Generated/FREERTOS/tasks.c **** 
4700:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 7454              	 .loc 1 4700 0
 7455 0048 7B68     	 ldr r3,[r7,#4]
 7456 004a 002B     	 cmp r3,#0
 7457 004c 0BD0     	 beq .L503
4701:../Dave/Generated/FREERTOS/tasks.c ****                 {
4702:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7458              	 .loc 1 4702 0
 7459 004e 7868     	 ldr r0,[r7,#4]
 7460 0050 0121     	 movs r1,#1
 7461 0052 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4703:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4704:../Dave/Generated/FREERTOS/tasks.c **** 
4705:../Dave/Generated/FREERTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4706:../Dave/Generated/FREERTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4707:../Dave/Generated/FREERTOS/tasks.c ****                      * critical section exits) - but it is not something that
4708:../Dave/Generated/FREERTOS/tasks.c ****                      * application code should ever do. */
4709:../Dave/Generated/FREERTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7462              	 .loc 1 4709 0
 7463 0056 1C4B     	 ldr r3,.L508+4
 7464 0058 4FF08052 	 mov r2,#268435456
 7465 005c 1A60     	 str r2,[r3]
 7466              	
 7467 005e BFF34F8F 	 dsb
 7468              	
 7469              	
 7470 0062 BFF36F8F 	 isb
 7471              	
 7472              	 .thumb
 7473              	.L503:
4710:../Dave/Generated/FREERTOS/tasks.c ****                 }
4711:../Dave/Generated/FREERTOS/tasks.c ****                 else
4712:../Dave/Generated/FREERTOS/tasks.c ****                 {
4713:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4714:../Dave/Generated/FREERTOS/tasks.c ****                 }
4715:../Dave/Generated/FREERTOS/tasks.c ****             }
4716:../Dave/Generated/FREERTOS/tasks.c ****             else
4717:../Dave/Generated/FREERTOS/tasks.c ****             {
4718:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4719:../Dave/Generated/FREERTOS/tasks.c ****             }
4720:../Dave/Generated/FREERTOS/tasks.c ****         }
4721:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7474              	 .loc 1 4721 0
 7475 0066 FFF7FEFF 	 bl vPortExitCritical
4722:../Dave/Generated/FREERTOS/tasks.c **** 
4723:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7476              	 .loc 1 4723 0
 7477 006a FFF7FEFF 	 bl vPortEnterCritical
4724:../Dave/Generated/FREERTOS/tasks.c ****         {
4725:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4726:../Dave/Generated/FREERTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7478              	 .loc 1 4726 0
 7479 006e 154B     	 ldr r3,.L508
 7480 0070 1B68     	 ldr r3,[r3]
 7481 0072 FA68     	 ldr r2,[r7,#12]
 7482 0074 1A32     	 adds r2,r2,#26
 7483 0076 53F82230 	 ldr r3,[r3,r2,lsl#2]
 7484 007a 7B61     	 str r3,[r7,#20]
4727:../Dave/Generated/FREERTOS/tasks.c **** 
4728:../Dave/Generated/FREERTOS/tasks.c ****             if( ulReturn != 0UL )
 7485              	 .loc 1 4728 0
 7486 007c 7B69     	 ldr r3,[r7,#20]
 7487 007e 002B     	 cmp r3,#0
 7488 0080 12D0     	 beq .L504
4729:../Dave/Generated/FREERTOS/tasks.c ****             {
4730:../Dave/Generated/FREERTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
 7489              	 .loc 1 4730 0
 7490 0082 BB68     	 ldr r3,[r7,#8]
 7491 0084 002B     	 cmp r3,#0
 7492 0086 07D0     	 beq .L505
4731:../Dave/Generated/FREERTOS/tasks.c ****                 {
4732:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 7493              	 .loc 1 4732 0
 7494 0088 0E4B     	 ldr r3,.L508
 7495 008a 1B68     	 ldr r3,[r3]
 7496 008c FA68     	 ldr r2,[r7,#12]
 7497 008e 1A32     	 adds r2,r2,#26
 7498 0090 0021     	 movs r1,#0
 7499 0092 43F82210 	 str r1,[r3,r2,lsl#2]
 7500 0096 07E0     	 b .L504
 7501              	.L505:
4733:../Dave/Generated/FREERTOS/tasks.c ****                 }
4734:../Dave/Generated/FREERTOS/tasks.c ****                 else
4735:../Dave/Generated/FREERTOS/tasks.c ****                 {
4736:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 7502              	 .loc 1 4736 0
 7503 0098 0A4B     	 ldr r3,.L508
 7504 009a 1B68     	 ldr r3,[r3]
 7505 009c 7A69     	 ldr r2,[r7,#20]
 7506 009e 511E     	 subs r1,r2,#1
 7507 00a0 FA68     	 ldr r2,[r7,#12]
 7508 00a2 1A32     	 adds r2,r2,#26
 7509 00a4 43F82210 	 str r1,[r3,r2,lsl#2]
 7510              	.L504:
4737:../Dave/Generated/FREERTOS/tasks.c ****                 }
4738:../Dave/Generated/FREERTOS/tasks.c ****             }
4739:../Dave/Generated/FREERTOS/tasks.c ****             else
4740:../Dave/Generated/FREERTOS/tasks.c ****             {
4741:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4742:../Dave/Generated/FREERTOS/tasks.c ****             }
4743:../Dave/Generated/FREERTOS/tasks.c **** 
4744:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7511              	 .loc 1 4744 0
 7512 00a8 064B     	 ldr r3,.L508
 7513 00aa 1A68     	 ldr r2,[r3]
 7514 00ac FB68     	 ldr r3,[r7,#12]
 7515 00ae 1344     	 add r3,r3,r2
 7516 00b0 6833     	 adds r3,r3,#104
 7517 00b2 0022     	 movs r2,#0
 7518 00b4 1A71     	 strb r2,[r3,#4]
4745:../Dave/Generated/FREERTOS/tasks.c ****         }
4746:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7519              	 .loc 1 4746 0
 7520 00b6 FFF7FEFF 	 bl vPortExitCritical
4747:../Dave/Generated/FREERTOS/tasks.c **** 
4748:../Dave/Generated/FREERTOS/tasks.c ****         return ulReturn;
 7521              	 .loc 1 4748 0
 7522 00ba 7B69     	 ldr r3,[r7,#20]
4749:../Dave/Generated/FREERTOS/tasks.c ****     }
 7523              	 .loc 1 4749 0
 7524 00bc 1846     	 mov r0,r3
 7525 00be 1837     	 adds r7,r7,#24
 7526              	.LCFI321:
 7527              	 .cfi_def_cfa_offset 8
 7528 00c0 BD46     	 mov sp,r7
 7529              	.LCFI322:
 7530              	 .cfi_def_cfa_register 13
 7531              	 
 7532 00c2 80BD     	 pop {r7,pc}
 7533              	.L509:
 7534              	 .align 2
 7535              	.L508:
 7536 00c4 00000000 	 .word pxCurrentTCB
 7537 00c8 04ED00E0 	 .word -536810236
 7538              	 .cfi_endproc
 7539              	.LFE199:
 7541              	 .section .text.xTaskGenericNotifyWait,"ax",%progbits
 7542              	 .align 2
 7543              	 .global xTaskGenericNotifyWait
 7544              	 .thumb
 7545              	 .thumb_func
 7547              	xTaskGenericNotifyWait:
 7548              	.LFB200:
4750:../Dave/Generated/FREERTOS/tasks.c **** 
4751:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4752:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4753:../Dave/Generated/FREERTOS/tasks.c **** 
4754:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4755:../Dave/Generated/FREERTOS/tasks.c **** 
4756:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4757:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4758:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4759:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4760:../Dave/Generated/FREERTOS/tasks.c ****                                        TickType_t xTicksToWait )
4761:../Dave/Generated/FREERTOS/tasks.c ****     {
 7549              	 .loc 1 4761 0
 7550              	 .cfi_startproc
 7551              	 
 7552              	 
 7553 0000 80B5     	 push {r7,lr}
 7554              	.LCFI323:
 7555              	 .cfi_def_cfa_offset 8
 7556              	 .cfi_offset 7,-8
 7557              	 .cfi_offset 14,-4
 7558 0002 86B0     	 sub sp,sp,#24
 7559              	.LCFI324:
 7560              	 .cfi_def_cfa_offset 32
 7561 0004 00AF     	 add r7,sp,#0
 7562              	.LCFI325:
 7563              	 .cfi_def_cfa_register 7
 7564 0006 F860     	 str r0,[r7,#12]
 7565 0008 B960     	 str r1,[r7,#8]
 7566 000a 7A60     	 str r2,[r7,#4]
 7567 000c 3B60     	 str r3,[r7]
4762:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
4763:../Dave/Generated/FREERTOS/tasks.c **** 
4764:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7568              	 .loc 1 4764 0
 7569 000e FB68     	 ldr r3,[r7,#12]
 7570 0010 002B     	 cmp r3,#0
 7571 0012 09D0     	 beq .L511
 7572              	.LBB252:
 7573              	.LBB253:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7574              	 .loc 2 197 0 discriminator 1
 7575              	
 7576 0014 4FF0FC03 	 mov r3,#252
 7577 0018 83F31188 	 msr basepri,r3
 7578 001c BFF36F8F 	 isb 
 7579 0020 BFF34F8F 	 dsb 
 7580              	
 7581              	
 7582              	 .thumb
 7583 0024 3B61     	 str r3,[r7,#16]
 7584              	.L512:
 7585              	.LBE253:
 7586              	.LBE252:
 7587              	 .loc 1 4764 0 discriminator 1
 7588 0026 FEE7     	 b .L512
 7589              	.L511:
4765:../Dave/Generated/FREERTOS/tasks.c **** 
4766:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7590              	 .loc 1 4766 0
 7591 0028 FFF7FEFF 	 bl vPortEnterCritical
4767:../Dave/Generated/FREERTOS/tasks.c ****         {
4768:../Dave/Generated/FREERTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4769:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 7592              	 .loc 1 4769 0
 7593 002c 314B     	 ldr r3,.L518
 7594 002e 1A68     	 ldr r2,[r3]
 7595 0030 FB68     	 ldr r3,[r7,#12]
 7596 0032 1344     	 add r3,r3,r2
 7597 0034 6833     	 adds r3,r3,#104
 7598 0036 1B79     	 ldrb r3,[r3,#4]
 7599 0038 DBB2     	 uxtb r3,r3
 7600 003a 022B     	 cmp r3,#2
 7601 003c 22D0     	 beq .L513
4770:../Dave/Generated/FREERTOS/tasks.c ****             {
4771:../Dave/Generated/FREERTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4772:../Dave/Generated/FREERTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4773:../Dave/Generated/FREERTOS/tasks.c ****                  * clear the value to zero. */
4774:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 7602              	 .loc 1 4774 0
 7603 003e 2D4B     	 ldr r3,.L518
 7604 0040 1B68     	 ldr r3,[r3]
 7605 0042 FA68     	 ldr r2,[r7,#12]
 7606 0044 1A32     	 adds r2,r2,#26
 7607 0046 53F82210 	 ldr r1,[r3,r2,lsl#2]
 7608 004a BA68     	 ldr r2,[r7,#8]
 7609 004c D243     	 mvns r2,r2
 7610 004e 1140     	 ands r1,r1,r2
 7611 0050 FA68     	 ldr r2,[r7,#12]
 7612 0052 1A32     	 adds r2,r2,#26
 7613 0054 43F82210 	 str r1,[r3,r2,lsl#2]
4775:../Dave/Generated/FREERTOS/tasks.c **** 
4776:../Dave/Generated/FREERTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4777:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7614              	 .loc 1 4777 0
 7615 0058 264B     	 ldr r3,.L518
 7616 005a 1A68     	 ldr r2,[r3]
 7617 005c FB68     	 ldr r3,[r7,#12]
 7618 005e 1344     	 add r3,r3,r2
 7619 0060 6833     	 adds r3,r3,#104
 7620 0062 0122     	 movs r2,#1
 7621 0064 1A71     	 strb r2,[r3,#4]
4778:../Dave/Generated/FREERTOS/tasks.c **** 
4779:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 7622              	 .loc 1 4779 0
 7623 0066 3B6A     	 ldr r3,[r7,#32]
 7624 0068 002B     	 cmp r3,#0
 7625 006a 0BD0     	 beq .L513
4780:../Dave/Generated/FREERTOS/tasks.c ****                 {
4781:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7626              	 .loc 1 4781 0
 7627 006c 386A     	 ldr r0,[r7,#32]
 7628 006e 0121     	 movs r1,#1
 7629 0070 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4782:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4783:../Dave/Generated/FREERTOS/tasks.c **** 
4784:../Dave/Generated/FREERTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4785:../Dave/Generated/FREERTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4786:../Dave/Generated/FREERTOS/tasks.c ****                      * critical section exits) - but it is not something that
4787:../Dave/Generated/FREERTOS/tasks.c ****                      * application code should ever do. */
4788:../Dave/Generated/FREERTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7630              	 .loc 1 4788 0
 7631 0074 204B     	 ldr r3,.L518+4
 7632 0076 4FF08052 	 mov r2,#268435456
 7633 007a 1A60     	 str r2,[r3]
 7634              	
 7635 007c BFF34F8F 	 dsb
 7636              	
 7637              	
 7638 0080 BFF36F8F 	 isb
 7639              	
 7640              	 .thumb
 7641              	.L513:
4789:../Dave/Generated/FREERTOS/tasks.c ****                 }
4790:../Dave/Generated/FREERTOS/tasks.c ****                 else
4791:../Dave/Generated/FREERTOS/tasks.c ****                 {
4792:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4793:../Dave/Generated/FREERTOS/tasks.c ****                 }
4794:../Dave/Generated/FREERTOS/tasks.c ****             }
4795:../Dave/Generated/FREERTOS/tasks.c ****             else
4796:../Dave/Generated/FREERTOS/tasks.c ****             {
4797:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4798:../Dave/Generated/FREERTOS/tasks.c ****             }
4799:../Dave/Generated/FREERTOS/tasks.c ****         }
4800:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7642              	 .loc 1 4800 0
 7643 0084 FFF7FEFF 	 bl vPortExitCritical
4801:../Dave/Generated/FREERTOS/tasks.c **** 
4802:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7644              	 .loc 1 4802 0
 7645 0088 FFF7FEFF 	 bl vPortEnterCritical
4803:../Dave/Generated/FREERTOS/tasks.c ****         {
4804:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4805:../Dave/Generated/FREERTOS/tasks.c **** 
4806:../Dave/Generated/FREERTOS/tasks.c ****             if( pulNotificationValue != NULL )
 7646              	 .loc 1 4806 0
 7647 008c 3B68     	 ldr r3,[r7]
 7648 008e 002B     	 cmp r3,#0
 7649 0090 07D0     	 beq .L514
4807:../Dave/Generated/FREERTOS/tasks.c ****             {
4808:../Dave/Generated/FREERTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4809:../Dave/Generated/FREERTOS/tasks.c ****                  * have changed. */
4810:../Dave/Generated/FREERTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7650              	 .loc 1 4810 0
 7651 0092 184B     	 ldr r3,.L518
 7652 0094 1B68     	 ldr r3,[r3]
 7653 0096 FA68     	 ldr r2,[r7,#12]
 7654 0098 1A32     	 adds r2,r2,#26
 7655 009a 53F82220 	 ldr r2,[r3,r2,lsl#2]
 7656 009e 3B68     	 ldr r3,[r7]
 7657 00a0 1A60     	 str r2,[r3]
 7658              	.L514:
4811:../Dave/Generated/FREERTOS/tasks.c ****             }
4812:../Dave/Generated/FREERTOS/tasks.c **** 
4813:../Dave/Generated/FREERTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4814:../Dave/Generated/FREERTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4815:../Dave/Generated/FREERTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4816:../Dave/Generated/FREERTOS/tasks.c ****              * unblocked because of a timeout. */
4817:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 7659              	 .loc 1 4817 0
 7660 00a2 144B     	 ldr r3,.L518
 7661 00a4 1A68     	 ldr r2,[r3]
 7662 00a6 FB68     	 ldr r3,[r7,#12]
 7663 00a8 1344     	 add r3,r3,r2
 7664 00aa 6833     	 adds r3,r3,#104
 7665 00ac 1B79     	 ldrb r3,[r3,#4]
 7666 00ae DBB2     	 uxtb r3,r3
 7667 00b0 022B     	 cmp r3,#2
 7668 00b2 02D0     	 beq .L515
4818:../Dave/Generated/FREERTOS/tasks.c ****             {
4819:../Dave/Generated/FREERTOS/tasks.c ****                 /* A notification was not received. */
4820:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFALSE;
 7669              	 .loc 1 4820 0
 7670 00b4 0023     	 movs r3,#0
 7671 00b6 7B61     	 str r3,[r7,#20]
 7672 00b8 0EE0     	 b .L516
 7673              	.L515:
4821:../Dave/Generated/FREERTOS/tasks.c ****             }
4822:../Dave/Generated/FREERTOS/tasks.c ****             else
4823:../Dave/Generated/FREERTOS/tasks.c ****             {
4824:../Dave/Generated/FREERTOS/tasks.c ****                 /* A notification was already pending or a notification was
4825:../Dave/Generated/FREERTOS/tasks.c ****                  * received while the task was waiting. */
4826:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 7674              	 .loc 1 4826 0
 7675 00ba 0E4B     	 ldr r3,.L518
 7676 00bc 1B68     	 ldr r3,[r3]
 7677 00be FA68     	 ldr r2,[r7,#12]
 7678 00c0 1A32     	 adds r2,r2,#26
 7679 00c2 53F82210 	 ldr r1,[r3,r2,lsl#2]
 7680 00c6 7A68     	 ldr r2,[r7,#4]
 7681 00c8 D243     	 mvns r2,r2
 7682 00ca 1140     	 ands r1,r1,r2
 7683 00cc FA68     	 ldr r2,[r7,#12]
 7684 00ce 1A32     	 adds r2,r2,#26
 7685 00d0 43F82210 	 str r1,[r3,r2,lsl#2]
4827:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 7686              	 .loc 1 4827 0
 7687 00d4 0123     	 movs r3,#1
 7688 00d6 7B61     	 str r3,[r7,#20]
 7689              	.L516:
4828:../Dave/Generated/FREERTOS/tasks.c ****             }
4829:../Dave/Generated/FREERTOS/tasks.c **** 
4830:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7690              	 .loc 1 4830 0
 7691 00d8 064B     	 ldr r3,.L518
 7692 00da 1A68     	 ldr r2,[r3]
 7693 00dc FB68     	 ldr r3,[r7,#12]
 7694 00de 1344     	 add r3,r3,r2
 7695 00e0 6833     	 adds r3,r3,#104
 7696 00e2 0022     	 movs r2,#0
 7697 00e4 1A71     	 strb r2,[r3,#4]
4831:../Dave/Generated/FREERTOS/tasks.c ****         }
4832:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7698              	 .loc 1 4832 0
 7699 00e6 FFF7FEFF 	 bl vPortExitCritical
4833:../Dave/Generated/FREERTOS/tasks.c **** 
4834:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 7700              	 .loc 1 4834 0
 7701 00ea 7B69     	 ldr r3,[r7,#20]
4835:../Dave/Generated/FREERTOS/tasks.c ****     }
 7702              	 .loc 1 4835 0
 7703 00ec 1846     	 mov r0,r3
 7704 00ee 1837     	 adds r7,r7,#24
 7705              	.LCFI326:
 7706              	 .cfi_def_cfa_offset 8
 7707 00f0 BD46     	 mov sp,r7
 7708              	.LCFI327:
 7709              	 .cfi_def_cfa_register 13
 7710              	 
 7711 00f2 80BD     	 pop {r7,pc}
 7712              	.L519:
 7713              	 .align 2
 7714              	.L518:
 7715 00f4 00000000 	 .word pxCurrentTCB
 7716 00f8 04ED00E0 	 .word -536810236
 7717              	 .cfi_endproc
 7718              	.LFE200:
 7720              	 .section .text.xTaskGenericNotify,"ax",%progbits
 7721              	 .align 2
 7722              	 .global xTaskGenericNotify
 7723              	 .thumb
 7724              	 .thumb_func
 7726              	xTaskGenericNotify:
 7727              	.LFB201:
4836:../Dave/Generated/FREERTOS/tasks.c **** 
4837:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4838:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4839:../Dave/Generated/FREERTOS/tasks.c **** 
4840:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4841:../Dave/Generated/FREERTOS/tasks.c **** 
4842:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4843:../Dave/Generated/FREERTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4844:../Dave/Generated/FREERTOS/tasks.c ****                                    uint32_t ulValue,
4845:../Dave/Generated/FREERTOS/tasks.c ****                                    eNotifyAction eAction,
4846:../Dave/Generated/FREERTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4847:../Dave/Generated/FREERTOS/tasks.c ****     {
 7728              	 .loc 1 4847 0
 7729              	 .cfi_startproc
 7730              	 
 7731              	 
 7732 0000 80B5     	 push {r7,lr}
 7733              	.LCFI328:
 7734              	 .cfi_def_cfa_offset 8
 7735              	 .cfi_offset 7,-8
 7736              	 .cfi_offset 14,-4
 7737 0002 8CB0     	 sub sp,sp,#48
 7738              	.LCFI329:
 7739              	 .cfi_def_cfa_offset 56
 7740 0004 00AF     	 add r7,sp,#0
 7741              	.LCFI330:
 7742              	 .cfi_def_cfa_register 7
 7743 0006 F860     	 str r0,[r7,#12]
 7744 0008 B960     	 str r1,[r7,#8]
 7745 000a 7A60     	 str r2,[r7,#4]
 7746 000c FB70     	 strb r3,[r7,#3]
4848:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
4849:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 7747              	 .loc 1 4849 0
 7748 000e 0123     	 movs r3,#1
 7749 0010 FB62     	 str r3,[r7,#44]
4850:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4851:../Dave/Generated/FREERTOS/tasks.c **** 
4852:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7750              	 .loc 1 4852 0
 7751 0012 BB68     	 ldr r3,[r7,#8]
 7752 0014 002B     	 cmp r3,#0
 7753 0016 09D0     	 beq .L521
 7754              	.LBB254:
 7755              	.LBB255:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7756              	 .loc 2 197 0 discriminator 1
 7757              	
 7758 0018 4FF0FC03 	 mov r3,#252
 7759 001c 83F31188 	 msr basepri,r3
 7760 0020 BFF36F8F 	 isb 
 7761 0024 BFF34F8F 	 dsb 
 7762              	
 7763              	
 7764              	 .thumb
 7765 0028 3B62     	 str r3,[r7,#32]
 7766              	.L522:
 7767              	.LBE255:
 7768              	.LBE254:
 7769              	 .loc 1 4852 0 discriminator 1
 7770 002a FEE7     	 b .L522
 7771              	.L521:
4853:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 7772              	 .loc 1 4853 0
 7773 002c FB68     	 ldr r3,[r7,#12]
 7774 002e 002B     	 cmp r3,#0
 7775 0030 09D1     	 bne .L523
 7776              	.LBB256:
 7777              	.LBB257:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7778              	 .loc 2 197 0 discriminator 1
 7779              	
 7780 0032 4FF0FC03 	 mov r3,#252
 7781 0036 83F31188 	 msr basepri,r3
 7782 003a BFF36F8F 	 isb 
 7783 003e BFF34F8F 	 dsb 
 7784              	
 7785              	
 7786              	 .thumb
 7787 0042 FB61     	 str r3,[r7,#28]
 7788              	.L524:
 7789              	.LBE257:
 7790              	.LBE256:
 7791              	 .loc 1 4853 0 discriminator 2
 7792 0044 FEE7     	 b .L524
 7793              	.L523:
4854:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 7794              	 .loc 1 4854 0
 7795 0046 FB68     	 ldr r3,[r7,#12]
 7796 0048 BB62     	 str r3,[r7,#40]
4855:../Dave/Generated/FREERTOS/tasks.c **** 
4856:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7797              	 .loc 1 4856 0
 7798 004a FFF7FEFF 	 bl vPortEnterCritical
4857:../Dave/Generated/FREERTOS/tasks.c ****         {
4858:../Dave/Generated/FREERTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 7799              	 .loc 1 4858 0
 7800 004e BB6B     	 ldr r3,[r7,#56]
 7801 0050 002B     	 cmp r3,#0
 7802 0052 06D0     	 beq .L525
4859:../Dave/Generated/FREERTOS/tasks.c ****             {
4860:../Dave/Generated/FREERTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 7803              	 .loc 1 4860 0
 7804 0054 BB6A     	 ldr r3,[r7,#40]
 7805 0056 BA68     	 ldr r2,[r7,#8]
 7806 0058 1A32     	 adds r2,r2,#26
 7807 005a 53F82220 	 ldr r2,[r3,r2,lsl#2]
 7808 005e BB6B     	 ldr r3,[r7,#56]
 7809 0060 1A60     	 str r2,[r3]
 7810              	.L525:
4861:../Dave/Generated/FREERTOS/tasks.c ****             }
4862:../Dave/Generated/FREERTOS/tasks.c **** 
4863:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 7811              	 .loc 1 4863 0
 7812 0062 BA6A     	 ldr r2,[r7,#40]
 7813 0064 BB68     	 ldr r3,[r7,#8]
 7814 0066 1344     	 add r3,r3,r2
 7815 0068 6833     	 adds r3,r3,#104
 7816 006a 1B79     	 ldrb r3,[r3,#4]
 7817 006c 87F82730 	 strb r3,[r7,#39]
4864:../Dave/Generated/FREERTOS/tasks.c **** 
4865:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7818              	 .loc 1 4865 0
 7819 0070 BA6A     	 ldr r2,[r7,#40]
 7820 0072 BB68     	 ldr r3,[r7,#8]
 7821 0074 1344     	 add r3,r3,r2
 7822 0076 6833     	 adds r3,r3,#104
 7823 0078 0222     	 movs r2,#2
 7824 007a 1A71     	 strb r2,[r3,#4]
4866:../Dave/Generated/FREERTOS/tasks.c **** 
4867:../Dave/Generated/FREERTOS/tasks.c ****             switch( eAction )
 7825              	 .loc 1 4867 0
 7826 007c FB78     	 ldrb r3,[r7,#3]
 7827 007e 042B     	 cmp r3,#4
 7828 0080 3BD8     	 bhi .L526
 7829 0082 01A2     	 adr r2,.L528
 7830 0084 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7831              	 .p2align 2
 7832              	.L528:
 7833 0088 19010000 	 .word .L543+1
 7834 008c 9D000000 	 .word .L529+1
 7835 0090 B9000000 	 .word .L530+1
 7836 0094 D1000000 	 .word .L531+1
 7837 0098 DF000000 	 .word .L532+1
 7838              	 .p2align 1
 7839              	.L529:
4868:../Dave/Generated/FREERTOS/tasks.c ****             {
4869:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetBits:
4870:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 7840              	 .loc 1 4870 0
 7841 009c BB6A     	 ldr r3,[r7,#40]
 7842 009e BA68     	 ldr r2,[r7,#8]
 7843 00a0 1A32     	 adds r2,r2,#26
 7844 00a2 53F82220 	 ldr r2,[r3,r2,lsl#2]
 7845 00a6 7B68     	 ldr r3,[r7,#4]
 7846 00a8 42EA0301 	 orr r1,r2,r3
 7847 00ac BB6A     	 ldr r3,[r7,#40]
 7848 00ae BA68     	 ldr r2,[r7,#8]
 7849 00b0 1A32     	 adds r2,r2,#26
 7850 00b2 43F82210 	 str r1,[r3,r2,lsl#2]
4871:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7851              	 .loc 1 4871 0
 7852 00b6 30E0     	 b .L533
 7853              	.L530:
4872:../Dave/Generated/FREERTOS/tasks.c **** 
4873:../Dave/Generated/FREERTOS/tasks.c ****                 case eIncrement:
4874:../Dave/Generated/FREERTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 7854              	 .loc 1 4874 0
 7855 00b8 BB6A     	 ldr r3,[r7,#40]
 7856 00ba BA68     	 ldr r2,[r7,#8]
 7857 00bc 1A32     	 adds r2,r2,#26
 7858 00be 53F82230 	 ldr r3,[r3,r2,lsl#2]
 7859 00c2 591C     	 adds r1,r3,#1
 7860 00c4 BB6A     	 ldr r3,[r7,#40]
 7861 00c6 BA68     	 ldr r2,[r7,#8]
 7862 00c8 1A32     	 adds r2,r2,#26
 7863 00ca 43F82210 	 str r1,[r3,r2,lsl#2]
4875:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7864              	 .loc 1 4875 0
 7865 00ce 24E0     	 b .L533
 7866              	.L531:
4876:../Dave/Generated/FREERTOS/tasks.c **** 
4877:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithOverwrite:
4878:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7867              	 .loc 1 4878 0
 7868 00d0 BB6A     	 ldr r3,[r7,#40]
 7869 00d2 BA68     	 ldr r2,[r7,#8]
 7870 00d4 1A32     	 adds r2,r2,#26
 7871 00d6 7968     	 ldr r1,[r7,#4]
 7872 00d8 43F82210 	 str r1,[r3,r2,lsl#2]
4879:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7873              	 .loc 1 4879 0
 7874 00dc 1DE0     	 b .L533
 7875              	.L532:
4880:../Dave/Generated/FREERTOS/tasks.c **** 
4881:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4882:../Dave/Generated/FREERTOS/tasks.c **** 
4883:../Dave/Generated/FREERTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7876              	 .loc 1 4883 0
 7877 00de 97F82730 	 ldrb r3,[r7,#39]
 7878 00e2 022B     	 cmp r3,#2
 7879 00e4 06D0     	 beq .L534
4884:../Dave/Generated/FREERTOS/tasks.c ****                     {
4885:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7880              	 .loc 1 4885 0
 7881 00e6 BB6A     	 ldr r3,[r7,#40]
 7882 00e8 BA68     	 ldr r2,[r7,#8]
 7883 00ea 1A32     	 adds r2,r2,#26
 7884 00ec 7968     	 ldr r1,[r7,#4]
 7885 00ee 43F82210 	 str r1,[r3,r2,lsl#2]
4886:../Dave/Generated/FREERTOS/tasks.c ****                     }
4887:../Dave/Generated/FREERTOS/tasks.c ****                     else
4888:../Dave/Generated/FREERTOS/tasks.c ****                     {
4889:../Dave/Generated/FREERTOS/tasks.c ****                         /* The value could not be written to the task. */
4890:../Dave/Generated/FREERTOS/tasks.c ****                         xReturn = pdFAIL;
4891:../Dave/Generated/FREERTOS/tasks.c ****                     }
4892:../Dave/Generated/FREERTOS/tasks.c **** 
4893:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7886              	 .loc 1 4893 0
 7887 00f2 12E0     	 b .L533
 7888              	.L534:
4890:../Dave/Generated/FREERTOS/tasks.c ****                     }
 7889              	 .loc 1 4890 0
 7890 00f4 0023     	 movs r3,#0
 7891 00f6 FB62     	 str r3,[r7,#44]
 7892              	 .loc 1 4893 0
 7893 00f8 0FE0     	 b .L533
 7894              	.L526:
4894:../Dave/Generated/FREERTOS/tasks.c **** 
4895:../Dave/Generated/FREERTOS/tasks.c ****                 case eNoAction:
4896:../Dave/Generated/FREERTOS/tasks.c **** 
4897:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is being notified without its notify value being
4898:../Dave/Generated/FREERTOS/tasks.c ****                      * updated. */
4899:../Dave/Generated/FREERTOS/tasks.c ****                     break;
4900:../Dave/Generated/FREERTOS/tasks.c **** 
4901:../Dave/Generated/FREERTOS/tasks.c ****                 default:
4902:../Dave/Generated/FREERTOS/tasks.c **** 
4903:../Dave/Generated/FREERTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4904:../Dave/Generated/FREERTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4905:../Dave/Generated/FREERTOS/tasks.c ****                      * compiler can't assume is const. */
4906:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 7895              	 .loc 1 4906 0
 7896 00fa 2A4B     	 ldr r3,.L544
 7897 00fc 1B68     	 ldr r3,[r3]
 7898 00fe 002B     	 cmp r3,#0
 7899 0100 09D0     	 beq .L536
 7900              	.LBB258:
 7901              	.LBB259:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7902              	 .loc 2 197 0 discriminator 1
 7903              	
 7904 0102 4FF0FC03 	 mov r3,#252
 7905 0106 83F31188 	 msr basepri,r3
 7906 010a BFF36F8F 	 isb 
 7907 010e BFF34F8F 	 dsb 
 7908              	
 7909              	
 7910              	 .thumb
 7911 0112 BB61     	 str r3,[r7,#24]
 7912              	.L537:
 7913              	.LBE259:
 7914              	.LBE258:
 7915              	 .loc 1 4906 0 discriminator 3
 7916 0114 FEE7     	 b .L537
 7917              	.L536:
4907:../Dave/Generated/FREERTOS/tasks.c **** 
4908:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7918              	 .loc 1 4908 0
 7919 0116 00E0     	 b .L533
 7920              	.L543:
4899:../Dave/Generated/FREERTOS/tasks.c **** 
 7921              	 .loc 1 4899 0
 7922 0118 00BF     	 nop
 7923              	.L533:
4909:../Dave/Generated/FREERTOS/tasks.c ****             }
4910:../Dave/Generated/FREERTOS/tasks.c **** 
4911:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4912:../Dave/Generated/FREERTOS/tasks.c **** 
4913:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4914:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
4915:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7924              	 .loc 1 4915 0
 7925 011a 97F82730 	 ldrb r3,[r7,#39]
 7926 011e 012B     	 cmp r3,#1
 7927 0120 39D1     	 bne .L538
4916:../Dave/Generated/FREERTOS/tasks.c ****             {
4917:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7928              	 .loc 1 4917 0
 7929 0122 BB6A     	 ldr r3,[r7,#40]
 7930 0124 0433     	 adds r3,r3,#4
 7931 0126 1846     	 mov r0,r3
 7932 0128 FFF7FEFF 	 bl uxListRemove
4918:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7933              	 .loc 1 4918 0
 7934 012c BB6A     	 ldr r3,[r7,#40]
 7935 012e DA6A     	 ldr r2,[r3,#44]
 7936 0130 1D4B     	 ldr r3,.L544+4
 7937 0132 1B68     	 ldr r3,[r3]
 7938 0134 9A42     	 cmp r2,r3
 7939 0136 03D9     	 bls .L539
 7940              	 .loc 1 4918 0 is_stmt 0 discriminator 1
 7941 0138 BB6A     	 ldr r3,[r7,#40]
 7942 013a DB6A     	 ldr r3,[r3,#44]
 7943 013c 1A4A     	 ldr r2,.L544+4
 7944 013e 1360     	 str r3,[r2]
 7945              	.L539:
 7946              	 .loc 1 4918 0 discriminator 3
 7947 0140 BB6A     	 ldr r3,[r7,#40]
 7948 0142 DA6A     	 ldr r2,[r3,#44]
 7949 0144 1346     	 mov r3,r2
 7950 0146 9B00     	 lsls r3,r3,#2
 7951 0148 1344     	 add r3,r3,r2
 7952 014a 9B00     	 lsls r3,r3,#2
 7953 014c 174A     	 ldr r2,.L544+8
 7954 014e 1A44     	 add r2,r2,r3
 7955 0150 BB6A     	 ldr r3,[r7,#40]
 7956 0152 0433     	 adds r3,r3,#4
 7957 0154 1046     	 mov r0,r2
 7958 0156 1946     	 mov r1,r3
 7959 0158 FFF7FEFF 	 bl vListInsertEnd
4919:../Dave/Generated/FREERTOS/tasks.c **** 
4920:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
4921:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7960              	 .loc 1 4921 0 is_stmt 1 discriminator 3
 7961 015c BB6A     	 ldr r3,[r7,#40]
 7962 015e 9B6A     	 ldr r3,[r3,#40]
 7963 0160 002B     	 cmp r3,#0
 7964 0162 09D0     	 beq .L540
 7965              	.LBB260:
 7966              	.LBB261:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 7967              	 .loc 2 197 0 discriminator 1
 7968              	
 7969 0164 4FF0FC03 	 mov r3,#252
 7970 0168 83F31188 	 msr basepri,r3
 7971 016c BFF36F8F 	 isb 
 7972 0170 BFF34F8F 	 dsb 
 7973              	
 7974              	
 7975              	 .thumb
 7976 0174 7B61     	 str r3,[r7,#20]
 7977              	.L541:
 7978              	.LBE261:
 7979              	.LBE260:
 7980              	 .loc 1 4921 0 discriminator 4
 7981 0176 FEE7     	 b .L541
 7982              	.L540:
4922:../Dave/Generated/FREERTOS/tasks.c **** 
4923:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4924:../Dave/Generated/FREERTOS/tasks.c ****                     {
4925:../Dave/Generated/FREERTOS/tasks.c ****                         /* If a task is blocked waiting for a notification then
4926:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4927:../Dave/Generated/FREERTOS/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4928:../Dave/Generated/FREERTOS/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4929:../Dave/Generated/FREERTOS/tasks.c ****                          * because it will automatically get reset to a new value when
4930:../Dave/Generated/FREERTOS/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4931:../Dave/Generated/FREERTOS/tasks.c ****                          * tickless idling is used it might be more important to enter
4932:../Dave/Generated/FREERTOS/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4933:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4934:../Dave/Generated/FREERTOS/tasks.c ****                          * earliest possible time. */
4935:../Dave/Generated/FREERTOS/tasks.c ****                         prvResetNextTaskUnblockTime();
4936:../Dave/Generated/FREERTOS/tasks.c ****                     }
4937:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
4938:../Dave/Generated/FREERTOS/tasks.c **** 
4939:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7983              	 .loc 1 4939 0
 7984 0178 BB6A     	 ldr r3,[r7,#40]
 7985 017a DA6A     	 ldr r2,[r3,#44]
 7986 017c 0C4B     	 ldr r3,.L544+12
 7987 017e 1B68     	 ldr r3,[r3]
 7988 0180 DB6A     	 ldr r3,[r3,#44]
 7989 0182 9A42     	 cmp r2,r3
 7990 0184 07D9     	 bls .L538
4940:../Dave/Generated/FREERTOS/tasks.c ****                 {
4941:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
4942:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
4943:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 7991              	 .loc 1 4943 0
 7992 0186 0B4B     	 ldr r3,.L544+16
 7993 0188 4FF08052 	 mov r2,#268435456
 7994 018c 1A60     	 str r2,[r3]
 7995              	
 7996 018e BFF34F8F 	 dsb
 7997              	
 7998              	
 7999 0192 BFF36F8F 	 isb
 8000              	
 8001              	 .thumb
 8002              	.L538:
4944:../Dave/Generated/FREERTOS/tasks.c ****                 }
4945:../Dave/Generated/FREERTOS/tasks.c ****                 else
4946:../Dave/Generated/FREERTOS/tasks.c ****                 {
4947:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4948:../Dave/Generated/FREERTOS/tasks.c ****                 }
4949:../Dave/Generated/FREERTOS/tasks.c ****             }
4950:../Dave/Generated/FREERTOS/tasks.c ****             else
4951:../Dave/Generated/FREERTOS/tasks.c ****             {
4952:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4953:../Dave/Generated/FREERTOS/tasks.c ****             }
4954:../Dave/Generated/FREERTOS/tasks.c ****         }
4955:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 8003              	 .loc 1 4955 0
 8004 0196 FFF7FEFF 	 bl vPortExitCritical
4956:../Dave/Generated/FREERTOS/tasks.c **** 
4957:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 8005              	 .loc 1 4957 0
 8006 019a FB6A     	 ldr r3,[r7,#44]
4958:../Dave/Generated/FREERTOS/tasks.c ****     }
 8007              	 .loc 1 4958 0
 8008 019c 1846     	 mov r0,r3
 8009 019e 3037     	 adds r7,r7,#48
 8010              	.LCFI331:
 8011              	 .cfi_def_cfa_offset 8
 8012 01a0 BD46     	 mov sp,r7
 8013              	.LCFI332:
 8014              	 .cfi_def_cfa_register 13
 8015              	 
 8016 01a2 80BD     	 pop {r7,pc}
 8017              	.L545:
 8018              	 .align 2
 8019              	.L544:
 8020 01a4 00000000 	 .word xTickCount
 8021 01a8 00000000 	 .word uxTopReadyPriority
 8022 01ac 00000000 	 .word pxReadyTasksLists
 8023 01b0 00000000 	 .word pxCurrentTCB
 8024 01b4 04ED00E0 	 .word -536810236
 8025              	 .cfi_endproc
 8026              	.LFE201:
 8028              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 8029              	 .align 2
 8030              	 .global xTaskGenericNotifyFromISR
 8031              	 .thumb
 8032              	 .thumb_func
 8034              	xTaskGenericNotifyFromISR:
 8035              	.LFB202:
4959:../Dave/Generated/FREERTOS/tasks.c **** 
4960:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4961:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4962:../Dave/Generated/FREERTOS/tasks.c **** 
4963:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4964:../Dave/Generated/FREERTOS/tasks.c **** 
4965:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4966:../Dave/Generated/FREERTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4967:../Dave/Generated/FREERTOS/tasks.c ****                                           uint32_t ulValue,
4968:../Dave/Generated/FREERTOS/tasks.c ****                                           eNotifyAction eAction,
4969:../Dave/Generated/FREERTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4970:../Dave/Generated/FREERTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4971:../Dave/Generated/FREERTOS/tasks.c ****     {
 8036              	 .loc 1 4971 0
 8037              	 .cfi_startproc
 8038              	 
 8039              	 
 8040 0000 80B5     	 push {r7,lr}
 8041              	.LCFI333:
 8042              	 .cfi_def_cfa_offset 8
 8043              	 .cfi_offset 7,-8
 8044              	 .cfi_offset 14,-4
 8045 0002 90B0     	 sub sp,sp,#64
 8046              	.LCFI334:
 8047              	 .cfi_def_cfa_offset 72
 8048 0004 00AF     	 add r7,sp,#0
 8049              	.LCFI335:
 8050              	 .cfi_def_cfa_register 7
 8051 0006 F860     	 str r0,[r7,#12]
 8052 0008 B960     	 str r1,[r7,#8]
 8053 000a 7A60     	 str r2,[r7,#4]
 8054 000c FB70     	 strb r3,[r7,#3]
4972:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
4973:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4974:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 8055              	 .loc 1 4974 0
 8056 000e 0123     	 movs r3,#1
 8057 0010 FB63     	 str r3,[r7,#60]
4975:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4976:../Dave/Generated/FREERTOS/tasks.c **** 
4977:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8058              	 .loc 1 4977 0
 8059 0012 FB68     	 ldr r3,[r7,#12]
 8060 0014 002B     	 cmp r3,#0
 8061 0016 09D1     	 bne .L547
 8062              	.LBB262:
 8063              	.LBB263:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8064              	 .loc 2 197 0 discriminator 1
 8065              	
 8066 0018 4FF0FC03 	 mov r3,#252
 8067 001c 83F31188 	 msr basepri,r3
 8068 0020 BFF36F8F 	 isb 
 8069 0024 BFF34F8F 	 dsb 
 8070              	
 8071              	
 8072              	 .thumb
 8073 0028 FB62     	 str r3,[r7,#44]
 8074              	.L548:
 8075              	.LBE263:
 8076              	.LBE262:
 8077              	 .loc 1 4977 0 discriminator 1
 8078 002a FEE7     	 b .L548
 8079              	.L547:
4978:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8080              	 .loc 1 4978 0
 8081 002c BB68     	 ldr r3,[r7,#8]
 8082 002e 002B     	 cmp r3,#0
 8083 0030 09D0     	 beq .L549
 8084              	.LBB264:
 8085              	.LBB265:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8086              	 .loc 2 197 0 discriminator 1
 8087              	
 8088 0032 4FF0FC03 	 mov r3,#252
 8089 0036 83F31188 	 msr basepri,r3
 8090 003a BFF36F8F 	 isb 
 8091 003e BFF34F8F 	 dsb 
 8092              	
 8093              	
 8094              	 .thumb
 8095 0042 BB62     	 str r3,[r7,#40]
 8096              	.L550:
 8097              	.LBE265:
 8098              	.LBE264:
 8099              	 .loc 1 4978 0 discriminator 2
 8100 0044 FEE7     	 b .L550
 8101              	.L549:
4979:../Dave/Generated/FREERTOS/tasks.c **** 
4980:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4981:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4982:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4983:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4984:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4985:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
4986:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4987:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4988:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
4989:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4990:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4991:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4992:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
4993:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
4994:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
4995:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4996:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8102              	 .loc 1 4996 0
 8103 0046 FFF7FEFF 	 bl vPortValidateInterruptPriority
4997:../Dave/Generated/FREERTOS/tasks.c **** 
4998:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8104              	 .loc 1 4998 0
 8105 004a FB68     	 ldr r3,[r7,#12]
 8106 004c BB63     	 str r3,[r7,#56]
 8107              	.LBB266:
 8108              	.LBB267:
 213:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8109              	 .loc 2 213 0
 8110              	
 8111 004e EFF31182 	 mrs r2,basepri
 8112 0052 4FF0FC03 	 mov r3,#252
 8113 0056 83F31188 	 msr basepri,r3
 8114 005a BFF36F8F 	 isb 
 8115 005e BFF34F8F 	 dsb 
 8116              	
 8117              	
 8118              	 .thumb
 8119 0062 7A62     	 str r2,[r7,#36]
 8120 0064 3B62     	 str r3,[r7,#32]
 225:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 8121              	 .loc 2 225 0
 8122 0066 7B6A     	 ldr r3,[r7,#36]
 8123              	.LBE267:
 8124              	.LBE266:
4999:../Dave/Generated/FREERTOS/tasks.c **** 
5000:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8125              	 .loc 1 5000 0
 8126 0068 7B63     	 str r3,[r7,#52]
5001:../Dave/Generated/FREERTOS/tasks.c ****         {
5002:../Dave/Generated/FREERTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 8127              	 .loc 1 5002 0
 8128 006a BB6C     	 ldr r3,[r7,#72]
 8129 006c 002B     	 cmp r3,#0
 8130 006e 06D0     	 beq .L552
5003:../Dave/Generated/FREERTOS/tasks.c ****             {
5004:../Dave/Generated/FREERTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8131              	 .loc 1 5004 0
 8132 0070 BB6B     	 ldr r3,[r7,#56]
 8133 0072 BA68     	 ldr r2,[r7,#8]
 8134 0074 1A32     	 adds r2,r2,#26
 8135 0076 53F82220 	 ldr r2,[r3,r2,lsl#2]
 8136 007a BB6C     	 ldr r3,[r7,#72]
 8137 007c 1A60     	 str r2,[r3]
 8138              	.L552:
5005:../Dave/Generated/FREERTOS/tasks.c ****             }
5006:../Dave/Generated/FREERTOS/tasks.c **** 
5007:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8139              	 .loc 1 5007 0
 8140 007e BA6B     	 ldr r2,[r7,#56]
 8141 0080 BB68     	 ldr r3,[r7,#8]
 8142 0082 1344     	 add r3,r3,r2
 8143 0084 6833     	 adds r3,r3,#104
 8144 0086 1B79     	 ldrb r3,[r3,#4]
 8145 0088 87F83330 	 strb r3,[r7,#51]
5008:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8146              	 .loc 1 5008 0
 8147 008c BA6B     	 ldr r2,[r7,#56]
 8148 008e BB68     	 ldr r3,[r7,#8]
 8149 0090 1344     	 add r3,r3,r2
 8150 0092 6833     	 adds r3,r3,#104
 8151 0094 0222     	 movs r2,#2
 8152 0096 1A71     	 strb r2,[r3,#4]
5009:../Dave/Generated/FREERTOS/tasks.c **** 
5010:../Dave/Generated/FREERTOS/tasks.c ****             switch( eAction )
 8153              	 .loc 1 5010 0
 8154 0098 FB78     	 ldrb r3,[r7,#3]
 8155 009a 042B     	 cmp r3,#4
 8156 009c 3BD8     	 bhi .L553
 8157 009e 01A2     	 adr r2,.L555
 8158 00a0 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 8159              	 .p2align 2
 8160              	.L555:
 8161 00a4 35010000 	 .word .L573+1
 8162 00a8 B9000000 	 .word .L556+1
 8163 00ac D5000000 	 .word .L557+1
 8164 00b0 ED000000 	 .word .L558+1
 8165 00b4 FB000000 	 .word .L559+1
 8166              	 .p2align 1
 8167              	.L556:
5011:../Dave/Generated/FREERTOS/tasks.c ****             {
5012:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetBits:
5013:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8168              	 .loc 1 5013 0
 8169 00b8 BB6B     	 ldr r3,[r7,#56]
 8170 00ba BA68     	 ldr r2,[r7,#8]
 8171 00bc 1A32     	 adds r2,r2,#26
 8172 00be 53F82220 	 ldr r2,[r3,r2,lsl#2]
 8173 00c2 7B68     	 ldr r3,[r7,#4]
 8174 00c4 42EA0301 	 orr r1,r2,r3
 8175 00c8 BB6B     	 ldr r3,[r7,#56]
 8176 00ca BA68     	 ldr r2,[r7,#8]
 8177 00cc 1A32     	 adds r2,r2,#26
 8178 00ce 43F82210 	 str r1,[r3,r2,lsl#2]
5014:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8179              	 .loc 1 5014 0
 8180 00d2 30E0     	 b .L560
 8181              	.L557:
5015:../Dave/Generated/FREERTOS/tasks.c **** 
5016:../Dave/Generated/FREERTOS/tasks.c ****                 case eIncrement:
5017:../Dave/Generated/FREERTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8182              	 .loc 1 5017 0
 8183 00d4 BB6B     	 ldr r3,[r7,#56]
 8184 00d6 BA68     	 ldr r2,[r7,#8]
 8185 00d8 1A32     	 adds r2,r2,#26
 8186 00da 53F82230 	 ldr r3,[r3,r2,lsl#2]
 8187 00de 591C     	 adds r1,r3,#1
 8188 00e0 BB6B     	 ldr r3,[r7,#56]
 8189 00e2 BA68     	 ldr r2,[r7,#8]
 8190 00e4 1A32     	 adds r2,r2,#26
 8191 00e6 43F82210 	 str r1,[r3,r2,lsl#2]
5018:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8192              	 .loc 1 5018 0
 8193 00ea 24E0     	 b .L560
 8194              	.L558:
5019:../Dave/Generated/FREERTOS/tasks.c **** 
5020:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithOverwrite:
5021:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8195              	 .loc 1 5021 0
 8196 00ec BB6B     	 ldr r3,[r7,#56]
 8197 00ee BA68     	 ldr r2,[r7,#8]
 8198 00f0 1A32     	 adds r2,r2,#26
 8199 00f2 7968     	 ldr r1,[r7,#4]
 8200 00f4 43F82210 	 str r1,[r3,r2,lsl#2]
5022:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8201              	 .loc 1 5022 0
 8202 00f8 1DE0     	 b .L560
 8203              	.L559:
5023:../Dave/Generated/FREERTOS/tasks.c **** 
5024:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5025:../Dave/Generated/FREERTOS/tasks.c **** 
5026:../Dave/Generated/FREERTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8204              	 .loc 1 5026 0
 8205 00fa 97F83330 	 ldrb r3,[r7,#51]
 8206 00fe 022B     	 cmp r3,#2
 8207 0100 06D0     	 beq .L561
5027:../Dave/Generated/FREERTOS/tasks.c ****                     {
5028:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8208              	 .loc 1 5028 0
 8209 0102 BB6B     	 ldr r3,[r7,#56]
 8210 0104 BA68     	 ldr r2,[r7,#8]
 8211 0106 1A32     	 adds r2,r2,#26
 8212 0108 7968     	 ldr r1,[r7,#4]
 8213 010a 43F82210 	 str r1,[r3,r2,lsl#2]
5029:../Dave/Generated/FREERTOS/tasks.c ****                     }
5030:../Dave/Generated/FREERTOS/tasks.c ****                     else
5031:../Dave/Generated/FREERTOS/tasks.c ****                     {
5032:../Dave/Generated/FREERTOS/tasks.c ****                         /* The value could not be written to the task. */
5033:../Dave/Generated/FREERTOS/tasks.c ****                         xReturn = pdFAIL;
5034:../Dave/Generated/FREERTOS/tasks.c ****                     }
5035:../Dave/Generated/FREERTOS/tasks.c **** 
5036:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8214              	 .loc 1 5036 0
 8215 010e 12E0     	 b .L560
 8216              	.L561:
5033:../Dave/Generated/FREERTOS/tasks.c ****                     }
 8217              	 .loc 1 5033 0
 8218 0110 0023     	 movs r3,#0
 8219 0112 FB63     	 str r3,[r7,#60]
 8220              	 .loc 1 5036 0
 8221 0114 0FE0     	 b .L560
 8222              	.L553:
5037:../Dave/Generated/FREERTOS/tasks.c **** 
5038:../Dave/Generated/FREERTOS/tasks.c ****                 case eNoAction:
5039:../Dave/Generated/FREERTOS/tasks.c **** 
5040:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is being notified without its notify value being
5041:../Dave/Generated/FREERTOS/tasks.c ****                      * updated. */
5042:../Dave/Generated/FREERTOS/tasks.c ****                     break;
5043:../Dave/Generated/FREERTOS/tasks.c **** 
5044:../Dave/Generated/FREERTOS/tasks.c ****                 default:
5045:../Dave/Generated/FREERTOS/tasks.c **** 
5046:../Dave/Generated/FREERTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5047:../Dave/Generated/FREERTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5048:../Dave/Generated/FREERTOS/tasks.c ****                      * compiler can't assume is const. */
5049:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 8223              	 .loc 1 5049 0
 8224 0116 324B     	 ldr r3,.L574
 8225 0118 1B68     	 ldr r3,[r3]
 8226 011a 002B     	 cmp r3,#0
 8227 011c 09D0     	 beq .L563
 8228              	.LBB268:
 8229              	.LBB269:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8230              	 .loc 2 197 0 discriminator 1
 8231              	
 8232 011e 4FF0FC03 	 mov r3,#252
 8233 0122 83F31188 	 msr basepri,r3
 8234 0126 BFF36F8F 	 isb 
 8235 012a BFF34F8F 	 dsb 
 8236              	
 8237              	
 8238              	 .thumb
 8239 012e FB61     	 str r3,[r7,#28]
 8240              	.L564:
 8241              	.LBE269:
 8242              	.LBE268:
 8243              	 .loc 1 5049 0 discriminator 3
 8244 0130 FEE7     	 b .L564
 8245              	.L563:
5050:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 8246              	 .loc 1 5050 0
 8247 0132 00E0     	 b .L560
 8248              	.L573:
5042:../Dave/Generated/FREERTOS/tasks.c **** 
 8249              	 .loc 1 5042 0
 8250 0134 00BF     	 nop
 8251              	.L560:
5051:../Dave/Generated/FREERTOS/tasks.c ****             }
5052:../Dave/Generated/FREERTOS/tasks.c **** 
5053:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5054:../Dave/Generated/FREERTOS/tasks.c **** 
5055:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5056:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
5057:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8252              	 .loc 1 5057 0
 8253 0136 97F83330 	 ldrb r3,[r7,#51]
 8254 013a 012B     	 cmp r3,#1
 8255 013c 45D1     	 bne .L565
5058:../Dave/Generated/FREERTOS/tasks.c ****             {
5059:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
5060:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8256              	 .loc 1 5060 0
 8257 013e BB6B     	 ldr r3,[r7,#56]
 8258 0140 9B6A     	 ldr r3,[r3,#40]
 8259 0142 002B     	 cmp r3,#0
 8260 0144 09D0     	 beq .L566
 8261              	.LBB270:
 8262              	.LBB271:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8263              	 .loc 2 197 0 discriminator 1
 8264              	
 8265 0146 4FF0FC03 	 mov r3,#252
 8266 014a 83F31188 	 msr basepri,r3
 8267 014e BFF36F8F 	 isb 
 8268 0152 BFF34F8F 	 dsb 
 8269              	
 8270              	
 8271              	 .thumb
 8272 0156 BB61     	 str r3,[r7,#24]
 8273              	.L567:
 8274              	.LBE271:
 8275              	.LBE270:
 8276              	 .loc 1 5060 0 discriminator 4
 8277 0158 FEE7     	 b .L567
 8278              	.L566:
5061:../Dave/Generated/FREERTOS/tasks.c **** 
5062:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8279              	 .loc 1 5062 0
 8280 015a 224B     	 ldr r3,.L574+4
 8281 015c 1B68     	 ldr r3,[r3]
 8282 015e 002B     	 cmp r3,#0
 8283 0160 1DD1     	 bne .L568
5063:../Dave/Generated/FREERTOS/tasks.c ****                 {
5064:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8284              	 .loc 1 5064 0
 8285 0162 BB6B     	 ldr r3,[r7,#56]
 8286 0164 0433     	 adds r3,r3,#4
 8287 0166 1846     	 mov r0,r3
 8288 0168 FFF7FEFF 	 bl uxListRemove
5065:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8289              	 .loc 1 5065 0
 8290 016c BB6B     	 ldr r3,[r7,#56]
 8291 016e DA6A     	 ldr r2,[r3,#44]
 8292 0170 1D4B     	 ldr r3,.L574+8
 8293 0172 1B68     	 ldr r3,[r3]
 8294 0174 9A42     	 cmp r2,r3
 8295 0176 03D9     	 bls .L569
 8296              	 .loc 1 5065 0 is_stmt 0 discriminator 1
 8297 0178 BB6B     	 ldr r3,[r7,#56]
 8298 017a DB6A     	 ldr r3,[r3,#44]
 8299 017c 1A4A     	 ldr r2,.L574+8
 8300 017e 1360     	 str r3,[r2]
 8301              	.L569:
 8302              	 .loc 1 5065 0 discriminator 3
 8303 0180 BB6B     	 ldr r3,[r7,#56]
 8304 0182 DA6A     	 ldr r2,[r3,#44]
 8305 0184 1346     	 mov r3,r2
 8306 0186 9B00     	 lsls r3,r3,#2
 8307 0188 1344     	 add r3,r3,r2
 8308 018a 9B00     	 lsls r3,r3,#2
 8309 018c 174A     	 ldr r2,.L574+12
 8310 018e 1A44     	 add r2,r2,r3
 8311 0190 BB6B     	 ldr r3,[r7,#56]
 8312 0192 0433     	 adds r3,r3,#4
 8313 0194 1046     	 mov r0,r2
 8314 0196 1946     	 mov r1,r3
 8315 0198 FFF7FEFF 	 bl vListInsertEnd
 8316 019c 05E0     	 b .L570
 8317              	.L568:
5066:../Dave/Generated/FREERTOS/tasks.c ****                 }
5067:../Dave/Generated/FREERTOS/tasks.c ****                 else
5068:../Dave/Generated/FREERTOS/tasks.c ****                 {
5069:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5070:../Dave/Generated/FREERTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5071:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8318              	 .loc 1 5071 0 is_stmt 1
 8319 019e BB6B     	 ldr r3,[r7,#56]
 8320 01a0 1833     	 adds r3,r3,#24
 8321 01a2 1348     	 ldr r0,.L574+16
 8322 01a4 1946     	 mov r1,r3
 8323 01a6 FFF7FEFF 	 bl vListInsertEnd
 8324              	.L570:
5072:../Dave/Generated/FREERTOS/tasks.c ****                 }
5073:../Dave/Generated/FREERTOS/tasks.c **** 
5074:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8325              	 .loc 1 5074 0
 8326 01aa BB6B     	 ldr r3,[r7,#56]
 8327 01ac DA6A     	 ldr r2,[r3,#44]
 8328 01ae 114B     	 ldr r3,.L574+20
 8329 01b0 1B68     	 ldr r3,[r3]
 8330 01b2 DB6A     	 ldr r3,[r3,#44]
 8331 01b4 9A42     	 cmp r2,r3
 8332 01b6 08D9     	 bls .L565
5075:../Dave/Generated/FREERTOS/tasks.c ****                 {
5076:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
5077:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
5078:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8333              	 .loc 1 5078 0
 8334 01b8 FB6C     	 ldr r3,[r7,#76]
 8335 01ba 002B     	 cmp r3,#0
 8336 01bc 02D0     	 beq .L571
5079:../Dave/Generated/FREERTOS/tasks.c ****                     {
5080:../Dave/Generated/FREERTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8337              	 .loc 1 5080 0
 8338 01be FB6C     	 ldr r3,[r7,#76]
 8339 01c0 0122     	 movs r2,#1
 8340 01c2 1A60     	 str r2,[r3]
 8341              	.L571:
5081:../Dave/Generated/FREERTOS/tasks.c ****                     }
5082:../Dave/Generated/FREERTOS/tasks.c **** 
5083:../Dave/Generated/FREERTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5084:../Dave/Generated/FREERTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5085:../Dave/Generated/FREERTOS/tasks.c ****                      * safe FreeRTOS function. */
5086:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8342              	 .loc 1 5086 0
 8343 01c4 0C4B     	 ldr r3,.L574+24
 8344 01c6 0122     	 movs r2,#1
 8345 01c8 1A60     	 str r2,[r3]
 8346              	.L565:
 8347 01ca 7B6B     	 ldr r3,[r7,#52]
 8348 01cc 7B61     	 str r3,[r7,#20]
 8349              	.LBB272:
 8350              	.LBB273:
 8351              	 .loc 2 231 0
 8352 01ce 7B69     	 ldr r3,[r7,#20]
 8353              	
 8354 01d0 83F31188 	 msr basepri,r3
 8355              	
 8356              	 .thumb
 8357              	.LBE273:
 8358              	.LBE272:
5087:../Dave/Generated/FREERTOS/tasks.c ****                 }
5088:../Dave/Generated/FREERTOS/tasks.c ****                 else
5089:../Dave/Generated/FREERTOS/tasks.c ****                 {
5090:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5091:../Dave/Generated/FREERTOS/tasks.c ****                 }
5092:../Dave/Generated/FREERTOS/tasks.c ****             }
5093:../Dave/Generated/FREERTOS/tasks.c ****         }
5094:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5095:../Dave/Generated/FREERTOS/tasks.c **** 
5096:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 8359              	 .loc 1 5096 0
 8360 01d4 FB6B     	 ldr r3,[r7,#60]
5097:../Dave/Generated/FREERTOS/tasks.c ****     }
 8361              	 .loc 1 5097 0
 8362 01d6 1846     	 mov r0,r3
 8363 01d8 4037     	 adds r7,r7,#64
 8364              	.LCFI336:
 8365              	 .cfi_def_cfa_offset 8
 8366 01da BD46     	 mov sp,r7
 8367              	.LCFI337:
 8368              	 .cfi_def_cfa_register 13
 8369              	 
 8370 01dc 80BD     	 pop {r7,pc}
 8371              	.L575:
 8372 01de 00BF     	 .align 2
 8373              	.L574:
 8374 01e0 00000000 	 .word xTickCount
 8375 01e4 00000000 	 .word uxSchedulerSuspended
 8376 01e8 00000000 	 .word uxTopReadyPriority
 8377 01ec 00000000 	 .word pxReadyTasksLists
 8378 01f0 00000000 	 .word xPendingReadyList
 8379 01f4 00000000 	 .word pxCurrentTCB
 8380 01f8 00000000 	 .word xYieldPending
 8381              	 .cfi_endproc
 8382              	.LFE202:
 8384              	 .section .text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 8385              	 .align 2
 8386              	 .global vTaskGenericNotifyGiveFromISR
 8387              	 .thumb
 8388              	 .thumb_func
 8390              	vTaskGenericNotifyGiveFromISR:
 8391              	.LFB203:
5098:../Dave/Generated/FREERTOS/tasks.c **** 
5099:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5100:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5101:../Dave/Generated/FREERTOS/tasks.c **** 
5102:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5103:../Dave/Generated/FREERTOS/tasks.c **** 
5104:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5105:../Dave/Generated/FREERTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5106:../Dave/Generated/FREERTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5107:../Dave/Generated/FREERTOS/tasks.c ****     {
 8392              	 .loc 1 5107 0
 8393              	 .cfi_startproc
 8394              	 
 8395              	 
 8396 0000 80B5     	 push {r7,lr}
 8397              	.LCFI338:
 8398              	 .cfi_def_cfa_offset 8
 8399              	 .cfi_offset 7,-8
 8400              	 .cfi_offset 14,-4
 8401 0002 8EB0     	 sub sp,sp,#56
 8402              	.LCFI339:
 8403              	 .cfi_def_cfa_offset 64
 8404 0004 00AF     	 add r7,sp,#0
 8405              	.LCFI340:
 8406              	 .cfi_def_cfa_register 7
 8407 0006 F860     	 str r0,[r7,#12]
 8408 0008 B960     	 str r1,[r7,#8]
 8409 000a 7A60     	 str r2,[r7,#4]
5108:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5109:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5110:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5111:../Dave/Generated/FREERTOS/tasks.c **** 
5112:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8410              	 .loc 1 5112 0
 8411 000c FB68     	 ldr r3,[r7,#12]
 8412 000e 002B     	 cmp r3,#0
 8413 0010 09D1     	 bne .L577
 8414              	.LBB274:
 8415              	.LBB275:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8416              	 .loc 2 197 0 discriminator 1
 8417              	
 8418 0012 4FF0FC03 	 mov r3,#252
 8419 0016 83F31188 	 msr basepri,r3
 8420 001a BFF36F8F 	 isb 
 8421 001e BFF34F8F 	 dsb 
 8422              	
 8423              	
 8424              	 .thumb
 8425 0022 BB62     	 str r3,[r7,#40]
 8426              	.L578:
 8427              	.LBE275:
 8428              	.LBE274:
 8429              	 .loc 1 5112 0 discriminator 1
 8430 0024 FEE7     	 b .L578
 8431              	.L577:
5113:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8432              	 .loc 1 5113 0
 8433 0026 BB68     	 ldr r3,[r7,#8]
 8434 0028 002B     	 cmp r3,#0
 8435 002a 09D0     	 beq .L579
 8436              	.LBB276:
 8437              	.LBB277:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8438              	 .loc 2 197 0 discriminator 1
 8439              	
 8440 002c 4FF0FC03 	 mov r3,#252
 8441 0030 83F31188 	 msr basepri,r3
 8442 0034 BFF36F8F 	 isb 
 8443 0038 BFF34F8F 	 dsb 
 8444              	
 8445              	
 8446              	 .thumb
 8447 003c 7B62     	 str r3,[r7,#36]
 8448              	.L580:
 8449              	.LBE277:
 8450              	.LBE276:
 8451              	 .loc 1 5113 0 discriminator 2
 8452 003e FEE7     	 b .L580
 8453              	.L579:
5114:../Dave/Generated/FREERTOS/tasks.c **** 
5115:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5116:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5117:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5118:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5119:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5120:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5121:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5122:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5123:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5124:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5125:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5126:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5127:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5128:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5129:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
5130:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5131:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8454              	 .loc 1 5131 0
 8455 0040 FFF7FEFF 	 bl vPortValidateInterruptPriority
5132:../Dave/Generated/FREERTOS/tasks.c **** 
5133:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8456              	 .loc 1 5133 0
 8457 0044 FB68     	 ldr r3,[r7,#12]
 8458 0046 7B63     	 str r3,[r7,#52]
 8459              	.LBB278:
 8460              	.LBB279:
 213:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8461              	 .loc 2 213 0
 8462              	
 8463 0048 EFF31182 	 mrs r2,basepri
 8464 004c 4FF0FC03 	 mov r3,#252
 8465 0050 83F31188 	 msr basepri,r3
 8466 0054 BFF36F8F 	 isb 
 8467 0058 BFF34F8F 	 dsb 
 8468              	
 8469              	
 8470              	 .thumb
 8471 005c 3A62     	 str r2,[r7,#32]
 8472 005e FB61     	 str r3,[r7,#28]
 225:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****     }
 8473              	 .loc 2 225 0
 8474 0060 3B6A     	 ldr r3,[r7,#32]
 8475              	.LBE279:
 8476              	.LBE278:
5134:../Dave/Generated/FREERTOS/tasks.c **** 
5135:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8477              	 .loc 1 5135 0
 8478 0062 3B63     	 str r3,[r7,#48]
5136:../Dave/Generated/FREERTOS/tasks.c ****         {
5137:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8479              	 .loc 1 5137 0
 8480 0064 7A6B     	 ldr r2,[r7,#52]
 8481 0066 BB68     	 ldr r3,[r7,#8]
 8482 0068 1344     	 add r3,r3,r2
 8483 006a 6833     	 adds r3,r3,#104
 8484 006c 1B79     	 ldrb r3,[r3,#4]
 8485 006e 87F82F30 	 strb r3,[r7,#47]
5138:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8486              	 .loc 1 5138 0
 8487 0072 7A6B     	 ldr r2,[r7,#52]
 8488 0074 BB68     	 ldr r3,[r7,#8]
 8489 0076 1344     	 add r3,r3,r2
 8490 0078 6833     	 adds r3,r3,#104
 8491 007a 0222     	 movs r2,#2
 8492 007c 1A71     	 strb r2,[r3,#4]
5139:../Dave/Generated/FREERTOS/tasks.c **** 
5140:../Dave/Generated/FREERTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5141:../Dave/Generated/FREERTOS/tasks.c ****              * semaphore. */
5142:../Dave/Generated/FREERTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8493              	 .loc 1 5142 0
 8494 007e 7B6B     	 ldr r3,[r7,#52]
 8495 0080 BA68     	 ldr r2,[r7,#8]
 8496 0082 1A32     	 adds r2,r2,#26
 8497 0084 53F82230 	 ldr r3,[r3,r2,lsl#2]
 8498 0088 591C     	 adds r1,r3,#1
 8499 008a 7B6B     	 ldr r3,[r7,#52]
 8500 008c BA68     	 ldr r2,[r7,#8]
 8501 008e 1A32     	 adds r2,r2,#26
 8502 0090 43F82210 	 str r1,[r3,r2,lsl#2]
5143:../Dave/Generated/FREERTOS/tasks.c **** 
5144:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5145:../Dave/Generated/FREERTOS/tasks.c **** 
5146:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5147:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
5148:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8503              	 .loc 1 5148 0
 8504 0094 97F82F30 	 ldrb r3,[r7,#47]
 8505 0098 012B     	 cmp r3,#1
 8506 009a 45D1     	 bne .L582
5149:../Dave/Generated/FREERTOS/tasks.c ****             {
5150:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
5151:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8507              	 .loc 1 5151 0
 8508 009c 7B6B     	 ldr r3,[r7,#52]
 8509 009e 9B6A     	 ldr r3,[r3,#40]
 8510 00a0 002B     	 cmp r3,#0
 8511 00a2 09D0     	 beq .L583
 8512              	.LBB280:
 8513              	.LBB281:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8514              	 .loc 2 197 0 discriminator 1
 8515              	
 8516 00a4 4FF0FC03 	 mov r3,#252
 8517 00a8 83F31188 	 msr basepri,r3
 8518 00ac BFF36F8F 	 isb 
 8519 00b0 BFF34F8F 	 dsb 
 8520              	
 8521              	
 8522              	 .thumb
 8523 00b4 BB61     	 str r3,[r7,#24]
 8524              	.L584:
 8525              	.LBE281:
 8526              	.LBE280:
 8527              	 .loc 1 5151 0 discriminator 3
 8528 00b6 FEE7     	 b .L584
 8529              	.L583:
5152:../Dave/Generated/FREERTOS/tasks.c **** 
5153:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8530              	 .loc 1 5153 0
 8531 00b8 1F4B     	 ldr r3,.L589
 8532 00ba 1B68     	 ldr r3,[r3]
 8533 00bc 002B     	 cmp r3,#0
 8534 00be 1DD1     	 bne .L585
5154:../Dave/Generated/FREERTOS/tasks.c ****                 {
5155:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8535              	 .loc 1 5155 0
 8536 00c0 7B6B     	 ldr r3,[r7,#52]
 8537 00c2 0433     	 adds r3,r3,#4
 8538 00c4 1846     	 mov r0,r3
 8539 00c6 FFF7FEFF 	 bl uxListRemove
5156:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8540              	 .loc 1 5156 0
 8541 00ca 7B6B     	 ldr r3,[r7,#52]
 8542 00cc DA6A     	 ldr r2,[r3,#44]
 8543 00ce 1B4B     	 ldr r3,.L589+4
 8544 00d0 1B68     	 ldr r3,[r3]
 8545 00d2 9A42     	 cmp r2,r3
 8546 00d4 03D9     	 bls .L586
 8547              	 .loc 1 5156 0 is_stmt 0 discriminator 1
 8548 00d6 7B6B     	 ldr r3,[r7,#52]
 8549 00d8 DB6A     	 ldr r3,[r3,#44]
 8550 00da 184A     	 ldr r2,.L589+4
 8551 00dc 1360     	 str r3,[r2]
 8552              	.L586:
 8553              	 .loc 1 5156 0 discriminator 3
 8554 00de 7B6B     	 ldr r3,[r7,#52]
 8555 00e0 DA6A     	 ldr r2,[r3,#44]
 8556 00e2 1346     	 mov r3,r2
 8557 00e4 9B00     	 lsls r3,r3,#2
 8558 00e6 1344     	 add r3,r3,r2
 8559 00e8 9B00     	 lsls r3,r3,#2
 8560 00ea 154A     	 ldr r2,.L589+8
 8561 00ec 1A44     	 add r2,r2,r3
 8562 00ee 7B6B     	 ldr r3,[r7,#52]
 8563 00f0 0433     	 adds r3,r3,#4
 8564 00f2 1046     	 mov r0,r2
 8565 00f4 1946     	 mov r1,r3
 8566 00f6 FFF7FEFF 	 bl vListInsertEnd
 8567 00fa 05E0     	 b .L587
 8568              	.L585:
5157:../Dave/Generated/FREERTOS/tasks.c ****                 }
5158:../Dave/Generated/FREERTOS/tasks.c ****                 else
5159:../Dave/Generated/FREERTOS/tasks.c ****                 {
5160:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5161:../Dave/Generated/FREERTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5162:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8569              	 .loc 1 5162 0 is_stmt 1
 8570 00fc 7B6B     	 ldr r3,[r7,#52]
 8571 00fe 1833     	 adds r3,r3,#24
 8572 0100 1048     	 ldr r0,.L589+12
 8573 0102 1946     	 mov r1,r3
 8574 0104 FFF7FEFF 	 bl vListInsertEnd
 8575              	.L587:
5163:../Dave/Generated/FREERTOS/tasks.c ****                 }
5164:../Dave/Generated/FREERTOS/tasks.c **** 
5165:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8576              	 .loc 1 5165 0
 8577 0108 7B6B     	 ldr r3,[r7,#52]
 8578 010a DA6A     	 ldr r2,[r3,#44]
 8579 010c 0E4B     	 ldr r3,.L589+16
 8580 010e 1B68     	 ldr r3,[r3]
 8581 0110 DB6A     	 ldr r3,[r3,#44]
 8582 0112 9A42     	 cmp r2,r3
 8583 0114 08D9     	 bls .L582
5166:../Dave/Generated/FREERTOS/tasks.c ****                 {
5167:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
5168:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
5169:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8584              	 .loc 1 5169 0
 8585 0116 7B68     	 ldr r3,[r7,#4]
 8586 0118 002B     	 cmp r3,#0
 8587 011a 02D0     	 beq .L588
5170:../Dave/Generated/FREERTOS/tasks.c ****                     {
5171:../Dave/Generated/FREERTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8588              	 .loc 1 5171 0
 8589 011c 7B68     	 ldr r3,[r7,#4]
 8590 011e 0122     	 movs r2,#1
 8591 0120 1A60     	 str r2,[r3]
 8592              	.L588:
5172:../Dave/Generated/FREERTOS/tasks.c ****                     }
5173:../Dave/Generated/FREERTOS/tasks.c **** 
5174:../Dave/Generated/FREERTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5175:../Dave/Generated/FREERTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5176:../Dave/Generated/FREERTOS/tasks.c ****                      * safe FreeRTOS function. */
5177:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8593              	 .loc 1 5177 0
 8594 0122 0A4B     	 ldr r3,.L589+20
 8595 0124 0122     	 movs r2,#1
 8596 0126 1A60     	 str r2,[r3]
 8597              	.L582:
 8598 0128 3B6B     	 ldr r3,[r7,#48]
 8599 012a 7B61     	 str r3,[r7,#20]
 8600              	.LBB282:
 8601              	.LBB283:
 8602              	 .loc 2 231 0
 8603 012c 7B69     	 ldr r3,[r7,#20]
 8604              	
 8605 012e 83F31188 	 msr basepri,r3
 8606              	
 8607              	 .thumb
 8608              	.LBE283:
 8609              	.LBE282:
5178:../Dave/Generated/FREERTOS/tasks.c ****                 }
5179:../Dave/Generated/FREERTOS/tasks.c ****                 else
5180:../Dave/Generated/FREERTOS/tasks.c ****                 {
5181:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5182:../Dave/Generated/FREERTOS/tasks.c ****                 }
5183:../Dave/Generated/FREERTOS/tasks.c ****             }
5184:../Dave/Generated/FREERTOS/tasks.c ****         }
5185:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5186:../Dave/Generated/FREERTOS/tasks.c ****     }
 8610              	 .loc 1 5186 0
 8611 0132 3837     	 adds r7,r7,#56
 8612              	.LCFI341:
 8613              	 .cfi_def_cfa_offset 8
 8614 0134 BD46     	 mov sp,r7
 8615              	.LCFI342:
 8616              	 .cfi_def_cfa_register 13
 8617              	 
 8618 0136 80BD     	 pop {r7,pc}
 8619              	.L590:
 8620              	 .align 2
 8621              	.L589:
 8622 0138 00000000 	 .word uxSchedulerSuspended
 8623 013c 00000000 	 .word uxTopReadyPriority
 8624 0140 00000000 	 .word pxReadyTasksLists
 8625 0144 00000000 	 .word xPendingReadyList
 8626 0148 00000000 	 .word pxCurrentTCB
 8627 014c 00000000 	 .word xYieldPending
 8628              	 .cfi_endproc
 8629              	.LFE203:
 8631              	 .section .text.xTaskGenericNotifyStateClear,"ax",%progbits
 8632              	 .align 2
 8633              	 .global xTaskGenericNotifyStateClear
 8634              	 .thumb
 8635              	 .thumb_func
 8637              	xTaskGenericNotifyStateClear:
 8638              	.LFB204:
5187:../Dave/Generated/FREERTOS/tasks.c **** 
5188:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5189:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5190:../Dave/Generated/FREERTOS/tasks.c **** 
5191:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5192:../Dave/Generated/FREERTOS/tasks.c **** 
5193:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5194:../Dave/Generated/FREERTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5195:../Dave/Generated/FREERTOS/tasks.c ****     {
 8639              	 .loc 1 5195 0
 8640              	 .cfi_startproc
 8641              	 
 8642              	 
 8643 0000 80B5     	 push {r7,lr}
 8644              	.LCFI343:
 8645              	 .cfi_def_cfa_offset 8
 8646              	 .cfi_offset 7,-8
 8647              	 .cfi_offset 14,-4
 8648 0002 86B0     	 sub sp,sp,#24
 8649              	.LCFI344:
 8650              	 .cfi_def_cfa_offset 32
 8651 0004 00AF     	 add r7,sp,#0
 8652              	.LCFI345:
 8653              	 .cfi_def_cfa_register 7
 8654 0006 7860     	 str r0,[r7,#4]
 8655 0008 3960     	 str r1,[r7]
5196:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5197:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
5198:../Dave/Generated/FREERTOS/tasks.c **** 
5199:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8656              	 .loc 1 5199 0
 8657 000a 3B68     	 ldr r3,[r7]
 8658 000c 002B     	 cmp r3,#0
 8659 000e 09D0     	 beq .L592
 8660              	.LBB284:
 8661              	.LBB285:
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Dave/Generated/FREERTOS/portable/GCC\portmacro.h ****         (
 8662              	 .loc 2 197 0 discriminator 1
 8663              	
 8664 0010 4FF0FC03 	 mov r3,#252
 8665 0014 83F31188 	 msr basepri,r3
 8666 0018 BFF36F8F 	 isb 
 8667 001c BFF34F8F 	 dsb 
 8668              	
 8669              	
 8670              	 .thumb
 8671 0020 FB60     	 str r3,[r7,#12]
 8672              	.L593:
 8673              	.LBE285:
 8674              	.LBE284:
 8675              	 .loc 1 5199 0 discriminator 1
 8676 0022 FEE7     	 b .L593
 8677              	.L592:
5200:../Dave/Generated/FREERTOS/tasks.c **** 
5201:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5202:../Dave/Generated/FREERTOS/tasks.c ****          * its notification state cleared. */
5203:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 8678              	 .loc 1 5203 0
 8679 0024 7B68     	 ldr r3,[r7,#4]
 8680 0026 002B     	 cmp r3,#0
 8681 0028 02D1     	 bne .L594
 8682              	 .loc 1 5203 0 is_stmt 0 discriminator 1
 8683 002a 104B     	 ldr r3,.L599
 8684 002c 1B68     	 ldr r3,[r3]
 8685 002e 00E0     	 b .L595
 8686              	.L594:
 8687              	 .loc 1 5203 0 discriminator 2
 8688 0030 7B68     	 ldr r3,[r7,#4]
 8689              	.L595:
 8690              	 .loc 1 5203 0 discriminator 4
 8691 0032 3B61     	 str r3,[r7,#16]
5204:../Dave/Generated/FREERTOS/tasks.c **** 
5205:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 8692              	 .loc 1 5205 0 is_stmt 1 discriminator 4
 8693 0034 FFF7FEFF 	 bl vPortEnterCritical
5206:../Dave/Generated/FREERTOS/tasks.c ****         {
5207:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8694              	 .loc 1 5207 0 discriminator 4
 8695 0038 3A69     	 ldr r2,[r7,#16]
 8696 003a 3B68     	 ldr r3,[r7]
 8697 003c 1344     	 add r3,r3,r2
 8698 003e 6833     	 adds r3,r3,#104
 8699 0040 1B79     	 ldrb r3,[r3,#4]
 8700 0042 DBB2     	 uxtb r3,r3
 8701 0044 022B     	 cmp r3,#2
 8702 0046 08D1     	 bne .L596
5208:../Dave/Generated/FREERTOS/tasks.c ****             {
5209:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8703              	 .loc 1 5209 0
 8704 0048 3A69     	 ldr r2,[r7,#16]
 8705 004a 3B68     	 ldr r3,[r7]
 8706 004c 1344     	 add r3,r3,r2
 8707 004e 6833     	 adds r3,r3,#104
 8708 0050 0022     	 movs r2,#0
 8709 0052 1A71     	 strb r2,[r3,#4]
5210:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 8710              	 .loc 1 5210 0
 8711 0054 0123     	 movs r3,#1
 8712 0056 7B61     	 str r3,[r7,#20]
 8713 0058 01E0     	 b .L597
 8714              	.L596:
5211:../Dave/Generated/FREERTOS/tasks.c ****             }
5212:../Dave/Generated/FREERTOS/tasks.c ****             else
5213:../Dave/Generated/FREERTOS/tasks.c ****             {
5214:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
 8715              	 .loc 1 5214 0
 8716 005a 0023     	 movs r3,#0
 8717 005c 7B61     	 str r3,[r7,#20]
 8718              	.L597:
5215:../Dave/Generated/FREERTOS/tasks.c ****             }
5216:../Dave/Generated/FREERTOS/tasks.c ****         }
5217:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 8719              	 .loc 1 5217 0
 8720 005e FFF7FEFF 	 bl vPortExitCritical
5218:../Dave/Generated/FREERTOS/tasks.c **** 
5219:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 8721              	 .loc 1 5219 0
 8722 0062 7B69     	 ldr r3,[r7,#20]
5220:../Dave/Generated/FREERTOS/tasks.c ****     }
 8723              	 .loc 1 5220 0
 8724 0064 1846     	 mov r0,r3
 8725 0066 1837     	 adds r7,r7,#24
 8726              	.LCFI346:
 8727              	 .cfi_def_cfa_offset 8
 8728 0068 BD46     	 mov sp,r7
 8729              	.LCFI347:
 8730              	 .cfi_def_cfa_register 13
 8731              	 
 8732 006a 80BD     	 pop {r7,pc}
 8733              	.L600:
 8734              	 .align 2
 8735              	.L599:
 8736 006c 00000000 	 .word pxCurrentTCB
 8737              	 .cfi_endproc
 8738              	.LFE204:
 8740              	 .section .text.ulTaskGenericNotifyValueClear,"ax",%progbits
 8741              	 .align 2
 8742              	 .global ulTaskGenericNotifyValueClear
 8743              	 .thumb
 8744              	 .thumb_func
 8746              	ulTaskGenericNotifyValueClear:
 8747              	.LFB205:
5221:../Dave/Generated/FREERTOS/tasks.c **** 
5222:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5223:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5224:../Dave/Generated/FREERTOS/tasks.c **** 
5225:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5226:../Dave/Generated/FREERTOS/tasks.c **** 
5227:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5228:../Dave/Generated/FREERTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5229:../Dave/Generated/FREERTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5230:../Dave/Generated/FREERTOS/tasks.c ****     {
 8748              	 .loc 1 5230 0
 8749              	 .cfi_startproc
 8750              	 
 8751              	 
 8752 0000 80B5     	 push {r7,lr}
 8753              	.LCFI348:
 8754              	 .cfi_def_cfa_offset 8
 8755              	 .cfi_offset 7,-8
 8756              	 .cfi_offset 14,-4
 8757 0002 86B0     	 sub sp,sp,#24
 8758              	.LCFI349:
 8759              	 .cfi_def_cfa_offset 32
 8760 0004 00AF     	 add r7,sp,#0
 8761              	.LCFI350:
 8762              	 .cfi_def_cfa_register 7
 8763 0006 F860     	 str r0,[r7,#12]
 8764 0008 B960     	 str r1,[r7,#8]
 8765 000a 7A60     	 str r2,[r7,#4]
5231:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5232:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulReturn;
5233:../Dave/Generated/FREERTOS/tasks.c **** 
5234:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5235:../Dave/Generated/FREERTOS/tasks.c ****          * its notification state cleared. */
5236:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 8766              	 .loc 1 5236 0
 8767 000c FB68     	 ldr r3,[r7,#12]
 8768 000e 002B     	 cmp r3,#0
 8769 0010 02D1     	 bne .L602
 8770              	 .loc 1 5236 0 is_stmt 0 discriminator 1
 8771 0012 114B     	 ldr r3,.L605
 8772 0014 1B68     	 ldr r3,[r3]
 8773 0016 00E0     	 b .L603
 8774              	.L602:
 8775              	 .loc 1 5236 0 discriminator 2
 8776 0018 FB68     	 ldr r3,[r7,#12]
 8777              	.L603:
 8778              	 .loc 1 5236 0 discriminator 4
 8779 001a 7B61     	 str r3,[r7,#20]
5237:../Dave/Generated/FREERTOS/tasks.c **** 
5238:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 8780              	 .loc 1 5238 0 is_stmt 1 discriminator 4
 8781 001c FFF7FEFF 	 bl vPortEnterCritical
5239:../Dave/Generated/FREERTOS/tasks.c ****         {
5240:../Dave/Generated/FREERTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5241:../Dave/Generated/FREERTOS/tasks.c ****              * then clear the bit mask. */
5242:../Dave/Generated/FREERTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8782              	 .loc 1 5242 0 discriminator 4
 8783 0020 7B69     	 ldr r3,[r7,#20]
 8784 0022 BA68     	 ldr r2,[r7,#8]
 8785 0024 1A32     	 adds r2,r2,#26
 8786 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 8787 002a 3B61     	 str r3,[r7,#16]
5243:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8788              	 .loc 1 5243 0 discriminator 4
 8789 002c 7B69     	 ldr r3,[r7,#20]
 8790 002e BA68     	 ldr r2,[r7,#8]
 8791 0030 1A32     	 adds r2,r2,#26
 8792 0032 53F82220 	 ldr r2,[r3,r2,lsl#2]
 8793 0036 7B68     	 ldr r3,[r7,#4]
 8794 0038 DB43     	 mvns r3,r3
 8795 003a 02EA0301 	 and r1,r2,r3
 8796 003e 7B69     	 ldr r3,[r7,#20]
 8797 0040 BA68     	 ldr r2,[r7,#8]
 8798 0042 1A32     	 adds r2,r2,#26
 8799 0044 43F82210 	 str r1,[r3,r2,lsl#2]
5244:../Dave/Generated/FREERTOS/tasks.c ****         }
5245:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 8800              	 .loc 1 5245 0 discriminator 4
 8801 0048 FFF7FEFF 	 bl vPortExitCritical
5246:../Dave/Generated/FREERTOS/tasks.c **** 
5247:../Dave/Generated/FREERTOS/tasks.c ****         return ulReturn;
 8802              	 .loc 1 5247 0 discriminator 4
 8803 004c 3B69     	 ldr r3,[r7,#16]
5248:../Dave/Generated/FREERTOS/tasks.c ****     }
 8804              	 .loc 1 5248 0 discriminator 4
 8805 004e 1846     	 mov r0,r3
 8806 0050 1837     	 adds r7,r7,#24
 8807              	.LCFI351:
 8808              	 .cfi_def_cfa_offset 8
 8809 0052 BD46     	 mov sp,r7
 8810              	.LCFI352:
 8811              	 .cfi_def_cfa_register 13
 8812              	 
 8813 0054 80BD     	 pop {r7,pc}
 8814              	.L606:
 8815 0056 00BF     	 .align 2
 8816              	.L605:
 8817 0058 00000000 	 .word pxCurrentTCB
 8818              	 .cfi_endproc
 8819              	.LFE205:
 8821              	 .section .text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8822              	 .align 2
 8823              	 .thumb
 8824              	 .thumb_func
 8826              	prvAddCurrentTaskToDelayedList:
 8827              	.LFB206:
5249:../Dave/Generated/FREERTOS/tasks.c **** 
5250:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5251:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5252:../Dave/Generated/FREERTOS/tasks.c **** 
5253:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5254:../Dave/Generated/FREERTOS/tasks.c **** 
5255:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5256:../Dave/Generated/FREERTOS/tasks.c ****     {
5257:../Dave/Generated/FREERTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5258:../Dave/Generated/FREERTOS/tasks.c ****     }
5259:../Dave/Generated/FREERTOS/tasks.c **** 
5260:../Dave/Generated/FREERTOS/tasks.c **** #endif
5261:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5262:../Dave/Generated/FREERTOS/tasks.c **** 
5263:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5264:../Dave/Generated/FREERTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5265:../Dave/Generated/FREERTOS/tasks.c **** {
 8828              	 .loc 1 5265 0
 8829              	 .cfi_startproc
 8830              	 
 8831              	 
 8832 0000 80B5     	 push {r7,lr}
 8833              	.LCFI353:
 8834              	 .cfi_def_cfa_offset 8
 8835              	 .cfi_offset 7,-8
 8836              	 .cfi_offset 14,-4
 8837 0002 84B0     	 sub sp,sp,#16
 8838              	.LCFI354:
 8839              	 .cfi_def_cfa_offset 24
 8840 0004 00AF     	 add r7,sp,#0
 8841              	.LCFI355:
 8842              	 .cfi_def_cfa_register 7
 8843 0006 7860     	 str r0,[r7,#4]
 8844 0008 3960     	 str r1,[r7]
5266:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xTimeToWake;
5267:../Dave/Generated/FREERTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 8845              	 .loc 1 5267 0
 8846 000a 234B     	 ldr r3,.L611
 8847 000c 1B68     	 ldr r3,[r3]
 8848 000e FB60     	 str r3,[r7,#12]
5268:../Dave/Generated/FREERTOS/tasks.c **** 
5269:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5270:../Dave/Generated/FREERTOS/tasks.c ****         {
5271:../Dave/Generated/FREERTOS/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5272:../Dave/Generated/FREERTOS/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5273:../Dave/Generated/FREERTOS/tasks.c ****              * when the task leaves the Blocked state. */
5274:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
 8849              	 .loc 1 5274 0
 8850 0010 224B     	 ldr r3,.L611+4
 8851 0012 1B68     	 ldr r3,[r3]
 8852 0014 0022     	 movs r2,#0
 8853 0016 83F86E20 	 strb r2,[r3,#110]
5275:../Dave/Generated/FREERTOS/tasks.c ****         }
5276:../Dave/Generated/FREERTOS/tasks.c ****     #endif
5277:../Dave/Generated/FREERTOS/tasks.c **** 
5278:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5279:../Dave/Generated/FREERTOS/tasks.c ****      * as the same list item is used for both lists. */
5280:../Dave/Generated/FREERTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8854              	 .loc 1 5280 0
 8855 001a 204B     	 ldr r3,.L611+4
 8856 001c 1B68     	 ldr r3,[r3]
 8857 001e 0433     	 adds r3,r3,#4
 8858 0020 1846     	 mov r0,r3
 8859 0022 FFF7FEFF 	 bl uxListRemove
5281:../Dave/Generated/FREERTOS/tasks.c ****     {
5282:../Dave/Generated/FREERTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5283:../Dave/Generated/FREERTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5284:../Dave/Generated/FREERTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5285:../Dave/Generated/FREERTOS/tasks.c ****     }
5286:../Dave/Generated/FREERTOS/tasks.c ****     else
5287:../Dave/Generated/FREERTOS/tasks.c ****     {
5288:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5289:../Dave/Generated/FREERTOS/tasks.c ****     }
5290:../Dave/Generated/FREERTOS/tasks.c **** 
5291:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5292:../Dave/Generated/FREERTOS/tasks.c ****         {
5293:../Dave/Generated/FREERTOS/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8860              	 .loc 1 5293 0
 8861 0026 7B68     	 ldr r3,[r7,#4]
 8862 0028 B3F1FF3F 	 cmp r3,#-1
 8863 002c 0AD1     	 bne .L608
 8864              	 .loc 1 5293 0 is_stmt 0 discriminator 1
 8865 002e 3B68     	 ldr r3,[r7]
 8866 0030 002B     	 cmp r3,#0
 8867 0032 07D0     	 beq .L608
5294:../Dave/Generated/FREERTOS/tasks.c ****             {
5295:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5296:../Dave/Generated/FREERTOS/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5297:../Dave/Generated/FREERTOS/tasks.c ****                  * indefinitely. */
5298:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8868              	 .loc 1 5298 0 is_stmt 1
 8869 0034 194B     	 ldr r3,.L611+4
 8870 0036 1B68     	 ldr r3,[r3]
 8871 0038 0433     	 adds r3,r3,#4
 8872 003a 1948     	 ldr r0,.L611+8
 8873 003c 1946     	 mov r1,r3
 8874 003e FFF7FEFF 	 bl vListInsertEnd
 8875 0042 26E0     	 b .L607
 8876              	.L608:
5299:../Dave/Generated/FREERTOS/tasks.c ****             }
5300:../Dave/Generated/FREERTOS/tasks.c ****             else
5301:../Dave/Generated/FREERTOS/tasks.c ****             {
5302:../Dave/Generated/FREERTOS/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5303:../Dave/Generated/FREERTOS/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5304:../Dave/Generated/FREERTOS/tasks.c ****                  * kernel will manage it correctly. */
5305:../Dave/Generated/FREERTOS/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 8877              	 .loc 1 5305 0
 8878 0044 FA68     	 ldr r2,[r7,#12]
 8879 0046 7B68     	 ldr r3,[r7,#4]
 8880 0048 1344     	 add r3,r3,r2
 8881 004a BB60     	 str r3,[r7,#8]
5306:../Dave/Generated/FREERTOS/tasks.c **** 
5307:../Dave/Generated/FREERTOS/tasks.c ****                 /* The list item will be inserted in wake time order. */
5308:../Dave/Generated/FREERTOS/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8882              	 .loc 1 5308 0
 8883 004c 134B     	 ldr r3,.L611+4
 8884 004e 1B68     	 ldr r3,[r3]
 8885 0050 BA68     	 ldr r2,[r7,#8]
 8886 0052 5A60     	 str r2,[r3,#4]
5309:../Dave/Generated/FREERTOS/tasks.c **** 
5310:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTimeToWake < xConstTickCount )
 8887              	 .loc 1 5310 0
 8888 0054 BA68     	 ldr r2,[r7,#8]
 8889 0056 FB68     	 ldr r3,[r7,#12]
 8890 0058 9A42     	 cmp r2,r3
 8891 005a 09D2     	 bcs .L610
5311:../Dave/Generated/FREERTOS/tasks.c ****                 {
5312:../Dave/Generated/FREERTOS/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5313:../Dave/Generated/FREERTOS/tasks.c ****                      * list. */
5314:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8892              	 .loc 1 5314 0
 8893 005c 114B     	 ldr r3,.L611+12
 8894 005e 1A68     	 ldr r2,[r3]
 8895 0060 0E4B     	 ldr r3,.L611+4
 8896 0062 1B68     	 ldr r3,[r3]
 8897 0064 0433     	 adds r3,r3,#4
 8898 0066 1046     	 mov r0,r2
 8899 0068 1946     	 mov r1,r3
 8900 006a FFF7FEFF 	 bl vListInsert
 8901 006e 10E0     	 b .L607
 8902              	.L610:
5315:../Dave/Generated/FREERTOS/tasks.c ****                 }
5316:../Dave/Generated/FREERTOS/tasks.c ****                 else
5317:../Dave/Generated/FREERTOS/tasks.c ****                 {
5318:../Dave/Generated/FREERTOS/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5319:../Dave/Generated/FREERTOS/tasks.c ****                      * is used. */
5320:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8903              	 .loc 1 5320 0
 8904 0070 0D4B     	 ldr r3,.L611+16
 8905 0072 1A68     	 ldr r2,[r3]
 8906 0074 094B     	 ldr r3,.L611+4
 8907 0076 1B68     	 ldr r3,[r3]
 8908 0078 0433     	 adds r3,r3,#4
 8909 007a 1046     	 mov r0,r2
 8910 007c 1946     	 mov r1,r3
 8911 007e FFF7FEFF 	 bl vListInsert
5321:../Dave/Generated/FREERTOS/tasks.c **** 
5322:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the task entering the blocked state was placed at the
5323:../Dave/Generated/FREERTOS/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5324:../Dave/Generated/FREERTOS/tasks.c ****                      * needs to be updated too. */
5325:../Dave/Generated/FREERTOS/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
 8912              	 .loc 1 5325 0
 8913 0082 0A4B     	 ldr r3,.L611+20
 8914 0084 1B68     	 ldr r3,[r3]
 8915 0086 BA68     	 ldr r2,[r7,#8]
 8916 0088 9A42     	 cmp r2,r3
 8917 008a 02D2     	 bcs .L607
5326:../Dave/Generated/FREERTOS/tasks.c ****                     {
5327:../Dave/Generated/FREERTOS/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
 8918              	 .loc 1 5327 0
 8919 008c 074A     	 ldr r2,.L611+20
 8920 008e BB68     	 ldr r3,[r7,#8]
 8921 0090 1360     	 str r3,[r2]
 8922              	.L607:
5328:../Dave/Generated/FREERTOS/tasks.c ****                     }
5329:../Dave/Generated/FREERTOS/tasks.c ****                     else
5330:../Dave/Generated/FREERTOS/tasks.c ****                     {
5331:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5332:../Dave/Generated/FREERTOS/tasks.c ****                     }
5333:../Dave/Generated/FREERTOS/tasks.c ****                 }
5334:../Dave/Generated/FREERTOS/tasks.c ****             }
5335:../Dave/Generated/FREERTOS/tasks.c ****         }
5336:../Dave/Generated/FREERTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5337:../Dave/Generated/FREERTOS/tasks.c ****         {
5338:../Dave/Generated/FREERTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5339:../Dave/Generated/FREERTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5340:../Dave/Generated/FREERTOS/tasks.c ****              * will manage it correctly. */
5341:../Dave/Generated/FREERTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5342:../Dave/Generated/FREERTOS/tasks.c **** 
5343:../Dave/Generated/FREERTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5344:../Dave/Generated/FREERTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5345:../Dave/Generated/FREERTOS/tasks.c **** 
5346:../Dave/Generated/FREERTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5347:../Dave/Generated/FREERTOS/tasks.c ****             {
5348:../Dave/Generated/FREERTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5349:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5350:../Dave/Generated/FREERTOS/tasks.c ****             }
5351:../Dave/Generated/FREERTOS/tasks.c ****             else
5352:../Dave/Generated/FREERTOS/tasks.c ****             {
5353:../Dave/Generated/FREERTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5354:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:../Dave/Generated/FREERTOS/tasks.c **** 
5356:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5357:../Dave/Generated/FREERTOS/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5358:../Dave/Generated/FREERTOS/tasks.c ****                  * too. */
5359:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:../Dave/Generated/FREERTOS/tasks.c ****                 {
5361:../Dave/Generated/FREERTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:../Dave/Generated/FREERTOS/tasks.c ****                 }
5363:../Dave/Generated/FREERTOS/tasks.c ****                 else
5364:../Dave/Generated/FREERTOS/tasks.c ****                 {
5365:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:../Dave/Generated/FREERTOS/tasks.c ****                 }
5367:../Dave/Generated/FREERTOS/tasks.c ****             }
5368:../Dave/Generated/FREERTOS/tasks.c **** 
5369:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5370:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) xCanBlockIndefinitely;
5371:../Dave/Generated/FREERTOS/tasks.c ****         }
5372:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5373:../Dave/Generated/FREERTOS/tasks.c **** }
 8923              	 .loc 1 5373 0
 8924 0092 1037     	 adds r7,r7,#16
 8925              	.LCFI356:
 8926              	 .cfi_def_cfa_offset 8
 8927 0094 BD46     	 mov sp,r7
 8928              	.LCFI357:
 8929              	 .cfi_def_cfa_register 13
 8930              	 
 8931 0096 80BD     	 pop {r7,pc}
 8932              	.L612:
 8933              	 .align 2
 8934              	.L611:
 8935 0098 00000000 	 .word xTickCount
 8936 009c 00000000 	 .word pxCurrentTCB
 8937 00a0 00000000 	 .word xSuspendedTaskList
 8938 00a4 00000000 	 .word pxOverflowDelayedTaskList
 8939 00a8 00000000 	 .word pxDelayedTaskList
 8940 00ac 00000000 	 .word xNextTaskUnblockTime
 8941              	 .cfi_endproc
 8942              	.LFE206:
 8944              	 .text
 8945              	.Letext0:
 8946              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 8947              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 8948              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 8949              	 .file 6 "../Dave/Generated/FREERTOS/projdefs.h"
 8950              	 .file 7 "../Dave/Generated/FREERTOS/FreeRTOS.h"
 8951              	 .file 8 "../Dave/Generated/FREERTOS/list.h"
 8952              	 .file 9 "../Dave/Generated/FREERTOS/task.h"
 8953              	 .file 10 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Libraries/CMSIS/Include/cmsis_gcc.h"
 8954              	 .file 11 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/xmc4800-CE/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
    {standard input}:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
    {standard input}:21     .bss.pxCurrentTCB:00000000 $d
    {standard input}:27     .bss.pxReadyTasksLists:00000000 $d
    {standard input}:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
    {standard input}:33     .bss.xDelayedTaskList1:00000000 $d
    {standard input}:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
    {standard input}:39     .bss.xDelayedTaskList2:00000000 $d
    {standard input}:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
    {standard input}:45     .bss.pxDelayedTaskList:00000000 $d
    {standard input}:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
    {standard input}:51     .bss.pxOverflowDelayedTaskList:00000000 $d
    {standard input}:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
    {standard input}:57     .bss.xPendingReadyList:00000000 $d
    {standard input}:60     .bss.xPendingReadyList:00000000 xPendingReadyList
    {standard input}:63     .bss.xTasksWaitingTermination:00000000 $d
    {standard input}:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
    {standard input}:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
    {standard input}:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
    {standard input}:75     .bss.xSuspendedTaskList:00000000 $d
    {standard input}:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
    {standard input}:81     .bss.uxCurrentNumberOfTasks:00000000 $d
    {standard input}:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
    {standard input}:87     .bss.xTickCount:00000000 $d
    {standard input}:90     .bss.xTickCount:00000000 xTickCount
    {standard input}:93     .bss.uxTopReadyPriority:00000000 $d
    {standard input}:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
    {standard input}:99     .bss.xSchedulerRunning:00000000 $d
    {standard input}:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
    {standard input}:105    .bss.xPendedTicks:00000000 $d
    {standard input}:108    .bss.xPendedTicks:00000000 xPendedTicks
    {standard input}:111    .bss.xYieldPending:00000000 $d
    {standard input}:114    .bss.xYieldPending:00000000 xYieldPending
    {standard input}:117    .bss.xNumOfOverflows:00000000 $d
    {standard input}:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
    {standard input}:123    .bss.uxTaskNumber:00000000 $d
    {standard input}:126    .bss.uxTaskNumber:00000000 uxTaskNumber
    {standard input}:129    .bss.xNextTaskUnblockTime:00000000 $d
    {standard input}:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
    {standard input}:135    .bss.xIdleTaskHandle:00000000 $d
    {standard input}:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
    {standard input}:145    .data.uxTopUsedPriority:00000000 uxTopUsedPriority
    {standard input}:142    .data.uxTopUsedPriority:00000000 $d
    {standard input}:148    .bss.uxSchedulerSuspended:00000000 $d
    {standard input}:151    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
    {standard input}:154    .text.xTaskCreateStatic:00000000 $t
    {standard input}:159    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
    {standard input}:429    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
    {standard input}:648    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
    {standard input}:313    .text.xTaskCreate:00000000 $t
    {standard input}:318    .text.xTaskCreate:00000000 xTaskCreate
    {standard input}:425    .text.prvInitialiseNewTask:00000000 $t
    {standard input}:644    .text.prvAddNewTaskToReadyList:00000000 $t
    {standard input}:5632   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
    {standard input}:787    .text.prvAddNewTaskToReadyList:000000c0 $d
    {standard input}:798    .text.vTaskDelete:00000000 $t
    {standard input}:803    .text.vTaskDelete:00000000 vTaskDelete
    {standard input}:6225   .text.prvDeleteTCB:00000000 prvDeleteTCB
    {standard input}:6308   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
    {standard input}:951    .text.vTaskDelete:000000c0 $d
    {standard input}:963    .text.xTaskDelayUntil:00000000 $t
    {standard input}:968    .text.xTaskDelayUntil:00000000 xTaskDelayUntil
    {standard input}:2673   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
    {standard input}:8826   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
    {standard input}:2717   .text.xTaskResumeAll:00000000 xTaskResumeAll
    {standard input}:1159   .text.xTaskDelayUntil:000000ec $d
    {standard input}:1166   .text.vTaskDelay:00000000 $t
    {standard input}:1171   .text.vTaskDelay:00000000 vTaskDelay
    {standard input}:1257   .text.vTaskDelay:0000005c $d
    {standard input}:1263   .text.eTaskGetState:00000000 $t
    {standard input}:1268   .text.eTaskGetState:00000000 eTaskGetState
    {standard input}:1440   .text.eTaskGetState:000000dc $d
    {standard input}:1449   .text.uxTaskPriorityGet:00000000 $t
    {standard input}:1454   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
    {standard input}:1509   .text.uxTaskPriorityGet:00000030 $d
    {standard input}:1514   .text.uxTaskPriorityGetFromISR:00000000 $t
    {standard input}:1519   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
    {standard input}:1604   .text.uxTaskPriorityGetFromISR:00000054 $d
    {standard input}:1609   .text.vTaskPrioritySet:00000000 $t
    {standard input}:1614   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
    {standard input}:1830   .text.vTaskPrioritySet:00000128 $d
    {standard input}:1838   .text.vTaskSuspend:00000000 $t
    {standard input}:1843   .text.vTaskSuspend:00000000 vTaskSuspend
    {standard input}:4230   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
    {standard input}:2021   .text.vTaskSuspend:000000e8 $d
    {standard input}:2031   .text.prvTaskIsTaskSuspended:00000000 $t
    {standard input}:2035   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
    {standard input}:2121   .text.prvTaskIsTaskSuspended:00000058 $d
    {standard input}:2127   .text.vTaskResume:00000000 $t
    {standard input}:2132   .text.vTaskResume:00000000 vTaskResume
    {standard input}:2260   .text.vTaskResume:000000a8 $d
    {standard input}:2268   .text.xTaskResumeFromISR:00000000 $t
    {standard input}:2273   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
    {standard input}:2436   .text.xTaskResumeFromISR:000000d4 $d
    {standard input}:2446   .rodata:00000000 $d
    {standard input}:2450   .text.vTaskStartScheduler:00000000 $t
    {standard input}:2455   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
    {standard input}:2598   .text.vTaskStartScheduler:000000b8 $d
    {standard input}:5401   .text.prvIdleTask:00000000 prvIdleTask
    {standard input}:2609   .text.vTaskEndScheduler:00000000 $t
    {standard input}:2614   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
    {standard input}:2663   .text.vTaskEndScheduler:00000028 $d
    {standard input}:2668   .text.vTaskSuspendAll:00000000 $t
    {standard input}:2707   .text.vTaskSuspendAll:00000018 $d
    {standard input}:2712   .text.xTaskResumeAll:00000000 $t
    {standard input}:3976   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
    {standard input}:2922   .text.xTaskResumeAll:00000114 $d
    {standard input}:2935   .text.xTaskGetTickCount:00000000 $t
    {standard input}:2940   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
    {standard input}:2980   .text.xTaskGetTickCount:0000001c $d
    {standard input}:2985   .text.xTaskGetTickCountFromISR:00000000 $t
    {standard input}:2990   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
    {standard input}:3031   .text.xTaskGetTickCountFromISR:00000020 $d
    {standard input}:3036   .text.uxTaskGetNumberOfTasks:00000000 $t
    {standard input}:3041   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
    {standard input}:3072   .text.uxTaskGetNumberOfTasks:00000014 $d
    {standard input}:3077   .text.pcTaskGetName:00000000 $t
    {standard input}:3082   .text.pcTaskGetName:00000000 pcTaskGetName
    {standard input}:3156   .text.pcTaskGetName:00000044 $d
    {standard input}:3161   .text.prvSearchForNameWithinSingleList:00000000 $t
    {standard input}:3165   .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
    {standard input}:3339   .text.xTaskGetHandle:00000000 $t
    {standard input}:3344   .text.xTaskGetHandle:00000000 xTaskGetHandle
    {standard input}:3481   .text.xTaskGetHandle:000000b4 $d
    {standard input}:3490   .text.uxTaskGetSystemState:00000000 $t
    {standard input}:3495   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
    {standard input}:5962   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
    {standard input}:3659   .text.uxTaskGetSystemState:00000108 $d
    {standard input}:3669   .text.xTaskGetIdleTaskHandle:00000000 $t
    {standard input}:3674   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
    {standard input}:3734   .text.xTaskGetIdleTaskHandle:00000034 $d
    {standard input}:3739   .text.xTaskCatchUpTicks:00000000 $t
    {standard input}:3744   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
    {standard input}:3812   .text.xTaskCatchUpTicks:00000044 $d
    {standard input}:3818   .text.xTaskAbortDelay:00000000 $t
    {standard input}:3823   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
    {standard input}:3963   .text.xTaskAbortDelay:000000c0 $d
    {standard input}:3971   .text.xTaskIncrementTick:00000000 $t
    {standard input}:4210   .text.xTaskIncrementTick:00000144 $d
    {standard input}:4225   .text.vTaskSwitchContext:00000000 $t
    {standard input}:4363   .text.vTaskSwitchContext:000000a4 $d
    {standard input}:4372   .text.vTaskPlaceOnEventList:00000000 $t
    {standard input}:4377   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
    {standard input}:4441   .text.vTaskPlaceOnEventList:00000040 $d
    {standard input}:4446   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
    {standard input}:4451   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
    {standard input}:4545   .text.vTaskPlaceOnUnorderedEventList:0000006c $d
    {standard input}:4551   .text.vTaskPlaceOnEventListRestricted:00000000 $t
    {standard input}:4556   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
    {standard input}:4629   .text.vTaskPlaceOnEventListRestricted:00000050 $d
    {standard input}:4634   .text.xTaskRemoveFromEventList:00000000 $t
    {standard input}:4639   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
    {standard input}:4771   .text.xTaskRemoveFromEventList:000000ac $d
    {standard input}:4781   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
    {standard input}:4786   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
    {standard input}:4919   .text.vTaskRemoveFromUnorderedEventList:000000ac $d
    {standard input}:4928   .text.vTaskSetTimeOutState:00000000 $t
    {standard input}:4933   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
    {standard input}:4999   .text.vTaskSetTimeOutState:00000040 $d
    {standard input}:5005   .text.vTaskInternalSetTimeOutState:00000000 $t
    {standard input}:5010   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
    {standard input}:5054   .text.vTaskInternalSetTimeOutState:00000024 $d
    {standard input}:5060   .text.xTaskCheckForTimeOut:00000000 $t
    {standard input}:5065   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
    {standard input}:5236   .text.xTaskCheckForTimeOut:000000dc $d
    {standard input}:5243   .text.vTaskMissedYield:00000000 $t
    {standard input}:5248   .text.vTaskMissedYield:00000000 vTaskMissedYield
    {standard input}:5279   .text.vTaskMissedYield:00000014 $d
    {standard input}:5284   .text.uxTaskGetTaskNumber:00000000 $t
    {standard input}:5289   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
    {standard input}:5344   .text.vTaskSetTaskNumber:00000000 $t
    {standard input}:5349   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
    {standard input}:5397   .text.prvIdleTask:00000000 $t
    {standard input}:5724   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
    {standard input}:5444   .text.prvIdleTask:00000028 $d
    {standard input}:5450   .text.vTaskSetThreadLocalStoragePointer:00000000 $t
    {standard input}:5455   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
    {standard input}:5540   .text.vTaskSetThreadLocalStoragePointer:00000054 $d
    {standard input}:5545   .text.pvTaskGetThreadLocalStoragePointer:00000000 $t
    {standard input}:5550   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
    {standard input}:5623   .text.pvTaskGetThreadLocalStoragePointer:00000048 $d
    {standard input}:5628   .text.prvInitialiseTaskLists:00000000 $t
    {standard input}:5708   .text.prvInitialiseTaskLists:0000005c $d
    {standard input}:5720   .text.prvCheckTasksWaitingTermination:00000000 $t
    {standard input}:5793   .text.prvCheckTasksWaitingTermination:0000004c $d
    {standard input}:5800   .text.vTaskGetInfo:00000000 $t
    {standard input}:5805   .text.vTaskGetInfo:00000000 vTaskGetInfo
    {standard input}:6092   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
    {standard input}:5953   .text.vTaskGetInfo:000000c4 $d
    {standard input}:5958   .text.prvListTasksWithinSingleList:00000000 $t
    {standard input}:6088   .text.prvTaskCheckFreeStackSpace:00000000 $t
    {standard input}:6155   .text.uxTaskGetStackHighWaterMark:00000000 $t
    {standard input}:6160   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
    {standard input}:6216   .text.uxTaskGetStackHighWaterMark:00000034 $d
    {standard input}:6221   .text.prvDeleteTCB:00000000 $t
    {standard input}:6304   .text.prvResetNextTaskUnblockTime:00000000 $t
    {standard input}:6355   .text.prvResetNextTaskUnblockTime:0000002c $d
    {standard input}:6361   .text.xTaskGetCurrentTaskHandle:00000000 $t
    {standard input}:6366   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
    {standard input}:6406   .text.xTaskGetCurrentTaskHandle:0000001c $d
    {standard input}:6411   .text.xTaskGetSchedulerState:00000000 $t
    {standard input}:6416   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
    {standard input}:6476   .text.xTaskGetSchedulerState:00000034 $d
    {standard input}:6482   .text.xTaskPriorityInherit:00000000 $t
    {standard input}:6487   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
    {standard input}:6628   .text.xTaskPriorityInherit:000000c4 $d
    {standard input}:6635   .text.xTaskPriorityDisinherit:00000000 $t
    {standard input}:6640   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
    {standard input}:6795   .text.xTaskPriorityDisinherit:000000cc $d
    {standard input}:6802   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
    {standard input}:6807   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
    {standard input}:6987   .text.vTaskPriorityDisinheritAfterTimeout:000000f0 $d
    {standard input}:6994   .text.prvWriteNameToBuffer:00000000 $t
    {standard input}:6998   .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
    {standard input}:7070   .text.vTaskList:00000000 $t
    {standard input}:7075   .text.vTaskList:00000000 vTaskList
    {standard input}:7144   .text.vTaskList:0000005c $d
    {standard input}:7149   .text.vTaskList:00000070 $t
    {standard input}:7271   .text.vTaskList:00000124 $d
    {standard input}:7277   .text.uxTaskResetEventItemValue:00000000 $t
    {standard input}:7282   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
    {standard input}:7331   .text.uxTaskResetEventItemValue:0000002c $d
    {standard input}:7336   .text.pvTaskIncrementMutexHeldCount:00000000 $t
    {standard input}:7341   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
    {standard input}:7384   .text.pvTaskIncrementMutexHeldCount:00000024 $d
    {standard input}:7389   .text.ulTaskGenericNotifyTake:00000000 $t
    {standard input}:7394   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
    {standard input}:7536   .text.ulTaskGenericNotifyTake:000000c4 $d
    {standard input}:7542   .text.xTaskGenericNotifyWait:00000000 $t
    {standard input}:7547   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
    {standard input}:7715   .text.xTaskGenericNotifyWait:000000f4 $d
    {standard input}:7721   .text.xTaskGenericNotify:00000000 $t
    {standard input}:7726   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
    {standard input}:7833   .text.xTaskGenericNotify:00000088 $d
    {standard input}:7838   .text.xTaskGenericNotify:0000009c $t
    {standard input}:8020   .text.xTaskGenericNotify:000001a4 $d
    {standard input}:8029   .text.xTaskGenericNotifyFromISR:00000000 $t
    {standard input}:8034   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
    {standard input}:8161   .text.xTaskGenericNotifyFromISR:000000a4 $d
    {standard input}:8166   .text.xTaskGenericNotifyFromISR:000000b8 $t
    {standard input}:8374   .text.xTaskGenericNotifyFromISR:000001e0 $d
    {standard input}:8385   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
    {standard input}:8390   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
    {standard input}:8622   .text.vTaskGenericNotifyGiveFromISR:00000138 $d
    {standard input}:8632   .text.xTaskGenericNotifyStateClear:00000000 $t
    {standard input}:8637   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
    {standard input}:8736   .text.xTaskGenericNotifyStateClear:0000006c $d
    {standard input}:8741   .text.ulTaskGenericNotifyValueClear:00000000 $t
    {standard input}:8746   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
    {standard input}:8817   .text.ulTaskGenericNotifyValueClear:00000058 $d
    {standard input}:8822   .text.prvAddCurrentTaskToDelayedList:00000000 $t
    {standard input}:8935   .text.prvAddCurrentTaskToDelayedList:00000098 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
